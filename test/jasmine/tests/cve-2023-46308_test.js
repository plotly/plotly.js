'use strict';
import Plotly, { newPlot, addFrames, purge, animate } from '../../../dist/plotly.js';
jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;

describe('Animate expandObjectPaths do not pollute prototype', function() {

var gd = document.createElement('div');
document.body.appendChild(gd);

  it('should not pollute prototype - layout object', function(done) {
    console.log('[TEST] layout object test started');

    newPlot(gd, { data: [{ y: [1, 3, 2] }] })
      .then(function() {
        console.log('[TEST] newPlot resolved');

        return Promise.race([
          animate(gd, {
            transition: { duration: 10 },
            data: [{ y: [2, 3, 1] }],
            traces: [0],
            layout: {
              '__proto__.polluted': true,
              'x.__proto__.polluted': true
            }
          }),
          new Promise(resolve => setTimeout(() => {
            console.warn('[TEST] animate timed out - treating as no-op');
            resolve();
          }, 500)) // fallback resolution
        ]);
      })
      .then(function() {
        const a = {};
        console.log('[TEST] a.polluted =', a.polluted);
        expect(a.polluted).toBeUndefined();
        done();
      })
      .catch(function(err) {
        console.error('[TEST] animate failed:', err);
        const a = {};
        expect(a.polluted).toBeUndefined();
        done();
      });
  });
  it('should not pollute prototype - data object', function(done) {
    console.log('[TEST] data object test started');

    Plotly.newPlot(gd, {
      data: [{ y: [1, 3, 2] }]
    })
    .then(function() {
      return Promise.race([
        Plotly.animate(gd, {
          transition: { duration: 10 },
          data: [{ y: [2, 3, 1], '__proto__.polluted': true }],
          traces: [0]
        }),
        new Promise(resolve => setTimeout(() => {
          console.warn('[TEST] animate (data object) timed out - treating as no-op');
          resolve();
        }, 500)) // fallback in case animate stalls
      ]);
    })
    .then(function() {
      const a = {};
      console.log('[TEST] a.polluted =', a.polluted);
      expect(a.polluted).toBeUndefined();
      done();
    })
    .catch(function(err) {
      console.error('[TEST] animate failed:', err);
      const a = {};
      expect(a.polluted).toBeUndefined();
      done();
    });
  });
})
