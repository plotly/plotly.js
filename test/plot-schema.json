{
 "animation": {
  "direction": {
   "description": "The direction in which to play the frames triggered by the animation call",
   "dflt": "forward",
   "valType": "enumerated",
   "values": [
    "forward",
    "reverse"
   ]
  },
  "frame": {
   "duration": {
    "description": "The duration in milliseconds of each frame. If greater than the frame duration, it will be limited to the frame duration.",
    "dflt": 500,
    "min": 0,
    "valType": "number"
   },
   "redraw": {
    "description": "Redraw the plot at completion of the transition. This is desirable for transitions that include properties that cannot be transitioned, but may significantly slow down updates that do not require a full redraw of the plot",
    "dflt": true,
    "valType": "boolean"
   },
   "role": "object"
  },
  "fromcurrent": {
   "description": "Play frames starting at the current frame instead of the beginning.",
   "dflt": false,
   "valType": "boolean"
  },
  "mode": {
   "description": "Describes how a new animate call interacts with currently-running animations. If `immediate`, current animations are interrupted and the new animation is started. If `next`, the current frame is allowed to complete, after which the new animation is started. If `afterall` all existing frames are animated to completion before the new animation is started.",
   "dflt": "afterall",
   "valType": "enumerated",
   "values": [
    "immediate",
    "next",
    "afterall"
   ]
  },
  "transition": {
   "duration": {
    "description": "The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.",
    "dflt": 500,
    "editType": "none",
    "min": 0,
    "valType": "number"
   },
   "easing": {
    "description": "The easing function used for the transition",
    "dflt": "cubic-in-out",
    "editType": "none",
    "valType": "enumerated",
    "values": [
     "linear",
     "quad",
     "cubic",
     "sin",
     "exp",
     "circle",
     "elastic",
     "back",
     "bounce",
     "linear-in",
     "quad-in",
     "cubic-in",
     "sin-in",
     "exp-in",
     "circle-in",
     "elastic-in",
     "back-in",
     "bounce-in",
     "linear-out",
     "quad-out",
     "cubic-out",
     "sin-out",
     "exp-out",
     "circle-out",
     "elastic-out",
     "back-out",
     "bounce-out",
     "linear-in-out",
     "quad-in-out",
     "cubic-in-out",
     "sin-in-out",
     "exp-in-out",
     "circle-in-out",
     "elastic-in-out",
     "back-in-out",
     "bounce-in-out"
    ]
   },
   "ordering": {
    "description": "Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.",
    "dflt": "layout first",
    "editType": "none",
    "valType": "enumerated",
    "values": [
     "layout first",
     "traces first"
    ]
   },
   "role": "object"
  }
 },
 "config": {
  "autosizable": {
   "description": "Determines whether the graphs are plotted with respect to layout.autosize:true and infer its container size.",
   "dflt": false,
   "valType": "boolean"
  },
  "displaylogo": {
   "description": "Determines whether or not the plotly logo is displayed on the end of the mode bar.",
   "dflt": true,
   "valType": "boolean"
  },
  "displayModeBar": {
   "description": "Determines the mode bar display mode. If *true*, the mode bar is always visible. If *false*, the mode bar is always hidden. If *hover*, the mode bar is visible while the mouse cursor is on the graph container.",
   "dflt": "hover",
   "valType": "enumerated",
   "values": [
    "hover",
    true,
    false
   ]
  },
  "doubleClick": {
   "description": "Sets the double click interaction mode. Has an effect only in cartesian plots. If *false*, double click is disable. If *reset*, double click resets the axis ranges to their initial values. If *autosize*, double click set the axis ranges to their autorange values. If *reset+autosize*, the odd double clicks resets the axis ranges to their initial values and even double clicks set the axis ranges to their autorange values.",
   "dflt": "reset+autosize",
   "valType": "enumerated",
   "values": [
    false,
    "reset",
    "autosize",
    "reset+autosize"
   ]
  },
  "doubleClickDelay": {
   "description": "Sets the delay for registering a double-click in ms. This is the time interval (in ms) between first mousedown and 2nd mouseup to constitute a double-click. This setting propagates to all on-subplot double clicks (except for geo and mapbox) and on-legend double clicks.",
   "dflt": 300,
   "min": 0,
   "valType": "number"
  },
  "editable": {
   "description": "Determines whether the graph is editable or not. Sets all pieces of `edits` unless a separate `edits` config item overrides individual parts.",
   "dflt": false,
   "valType": "boolean"
  },
  "edits": {
   "annotationPosition": {
    "description": "Determines if the main anchor of the annotation is editable. The main anchor corresponds to the text (if no arrow) or the arrow (which drags the whole thing leaving the arrow length & direction unchanged).",
    "dflt": false,
    "valType": "boolean"
   },
   "annotationTail": {
    "description": "Has only an effect for annotations with arrows. Enables changing the length and direction of the arrow.",
    "dflt": false,
    "valType": "boolean"
   },
   "annotationText": {
    "description": "Enables editing annotation text.",
    "dflt": false,
    "valType": "boolean"
   },
   "axisTitleText": {
    "description": "Enables editing axis title text.",
    "dflt": false,
    "valType": "boolean"
   },
   "colorbarPosition": {
    "description": "Enables moving colorbars.",
    "dflt": false,
    "valType": "boolean"
   },
   "colorbarTitleText": {
    "description": "Enables editing colorbar title text.",
    "dflt": false,
    "valType": "boolean"
   },
   "legendPosition": {
    "description": "Enables moving the legend.",
    "dflt": false,
    "valType": "boolean"
   },
   "legendText": {
    "description": "Enables editing the trace name fields from the legend",
    "dflt": false,
    "valType": "boolean"
   },
   "role": "object",
   "shapePosition": {
    "description": "Enables moving shapes.",
    "dflt": false,
    "valType": "boolean"
   },
   "titleText": {
    "description": "Enables editing the global layout title.",
    "dflt": false,
    "valType": "boolean"
   }
  },
  "fillFrame": {
   "description": "When `layout.autosize` is turned on, determines whether the graph fills the container (the default) or the screen (if set to *true*).",
   "dflt": false,
   "valType": "boolean"
  },
  "frameMargins": {
   "description": "When `layout.autosize` is turned on, set the frame margins in fraction of the graph size.",
   "dflt": 0,
   "max": 0.5,
   "min": 0,
   "valType": "number"
  },
  "globalTransforms": {
   "description": "Set global transform to be applied to all traces with no specification needed",
   "dflt": [],
   "valType": "any"
  },
  "linkText": {
   "description": "Sets the text appearing in the `showLink` link.",
   "dflt": "Edit chart",
   "noBlank": true,
   "valType": "string"
  },
  "locale": {
   "description": "Which localization should we use? Should be a string like 'en' or 'en-US'.",
   "dflt": "en-US",
   "valType": "string"
  },
  "locales": {
   "description": "Localization definitions Locales can be provided either here (specific to one chart) or globally by registering them as modules. Should be an object of objects {locale: {dictionary: {...}, format: {...}}} {   da: {       dictionary: {'Reset axes': 'Nulstil aksler', ...},       format: {months: [...], shortMonths: [...]}   },   ... } All parts are optional. When looking for translation or format fields, we look first for an exact match in a config locale, then in a registered module. If those fail, we strip off any regionalization ('en-US' -> 'en') and try each (config, registry) again. The final fallback for translation is untranslated (which is US English) and for formats is the base English (the only consequence being the last fallback date format %x is DD/MM/YYYY instead of MM/DD/YYYY). Currently `grouping` and `currency` are ignored for our automatic number formatting, but can be used in custom formats.",
   "dflt": {},
   "valType": "any"
  },
  "logging": {
   "description": "Turn all console logging on or off (errors will be thrown) This should ONLY be set via Plotly.setPlotConfig Available levels: 0: no logs 1: warnings and errors, but not informational messages 2: verbose logs",
   "dflt": 1,
   "max": 2,
   "min": 0,
   "valType": "integer"
  },
  "mapboxAccessToken": {
   "description": "Mapbox access token (required to plot mapbox trace types) If using an Mapbox Atlas server, set this option to '' so that plotly.js won't attempt to authenticate to the public Mapbox server.",
   "dflt": null,
   "valType": "string"
  },
  "modeBarButtons": {
   "description": "Define fully custom mode bar buttons as nested array, where the outer arrays represents button groups, and the inner arrays have buttons config objects or names of default buttons See ./components/modebar/buttons.js for more info.",
   "dflt": false,
   "valType": "any"
  },
  "modeBarButtonsToAdd": {
   "description": "Add mode bar button using config objects See ./components/modebar/buttons.js for list of arguments. To enable predefined modebar buttons e.g. shape drawing, hover and spikelines, simply provide their string name(s). This could include: *v1hovermode*, *hoverclosest*, *hovercompare*, *togglehover*, *togglespikelines*, *drawline*, *drawopenpath*, *drawclosedpath*, *drawcircle*, *drawrect* and *eraseshape*. Please note that these predefined buttons will only be shown if they are compatible with all trace types used in a graph.",
   "dflt": [],
   "valType": "any"
  },
  "modeBarButtonsToRemove": {
   "description": "Remove mode bar buttons by name. See ./components/modebar/buttons.js for the list of names.",
   "dflt": [],
   "valType": "any"
  },
  "notifyOnLogging": {
   "description": "Set on-graph logging (notifier) level This should ONLY be set via Plotly.setPlotConfig Available levels: 0: no on-graph logs 1: warnings and errors, but not informational messages 2: verbose logs",
   "dflt": 0,
   "max": 2,
   "min": 0,
   "valType": "integer"
  },
  "plotGlPixelRatio": {
   "description": "Set the pixel ratio during WebGL image export. This config option was formerly named `plot3dPixelRatio` which is now deprecated.",
   "dflt": 2,
   "max": 4,
   "min": 1,
   "valType": "number"
  },
  "plotlyServerURL": {
   "description": "When set it determines base URL for the 'Edit in Chart Studio' `showEditInChartStudio`/`showSendToCloud` mode bar button and the showLink/sendData on-graph link. To enable sending your data to Chart Studio Cloud, you need to set both `plotlyServerURL` to 'https://chart-studio.plotly.com' and also set `showSendToCloud` to true.",
   "dflt": "",
   "valType": "string"
  },
  "queueLength": {
   "description": "Sets the length of the undo/redo queue.",
   "dflt": 0,
   "min": 0,
   "valType": "integer"
  },
  "responsive": {
   "description": "Determines whether to change the layout size when window is resized. In v3, this option will be removed and will always be true.",
   "dflt": false,
   "valType": "boolean"
  },
  "scrollZoom": {
   "description": "Determines whether mouse wheel or two-finger scroll zooms is enable. Turned on by default for gl3d, geo and mapbox subplots (as these subplot types do not have zoombox via pan), but turned off by default for cartesian subplots. Set `scrollZoom` to *false* to disable scrolling for all subplots.",
   "dflt": "gl3d+geo+mapbox",
   "extras": [
    true,
    false
   ],
   "flags": [
    "cartesian",
    "gl3d",
    "geo",
    "mapbox"
   ],
   "valType": "flaglist"
  },
  "sendData": {
   "description": "If *showLink* is true, does it contain data just link to a Chart Studio Cloud file?",
   "dflt": true,
   "valType": "boolean"
  },
  "setBackground": {
   "description": "Set function to add the background color (i.e. `layout.paper_color`) to a different container. This function take the graph div as first argument and the current background color as second argument. Alternatively, set to string *opaque* to ensure there is white behind it.",
   "dflt": "transparent",
   "valType": "any"
  },
  "showAxisDragHandles": {
   "description": "Set to *false* to omit cartesian axis pan/zoom drag handles.",
   "dflt": true,
   "valType": "boolean"
  },
  "showAxisRangeEntryBoxes": {
   "description": "Set to *false* to omit direct range entry at the pan/zoom drag points, note that `showAxisDragHandles` must be enabled to have an effect.",
   "dflt": true,
   "valType": "boolean"
  },
  "showEditInChartStudio": {
   "description": "Same as `showSendToCloud`, but use a pencil icon instead of a floppy-disk. Note that if both `showSendToCloud` and `showEditInChartStudio` are turned, only `showEditInChartStudio` will be honored.",
   "dflt": false,
   "valType": "boolean"
  },
  "showLink": {
   "description": "Determines whether a link to Chart Studio Cloud is displayed at the bottom right corner of resulting graphs. Use with `sendData` and `linkText`.",
   "dflt": false,
   "valType": "boolean"
  },
  "showSendToCloud": {
   "description": "Should we include a ModeBar button, labeled \"Edit in Chart Studio\", that sends this chart to chart-studio.plotly.com (formerly plot.ly) or another plotly server as specified by `plotlyServerURL` for editing, export, etc? Prior to version 1.43.0 this button was included by default, now it is opt-in using this flag. Note that this button can (depending on `plotlyServerURL` being set) send your data to an external server. However that server does not persist your data until you arrive at the Chart Studio and explicitly click \"Save\".",
   "dflt": false,
   "valType": "boolean"
  },
  "showSources": {
   "description": "Adds a source-displaying function to show sources on the resulting graphs.",
   "dflt": false,
   "valType": "any"
  },
  "showTips": {
   "description": "Determines whether or not tips are shown while interacting with the resulting graphs.",
   "dflt": true,
   "valType": "boolean"
  },
  "staticPlot": {
   "description": "Determines whether the graphs are interactive or not. If *false*, no interactivity, for export or image generation.",
   "dflt": false,
   "valType": "boolean"
  },
  "toImageButtonOptions": {
   "description": "Statically override options for toImage modebar button allowed keys are format, filename, width, height, scale see ../components/modebar/buttons.js",
   "dflt": {},
   "valType": "any"
  },
  "topojsonURL": {
   "description": "Set the URL to topojson used in geo charts. By default, the topojson files are fetched from cdn.plot.ly. For example, set this option to: <path-to-plotly.js>/dist/topojson/ to render geographical feature using the topojson files that ship with the plotly.js module.",
   "dflt": "https://cdn.plot.ly/",
   "noBlank": true,
   "valType": "string"
  },
  "watermark": {
   "description": "watermark the images with the company's logo",
   "dflt": false,
   "valType": "boolean"
  }
 },
 "defs": {
  "editType": {
   "layout": {
    "description": "layout attributes should include an `editType` string matching this flaglist. *calc* is the most extensive: a full (re)plot starting by clearing `gd.calcdata` to force it to be regenerated *plot* (re)plots but without first clearing `gd.calcdata`. *legend* only redraws the legend. *ticks* only redraws axis ticks, labels, and gridlines. *axrange* minimal sequence when updating axis ranges. *layoutstyle* reapplies global and SVG cartesian axis styles. *modebar* just updates the modebar. *camera* just updates the camera settings for gl3d scenes. *arraydraw* allows component arrays to invoke the redraw routines just for the component(s) that changed. *colorbars* only redraws colorbars.",
    "extras": [
     "none"
    ],
    "flags": [
     "calc",
     "plot",
     "legend",
     "ticks",
     "axrange",
     "layoutstyle",
     "modebar",
     "camera",
     "arraydraw",
     "colorbars"
    ],
    "valType": "flaglist"
   },
   "traces": {
    "description": "trace attributes should include an `editType` string matching this flaglist. *calc* is the most extensive: a full (re)plot starting by clearing `gd.calcdata` to force it to be regenerated *clearAxisTypes* resets the types of the axes this trace is on, because new data could cause the automatic axis type detection to change. Log type will not be cleared, as that is never automatically chosen so must have been user-specified. *plot* (re)plots but without first clearing `gd.calcdata`. *style* only calls `module.style` (or module.editStyle) for all trace modules and redraws the legend. *markerSize* is like *style*, but propagate axis-range changes due to scatter `marker.size` *colorbars* only redraws colorbars.",
    "extras": [
     "none"
    ],
    "flags": [
     "calc",
     "clearAxisTypes",
     "plot",
     "style",
     "markerSize",
     "colorbars"
    ],
    "valType": "flaglist"
   }
  },
  "impliedEdits": {
   "description": "Sometimes when an attribute is changed, other attributes must be altered as well in order to achieve the intended result. For example, when `range` is specified, it is important to set `autorange` to `false` or the new `range` value would be lost in the redraw. `impliedEdits` is the mechanism to do this: `impliedEdits: {autorange: false}`. Each key is a relative paths to the attribute string to change, using *^* to ascend into the parent container, for example `range[0]` has `impliedEdits: {*^autorange*: false}`. A value of `undefined` means that the attribute will not be changed, but its previous value should be recorded in case we want to reverse this change later. For example, `autorange` has `impliedEdits: {*range[0]*: undefined, *range[1]*:undefined} because the range will likely be changed by redraw."
  },
  "metaKeys": [
   "_isSubplotObj",
   "_isLinkedToArray",
   "_arrayAttrRegexps",
   "_deprecated",
   "description",
   "role",
   "editType",
   "impliedEdits"
  ],
  "valObjects": {
   "angle": {
    "description": "A number (in degree) between -180 and 180.",
    "otherOpts": [
     "dflt"
    ],
    "requiredOpts": []
   },
   "any": {
    "description": "Any type.",
    "otherOpts": [
     "dflt",
     "values",
     "arrayOk"
    ],
    "requiredOpts": []
   },
   "boolean": {
    "description": "A boolean (true/false) value.",
    "otherOpts": [
     "dflt"
    ],
    "requiredOpts": []
   },
   "color": {
    "description": "A string describing color. Supported formats: - hex (e.g. '#d3d3d3') - rgb (e.g. 'rgb(255, 0, 0)') - rgba (e.g. 'rgb(255, 0, 0, 0.5)') - hsl (e.g. 'hsl(0, 100%, 50%)') - hsv (e.g. 'hsv(0, 100%, 100%)') - named colors (full list: http://www.w3.org/TR/css3-color/#svg-color)",
    "otherOpts": [
     "dflt",
     "arrayOk"
    ],
    "requiredOpts": []
   },
   "colorlist": {
    "description": "A list of colors. Must be an {array} containing valid colors.",
    "otherOpts": [
     "dflt"
    ],
    "requiredOpts": []
   },
   "colorscale": {
    "description": "A Plotly colorscale either picked by a name: (any of Greys, YlGnBu, Greens, YlOrRd, Bluered, RdBu, Reds, Blues, Picnic, Rainbow, Portland, Jet, Hot, Blackbody, Earth, Electric, Viridis, Cividis ) customized as an {array} of 2-element {arrays} where the first element is the normalized color level value (starting at *0* and ending at *1*), and the second item is a valid color string.",
    "otherOpts": [
     "dflt"
    ],
    "requiredOpts": []
   },
   "data_array": {
    "description": "An {array} of data. The value MUST be an {array}, or we ignore it. Note that typed arrays (e.g. Float32Array) are supported.",
    "otherOpts": [
     "dflt"
    ],
    "requiredOpts": []
   },
   "enumerated": {
    "description": "Enumerated value type. The available values are listed in `values`.",
    "otherOpts": [
     "dflt",
     "coerceNumber",
     "arrayOk"
    ],
    "requiredOpts": [
     "values"
    ]
   },
   "flaglist": {
    "description": "A string representing a combination of flags (order does not matter here). Combine any of the available `flags` with *+*. (e.g. ('lines+markers')). Values in `extras` cannot be combined.",
    "otherOpts": [
     "dflt",
     "extras",
     "arrayOk"
    ],
    "requiredOpts": [
     "flags"
    ]
   },
   "info_array": {
    "description": "An {array} of plot information.",
    "otherOpts": [
     "dflt",
     "freeLength",
     "dimensions"
    ],
    "requiredOpts": [
     "items"
    ]
   },
   "integer": {
    "description": "An integer or an integer inside a string. When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
    "otherOpts": [
     "dflt",
     "min",
     "max",
     "arrayOk"
    ],
    "requiredOpts": []
   },
   "number": {
    "description": "A number or a numeric value (e.g. a number inside a string). When applicable, values greater (less) than `max` (`min`) are coerced to the `dflt`.",
    "otherOpts": [
     "dflt",
     "min",
     "max",
     "arrayOk"
    ],
    "requiredOpts": []
   },
   "string": {
    "description": "A string value. Numbers are converted to strings except for attributes with `strict` set to true.",
    "otherOpts": [
     "dflt",
     "noBlank",
     "strict",
     "arrayOk",
     "values"
    ],
    "requiredOpts": []
   },
   "subplotid": {
    "description": "An id string of a subplot type (given by dflt), optionally followed by an integer >1. e.g. if dflt='geo', we can have 'geo', 'geo2', 'geo3', ...",
    "otherOpts": [
     "regex"
    ],
    "requiredOpts": [
     "dflt"
    ]
   }
  }
 },
 "frames": {
  "items": {
   "frames_entry": {
    "baseframe": {
     "description": "The name of the frame into which this frame's properties are merged before applying. This is used to unify properties and avoid needing to specify the same values for the same properties in multiple frames.",
     "valType": "string"
    },
    "data": {
     "description": "A list of traces this frame modifies. The format is identical to the normal trace definition.",
     "valType": "any"
    },
    "group": {
     "description": "An identifier that specifies the group to which the frame belongs, used by animate to select a subset of frames.",
     "valType": "string"
    },
    "layout": {
     "description": "Layout properties which this frame modifies. The format is identical to the normal layout definition.",
     "valType": "any"
    },
    "name": {
     "description": "A label by which to identify the frame",
     "valType": "string"
    },
    "role": "object",
    "traces": {
     "description": "A list of trace indices that identify the respective traces in the data attribute",
     "valType": "any"
    }
   }
  },
  "role": "object"
 },
 "layout": {
  "layoutAttributes": {
   "_deprecated": {
    "title": {
     "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the contents of the title, please use `title.text` now.",
     "editType": "layoutstyle",
     "valType": "string"
    },
    "titlefont": {
     "color": {
      "editType": "layoutstyle",
      "valType": "color"
     },
     "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
     "editType": "layoutstyle",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "layoutstyle",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "size": {
      "editType": "layoutstyle",
      "min": 1,
      "valType": "number"
     }
    }
   },
   "activeshape": {
    "editType": "none",
    "fillcolor": {
     "description": "Sets the color filling the active shape' interior.",
     "dflt": "rgb(255,0,255)",
     "editType": "none",
     "valType": "color"
    },
    "opacity": {
     "description": "Sets the opacity of the active shape.",
     "dflt": 0.5,
     "editType": "none",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "role": "object"
   },
   "annotations": {
    "items": {
     "annotation": {
      "_deprecated": {
       "ref": {
        "description": "Obsolete. Set `xref` and `yref` separately instead.",
        "editType": "calc",
        "valType": "string"
       }
      },
      "align": {
       "description": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.",
       "dflt": "center",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "arrowcolor": {
       "description": "Sets the color of the annotation arrow.",
       "editType": "arraydraw",
       "valType": "color"
      },
      "arrowhead": {
       "description": "Sets the end annotation arrow head style.",
       "dflt": 1,
       "editType": "arraydraw",
       "max": 8,
       "min": 0,
       "valType": "integer"
      },
      "arrowside": {
       "description": "Sets the annotation arrow head position.",
       "dflt": "end",
       "editType": "arraydraw",
       "extras": [
        "none"
       ],
       "flags": [
        "end",
        "start"
       ],
       "valType": "flaglist"
      },
      "arrowsize": {
       "description": "Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.",
       "dflt": 1,
       "editType": "calc+arraydraw",
       "min": 0.3,
       "valType": "number"
      },
      "arrowwidth": {
       "description": "Sets the width (in px) of annotation arrow line.",
       "editType": "calc+arraydraw",
       "min": 0.1,
       "valType": "number"
      },
      "ax": {
       "description": "Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from right to left (left to right). If `axref` is not `pixel` and is exactly the same as `xref`, this is an absolute value on that axis, like `x`, specified in the same coordinates as `xref`.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "axref": {
       "description": "Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a ax axis id (e.g. *ax* or *ax2*), the `ax` position refers to a ax coordinate. If set to *paper*, the `ax` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a ax axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *ax2 domain* refers to the domain of the second ax  axis and a ax position of 0.5 refers to the point between the left and the right of the domain of the second ax axis. In order for absolute positioning of the arrow to work, *axref* must be exactly the same as *xref*, otherwise *axref* will revert to *pixel* (explained next). For relative positioning, *axref* can be set to *pixel*, in which case the *ax* value is specified in pixels relative to *x*. Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.",
       "dflt": "pixel",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "pixel",
        "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      },
      "ay": {
       "description": "Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is not `pixel` and is exactly the same as `yref`, this is an absolute value on that axis, like `y`, specified in the same coordinates as `yref`.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "ayref": {
       "description": "Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a ay axis id (e.g. *ay* or *ay2*), the `ay` position refers to a ay coordinate. If set to *paper*, the `ay` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a ay axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *ay2 domain* refers to the domain of the second ay  axis and a ay position of 0.5 refers to the point between the bottom and the top of the domain of the second ay axis. In order for absolute positioning of the arrow to work, *ayref* must be exactly the same as *yref*, otherwise *ayref* will revert to *pixel* (explained next). For relative positioning, *ayref* can be set to *pixel*, in which case the *ay* value is specified in pixels relative to *y*. Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.",
       "dflt": "pixel",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "pixel",
        "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      },
      "bgcolor": {
       "description": "Sets the background color of the annotation.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "arraydraw",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the color of the border enclosing the annotation `text`.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "arraydraw",
       "valType": "color"
      },
      "borderpad": {
       "description": "Sets the padding (in px) between the `text` and the enclosing border.",
       "dflt": 1,
       "editType": "calc+arraydraw",
       "min": 0,
       "valType": "number"
      },
      "borderwidth": {
       "description": "Sets the width (in px) of the border enclosing the annotation `text`.",
       "dflt": 1,
       "editType": "calc+arraydraw",
       "min": 0,
       "valType": "number"
      },
      "captureevents": {
       "description": "Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.",
       "editType": "arraydraw",
       "valType": "boolean"
      },
      "clicktoshow": {
       "description": "Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the `x` and `y` values of this annotation, and it is hidden (visible: false), it will appear. In *onoff* mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In *onout* mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different `x` or `y` values, you can set `xclick` and/or `yclick`. This is useful for example to label the side of a bar. To label markers though, `standoff` is preferred over `xclick` and `yclick`.",
       "dflt": false,
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        false,
        "onoff",
        "onout"
       ]
      },
      "editType": "calc",
      "font": {
       "color": {
        "editType": "arraydraw",
        "valType": "color"
       },
       "description": "Sets the annotation text font.",
       "editType": "calc+arraydraw",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc+arraydraw",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc+arraydraw",
        "min": 1,
        "valType": "number"
       }
      },
      "height": {
       "description": "Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.",
       "dflt": null,
       "editType": "calc+arraydraw",
       "min": 1,
       "valType": "number"
      },
      "hoverlabel": {
       "bgcolor": {
        "description": "Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.",
        "editType": "arraydraw",
        "valType": "color"
       },
       "bordercolor": {
        "description": "Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.",
        "editType": "arraydraw",
        "valType": "color"
       },
       "editType": "arraydraw",
       "font": {
        "color": {
         "editType": "arraydraw",
         "valType": "color"
        },
        "description": "Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.",
        "editType": "arraydraw",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "arraydraw",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "arraydraw",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object"
      },
      "hovertext": {
       "description": "Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.",
       "editType": "arraydraw",
       "valType": "string"
      },
      "name": {
       "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
       "editType": "none",
       "valType": "string"
      },
      "opacity": {
       "description": "Sets the opacity of the annotation (text + arrow).",
       "dflt": 1,
       "editType": "arraydraw",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "showarrow": {
       "description": "Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.",
       "dflt": true,
       "editType": "calc+arraydraw",
       "valType": "boolean"
      },
      "standoff": {
       "description": "Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.",
       "dflt": 0,
       "editType": "calc+arraydraw",
       "min": 0,
       "valType": "number"
      },
      "startarrowhead": {
       "description": "Sets the start annotation arrow head style.",
       "dflt": 1,
       "editType": "arraydraw",
       "max": 8,
       "min": 0,
       "valType": "integer"
      },
      "startarrowsize": {
       "description": "Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.",
       "dflt": 1,
       "editType": "calc+arraydraw",
       "min": 0.3,
       "valType": "number"
      },
      "startstandoff": {
       "description": "Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.",
       "dflt": 0,
       "editType": "calc+arraydraw",
       "min": 0,
       "valType": "number"
      },
      "templateitemname": {
       "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
       "editType": "calc",
       "valType": "string"
      },
      "text": {
       "description": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.",
       "editType": "calc+arraydraw",
       "valType": "string"
      },
      "textangle": {
       "description": "Sets the angle at which the `text` is drawn with respect to the horizontal.",
       "dflt": 0,
       "editType": "calc+arraydraw",
       "valType": "angle"
      },
      "valign": {
       "description": "Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.",
       "dflt": "middle",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "visible": {
       "description": "Determines whether or not this annotation is visible.",
       "dflt": true,
       "editType": "calc+arraydraw",
       "valType": "boolean"
      },
      "width": {
       "description": "Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.",
       "dflt": null,
       "editType": "calc+arraydraw",
       "min": 1,
       "valType": "number"
      },
      "x": {
       "description": "Sets the annotation's x position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "xanchor": {
       "description": "Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.",
       "dflt": "auto",
       "editType": "calc+arraydraw",
       "valType": "enumerated",
       "values": [
        "auto",
        "left",
        "center",
        "right"
       ]
      },
      "xclick": {
       "description": "Toggle this annotation when clicking a data point whose `x` value is `xclick` rather than the annotation's `x` value.",
       "editType": "arraydraw",
       "valType": "any"
      },
      "xref": {
       "description": "Sets the annotation's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "paper",
        "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      },
      "xshift": {
       "description": "Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.",
       "dflt": 0,
       "editType": "calc+arraydraw",
       "valType": "number"
      },
      "y": {
       "description": "Sets the annotation's y position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "yanchor": {
       "description": "Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.",
       "dflt": "auto",
       "editType": "calc+arraydraw",
       "valType": "enumerated",
       "values": [
        "auto",
        "top",
        "middle",
        "bottom"
       ]
      },
      "yclick": {
       "description": "Toggle this annotation when clicking a data point whose `y` value is `yclick` rather than the annotation's `y` value.",
       "editType": "arraydraw",
       "valType": "any"
      },
      "yref": {
       "description": "Sets the annotation's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "paper",
        "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      },
      "yshift": {
       "description": "Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.",
       "dflt": 0,
       "editType": "calc+arraydraw",
       "valType": "number"
      }
     }
    },
    "role": "object"
   },
   "autosize": {
    "description": "Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.",
    "dflt": false,
    "editType": "none",
    "valType": "boolean"
   },
   "autotypenumbers": {
    "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.",
    "dflt": "convert types",
    "editType": "calc",
    "valType": "enumerated",
    "values": [
     "convert types",
     "strict"
    ]
   },
   "calendar": {
    "description": "Sets the default calendar system to use for interpreting and displaying dates throughout the plot.",
    "dflt": "gregorian",
    "editType": "calc",
    "valType": "enumerated",
    "values": [
     "chinese",
     "coptic",
     "discworld",
     "ethiopian",
     "gregorian",
     "hebrew",
     "islamic",
     "jalali",
     "julian",
     "mayan",
     "nanakshahi",
     "nepali",
     "persian",
     "taiwan",
     "thai",
     "ummalqura"
    ]
   },
   "clickmode": {
    "description": "Determines the mode of single click interactions. *event* is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes *lasso* and *select*, but with no event data attached (kept for compatibility reasons). The *select* flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. *select* with `hovermode`: *x* can be confusing, consider explicitly setting `hovermode`: *closest* when using this feature. Selection events are sent accordingly as long as *event* flag is set as well. When the *event* flag is missing, `plotly_click` and `plotly_selected` events are not fired.",
    "dflt": "event",
    "editType": "plot",
    "extras": [
     "none"
    ],
    "flags": [
     "event",
     "select"
    ],
    "valType": "flaglist"
   },
   "coloraxis": {
    "_isSubplotObj": true,
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "cmid": {
     "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "cmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "description": "",
    "editType": "calc",
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "role": "object",
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    }
   },
   "colorscale": {
    "diverging": {
     "description": "Sets the default diverging colorscale. Note that `autocolorscale` must be true for this attribute to work.",
     "dflt": [
      [
       0,
       "rgb(5,10,172)"
      ],
      [
       0.35,
       "rgb(106,137,247)"
      ],
      [
       0.5,
       "rgb(190,190,190)"
      ],
      [
       0.6,
       "rgb(220,170,132)"
      ],
      [
       0.7,
       "rgb(230,145,90)"
      ],
      [
       1,
       "rgb(178,10,28)"
      ]
     ],
     "editType": "calc",
     "valType": "colorscale"
    },
    "editType": "calc",
    "role": "object",
    "sequential": {
     "description": "Sets the default sequential colorscale for positive values. Note that `autocolorscale` must be true for this attribute to work.",
     "dflt": [
      [
       0,
       "rgb(220,220,220)"
      ],
      [
       0.2,
       "rgb(245,195,157)"
      ],
      [
       0.4,
       "rgb(245,160,105)"
      ],
      [
       1,
       "rgb(178,10,28)"
      ]
     ],
     "editType": "calc",
     "valType": "colorscale"
    },
    "sequentialminus": {
     "description": "Sets the default sequential colorscale for negative values. Note that `autocolorscale` must be true for this attribute to work.",
     "dflt": [
      [
       0,
       "rgb(5,10,172)"
      ],
      [
       0.35,
       "rgb(40,60,190)"
      ],
      [
       0.5,
       "rgb(70,100,245)"
      ],
      [
       0.6,
       "rgb(90,120,245)"
      ],
      [
       0.7,
       "rgb(106,137,247)"
      ],
      [
       1,
       "rgb(220,220,220)"
      ]
     ],
     "editType": "calc",
     "valType": "colorscale"
    }
   },
   "colorway": {
    "description": "Sets the default trace colors.",
    "dflt": [
     "#1f77b4",
     "#ff7f0e",
     "#2ca02c",
     "#d62728",
     "#9467bd",
     "#8c564b",
     "#e377c2",
     "#7f7f7f",
     "#bcbd22",
     "#17becf"
    ],
    "editType": "calc",
    "valType": "colorlist"
   },
   "computed": {
    "description": "Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in *full-json* mode.",
    "editType": "none",
    "valType": "any"
   },
   "datarevision": {
    "description": "If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.",
    "editType": "calc",
    "valType": "any"
   },
   "dragmode": {
    "description": "Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.",
    "dflt": "zoom",
    "editType": "modebar",
    "valType": "enumerated",
    "values": [
     "zoom",
     "pan",
     "select",
     "lasso",
     "drawclosedpath",
     "drawopenpath",
     "drawline",
     "drawrect",
     "drawcircle",
     "orbit",
     "turntable",
     false
    ]
   },
   "editrevision": {
    "description": "Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.",
    "editType": "none",
    "valType": "any"
   },
   "editType": "calc",
   "font": {
    "color": {
     "dflt": "#444",
     "editType": "calc",
     "valType": "color"
    },
    "description": "Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.",
    "editType": "calc",
    "family": {
     "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
     "dflt": "\"Open Sans\", verdana, arial, sans-serif",
     "editType": "calc",
     "noBlank": true,
     "strict": true,
     "valType": "string"
    },
    "role": "object",
    "size": {
     "dflt": 12,
     "editType": "calc",
     "min": 1,
     "valType": "number"
    }
   },
   "geo": {
    "_isSubplotObj": true,
    "bgcolor": {
     "description": "Set the background color of the map",
     "dflt": "#fff",
     "editType": "plot",
     "valType": "color"
    },
    "center": {
     "editType": "plot",
     "lat": {
      "description": "Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.",
      "editType": "plot",
      "valType": "number"
     },
     "lon": {
      "description": "Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise.",
      "editType": "plot",
      "valType": "number"
     },
     "role": "object"
    },
    "coastlinecolor": {
     "description": "Sets the coastline color.",
     "dflt": "#444",
     "editType": "plot",
     "valType": "color"
    },
    "coastlinewidth": {
     "description": "Sets the coastline stroke width (in px).",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "countrycolor": {
     "description": "Sets line color of the country boundaries.",
     "dflt": "#444",
     "editType": "plot",
     "valType": "color"
    },
    "countrywidth": {
     "description": "Sets line width (in px) of the country boundaries.",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "editType": "plot",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "editType": "plot",
    "fitbounds": {
     "description": "Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If *locations*, only the trace's visible locations are considered in the `fitbounds` computations. If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to *false*.",
     "dflt": false,
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      false,
      "locations",
      "geojson"
     ]
    },
    "framecolor": {
     "description": "Sets the color the frame.",
     "dflt": "#444",
     "editType": "plot",
     "valType": "color"
    },
    "framewidth": {
     "description": "Sets the stroke width (in px) of the frame.",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "lakecolor": {
     "description": "Sets the color of the lakes.",
     "dflt": "#3399FF",
     "editType": "plot",
     "valType": "color"
    },
    "landcolor": {
     "description": "Sets the land mass color.",
     "dflt": "#F0DC82",
     "editType": "plot",
     "valType": "color"
    },
    "lataxis": {
     "dtick": {
      "description": "Sets the graticule's longitude/latitude tick step.",
      "editType": "plot",
      "valType": "number"
     },
     "editType": "plot",
     "gridcolor": {
      "description": "Sets the graticule's stroke color.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the graticule's stroke width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "range": {
      "description": "Sets the range of this axis (in degrees), sets the map's clipped coordinates.",
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "valType": "number"
       },
       {
        "editType": "plot",
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "role": "object",
     "showgrid": {
      "description": "Sets whether or not graticule are shown on the map.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "tick0": {
      "description": "Sets the graticule's starting tick longitude/latitude.",
      "dflt": 0,
      "editType": "plot",
      "valType": "number"
     }
    },
    "lonaxis": {
     "dtick": {
      "description": "Sets the graticule's longitude/latitude tick step.",
      "editType": "plot",
      "valType": "number"
     },
     "editType": "plot",
     "gridcolor": {
      "description": "Sets the graticule's stroke color.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the graticule's stroke width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "range": {
      "description": "Sets the range of this axis (in degrees), sets the map's clipped coordinates.",
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "valType": "number"
       },
       {
        "editType": "plot",
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "role": "object",
     "showgrid": {
      "description": "Sets whether or not graticule are shown on the map.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "tick0": {
      "description": "Sets the graticule's starting tick longitude/latitude.",
      "dflt": 0,
      "editType": "plot",
      "valType": "number"
     }
    },
    "oceancolor": {
     "description": "Sets the ocean color",
     "dflt": "#3399FF",
     "editType": "plot",
     "valType": "color"
    },
    "projection": {
     "distance": {
      "description": "For satellite projection type only. Sets the distance from the center of the sphere to the point of view as a proportion of the sphere’s radius.",
      "dflt": 2,
      "editType": "plot",
      "min": 1.001,
      "valType": "number"
     },
     "editType": "plot",
     "parallels": {
      "description": "For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.",
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "valType": "number"
       },
       {
        "editType": "plot",
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "role": "object",
     "rotation": {
      "editType": "plot",
      "lat": {
       "description": "Rotates the map along meridians (in degrees North).",
       "editType": "plot",
       "valType": "number"
      },
      "lon": {
       "description": "Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.",
       "editType": "plot",
       "valType": "number"
      },
      "role": "object",
      "roll": {
       "description": "Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down.",
       "editType": "plot",
       "valType": "number"
      }
     },
     "scale": {
      "description": "Zooms in or out on the map view. A scale of *1* corresponds to the largest zoom level that fits the map's lon and lat ranges. ",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tilt": {
      "description": "For satellite projection type only. Sets the tilt angle of perspective projection.",
      "dflt": 0,
      "editType": "plot",
      "valType": "number"
     },
     "type": {
      "description": "Sets the projection type.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "airy",
       "aitoff",
       "albers",
       "albers usa",
       "august",
       "azimuthal equal area",
       "azimuthal equidistant",
       "baker",
       "bertin1953",
       "boggs",
       "bonne",
       "bottomley",
       "bromley",
       "collignon",
       "conic conformal",
       "conic equal area",
       "conic equidistant",
       "craig",
       "craster",
       "cylindrical equal area",
       "cylindrical stereographic",
       "eckert1",
       "eckert2",
       "eckert3",
       "eckert4",
       "eckert5",
       "eckert6",
       "eisenlohr",
       "equirectangular",
       "fahey",
       "foucaut",
       "foucaut sinusoidal",
       "ginzburg4",
       "ginzburg5",
       "ginzburg6",
       "ginzburg8",
       "ginzburg9",
       "gnomonic",
       "gringorten",
       "gringorten quincuncial",
       "guyou",
       "hammer",
       "hill",
       "homolosine",
       "hufnagel",
       "hyperelliptical",
       "kavrayskiy7",
       "lagrange",
       "larrivee",
       "laskowski",
       "loximuthal",
       "mercator",
       "miller",
       "mollweide",
       "mt flat polar parabolic",
       "mt flat polar quartic",
       "mt flat polar sinusoidal",
       "natural earth",
       "natural earth1",
       "natural earth2",
       "nell hammer",
       "nicolosi",
       "orthographic",
       "patterson",
       "peirce quincuncial",
       "polyconic",
       "rectangular polyconic",
       "robinson",
       "satellite",
       "sinu mollweide",
       "sinusoidal",
       "stereographic",
       "times",
       "transverse mercator",
       "van der grinten",
       "van der grinten2",
       "van der grinten3",
       "van der grinten4",
       "wagner4",
       "wagner6",
       "wiechel",
       "winkel tripel",
       "winkel3"
      ]
     }
    },
    "resolution": {
     "coerceNumber": true,
     "description": "Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.",
     "dflt": 110,
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      110,
      50
     ]
    },
    "rivercolor": {
     "description": "Sets color of the rivers.",
     "dflt": "#3399FF",
     "editType": "plot",
     "valType": "color"
    },
    "riverwidth": {
     "description": "Sets the stroke width (in px) of the rivers.",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "role": "object",
    "scope": {
     "description": "Set the scope of the map.",
     "dflt": "world",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "africa",
      "asia",
      "europe",
      "north america",
      "south america",
      "usa",
      "world"
     ]
    },
    "showcoastlines": {
     "description": "Sets whether or not the coastlines are drawn.",
     "editType": "plot",
     "valType": "boolean"
    },
    "showcountries": {
     "description": "Sets whether or not country boundaries are drawn.",
     "editType": "plot",
     "valType": "boolean"
    },
    "showframe": {
     "description": "Sets whether or not a frame is drawn around the map.",
     "editType": "plot",
     "valType": "boolean"
    },
    "showlakes": {
     "description": "Sets whether or not lakes are drawn.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showland": {
     "description": "Sets whether or not land masses are filled in color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showocean": {
     "description": "Sets whether or not oceans are filled in color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showrivers": {
     "description": "Sets whether or not rivers are drawn.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showsubunits": {
     "description": "Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.",
     "editType": "plot",
     "valType": "boolean"
    },
    "subunitcolor": {
     "description": "Sets the color of the subunits boundaries.",
     "dflt": "#444",
     "editType": "plot",
     "valType": "color"
    },
    "subunitwidth": {
     "description": "Sets the stroke width (in px) of the subunits boundaries.",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "uirevision": {
     "description": "Controls persistence of user-driven changes in the view (projection and center). Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Sets the default visibility of the base layers.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    }
   },
   "grid": {
    "columns": {
     "description": "The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.",
     "editType": "plot",
     "min": 1,
     "valType": "integer"
    },
    "domain": {
     "editType": "plot",
     "role": "object",
     "x": {
      "description": "Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "editType": "plot",
    "pattern": {
     "description": "If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.",
     "dflt": "coupled",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "independent",
      "coupled"
     ]
    },
    "role": "object",
    "roworder": {
     "description": "Is the first row the top or the bottom? Note that columns are always enumerated from left to right.",
     "dflt": "top to bottom",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "top to bottom",
      "bottom to top"
     ]
    },
    "rows": {
     "description": "The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.",
     "editType": "plot",
     "min": 1,
     "valType": "integer"
    },
    "subplots": {
     "description": "Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like *xy* or *x3y2*, or ** to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.",
     "dimensions": 2,
     "editType": "plot",
     "freeLength": true,
     "items": {
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "/^x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?$/",
       ""
      ]
     },
     "valType": "info_array"
    },
    "xaxes": {
     "description": "Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like *x*, *x2*, etc., or ** to not put an x axis in that column. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.",
     "editType": "plot",
     "freeLength": true,
     "items": {
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
       ""
      ]
     },
     "valType": "info_array"
    },
    "xgap": {
     "description": "Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.",
     "editType": "plot",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "xside": {
     "description": "Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.",
     "dflt": "bottom plot",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "bottom",
      "bottom plot",
      "top plot",
      "top"
     ]
    },
    "yaxes": {
     "description": "Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like *y*, *y2*, etc., or ** to not put a y axis in that row. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.",
     "editType": "plot",
     "freeLength": true,
     "items": {
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "/^y([2-9]|[1-9][0-9]+)?( domain)?$/",
       ""
      ]
     },
     "valType": "info_array"
    },
    "ygap": {
     "description": "Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.",
     "editType": "plot",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "yside": {
     "description": "Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.",
     "dflt": "left plot",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "left",
      "left plot",
      "right plot",
      "right"
     ]
    }
   },
   "height": {
    "description": "Sets the plot's height (in px).",
    "dflt": 450,
    "editType": "plot",
    "min": 10,
    "valType": "number"
   },
   "hidesources": {
    "description": "Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).",
    "dflt": false,
    "editType": "plot",
    "valType": "boolean"
   },
   "hoverdistance": {
    "description": "Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.",
    "dflt": 20,
    "editType": "none",
    "min": -1,
    "valType": "integer"
   },
   "hoverlabel": {
    "align": {
     "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
     "dflt": "auto",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "left",
      "right",
      "auto"
     ]
    },
    "bgcolor": {
     "description": "Sets the background color of all hover labels on graph",
     "editType": "none",
     "valType": "color"
    },
    "bordercolor": {
     "description": "Sets the border color of all hover labels on graph.",
     "editType": "none",
     "valType": "color"
    },
    "editType": "none",
    "font": {
     "color": {
      "editType": "none",
      "valType": "color"
     },
     "description": "Sets the default hover label font used by all traces on the graph.",
     "editType": "none",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "dflt": "Arial, sans-serif",
      "editType": "none",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "dflt": 13,
      "editType": "none",
      "min": 1,
      "valType": "number"
     }
    },
    "namelength": {
     "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
     "dflt": 15,
     "editType": "none",
     "min": -1,
     "valType": "integer"
    },
    "role": "object"
   },
   "hovermode": {
    "description": "Determines the mode of hover interactions. If *closest*, a single hoverlabel will appear for the *closest* point within the `hoverdistance`. If *x* (or *y*), multiple hoverlabels will appear for multiple points at the *closest* x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If *x unified* (or *y unified*), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.",
    "dflt": "closest",
    "editType": "modebar",
    "valType": "enumerated",
    "values": [
     "x",
     "y",
     "closest",
     false,
     "x unified",
     "y unified"
    ]
   },
   "images": {
    "items": {
     "image": {
      "editType": "arraydraw",
      "layer": {
       "description": "Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.",
       "dflt": "above",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "below",
        "above"
       ]
      },
      "name": {
       "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
       "editType": "none",
       "valType": "string"
      },
      "opacity": {
       "description": "Sets the opacity of the image.",
       "dflt": 1,
       "editType": "arraydraw",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "sizex": {
       "description": "Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width. When `xref` ends with ` domain`, units are sized relative to the axis width.",
       "dflt": 0,
       "editType": "arraydraw",
       "valType": "number"
      },
      "sizey": {
       "description": "Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height. When `yref` ends with ` domain`, units are sized relative to the axis height.",
       "dflt": 0,
       "editType": "arraydraw",
       "valType": "number"
      },
      "sizing": {
       "description": "Specifies which dimension of the image to constrain.",
       "dflt": "contain",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "fill",
        "contain",
        "stretch"
       ]
      },
      "source": {
       "description": "Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute.",
       "editType": "arraydraw",
       "valType": "string"
      },
      "templateitemname": {
       "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
       "editType": "calc",
       "valType": "string"
      },
      "visible": {
       "description": "Determines whether or not this image is visible.",
       "dflt": true,
       "editType": "arraydraw",
       "valType": "boolean"
      },
      "x": {
       "description": "Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info",
       "dflt": 0,
       "editType": "arraydraw",
       "valType": "any"
      },
      "xanchor": {
       "description": "Sets the anchor for the x position",
       "dflt": "left",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xref": {
       "description": "Sets the images's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.",
       "dflt": "paper",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "paper",
        "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      },
      "y": {
       "description": "Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info",
       "dflt": 0,
       "editType": "arraydraw",
       "valType": "any"
      },
      "yanchor": {
       "description": "Sets the anchor for the y position.",
       "dflt": "top",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "yref": {
       "description": "Sets the images's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.",
       "dflt": "paper",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "paper",
        "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      }
     }
    },
    "role": "object"
   },
   "legend": {
    "bgcolor": {
     "description": "Sets the legend background color. Defaults to `layout.paper_bgcolor`.",
     "editType": "legend",
     "valType": "color"
    },
    "bordercolor": {
     "description": "Sets the color of the border enclosing the legend.",
     "dflt": "#444",
     "editType": "legend",
     "valType": "color"
    },
    "borderwidth": {
     "description": "Sets the width (in px) of the border enclosing the legend.",
     "dflt": 0,
     "editType": "legend",
     "min": 0,
     "valType": "number"
    },
    "editType": "legend",
    "font": {
     "color": {
      "editType": "legend",
      "valType": "color"
     },
     "description": "Sets the font used to text the legend items.",
     "editType": "legend",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "legend",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "legend",
      "min": 1,
      "valType": "number"
     }
    },
    "groupclick": {
     "description": "Determines the behavior on legend group item click. *toggleitem* toggles the visibility of the individual item clicked on the graph. *togglegroup* toggles the visibility of all items in the same legendgroup as the item clicked on the graph.",
     "dflt": "togglegroup",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "toggleitem",
      "togglegroup"
     ]
    },
    "itemclick": {
     "description": "Determines the behavior on legend item click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item click interactions.",
     "dflt": "toggle",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "toggle",
      "toggleothers",
      false
     ]
    },
    "itemdoubleclick": {
     "description": "Determines the behavior on legend item double-click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item double-click interactions.",
     "dflt": "toggleothers",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "toggle",
      "toggleothers",
      false
     ]
    },
    "itemsizing": {
     "description": "Determines if the legend items symbols scale with their corresponding *trace* attributes or remain *constant* independent of the symbol size on the graph.",
     "dflt": "trace",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "trace",
      "constant"
     ]
    },
    "itemwidth": {
     "description": "Sets the width (in px) of the legend item symbols (the part other than the title.text).",
     "dflt": 30,
     "editType": "legend",
     "min": 30,
     "valType": "number"
    },
    "orientation": {
     "description": "Sets the orientation of the legend.",
     "dflt": "v",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "role": "object",
    "title": {
     "editType": "legend",
     "font": {
      "color": {
       "editType": "legend",
       "valType": "color"
      },
      "description": "Sets this legend's title font. Defaults to `legend.font` with its size increased about 20%.",
      "editType": "legend",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "legend",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "legend",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "side": {
      "description": "Determines the location of legend's title with respect to the legend items. Defaulted to *top* with `orientation` is *h*. Defaulted to *left* with `orientation` is *v*. The *top left* options could be used to expand legend area in both x and y sides.",
      "editType": "legend",
      "valType": "enumerated",
      "values": [
       "top",
       "left",
       "top left"
      ]
     },
     "text": {
      "description": "Sets the title of the legend.",
      "dflt": "",
      "editType": "legend",
      "valType": "string"
     }
    },
    "tracegroupgap": {
     "description": "Sets the amount of vertical space (in px) between legend groups.",
     "dflt": 10,
     "editType": "legend",
     "min": 0,
     "valType": "number"
    },
    "traceorder": {
     "description": "Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.",
     "editType": "legend",
     "extras": [
      "normal"
     ],
     "flags": [
      "reversed",
      "grouped"
     ],
     "valType": "flaglist"
    },
    "uirevision": {
     "description": "Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    },
    "valign": {
     "description": "Sets the vertical alignment of the symbols with respect to their associated text.",
     "dflt": "middle",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "top",
      "middle",
      "bottom"
     ]
    },
    "x": {
     "description": "Sets the x position (in normalized coordinates) of the legend. Defaults to *1.02* for vertical legends and defaults to *0* for horizontal legends.",
     "editType": "legend",
     "max": 3,
     "min": -2,
     "valType": "number"
    },
    "xanchor": {
     "description": "Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend. Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.",
     "dflt": "left",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "auto",
      "left",
      "center",
      "right"
     ]
    },
    "y": {
     "description": "Sets the y position (in normalized coordinates) of the legend. Defaults to *1* for vertical legends, defaults to *-0.1* for horizontal legends on graphs w/o range sliders and defaults to *1.1* for horizontal legends on graph with one or multiple range sliders.",
     "editType": "legend",
     "max": 3,
     "min": -2,
     "valType": "number"
    },
    "yanchor": {
     "description": "Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.",
     "editType": "legend",
     "valType": "enumerated",
     "values": [
      "auto",
      "top",
      "middle",
      "bottom"
     ]
    }
   },
   "mapbox": {
    "_arrayAttrRegexps": [
     {}
    ],
    "_isSubplotObj": true,
    "accesstoken": {
     "description": "Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.",
     "editType": "plot",
     "noBlank": true,
     "strict": true,
     "valType": "string"
    },
    "bearing": {
     "description": "Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).",
     "dflt": 0,
     "editType": "plot",
     "valType": "number"
    },
    "center": {
     "editType": "plot",
     "lat": {
      "description": "Sets the latitude of the center of the map (in degrees North).",
      "dflt": 0,
      "editType": "plot",
      "valType": "number"
     },
     "lon": {
      "description": "Sets the longitude of the center of the map (in degrees East).",
      "dflt": 0,
      "editType": "plot",
      "valType": "number"
     },
     "role": "object"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "editType": "plot",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this mapbox subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this mapbox subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "editType": "plot",
    "layers": {
     "items": {
      "layer": {
       "below": {
        "description": "Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.",
        "editType": "plot",
        "valType": "string"
       },
       "circle": {
        "editType": "plot",
        "radius": {
         "description": "Sets the circle radius (mapbox.layer.paint.circle-radius). Has an effect only when `type` is set to *circle*.",
         "dflt": 15,
         "editType": "plot",
         "valType": "number"
        },
        "role": "object"
       },
       "color": {
        "description": "Sets the primary layer color. If `type` is *circle*, color corresponds to the circle color (mapbox.layer.paint.circle-color) If `type` is *line*, color corresponds to the line color (mapbox.layer.paint.line-color) If `type` is *fill*, color corresponds to the fill color (mapbox.layer.paint.fill-color) If `type` is *symbol*, color corresponds to the icon color (mapbox.layer.paint.icon-color)",
        "dflt": "#444",
        "editType": "plot",
        "valType": "color"
       },
       "coordinates": {
        "description": "Sets the coordinates array contains [longitude, latitude] pairs for the image corners listed in clockwise order: top left, top right, bottom right, bottom left. Only has an effect for *image* `sourcetype`.",
        "editType": "plot",
        "valType": "any"
       },
       "editType": "plot",
       "fill": {
        "editType": "plot",
        "outlinecolor": {
         "description": "Sets the fill outline color (mapbox.layer.paint.fill-outline-color). Has an effect only when `type` is set to *fill*.",
         "dflt": "#444",
         "editType": "plot",
         "valType": "color"
        },
        "role": "object"
       },
       "line": {
        "dash": {
         "description": "Sets the length of dashes and gaps (mapbox.layer.paint.line-dasharray). Has an effect only when `type` is set to *line*.",
         "editType": "plot",
         "valType": "data_array"
        },
        "dashsrc": {
         "description": "Sets the source reference on Chart Studio Cloud for  dash .",
         "editType": "none",
         "valType": "string"
        },
        "editType": "plot",
        "role": "object",
        "width": {
         "description": "Sets the line width (mapbox.layer.paint.line-width). Has an effect only when `type` is set to *line*.",
         "dflt": 2,
         "editType": "plot",
         "valType": "number"
        }
       },
       "maxzoom": {
        "description": "Sets the maximum zoom level (mapbox.layer.maxzoom). At zoom levels equal to or greater than the maxzoom, the layer will be hidden.",
        "dflt": 24,
        "editType": "plot",
        "max": 24,
        "min": 0,
        "valType": "number"
       },
       "minzoom": {
        "description": "Sets the minimum zoom level (mapbox.layer.minzoom). At zoom levels less than the minzoom, the layer will be hidden.",
        "dflt": 0,
        "editType": "plot",
        "max": 24,
        "min": 0,
        "valType": "number"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "plot",
        "valType": "string"
       },
       "opacity": {
        "description": "Sets the opacity of the layer. If `type` is *circle*, opacity corresponds to the circle opacity (mapbox.layer.paint.circle-opacity) If `type` is *line*, opacity corresponds to the line opacity (mapbox.layer.paint.line-opacity) If `type` is *fill*, opacity corresponds to the fill opacity (mapbox.layer.paint.fill-opacity) If `type` is *symbol*, opacity corresponds to the icon/text opacity (mapbox.layer.paint.text-opacity)",
        "dflt": 1,
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       "role": "object",
       "source": {
        "description": "Sets the source data for this layer (mapbox.layer.source). When `sourcetype` is set to *geojson*, `source` can be a URL to a GeoJSON or a GeoJSON object. When `sourcetype` is set to *vector* or *raster*, `source` can be a URL or an array of tile URLs. When `sourcetype` is set to *image*, `source` can be a URL to an image.",
        "editType": "plot",
        "valType": "any"
       },
       "sourceattribution": {
        "description": "Sets the attribution for this source.",
        "editType": "plot",
        "valType": "string"
       },
       "sourcelayer": {
        "description": "Specifies the layer to use from a vector tile source (mapbox.layer.source-layer). Required for *vector* source type that supports multiple layers.",
        "dflt": "",
        "editType": "plot",
        "valType": "string"
       },
       "sourcetype": {
        "description": "Sets the source type for this layer, that is the type of the layer data.",
        "dflt": "geojson",
        "editType": "plot",
        "valType": "enumerated",
        "values": [
         "geojson",
         "vector",
         "raster",
         "image"
        ]
       },
       "symbol": {
        "editType": "plot",
        "icon": {
         "description": "Sets the symbol icon image (mapbox.layer.layout.icon-image). Full list: https://www.mapbox.com/maki-icons/",
         "dflt": "marker",
         "editType": "plot",
         "valType": "string"
        },
        "iconsize": {
         "description": "Sets the symbol icon size (mapbox.layer.layout.icon-size). Has an effect only when `type` is set to *symbol*.",
         "dflt": 10,
         "editType": "plot",
         "valType": "number"
        },
        "placement": {
         "description": "Sets the symbol and/or text placement (mapbox.layer.layout.symbol-placement). If `placement` is *point*, the label is placed where the geometry is located If `placement` is *line*, the label is placed along the line of the geometry If `placement` is *line-center*, the label is placed on the center of the geometry",
         "dflt": "point",
         "editType": "plot",
         "valType": "enumerated",
         "values": [
          "point",
          "line",
          "line-center"
         ]
        },
        "role": "object",
        "text": {
         "description": "Sets the symbol text (mapbox.layer.layout.text-field).",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        },
        "textfont": {
         "color": {
          "editType": "plot",
          "valType": "color"
         },
         "description": "Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to *symbol*.",
         "editType": "plot",
         "family": {
          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
          "dflt": "Open Sans Regular, Arial Unicode MS Regular",
          "editType": "plot",
          "noBlank": true,
          "strict": true,
          "valType": "string"
         },
         "role": "object",
         "size": {
          "editType": "plot",
          "min": 1,
          "valType": "number"
         }
        },
        "textposition": {
         "arrayOk": false,
         "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
         "dflt": "middle center",
         "editType": "plot",
         "valType": "enumerated",
         "values": [
          "top left",
          "top center",
          "top right",
          "middle left",
          "middle center",
          "middle right",
          "bottom left",
          "bottom center",
          "bottom right"
         ]
        }
       },
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "plot",
        "valType": "string"
       },
       "type": {
        "description": "Sets the layer type, that is the how the layer data set in `source` will be rendered With `sourcetype` set to *geojson*, the following values are allowed: *circle*, *line*, *fill* and *symbol*. but note that *line* and *fill* are not compatible with Point GeoJSON geometries. With `sourcetype` set to *vector*, the following values are allowed:  *circle*, *line*, *fill* and *symbol*. With `sourcetype` set to *raster* or `*image*`, only the *raster* value is allowed.",
        "dflt": "circle",
        "editType": "plot",
        "valType": "enumerated",
        "values": [
         "circle",
         "line",
         "fill",
         "symbol",
         "raster"
        ]
       },
       "visible": {
        "description": "Determines whether this layer is displayed",
        "dflt": true,
        "editType": "plot",
        "valType": "boolean"
       }
      }
     },
     "role": "object"
    },
    "pitch": {
     "description": "Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map) (mapbox.pitch).",
     "dflt": 0,
     "editType": "plot",
     "valType": "number"
    },
    "role": "object",
    "style": {
     "description": "Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`.  These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token  Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option.  Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec  The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg  The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets  Mapbox style URLs are of the form: mapbox://mapbox.mapbox-<name>-<version>",
     "dflt": "basic",
     "editType": "plot",
     "valType": "any",
     "values": [
      "basic",
      "streets",
      "outdoors",
      "light",
      "dark",
      "satellite",
      "satellite-streets",
      "carto-darkmatter",
      "carto-positron",
      "open-street-map",
      "stamen-terrain",
      "stamen-toner",
      "stamen-watercolor",
      "white-bg"
     ]
    },
    "uirevision": {
     "description": "Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    },
    "zoom": {
     "description": "Sets the zoom level of the map (mapbox.zoom).",
     "dflt": 1,
     "editType": "plot",
     "valType": "number"
    }
   },
   "margin": {
    "autoexpand": {
     "description": "Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    },
    "b": {
     "description": "Sets the bottom margin (in px).",
     "dflt": 80,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "editType": "plot",
    "l": {
     "description": "Sets the left margin (in px).",
     "dflt": 80,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "pad": {
     "description": "Sets the amount of padding (in px) between the plotting area and the axis lines",
     "dflt": 0,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "r": {
     "description": "Sets the right margin (in px).",
     "dflt": 80,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "role": "object",
    "t": {
     "description": "Sets the top margin (in px).",
     "dflt": 100,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    }
   },
   "meta": {
    "arrayOk": true,
    "description": "Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.",
    "editType": "plot",
    "valType": "any"
   },
   "metasrc": {
    "description": "Sets the source reference on Chart Studio Cloud for  meta .",
    "editType": "none",
    "valType": "string"
   },
   "modebar": {
    "activecolor": {
     "description": "Sets the color of the active or hovered on icons in the modebar.",
     "editType": "modebar",
     "valType": "color"
    },
    "add": {
     "arrayOk": true,
     "description": "Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to `config.modeBarButtonsToAdd` option. This may include *v1hovermode*, *hoverclosest*, *hovercompare*, *togglehover*, *togglespikelines*, *drawline*, *drawopenpath*, *drawclosedpath*, *drawcircle*, *drawrect*, *eraseshape*.",
     "dflt": "",
     "editType": "modebar",
     "valType": "string"
    },
    "addsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  add .",
     "editType": "none",
     "valType": "string"
    },
    "bgcolor": {
     "description": "Sets the background color of the modebar.",
     "editType": "modebar",
     "valType": "color"
    },
    "color": {
     "description": "Sets the color of the icons in the modebar.",
     "editType": "modebar",
     "valType": "color"
    },
    "editType": "modebar",
    "orientation": {
     "description": "Sets the orientation of the modebar.",
     "dflt": "h",
     "editType": "modebar",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "remove": {
     "arrayOk": true,
     "description": "Determines which predefined modebar buttons to remove. Similar to `config.modeBarButtonsToRemove` option. This may include *autoScale2d*, *autoscale*, *editInChartStudio*, *editinchartstudio*, *hoverCompareCartesian*, *hovercompare*, *lasso*, *lasso2d*, *orbitRotation*, *orbitrotation*, *pan*, *pan2d*, *pan3d*, *reset*, *resetCameraDefault3d*, *resetCameraLastSave3d*, *resetGeo*, *resetSankeyGroup*, *resetScale2d*, *resetViewMapbox*, *resetViews*, *resetcameradefault*, *resetcameralastsave*, *resetsankeygroup*, *resetscale*, *resetview*, *resetviews*, *select*, *select2d*, *sendDataToCloud*, *senddatatocloud*, *tableRotation*, *tablerotation*, *toImage*, *toggleHover*, *toggleSpikelines*, *togglehover*, *togglespikelines*, *toimage*, *zoom*, *zoom2d*, *zoom3d*, *zoomIn2d*, *zoomInGeo*, *zoomInMapbox*, *zoomOut2d*, *zoomOutGeo*, *zoomOutMapbox*, *zoomin*, *zoomout*.",
     "dflt": "",
     "editType": "modebar",
     "valType": "string"
    },
    "removesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  remove .",
     "editType": "none",
     "valType": "string"
    },
    "role": "object",
    "uirevision": {
     "description": "Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    }
   },
   "newshape": {
    "drawdirection": {
     "description": "When `dragmode` is set to *drawrect*, *drawline* or *drawcircle* this limits the drag to be horizontal, vertical or diagonal. Using *diagonal* there is no limit e.g. in drawing lines in any direction. *ortho* limits the draw to be either horizontal or vertical. *horizontal* allows horizontal extend. *vertical* allows vertical extend.",
     "dflt": "diagonal",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "ortho",
      "horizontal",
      "vertical",
      "diagonal"
     ]
    },
    "editType": "none",
    "fillcolor": {
     "description": "Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.",
     "dflt": "rgba(0,0,0,0)",
     "editType": "none",
     "valType": "color"
    },
    "fillrule": {
     "description": "Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule",
     "dflt": "evenodd",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "evenodd",
      "nonzero"
     ]
    },
    "layer": {
     "description": "Specifies whether new shapes are drawn below or above traces.",
     "dflt": "above",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "below",
      "above"
     ]
    },
    "line": {
     "color": {
      "description": "Sets the line color. By default uses either dark grey or white to increase contrast with background color.",
      "editType": "none",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "none",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "none",
     "role": "object",
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 4,
      "editType": "none",
      "min": 0,
      "valType": "number"
     }
    },
    "opacity": {
     "description": "Sets the opacity of new shapes.",
     "dflt": 1,
     "editType": "none",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "role": "object"
   },
   "paper_bgcolor": {
    "description": "Sets the background color of the paper where the graph is drawn.",
    "dflt": "#fff",
    "editType": "plot",
    "valType": "color"
   },
   "plot_bgcolor": {
    "description": "Sets the background color of the plotting area in-between x and y axes.",
    "dflt": "#fff",
    "editType": "layoutstyle",
    "valType": "color"
   },
   "polar": {
    "_isSubplotObj": true,
    "angularaxis": {
     "autotypenumbers": {
      "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
      "dflt": "convert types",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "convert types",
       "strict"
      ]
     },
     "categoryarray": {
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "categoryarraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
      "editType": "none",
      "valType": "string"
     },
     "categoryorder": {
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.",
      "dflt": "trace",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array",
       "total ascending",
       "total descending",
       "min ascending",
       "min descending",
       "max ascending",
       "max descending",
       "sum ascending",
       "sum descending",
       "mean ascending",
       "mean descending",
       "median ascending",
       "median descending"
      ]
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "direction": {
      "description": "Sets the direction corresponding to positive angles.",
      "dflt": "counterclockwise",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "counterclockwise",
       "clockwise"
      ]
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "none",
      "valType": "string"
     },
     "layer": {
      "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
      "dflt": "above traces",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "above traces",
       "below traces"
      ]
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "period": {
      "description": "Set the angular period. Has an effect only when `angularaxis.type` is *category*.",
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "rotation": {
      "description": "Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to *counterclockwise* get a `rotation` of *0* which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to *clockwise* get a rotation of *90* which corresponds to due North (like on a compass),",
      "editType": "calc",
      "valType": "angle"
     },
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thetaunit": {
      "description": "Sets the format unit of the formatted *theta* values. Has an effect only when `angularaxis.type` is *linear*.",
      "dflt": "degrees",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "radians",
       "degrees"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "type": {
      "_noTemplating": true,
      "description": "Sets the angular axis type. If *linear*, set `thetaunit` to determine the unit in which axis value are shown. If *category, use `period` to set the number of integer coordinates around polar axis.",
      "dflt": "-",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "category"
      ]
     },
     "uirevision": {
      "description": "Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar<N>.uirevision`.",
      "editType": "none",
      "valType": "any"
     },
     "visible": {
      "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     }
    },
    "bgcolor": {
     "description": "Set the background color of the subplot",
     "dflt": "#fff",
     "editType": "plot",
     "valType": "color"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this polar subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "editType": "plot",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this polar subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this polar subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this polar subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "editType": "calc",
    "gridshape": {
     "description": "Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).",
     "dflt": "circular",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "circular",
      "linear"
     ]
    },
    "hole": {
     "description": "Sets the fraction of the radius to cut out of the polar subplot.",
     "dflt": 0,
     "editType": "plot",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "radialaxis": {
     "_deprecated": {
      "title": {
       "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
       "editType": "ticks",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "ticks",
        "valType": "color"
       },
       "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
       "editType": "ticks",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "ticks",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "ticks",
        "min": 1,
        "valType": "number"
       }
      }
     },
     "angle": {
      "description": "Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.",
      "editType": "plot",
      "valType": "angle"
     },
     "autorange": {
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
      "dflt": true,
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ]
     },
     "autotypenumbers": {
      "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
      "dflt": "convert types",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "convert types",
       "strict"
      ]
     },
     "calendar": {
      "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
      "dflt": "gregorian",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "chinese",
       "coptic",
       "discworld",
       "ethiopian",
       "gregorian",
       "hebrew",
       "islamic",
       "jalali",
       "julian",
       "mayan",
       "nanakshahi",
       "nepali",
       "persian",
       "taiwan",
       "thai",
       "ummalqura"
      ]
     },
     "categoryarray": {
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "categoryarraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
      "editType": "none",
      "valType": "string"
     },
     "categoryorder": {
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.",
      "dflt": "trace",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array",
       "total ascending",
       "total descending",
       "min ascending",
       "min descending",
       "max ascending",
       "max descending",
       "sum ascending",
       "sum descending",
       "mean ascending",
       "mean descending",
       "median ascending",
       "median descending"
      ]
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "none",
      "valType": "string"
     },
     "layer": {
      "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
      "dflt": "above traces",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "above traces",
       "below traces"
      ]
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "range": {
      "anim": true,
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "autorange": false
      },
      "items": [
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       },
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       }
      ],
      "valType": "info_array"
     },
     "rangemode": {
      "description": "If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. If *normal*, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).",
      "dflt": "tozero",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "tozero",
       "nonnegative",
       "normal"
      ]
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "side": {
      "description": "Determines on which side of radial axis line the tick and tick labels appear.",
      "dflt": "clockwise",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "clockwise",
       "counterclockwise"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "plot",
      "font": {
       "color": {
        "editType": "ticks",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "ticks",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "ticks",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "dflt": "",
       "editType": "plot",
       "valType": "string"
      }
     },
     "type": {
      "_noTemplating": true,
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
      "dflt": "-",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "log",
       "date",
       "category"
      ]
     },
     "uirevision": {
      "description": "Controls persistence of user-driven changes in axis `range`, `autorange`, `angle`, and `title` if in `editable: true` configuration. Defaults to `polar<N>.uirevision`.",
      "editType": "none",
      "valType": "any"
     },
     "visible": {
      "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     }
    },
    "role": "object",
    "sector": {
     "description": "Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with *0* corresponding to rightmost limit of the polar subplot.",
     "dflt": [
      0,
      360
     ],
     "editType": "plot",
     "items": [
      {
       "editType": "plot",
       "valType": "number"
      },
      {
       "editType": "plot",
       "valType": "number"
      }
     ],
     "valType": "info_array"
    },
    "uirevision": {
     "description": "Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    }
   },
   "scene": {
    "_arrayAttrRegexps": [
     {}
    ],
    "_deprecated": {
     "cameraposition": {
      "description": "Obsolete. Use `camera` instead.",
      "editType": "camera",
      "valType": "info_array"
     }
    },
    "_isSubplotObj": true,
    "annotations": {
     "items": {
      "annotation": {
       "align": {
        "description": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.",
        "dflt": "center",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "left",
         "center",
         "right"
        ]
       },
       "arrowcolor": {
        "description": "Sets the color of the annotation arrow.",
        "editType": "calc",
        "valType": "color"
       },
       "arrowhead": {
        "description": "Sets the end annotation arrow head style.",
        "dflt": 1,
        "editType": "calc",
        "max": 8,
        "min": 0,
        "valType": "integer"
       },
       "arrowside": {
        "description": "Sets the annotation arrow head position.",
        "dflt": "end",
        "editType": "calc",
        "extras": [
         "none"
        ],
        "flags": [
         "end",
         "start"
        ],
        "valType": "flaglist"
       },
       "arrowsize": {
        "description": "Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.",
        "dflt": 1,
        "editType": "calc",
        "min": 0.3,
        "valType": "number"
       },
       "arrowwidth": {
        "description": "Sets the width (in px) of annotation arrow line.",
        "editType": "calc",
        "min": 0.1,
        "valType": "number"
       },
       "ax": {
        "description": "Sets the x component of the arrow tail about the arrow head (in pixels).",
        "editType": "calc",
        "valType": "number"
       },
       "ay": {
        "description": "Sets the y component of the arrow tail about the arrow head (in pixels).",
        "editType": "calc",
        "valType": "number"
       },
       "bgcolor": {
        "description": "Sets the background color of the annotation.",
        "dflt": "rgba(0,0,0,0)",
        "editType": "calc",
        "valType": "color"
       },
       "bordercolor": {
        "description": "Sets the color of the border enclosing the annotation `text`.",
        "dflt": "rgba(0,0,0,0)",
        "editType": "calc",
        "valType": "color"
       },
       "borderpad": {
        "description": "Sets the padding (in px) between the `text` and the enclosing border.",
        "dflt": 1,
        "editType": "calc",
        "min": 0,
        "valType": "number"
       },
       "borderwidth": {
        "description": "Sets the width (in px) of the border enclosing the annotation `text`.",
        "dflt": 1,
        "editType": "calc",
        "min": 0,
        "valType": "number"
       },
       "captureevents": {
        "description": "Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.",
        "editType": "calc",
        "valType": "boolean"
       },
       "editType": "calc",
       "font": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Sets the annotation text font.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "height": {
        "description": "Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.",
        "dflt": null,
        "editType": "calc",
        "min": 1,
        "valType": "number"
       },
       "hoverlabel": {
        "bgcolor": {
         "description": "Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.",
         "editType": "calc",
         "valType": "color"
        },
        "bordercolor": {
         "description": "Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.",
         "editType": "calc",
         "valType": "color"
        },
        "editType": "calc",
        "font": {
         "color": {
          "editType": "calc",
          "valType": "color"
         },
         "description": "Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.",
         "editType": "calc",
         "family": {
          "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
          "editType": "calc",
          "noBlank": true,
          "strict": true,
          "valType": "string"
         },
         "role": "object",
         "size": {
          "editType": "calc",
          "min": 1,
          "valType": "number"
         }
        },
        "role": "object"
       },
       "hovertext": {
        "description": "Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.",
        "editType": "calc",
        "valType": "string"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "calc",
        "valType": "string"
       },
       "opacity": {
        "description": "Sets the opacity of the annotation (text + arrow).",
        "dflt": 1,
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       "role": "object",
       "showarrow": {
        "description": "Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.",
        "dflt": true,
        "editType": "calc",
        "valType": "boolean"
       },
       "standoff": {
        "description": "Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.",
        "dflt": 0,
        "editType": "calc",
        "min": 0,
        "valType": "number"
       },
       "startarrowhead": {
        "description": "Sets the start annotation arrow head style.",
        "dflt": 1,
        "editType": "calc",
        "max": 8,
        "min": 0,
        "valType": "integer"
       },
       "startarrowsize": {
        "description": "Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.",
        "dflt": 1,
        "editType": "calc",
        "min": 0.3,
        "valType": "number"
       },
       "startstandoff": {
        "description": "Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.",
        "dflt": 0,
        "editType": "calc",
        "min": 0,
        "valType": "number"
       },
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "calc",
        "valType": "string"
       },
       "text": {
        "description": "Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub> <span> are also supported.",
        "editType": "calc",
        "valType": "string"
       },
       "textangle": {
        "description": "Sets the angle at which the `text` is drawn with respect to the horizontal.",
        "dflt": 0,
        "editType": "calc",
        "valType": "angle"
       },
       "valign": {
        "description": "Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.",
        "dflt": "middle",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "top",
         "middle",
         "bottom"
        ]
       },
       "visible": {
        "description": "Determines whether or not this annotation is visible.",
        "dflt": true,
        "editType": "calc",
        "valType": "boolean"
       },
       "width": {
        "description": "Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.",
        "dflt": null,
        "editType": "calc",
        "min": 1,
        "valType": "number"
       },
       "x": {
        "description": "Sets the annotation's x position.",
        "editType": "calc",
        "valType": "any"
       },
       "xanchor": {
        "description": "Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.",
        "dflt": "auto",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "auto",
         "left",
         "center",
         "right"
        ]
       },
       "xshift": {
        "description": "Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.",
        "dflt": 0,
        "editType": "calc",
        "valType": "number"
       },
       "y": {
        "description": "Sets the annotation's y position.",
        "editType": "calc",
        "valType": "any"
       },
       "yanchor": {
        "description": "Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.",
        "dflt": "auto",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "auto",
         "top",
         "middle",
         "bottom"
        ]
       },
       "yshift": {
        "description": "Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.",
        "dflt": 0,
        "editType": "calc",
        "valType": "number"
       },
       "z": {
        "description": "Sets the annotation's z position.",
        "editType": "calc",
        "valType": "any"
       }
      }
     },
     "role": "object"
    },
    "aspectmode": {
     "description": "If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.",
     "dflt": "auto",
     "editType": "plot",
     "impliedEdits": {},
     "valType": "enumerated",
     "values": [
      "auto",
      "cube",
      "data",
      "manual"
     ]
    },
    "aspectratio": {
     "description": "Sets this scene's axis aspectratio.",
     "editType": "plot",
     "impliedEdits": {
      "aspectmode": "manual",
      "role": "object"
     },
     "role": "object",
     "x": {
      "editType": "plot",
      "impliedEdits": {
       "^aspectmode": "manual"
      },
      "min": 0,
      "valType": "number"
     },
     "y": {
      "editType": "plot",
      "impliedEdits": {
       "^aspectmode": "manual"
      },
      "min": 0,
      "valType": "number"
     },
     "z": {
      "editType": "plot",
      "impliedEdits": {
       "^aspectmode": "manual"
      },
      "min": 0,
      "valType": "number"
     }
    },
    "bgcolor": {
     "dflt": "rgba(0,0,0,0)",
     "editType": "plot",
     "valType": "color"
    },
    "camera": {
     "center": {
      "description": "Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.",
      "editType": "camera",
      "role": "object",
      "x": {
       "dflt": 0,
       "editType": "camera",
       "valType": "number"
      },
      "y": {
       "dflt": 0,
       "editType": "camera",
       "valType": "number"
      },
      "z": {
       "dflt": 0,
       "editType": "camera",
       "valType": "number"
      }
     },
     "editType": "camera",
     "eye": {
      "description": "Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.",
      "editType": "camera",
      "role": "object",
      "x": {
       "dflt": 1.25,
       "editType": "camera",
       "valType": "number"
      },
      "y": {
       "dflt": 1.25,
       "editType": "camera",
       "valType": "number"
      },
      "z": {
       "dflt": 1.25,
       "editType": "camera",
       "valType": "number"
      }
     },
     "projection": {
      "editType": "calc",
      "role": "object",
      "type": {
       "description": "Sets the projection type. The projection type could be either *perspective* or *orthographic*. The default is *perspective*.",
       "dflt": "perspective",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "perspective",
        "orthographic"
       ]
      }
     },
     "role": "object",
     "up": {
      "description": "Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.",
      "editType": "camera",
      "role": "object",
      "x": {
       "dflt": 0,
       "editType": "camera",
       "valType": "number"
      },
      "y": {
       "dflt": 0,
       "editType": "camera",
       "valType": "number"
      },
      "z": {
       "dflt": 1,
       "editType": "camera",
       "valType": "number"
      }
     }
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this scene subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "editType": "plot",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this scene subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this scene subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this scene subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "dragmode": {
     "description": "Determines the mode of drag interactions for this scene.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "orbit",
      "turntable",
      "zoom",
      "pan",
      false
     ]
    },
    "editType": "plot",
    "hovermode": {
     "description": "Determines the mode of hover interactions for this scene.",
     "dflt": "closest",
     "editType": "modebar",
     "valType": "enumerated",
     "values": [
      "closest",
      false
     ]
    },
    "role": "object",
    "uirevision": {
     "description": "Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    },
    "xaxis": {
     "_deprecated": {
      "title": {
       "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
       "editType": "plot",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      }
     },
     "autorange": {
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
      "dflt": true,
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ]
     },
     "autotypenumbers": {
      "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
      "dflt": "convert types",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "convert types",
       "strict"
      ]
     },
     "backgroundcolor": {
      "description": "Sets the background color of this axis' wall.",
      "dflt": "rgba(204, 204, 204, 0.5)",
      "editType": "plot",
      "valType": "color"
     },
     "calendar": {
      "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
      "dflt": "gregorian",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "chinese",
       "coptic",
       "discworld",
       "ethiopian",
       "gregorian",
       "hebrew",
       "islamic",
       "jalali",
       "julian",
       "mayan",
       "nanakshahi",
       "nepali",
       "persian",
       "taiwan",
       "thai",
       "ummalqura"
      ]
     },
     "categoryarray": {
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "categoryarraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
      "editType": "none",
      "valType": "string"
     },
     "categoryorder": {
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.",
      "dflt": "trace",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array",
       "total ascending",
       "total descending",
       "min ascending",
       "min descending",
       "max ascending",
       "max descending",
       "sum ascending",
       "sum descending",
       "mean ascending",
       "mean descending",
       "median ascending",
       "median descending"
      ]
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "rgb(204, 204, 204)",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "mirror": {
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
      "dflt": false,
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       true,
       "ticks",
       false,
       "all",
       "allticks"
      ]
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "range": {
      "anim": false,
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "autorange": false
      },
      "items": [
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       },
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       }
      ],
      "valType": "info_array"
     },
     "rangemode": {
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.",
      "dflt": "normal",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ]
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showaxeslabels": {
      "description": "Sets whether or not this axis is labeled",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showbackground": {
      "description": "Sets whether or not this axis' wall has a background color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showspikes": {
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "spikecolor": {
      "description": "Sets the color of the spikes.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "spikesides": {
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "spikethickness": {
      "description": "Sets the thickness (in px) of the spikes.",
      "dflt": 2,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "plot",
      "font": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "plot",
       "valType": "string"
      }
     },
     "type": {
      "_noTemplating": true,
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
      "dflt": "-",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "log",
       "date",
       "category"
      ]
     },
     "visible": {
      "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
      "editType": "plot",
      "valType": "boolean"
     },
     "zeroline": {
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
      "editType": "plot",
      "valType": "boolean"
     },
     "zerolinecolor": {
      "description": "Sets the line color of the zero line.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "zerolinewidth": {
      "description": "Sets the width (in px) of the zero line.",
      "dflt": 1,
      "editType": "plot",
      "valType": "number"
     }
    },
    "yaxis": {
     "_deprecated": {
      "title": {
       "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
       "editType": "plot",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      }
     },
     "autorange": {
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
      "dflt": true,
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ]
     },
     "autotypenumbers": {
      "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
      "dflt": "convert types",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "convert types",
       "strict"
      ]
     },
     "backgroundcolor": {
      "description": "Sets the background color of this axis' wall.",
      "dflt": "rgba(204, 204, 204, 0.5)",
      "editType": "plot",
      "valType": "color"
     },
     "calendar": {
      "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
      "dflt": "gregorian",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "chinese",
       "coptic",
       "discworld",
       "ethiopian",
       "gregorian",
       "hebrew",
       "islamic",
       "jalali",
       "julian",
       "mayan",
       "nanakshahi",
       "nepali",
       "persian",
       "taiwan",
       "thai",
       "ummalqura"
      ]
     },
     "categoryarray": {
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "categoryarraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
      "editType": "none",
      "valType": "string"
     },
     "categoryorder": {
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.",
      "dflt": "trace",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array",
       "total ascending",
       "total descending",
       "min ascending",
       "min descending",
       "max ascending",
       "max descending",
       "sum ascending",
       "sum descending",
       "mean ascending",
       "mean descending",
       "median ascending",
       "median descending"
      ]
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "rgb(204, 204, 204)",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "mirror": {
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
      "dflt": false,
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       true,
       "ticks",
       false,
       "all",
       "allticks"
      ]
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "range": {
      "anim": false,
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "autorange": false
      },
      "items": [
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       },
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       }
      ],
      "valType": "info_array"
     },
     "rangemode": {
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.",
      "dflt": "normal",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ]
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showaxeslabels": {
      "description": "Sets whether or not this axis is labeled",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showbackground": {
      "description": "Sets whether or not this axis' wall has a background color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showspikes": {
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "spikecolor": {
      "description": "Sets the color of the spikes.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "spikesides": {
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "spikethickness": {
      "description": "Sets the thickness (in px) of the spikes.",
      "dflt": 2,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "plot",
      "font": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "plot",
       "valType": "string"
      }
     },
     "type": {
      "_noTemplating": true,
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
      "dflt": "-",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "log",
       "date",
       "category"
      ]
     },
     "visible": {
      "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
      "editType": "plot",
      "valType": "boolean"
     },
     "zeroline": {
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
      "editType": "plot",
      "valType": "boolean"
     },
     "zerolinecolor": {
      "description": "Sets the line color of the zero line.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "zerolinewidth": {
      "description": "Sets the width (in px) of the zero line.",
      "dflt": 1,
      "editType": "plot",
      "valType": "number"
     }
    },
    "zaxis": {
     "_deprecated": {
      "title": {
       "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
       "editType": "plot",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      }
     },
     "autorange": {
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
      "dflt": true,
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ]
     },
     "autotypenumbers": {
      "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
      "dflt": "convert types",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "convert types",
       "strict"
      ]
     },
     "backgroundcolor": {
      "description": "Sets the background color of this axis' wall.",
      "dflt": "rgba(204, 204, 204, 0.5)",
      "editType": "plot",
      "valType": "color"
     },
     "calendar": {
      "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
      "dflt": "gregorian",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "chinese",
       "coptic",
       "discworld",
       "ethiopian",
       "gregorian",
       "hebrew",
       "islamic",
       "jalali",
       "julian",
       "mayan",
       "nanakshahi",
       "nepali",
       "persian",
       "taiwan",
       "thai",
       "ummalqura"
      ]
     },
     "categoryarray": {
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "categoryarraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
      "editType": "none",
      "valType": "string"
     },
     "categoryorder": {
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.",
      "dflt": "trace",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array",
       "total ascending",
       "total descending",
       "min ascending",
       "min descending",
       "max ascending",
       "max descending",
       "sum ascending",
       "sum descending",
       "mean ascending",
       "mean descending",
       "median ascending",
       "median descending"
      ]
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "rgb(204, 204, 204)",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "mirror": {
      "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
      "dflt": false,
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       true,
       "ticks",
       false,
       "all",
       "allticks"
      ]
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "range": {
      "anim": false,
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "autorange": false
      },
      "items": [
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       },
       {
        "editType": "plot",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       }
      ],
      "valType": "info_array"
     },
     "rangemode": {
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.",
      "dflt": "normal",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ]
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showaxeslabels": {
      "description": "Sets whether or not this axis is labeled",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showbackground": {
      "description": "Sets whether or not this axis' wall has a background color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showspikes": {
      "description": "Sets whether or not spikes starting from data points to this axis' wall are shown on hover.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "spikecolor": {
      "description": "Sets the color of the spikes.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "spikesides": {
      "description": "Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "spikethickness": {
      "description": "Sets the thickness (in px) of the spikes.",
      "dflt": 2,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "plot",
      "font": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "plot",
       "valType": "string"
      }
     },
     "type": {
      "_noTemplating": true,
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
      "dflt": "-",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "log",
       "date",
       "category"
      ]
     },
     "visible": {
      "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
      "editType": "plot",
      "valType": "boolean"
     },
     "zeroline": {
      "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
      "editType": "plot",
      "valType": "boolean"
     },
     "zerolinecolor": {
      "description": "Sets the line color of the zero line.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "zerolinewidth": {
      "description": "Sets the width (in px) of the zero line.",
      "dflt": 1,
      "editType": "plot",
      "valType": "number"
     }
    }
   },
   "selectdirection": {
    "description": "When `dragmode` is set to *select*, this limits the selection of the drag to horizontal, vertical or diagonal. *h* only allows horizontal selection, *v* only vertical, *d* only diagonal and *any* sets no limit.",
    "dflt": "any",
    "editType": "none",
    "valType": "enumerated",
    "values": [
     "h",
     "v",
     "d",
     "any"
    ]
   },
   "selectionrevision": {
    "description": "Controls persistence of user-driven changes in selected points from all traces.",
    "editType": "none",
    "valType": "any"
   },
   "separators": {
    "description": "Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands. In English locales, dflt is *.,* but other locales may alter this default.",
    "editType": "plot",
    "valType": "string"
   },
   "shapes": {
    "items": {
     "shape": {
      "editable": {
       "description": "Determines whether the shape could be activated for edit or not. Has no effect when the older editable shapes mode is enabled via `config.editable` or `config.edits.shapePosition`.",
       "dflt": false,
       "editType": "calc+arraydraw",
       "valType": "boolean"
      },
      "editType": "arraydraw",
      "fillcolor": {
       "description": "Sets the color filling the shape's interior. Only applies to closed shapes.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "arraydraw",
       "valType": "color"
      },
      "fillrule": {
       "description": "Determines which regions of complex paths constitute the interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule",
       "dflt": "evenodd",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "evenodd",
        "nonzero"
       ]
      },
      "layer": {
       "description": "Specifies whether shapes are drawn below or above traces.",
       "dflt": "above",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "below",
        "above"
       ]
      },
      "line": {
       "color": {
        "anim": true,
        "description": "Sets the line color.",
        "editType": "arraydraw",
        "valType": "color"
       },
       "dash": {
        "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
        "dflt": "solid",
        "editType": "arraydraw",
        "valType": "string",
        "values": [
         "solid",
         "dot",
         "dash",
         "longdash",
         "dashdot",
         "longdashdot"
        ]
       },
       "editType": "calc+arraydraw",
       "role": "object",
       "width": {
        "anim": true,
        "description": "Sets the line width (in px).",
        "dflt": 2,
        "editType": "calc+arraydraw",
        "min": 0,
        "valType": "number"
       }
      },
      "name": {
       "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
       "editType": "none",
       "valType": "string"
      },
      "opacity": {
       "description": "Sets the opacity of the shape.",
       "dflt": 1,
       "editType": "arraydraw",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "path": {
       "description": "For `type` *path* - a valid SVG path with the pixel values replaced by data values in `xsizemode`/`ysizemode` being *scaled* and taken unmodified as pixels relative to `xanchor` and `yanchor` in case of *pixel* size mode. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained \"polybezier\" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789",
       "editType": "calc+arraydraw",
       "valType": "string"
      },
      "role": "object",
      "templateitemname": {
       "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
       "editType": "calc",
       "valType": "string"
      },
      "type": {
       "description": "Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) with respect to the axes' sizing mode. If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) with respect to the axes' sizing mode. If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) with respect to the axes' sizing mode. If *path*, draw a custom SVG path using `path`. with respect to the axes' sizing mode.",
       "editType": "calc+arraydraw",
       "valType": "enumerated",
       "values": [
        "circle",
        "rect",
        "path",
        "line"
       ]
      },
      "visible": {
       "description": "Determines whether or not this shape is visible.",
       "dflt": true,
       "editType": "calc+arraydraw",
       "valType": "boolean"
      },
      "x0": {
       "description": "Sets the shape's starting x position. See `type` and `xsizemode` for more info.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "x1": {
       "description": "Sets the shape's end x position. See `type` and `xsizemode` for more info.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "xanchor": {
       "description": "Only relevant in conjunction with `xsizemode` set to *pixel*. Specifies the anchor point on the x axis to which `x0`, `x1` and x coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `xsizemode` not set to *pixel*.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "xref": {
       "description": "Sets the shape's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, then you must convert the date to unix time in milliseconds.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "paper",
        "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      },
      "xsizemode": {
       "description": "Sets the shapes's sizing mode along the x axis. If set to *scaled*, `x0`, `x1` and x coordinates within `path` refer to data values on the x axis or a fraction of the plot area's width (`xref` set to *paper*). If set to *pixel*, `xanchor` specifies the x position in terms of data or plot fraction but `x0`, `x1` and x coordinates within `path` are pixels relative to `xanchor`. This way, the shape can have a fixed width while maintaining a position relative to data or plot fraction.",
       "dflt": "scaled",
       "editType": "calc+arraydraw",
       "valType": "enumerated",
       "values": [
        "scaled",
        "pixel"
       ]
      },
      "y0": {
       "description": "Sets the shape's starting y position. See `type` and `ysizemode` for more info.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "y1": {
       "description": "Sets the shape's end y position. See `type` and `ysizemode` for more info.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "yanchor": {
       "description": "Only relevant in conjunction with `ysizemode` set to *pixel*. Specifies the anchor point on the y axis to which `y0`, `y1` and y coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `ysizemode` not set to *pixel*.",
       "editType": "calc+arraydraw",
       "valType": "any"
      },
      "yref": {
       "description": "Sets the annotation's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "paper",
        "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
       ]
      },
      "ysizemode": {
       "description": "Sets the shapes's sizing mode along the y axis. If set to *scaled*, `y0`, `y1` and y coordinates within `path` refer to data values on the y axis or a fraction of the plot area's height (`yref` set to *paper*). If set to *pixel*, `yanchor` specifies the y position in terms of data or plot fraction but `y0`, `y1` and y coordinates within `path` are pixels relative to `yanchor`. This way, the shape can have a fixed height while maintaining a position relative to data or plot fraction.",
       "dflt": "scaled",
       "editType": "calc+arraydraw",
       "valType": "enumerated",
       "values": [
        "scaled",
        "pixel"
       ]
      }
     }
    },
    "role": "object"
   },
   "showlegend": {
    "description": "Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.",
    "editType": "legend",
    "valType": "boolean"
   },
   "sliders": {
    "items": {
     "slider": {
      "active": {
       "description": "Determines which button (by index starting from 0) is considered active.",
       "dflt": 0,
       "editType": "arraydraw",
       "min": 0,
       "valType": "number"
      },
      "activebgcolor": {
       "description": "Sets the background color of the slider grip while dragging.",
       "dflt": "#dbdde0",
       "editType": "arraydraw",
       "valType": "color"
      },
      "bgcolor": {
       "description": "Sets the background color of the slider.",
       "dflt": "#f8fafc",
       "editType": "arraydraw",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the color of the border enclosing the slider.",
       "dflt": "#bec8d9",
       "editType": "arraydraw",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) of the border enclosing the slider.",
       "dflt": 1,
       "editType": "arraydraw",
       "min": 0,
       "valType": "number"
      },
      "currentvalue": {
       "editType": "arraydraw",
       "font": {
        "color": {
         "editType": "arraydraw",
         "valType": "color"
        },
        "description": "Sets the font of the current value label text.",
        "editType": "arraydraw",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "arraydraw",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "arraydraw",
         "min": 1,
         "valType": "number"
        }
       },
       "offset": {
        "description": "The amount of space, in pixels, between the current value label and the slider.",
        "dflt": 10,
        "editType": "arraydraw",
        "valType": "number"
       },
       "prefix": {
        "description": "When currentvalue.visible is true, this sets the prefix of the label.",
        "editType": "arraydraw",
        "valType": "string"
       },
       "role": "object",
       "suffix": {
        "description": "When currentvalue.visible is true, this sets the suffix of the label.",
        "editType": "arraydraw",
        "valType": "string"
       },
       "visible": {
        "description": "Shows the currently-selected value above the slider.",
        "dflt": true,
        "editType": "arraydraw",
        "valType": "boolean"
       },
       "xanchor": {
        "description": "The alignment of the value readout relative to the length of the slider.",
        "dflt": "left",
        "editType": "arraydraw",
        "valType": "enumerated",
        "values": [
         "left",
         "center",
         "right"
        ]
       }
      },
      "editType": "arraydraw",
      "font": {
       "color": {
        "editType": "arraydraw",
        "valType": "color"
       },
       "description": "Sets the font of the slider step labels.",
       "editType": "arraydraw",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "arraydraw",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "arraydraw",
        "min": 1,
        "valType": "number"
       }
      },
      "len": {
       "description": "Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "arraydraw",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this slider length is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minorticklen": {
       "description": "Sets the length in pixels of minor step tick marks",
       "dflt": 4,
       "editType": "arraydraw",
       "min": 0,
       "valType": "number"
      },
      "name": {
       "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
       "editType": "arraydraw",
       "valType": "string"
      },
      "pad": {
       "b": {
        "description": "The amount of padding (in px) along the bottom of the component.",
        "dflt": 0,
        "editType": "arraydraw",
        "valType": "number"
       },
       "description": "Set the padding of the slider component along each side.",
       "editType": "arraydraw",
       "l": {
        "description": "The amount of padding (in px) on the left side of the component.",
        "dflt": 0,
        "editType": "arraydraw",
        "valType": "number"
       },
       "r": {
        "description": "The amount of padding (in px) on the right side of the component.",
        "dflt": 0,
        "editType": "arraydraw",
        "valType": "number"
       },
       "role": "object",
       "t": {
        "description": "The amount of padding (in px) along the top of the component.",
        "dflt": 20,
        "editType": "arraydraw",
        "valType": "number"
       }
      },
      "role": "object",
      "steps": {
       "items": {
        "step": {
         "args": {
          "description": "Sets the arguments values to be passed to the Plotly method set in `method` on slide.",
          "editType": "arraydraw",
          "freeLength": true,
          "items": [
           {
            "editType": "arraydraw",
            "valType": "any"
           },
           {
            "editType": "arraydraw",
            "valType": "any"
           },
           {
            "editType": "arraydraw",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "arraydraw",
         "execute": {
          "description": "When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_sliderchange` method and executing the API command manually without losing the benefit of the slider automatically binding to the state of the plot through the specification of `method` and `args`.",
          "dflt": true,
          "editType": "arraydraw",
          "valType": "boolean"
         },
         "label": {
          "description": "Sets the text label to appear on the slider",
          "editType": "arraydraw",
          "valType": "string"
         },
         "method": {
          "description": "Sets the Plotly method to be called when the slider value is changed. If the `skip` method is used, the API slider will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to slider events manually via JavaScript.",
          "dflt": "restyle",
          "editType": "arraydraw",
          "valType": "enumerated",
          "values": [
           "restyle",
           "relayout",
           "animate",
           "update",
           "skip"
          ]
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "arraydraw",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "arraydraw",
          "valType": "string"
         },
         "value": {
          "description": "Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided.",
          "editType": "arraydraw",
          "valType": "string"
         },
         "visible": {
          "description": "Determines whether or not this step is included in the slider.",
          "dflt": true,
          "editType": "arraydraw",
          "valType": "boolean"
         }
        }
       },
       "role": "object"
      },
      "templateitemname": {
       "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
       "editType": "arraydraw",
       "valType": "string"
      },
      "tickcolor": {
       "description": "Sets the color of the border enclosing the slider.",
       "dflt": "#333",
       "editType": "arraydraw",
       "valType": "color"
      },
      "ticklen": {
       "description": "Sets the length in pixels of step tick marks",
       "dflt": 7,
       "editType": "arraydraw",
       "min": 0,
       "valType": "number"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "arraydraw",
       "min": 0,
       "valType": "number"
      },
      "transition": {
       "duration": {
        "description": "Sets the duration of the slider transition",
        "dflt": 150,
        "editType": "arraydraw",
        "min": 0,
        "valType": "number"
       },
       "easing": {
        "description": "Sets the easing function of the slider transition",
        "dflt": "cubic-in-out",
        "editType": "arraydraw",
        "valType": "enumerated",
        "values": [
         "linear",
         "quad",
         "cubic",
         "sin",
         "exp",
         "circle",
         "elastic",
         "back",
         "bounce",
         "linear-in",
         "quad-in",
         "cubic-in",
         "sin-in",
         "exp-in",
         "circle-in",
         "elastic-in",
         "back-in",
         "bounce-in",
         "linear-out",
         "quad-out",
         "cubic-out",
         "sin-out",
         "exp-out",
         "circle-out",
         "elastic-out",
         "back-out",
         "bounce-out",
         "linear-in-out",
         "quad-in-out",
         "cubic-in-out",
         "sin-in-out",
         "exp-in-out",
         "circle-in-out",
         "elastic-in-out",
         "back-in-out",
         "bounce-in-out"
        ]
       },
       "editType": "arraydraw",
       "role": "object"
      },
      "visible": {
       "description": "Determines whether or not the slider is visible.",
       "dflt": true,
       "editType": "arraydraw",
       "valType": "boolean"
      },
      "x": {
       "description": "Sets the x position (in normalized coordinates) of the slider.",
       "dflt": 0,
       "editType": "arraydraw",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets the slider's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
       "dflt": "left",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "auto",
        "left",
        "center",
        "right"
       ]
      },
      "y": {
       "description": "Sets the y position (in normalized coordinates) of the slider.",
       "dflt": 0,
       "editType": "arraydraw",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets the slider's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
       "dflt": "top",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "auto",
        "top",
        "middle",
        "bottom"
       ]
      }
     }
    },
    "role": "object"
   },
   "spikedistance": {
    "description": "Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.",
    "dflt": -1,
    "editType": "none",
    "min": -1,
    "valType": "integer"
   },
   "template": {
    "description": "Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace.  Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.",
    "editType": "calc",
    "valType": "any"
   },
   "ternary": {
    "_isSubplotObj": true,
    "aaxis": {
     "_deprecated": {
      "title": {
       "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
       "editType": "plot",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      }
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "layer": {
      "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
      "dflt": "above traces",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "above traces",
       "below traces"
      ]
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "min": {
      "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 6,
      "editType": "plot",
      "min": 1,
      "valType": "integer"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "plot",
      "font": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "plot",
       "valType": "string"
      }
     },
     "uirevision": {
      "description": "Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.",
      "editType": "none",
      "valType": "any"
     }
    },
    "baxis": {
     "_deprecated": {
      "title": {
       "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
       "editType": "plot",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      }
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "layer": {
      "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
      "dflt": "above traces",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "above traces",
       "below traces"
      ]
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "min": {
      "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 6,
      "editType": "plot",
      "min": 1,
      "valType": "integer"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "plot",
      "font": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "plot",
       "valType": "string"
      }
     },
     "uirevision": {
      "description": "Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.",
      "editType": "none",
      "valType": "any"
     }
    },
    "bgcolor": {
     "description": "Set the background color of the subplot",
     "dflt": "#fff",
     "editType": "plot",
     "valType": "color"
    },
    "caxis": {
     "_deprecated": {
      "title": {
       "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
       "editType": "plot",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      }
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "plot",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "gridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "hoverformat": {
      "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "layer": {
      "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
      "dflt": "above traces",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "above traces",
       "below traces"
      ]
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "min": {
      "description": "The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 6,
      "editType": "plot",
      "min": 1,
      "valType": "integer"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "plot",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "plot",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "any"
          },
          {
           "editType": "plot",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "plot",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "plot",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "plot",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "plot",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "plot",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "plot",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "plot",
      "font": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "plot",
       "valType": "string"
      }
     },
     "uirevision": {
      "description": "Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.",
      "editType": "none",
      "valType": "any"
     }
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this ternary subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "editType": "plot",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this ternary subplot .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this ternary subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this ternary subplot (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "editType": "plot",
    "role": "object",
    "sum": {
     "description": "The number each triplet should sum to, and the maximum range of each axis",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "uirevision": {
     "description": "Controls persistence of user-driven changes in axis `min` and `title`, if not overridden in the individual axes. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    }
   },
   "title": {
    "editType": "layoutstyle",
    "font": {
     "color": {
      "editType": "layoutstyle",
      "valType": "color"
     },
     "description": "Sets the title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
     "editType": "layoutstyle",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "layoutstyle",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "layoutstyle",
      "min": 1,
      "valType": "number"
     }
    },
    "pad": {
     "b": {
      "description": "The amount of padding (in px) along the bottom of the component.",
      "dflt": 0,
      "editType": "layoutstyle",
      "valType": "number"
     },
     "description": "Sets the padding of the title. Each padding value only applies when the corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left padding to take effect, `xanchor` must be set to *left*. The same rule applies if `xanchor`/`yanchor` is determined automatically. Padding is muted if the respective anchor value is *middle*/*center*.",
     "editType": "layoutstyle",
     "l": {
      "description": "The amount of padding (in px) on the left side of the component.",
      "dflt": 0,
      "editType": "layoutstyle",
      "valType": "number"
     },
     "r": {
      "description": "The amount of padding (in px) on the right side of the component.",
      "dflt": 0,
      "editType": "layoutstyle",
      "valType": "number"
     },
     "role": "object",
     "t": {
      "description": "The amount of padding (in px) along the top of the component.",
      "dflt": 0,
      "editType": "layoutstyle",
      "valType": "number"
     }
    },
    "role": "object",
    "text": {
     "description": "Sets the plot's title. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
     "editType": "layoutstyle",
     "valType": "string"
    },
    "x": {
     "description": "Sets the x position with respect to `xref` in normalized coordinates from *0* (left) to *1* (right).",
     "dflt": 0.5,
     "editType": "layoutstyle",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "xanchor": {
     "description": "Sets the title's horizontal alignment with respect to its x position. *left* means that the title starts at x, *right* means that the title ends at x and *center* means that the title's center is at x. *auto* divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.",
     "dflt": "auto",
     "editType": "layoutstyle",
     "valType": "enumerated",
     "values": [
      "auto",
      "left",
      "center",
      "right"
     ]
    },
    "xref": {
     "description": "Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.",
     "dflt": "container",
     "editType": "layoutstyle",
     "valType": "enumerated",
     "values": [
      "container",
      "paper"
     ]
    },
    "y": {
     "description": "Sets the y position with respect to `yref` in normalized coordinates from *0* (bottom) to *1* (top). *auto* places the baseline of the title onto the vertical center of the top margin.",
     "dflt": "auto",
     "editType": "layoutstyle",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "yanchor": {
     "description": "Sets the title's vertical alignment with respect to its y position. *top* means that the title's cap line is at y, *bottom* means that the title's baseline is at y and *middle* means that the title's midline is at y. *auto* divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.",
     "dflt": "auto",
     "editType": "layoutstyle",
     "valType": "enumerated",
     "values": [
      "auto",
      "top",
      "middle",
      "bottom"
     ]
    },
    "yref": {
     "description": "Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.",
     "dflt": "container",
     "editType": "layoutstyle",
     "valType": "enumerated",
     "values": [
      "container",
      "paper"
     ]
    }
   },
   "transition": {
    "description": "Sets transition options used during Plotly.react updates.",
    "duration": {
     "description": "The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.",
     "dflt": 500,
     "editType": "none",
     "min": 0,
     "valType": "number"
    },
    "easing": {
     "description": "The easing function used for the transition",
     "dflt": "cubic-in-out",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "linear",
      "quad",
      "cubic",
      "sin",
      "exp",
      "circle",
      "elastic",
      "back",
      "bounce",
      "linear-in",
      "quad-in",
      "cubic-in",
      "sin-in",
      "exp-in",
      "circle-in",
      "elastic-in",
      "back-in",
      "bounce-in",
      "linear-out",
      "quad-out",
      "cubic-out",
      "sin-out",
      "exp-out",
      "circle-out",
      "elastic-out",
      "back-out",
      "bounce-out",
      "linear-in-out",
      "quad-in-out",
      "cubic-in-out",
      "sin-in-out",
      "exp-in-out",
      "circle-in-out",
      "elastic-in-out",
      "back-in-out",
      "bounce-in-out"
     ]
    },
    "editType": "none",
    "ordering": {
     "description": "Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.",
     "dflt": "layout first",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "layout first",
      "traces first"
     ]
    },
    "role": "object"
   },
   "uirevision": {
    "description": "Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision=*time*` and `yaxis.uirevision=*cost*`. Then if only the y data is changed, you can update `yaxis.uirevision=*quantity*` and the y axis range will reset but the x axis range will retain any user-driven zoom.",
    "editType": "none",
    "valType": "any"
   },
   "uniformtext": {
    "editType": "plot",
    "minsize": {
     "description": "Sets the minimum text size between traces of the same type.",
     "dflt": 0,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "mode": {
     "description": "Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using *hide* option hides the text; and using *show* option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.",
     "dflt": false,
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      false,
      "hide",
      "show"
     ]
    },
    "role": "object"
   },
   "updatemenus": {
    "items": {
     "updatemenu": {
      "_arrayAttrRegexps": [
       {}
      ],
      "active": {
       "description": "Determines which button (by index starting from 0) is considered active.",
       "dflt": 0,
       "editType": "arraydraw",
       "min": -1,
       "valType": "integer"
      },
      "bgcolor": {
       "description": "Sets the background color of the update menu buttons.",
       "editType": "arraydraw",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the color of the border enclosing the update menu.",
       "dflt": "#BEC8D9",
       "editType": "arraydraw",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) of the border enclosing the update menu.",
       "dflt": 1,
       "editType": "arraydraw",
       "min": 0,
       "valType": "number"
      },
      "buttons": {
       "items": {
        "button": {
         "args": {
          "description": "Sets the arguments values to be passed to the Plotly method set in `method` on click.",
          "editType": "arraydraw",
          "freeLength": true,
          "items": [
           {
            "editType": "arraydraw",
            "valType": "any"
           },
           {
            "editType": "arraydraw",
            "valType": "any"
           },
           {
            "editType": "arraydraw",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "args2": {
          "description": "Sets a 2nd set of `args`, these arguments values are passed to the Plotly method set in `method` when clicking this button while in the active state. Use this to create toggle buttons.",
          "editType": "arraydraw",
          "freeLength": true,
          "items": [
           {
            "editType": "arraydraw",
            "valType": "any"
           },
           {
            "editType": "arraydraw",
            "valType": "any"
           },
           {
            "editType": "arraydraw",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "arraydraw",
         "execute": {
          "description": "When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_buttonclicked` method and executing the API command manually without losing the benefit of the updatemenu automatically binding to the state of the plot through the specification of `method` and `args`.",
          "dflt": true,
          "editType": "arraydraw",
          "valType": "boolean"
         },
         "label": {
          "description": "Sets the text label to appear on the button.",
          "dflt": "",
          "editType": "arraydraw",
          "valType": "string"
         },
         "method": {
          "description": "Sets the Plotly method to be called on click. If the `skip` method is used, the API updatemenu will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to updatemenu events manually via JavaScript.",
          "dflt": "restyle",
          "editType": "arraydraw",
          "valType": "enumerated",
          "values": [
           "restyle",
           "relayout",
           "animate",
           "update",
           "skip"
          ]
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "arraydraw",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "arraydraw",
          "valType": "string"
         },
         "visible": {
          "description": "Determines whether or not this button is visible.",
          "editType": "arraydraw",
          "valType": "boolean"
         }
        }
       },
       "role": "object"
      },
      "direction": {
       "description": "Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.",
       "dflt": "down",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "left",
        "right",
        "up",
        "down"
       ]
      },
      "editType": "arraydraw",
      "font": {
       "color": {
        "editType": "arraydraw",
        "valType": "color"
       },
       "description": "Sets the font of the update menu button text.",
       "editType": "arraydraw",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "arraydraw",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "arraydraw",
        "min": 1,
        "valType": "number"
       }
      },
      "name": {
       "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
       "editType": "arraydraw",
       "valType": "string"
      },
      "pad": {
       "b": {
        "description": "The amount of padding (in px) along the bottom of the component.",
        "dflt": 0,
        "editType": "arraydraw",
        "valType": "number"
       },
       "description": "Sets the padding around the buttons or dropdown menu.",
       "editType": "arraydraw",
       "l": {
        "description": "The amount of padding (in px) on the left side of the component.",
        "dflt": 0,
        "editType": "arraydraw",
        "valType": "number"
       },
       "r": {
        "description": "The amount of padding (in px) on the right side of the component.",
        "dflt": 0,
        "editType": "arraydraw",
        "valType": "number"
       },
       "role": "object",
       "t": {
        "description": "The amount of padding (in px) along the top of the component.",
        "dflt": 0,
        "editType": "arraydraw",
        "valType": "number"
       }
      },
      "role": "object",
      "showactive": {
       "description": "Highlights active dropdown item or active button if true.",
       "dflt": true,
       "editType": "arraydraw",
       "valType": "boolean"
      },
      "templateitemname": {
       "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
       "editType": "arraydraw",
       "valType": "string"
      },
      "type": {
       "description": "Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically",
       "dflt": "dropdown",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "dropdown",
        "buttons"
       ]
      },
      "visible": {
       "description": "Determines whether or not the update menu is visible.",
       "editType": "arraydraw",
       "valType": "boolean"
      },
      "x": {
       "description": "Sets the x position (in normalized coordinates) of the update menu.",
       "dflt": -0.05,
       "editType": "arraydraw",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
       "dflt": "right",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "auto",
        "left",
        "center",
        "right"
       ]
      },
      "y": {
       "description": "Sets the y position (in normalized coordinates) of the update menu.",
       "dflt": 1,
       "editType": "arraydraw",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets the update menu's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
       "dflt": "top",
       "editType": "arraydraw",
       "valType": "enumerated",
       "values": [
        "auto",
        "top",
        "middle",
        "bottom"
       ]
      }
     }
    },
    "role": "object"
   },
   "width": {
    "description": "Sets the plot's width (in px).",
    "dflt": 700,
    "editType": "plot",
    "min": 10,
    "valType": "number"
   },
   "xaxis": {
    "_deprecated": {
     "autotick": {
      "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*.",
      "editType": "ticks",
      "valType": "boolean"
     },
     "title": {
      "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
      "editType": "ticks",
      "valType": "string"
     },
     "titlefont": {
      "color": {
       "editType": "ticks",
       "valType": "color"
      },
      "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
      "editType": "ticks",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "ticks",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "size": {
       "editType": "ticks",
       "min": 1,
       "valType": "number"
      }
     }
    },
    "_isSubplotObj": true,
    "anchor": {
     "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "automargin": {
     "description": "Determines whether long tick labels automatically grow the figure margins.",
     "dflt": false,
     "editType": "ticks",
     "valType": "boolean"
    },
    "autorange": {
     "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
     "dflt": true,
     "editType": "axrange",
     "impliedEdits": {},
     "valType": "enumerated",
     "values": [
      true,
      false,
      "reversed"
     ]
    },
    "autotypenumbers": {
     "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
     "dflt": "convert types",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "convert types",
      "strict"
     ]
    },
    "calendar": {
     "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "categoryarray": {
     "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "categoryarraysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
     "editType": "none",
     "valType": "string"
    },
    "categoryorder": {
     "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.",
     "dflt": "trace",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "trace",
      "category ascending",
      "category descending",
      "array",
      "total ascending",
      "total descending",
      "min ascending",
      "min descending",
      "max ascending",
      "max descending",
      "sum ascending",
      "sum descending",
      "mean ascending",
      "mean descending",
      "median ascending",
      "median descending"
     ]
    },
    "color": {
     "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "constrain": {
     "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "range",
      "domain"
     ]
    },
    "constraintoward": {
     "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "left",
      "center",
      "right",
      "top",
      "middle",
      "bottom"
     ]
    },
    "dividercolor": {
     "description": "Sets the color of the dividers Only has an effect on *multicategory* axes.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "dividerwidth": {
     "description": "Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.",
     "dflt": 1,
     "editType": "ticks",
     "valType": "number"
    },
    "domain": {
     "description": "Sets the domain of this axis (in plot fraction).",
     "dflt": [
      0,
      1
     ],
     "editType": "plot",
     "items": [
      {
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      {
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      }
     ],
     "valType": "info_array"
    },
    "dtick": {
     "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
     "editType": "ticks",
     "impliedEdits": {
      "tickmode": "linear"
     },
     "valType": "any"
    },
    "editType": "calc",
    "exponentformat": {
     "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
     "dflt": "B",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "none",
      "e",
      "E",
      "power",
      "SI",
      "B"
     ]
    },
    "fixedrange": {
     "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "gridcolor": {
     "description": "Sets the color of the grid lines.",
     "dflt": "#eee",
     "editType": "ticks",
     "valType": "color"
    },
    "gridwidth": {
     "description": "Sets the width (in px) of the grid lines.",
     "dflt": 1,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "hoverformat": {
     "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "layer": {
     "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
     "dflt": "above traces",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "above traces",
      "below traces"
     ]
    },
    "linecolor": {
     "description": "Sets the axis line color.",
     "dflt": "#444",
     "editType": "layoutstyle",
     "valType": "color"
    },
    "linewidth": {
     "description": "Sets the width (in px) of the axis line.",
     "dflt": 1,
     "editType": "ticks+layoutstyle",
     "min": 0,
     "valType": "number"
    },
    "matches": {
     "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "minexponent": {
     "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
     "dflt": 3,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "mirror": {
     "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
     "dflt": false,
     "editType": "ticks+layoutstyle",
     "valType": "enumerated",
     "values": [
      true,
      "ticks",
      false,
      "all",
      "allticks"
     ]
    },
    "nticks": {
     "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
     "dflt": 0,
     "editType": "ticks",
     "min": 0,
     "valType": "integer"
    },
    "overlaying": {
     "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "position": {
     "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
     "dflt": 0,
     "editType": "plot",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "range": {
     "anim": true,
     "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
     "editType": "axrange",
     "impliedEdits": {
      "autorange": false
     },
     "items": [
      {
       "anim": true,
       "editType": "axrange",
       "impliedEdits": {
        "^autorange": false
       },
       "valType": "any"
      },
      {
       "anim": true,
       "editType": "axrange",
       "impliedEdits": {
        "^autorange": false
       },
       "valType": "any"
      }
     ],
     "valType": "info_array"
    },
    "rangebreaks": {
     "items": {
      "rangebreak": {
       "bounds": {
        "description": "Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.",
        "editType": "calc",
        "items": [
         {
          "editType": "calc",
          "valType": "any"
         },
         {
          "editType": "calc",
          "valType": "any"
         }
        ],
        "valType": "info_array"
       },
       "dvalue": {
        "description": "Sets the size of each `values` item. The default is one day in milliseconds.",
        "dflt": 86400000,
        "editType": "calc",
        "min": 0,
        "valType": "number"
       },
       "editType": "calc",
       "enabled": {
        "description": "Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for *date* axis type.",
        "dflt": true,
        "editType": "calc",
        "valType": "boolean"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "none",
        "valType": "string"
       },
       "pattern": {
        "description": "Determines a pattern on the time line that generates breaks. If *day of week* - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If *hour* - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] }  or simply { bounds: ['sat', 'mon'] }   breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] }   breaks from 5pm to 8am (i.e. skips non-work hours).",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "day of week",
         "hour",
         ""
        ]
       },
       "role": "object",
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "calc",
        "valType": "string"
       },
       "values": {
        "description": "Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.",
        "editType": "calc",
        "freeLength": true,
        "items": {
         "editType": "calc",
         "valType": "any"
        },
        "valType": "info_array"
       }
      }
     },
     "role": "object"
    },
    "rangemode": {
     "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.",
     "dflt": "normal",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "normal",
      "tozero",
      "nonnegative"
     ]
    },
    "rangeselector": {
     "activecolor": {
      "description": "Sets the background color of the active range selector button.",
      "editType": "plot",
      "valType": "color"
     },
     "bgcolor": {
      "description": "Sets the background color of the range selector buttons.",
      "dflt": "#eee",
      "editType": "plot",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the color of the border enclosing the range selector.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) of the border enclosing the range selector.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "buttons": {
      "items": {
       "button": {
        "count": {
         "description": "Sets the number of steps to take to update the range. Use with `step` to specify the update interval.",
         "dflt": 1,
         "editType": "plot",
         "min": 0,
         "valType": "number"
        },
        "description": "Sets the specifications for each buttons. By default, a range selector comes with no buttons.",
        "editType": "plot",
        "label": {
         "description": "Sets the text label to appear on the button.",
         "editType": "plot",
         "valType": "string"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "none",
         "valType": "string"
        },
        "role": "object",
        "step": {
         "description": "The unit of measurement that the `count` value will set the range by.",
         "dflt": "month",
         "editType": "plot",
         "valType": "enumerated",
         "values": [
          "month",
          "year",
          "day",
          "hour",
          "minute",
          "second",
          "all"
         ]
        },
        "stepmode": {
         "description": "Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year. Month and year *todate* are currently available only for the built-in (Gregorian) calendar.",
         "dflt": "backward",
         "editType": "plot",
         "valType": "enumerated",
         "values": [
          "backward",
          "todate"
         ]
        },
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "visible": {
         "description": "Determines whether or not this button is visible.",
         "dflt": true,
         "editType": "plot",
         "valType": "boolean"
        }
       }
      },
      "role": "object"
     },
     "editType": "plot",
     "font": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Sets the font of the range selector button text.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "visible": {
      "description": "Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.",
      "editType": "plot",
      "valType": "boolean"
     },
     "x": {
      "description": "Sets the x position (in normalized coordinates) of the range selector.",
      "editType": "plot",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.",
      "dflt": "left",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "auto",
       "left",
       "center",
       "right"
      ]
     },
     "y": {
      "description": "Sets the y position (in normalized coordinates) of the range selector.",
      "editType": "plot",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.",
      "dflt": "bottom",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "auto",
       "top",
       "middle",
       "bottom"
      ]
     }
    },
    "rangeslider": {
     "autorange": {
      "description": "Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to *false*.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "bgcolor": {
      "description": "Sets the background color of the range slider.",
      "dflt": "#fff",
      "editType": "plot",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the border color of the range slider.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the border width of the range slider.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "range": {
      "description": "Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "calc",
      "impliedEdits": {
       "autorange": false
      },
      "items": [
       {
        "editType": "calc",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       },
       {
        "editType": "calc",
        "impliedEdits": {
         "^autorange": false
        },
        "valType": "any"
       }
      ],
      "valType": "info_array"
     },
     "role": "object",
     "thickness": {
      "description": "The height of the range slider as a fraction of the total plot area height.",
      "dflt": 0.15,
      "editType": "plot",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     },
     "yaxis": {
      "_isSubplotObj": true,
      "editType": "calc",
      "range": {
       "description": "Sets the range of this axis for the rangeslider.",
       "editType": "plot",
       "items": [
        {
         "editType": "plot",
         "valType": "any"
        },
        {
         "editType": "plot",
         "valType": "any"
        }
       ],
       "valType": "info_array"
      },
      "rangemode": {
       "description": "Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If *auto*, the autorange will be used. If *fixed*, the `range` is used. If *match*, the current range of the corresponding y-axis on the main subplot is used.",
       "dflt": "match",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "auto",
        "fixed",
        "match"
       ]
      },
      "role": "object"
     }
    },
    "role": "object",
    "scaleanchor": {
     "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "scaleratio": {
     "description": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "separatethousands": {
     "description": "If \"true\", even 4-digit integers are separated",
     "dflt": false,
     "editType": "ticks",
     "valType": "boolean"
    },
    "showdividers": {
     "description": "Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.",
     "dflt": true,
     "editType": "ticks",
     "valType": "boolean"
    },
    "showexponent": {
     "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
     "dflt": "all",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ]
    },
    "showgrid": {
     "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
     "editType": "ticks",
     "valType": "boolean"
    },
    "showline": {
     "description": "Determines whether or not a line bounding this axis is drawn.",
     "dflt": false,
     "editType": "ticks+layoutstyle",
     "valType": "boolean"
    },
    "showspikes": {
     "description": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest",
     "dflt": false,
     "editType": "modebar",
     "valType": "boolean"
    },
    "showticklabels": {
     "description": "Determines whether or not the tick labels are drawn.",
     "dflt": true,
     "editType": "ticks",
     "valType": "boolean"
    },
    "showtickprefix": {
     "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
     "dflt": "all",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ]
    },
    "showticksuffix": {
     "description": "Same as `showtickprefix` but for tick suffixes.",
     "dflt": "all",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ]
    },
    "side": {
     "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "top",
      "bottom",
      "left",
      "right"
     ]
    },
    "spikecolor": {
     "description": "Sets the spike color. If undefined, will use the series color",
     "dflt": null,
     "editType": "none",
     "valType": "color"
    },
    "spikedash": {
     "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
     "dflt": "dash",
     "editType": "none",
     "valType": "string",
     "values": [
      "solid",
      "dot",
      "dash",
      "longdash",
      "dashdot",
      "longdashdot"
     ]
    },
    "spikemode": {
     "description": "Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on",
     "dflt": "toaxis",
     "editType": "none",
     "flags": [
      "toaxis",
      "across",
      "marker"
     ],
     "valType": "flaglist"
    },
    "spikesnap": {
     "description": "Determines whether spikelines are stuck to the cursor or to the closest datapoints.",
     "dflt": "hovered data",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "data",
      "cursor",
      "hovered data"
     ]
    },
    "spikethickness": {
     "description": "Sets the width (in px) of the zero line.",
     "dflt": 3,
     "editType": "none",
     "valType": "number"
    },
    "tick0": {
     "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
     "editType": "ticks",
     "impliedEdits": {
      "tickmode": "linear"
     },
     "valType": "any"
    },
    "tickangle": {
     "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
     "dflt": "auto",
     "editType": "ticks",
     "valType": "angle"
    },
    "tickcolor": {
     "description": "Sets the tick color.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "tickfont": {
     "color": {
      "editType": "ticks",
      "valType": "color"
     },
     "description": "Sets the tick font.",
     "editType": "ticks",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "ticks",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "ticks",
      "min": 1,
      "valType": "number"
     }
    },
    "tickformat": {
     "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
     "dflt": "",
     "editType": "ticks",
     "valType": "string"
    },
    "tickformatstops": {
     "items": {
      "tickformatstop": {
       "dtickrange": {
        "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
        "editType": "ticks",
        "items": [
         {
          "editType": "ticks",
          "valType": "any"
         },
         {
          "editType": "ticks",
          "valType": "any"
         }
        ],
        "valType": "info_array"
       },
       "editType": "ticks",
       "enabled": {
        "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
        "dflt": true,
        "editType": "ticks",
        "valType": "boolean"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "none",
        "valType": "string"
       },
       "role": "object",
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "calc",
        "valType": "string"
       },
       "value": {
        "description": "string - dtickformat for described zoom level, the same as *tickformat*",
        "dflt": "",
        "editType": "ticks",
        "valType": "string"
       }
      }
     },
     "role": "object"
    },
    "ticklabelmode": {
     "description": "Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.",
     "dflt": "instant",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "instant",
      "period"
     ]
    },
    "ticklabeloverflow": {
     "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "allow",
      "hide past div",
      "hide past domain"
     ]
    },
    "ticklabelposition": {
     "description": "Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.",
     "dflt": "outside",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "outside",
      "inside",
      "outside top",
      "inside top",
      "outside left",
      "inside left",
      "outside right",
      "inside right",
      "outside bottom",
      "inside bottom"
     ]
    },
    "ticklen": {
     "description": "Sets the tick length (in px).",
     "dflt": 5,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "tickmode": {
     "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
     "editType": "ticks",
     "impliedEdits": {},
     "valType": "enumerated",
     "values": [
      "auto",
      "linear",
      "array"
     ]
    },
    "tickprefix": {
     "description": "Sets a tick label prefix.",
     "dflt": "",
     "editType": "ticks",
     "valType": "string"
    },
    "ticks": {
     "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "outside",
      "inside",
      ""
     ]
    },
    "tickson": {
     "description": "Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.",
     "dflt": "labels",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "labels",
      "boundaries"
     ]
    },
    "ticksuffix": {
     "description": "Sets a tick label suffix.",
     "dflt": "",
     "editType": "ticks",
     "valType": "string"
    },
    "ticktext": {
     "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
     "editType": "ticks",
     "valType": "data_array"
    },
    "ticktextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
     "editType": "none",
     "valType": "string"
    },
    "tickvals": {
     "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
     "editType": "ticks",
     "valType": "data_array"
    },
    "tickvalssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
     "editType": "none",
     "valType": "string"
    },
    "tickwidth": {
     "description": "Sets the tick width (in px).",
     "dflt": 1,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "title": {
     "editType": "ticks",
     "font": {
      "color": {
       "editType": "ticks",
       "valType": "color"
      },
      "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
      "editType": "ticks",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "ticks",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "ticks",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "standoff": {
      "description": "Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.",
      "editType": "ticks",
      "min": 0,
      "valType": "number"
     },
     "text": {
      "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
      "editType": "ticks",
      "valType": "string"
     }
    },
    "type": {
     "_noTemplating": true,
     "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
     "dflt": "-",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "-",
      "linear",
      "log",
      "date",
      "category",
      "multicategory"
     ]
    },
    "uirevision": {
     "description": "Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
     "editType": "plot",
     "valType": "boolean"
    },
    "zeroline": {
     "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
     "editType": "ticks",
     "valType": "boolean"
    },
    "zerolinecolor": {
     "description": "Sets the line color of the zero line.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "zerolinewidth": {
     "description": "Sets the width (in px) of the zero line.",
     "dflt": 1,
     "editType": "ticks",
     "valType": "number"
    }
   },
   "yaxis": {
    "_deprecated": {
     "autotick": {
      "description": "Obsolete. Set `tickmode` to *auto* for old `autotick` *true* behavior. Set `tickmode` to *linear* for `autotick` *false*.",
      "editType": "ticks",
      "valType": "boolean"
     },
     "title": {
      "description": "Value of `title` is no longer a simple *string* but a set of sub-attributes. To set the axis' title, please use `title.text` now.",
      "editType": "ticks",
      "valType": "string"
     },
     "titlefont": {
      "color": {
       "editType": "ticks",
       "valType": "color"
      },
      "description": "Former `titlefont` is now the sub-attribute `font` of `title`. To customize title font properties, please use `title.font` now.",
      "editType": "ticks",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "ticks",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "size": {
       "editType": "ticks",
       "min": 1,
       "valType": "number"
      }
     }
    },
    "_isSubplotObj": true,
    "anchor": {
     "description": "If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "automargin": {
     "description": "Determines whether long tick labels automatically grow the figure margins.",
     "dflt": false,
     "editType": "ticks",
     "valType": "boolean"
    },
    "autorange": {
     "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
     "dflt": true,
     "editType": "axrange",
     "impliedEdits": {},
     "valType": "enumerated",
     "values": [
      true,
      false,
      "reversed"
     ]
    },
    "autotypenumbers": {
     "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
     "dflt": "convert types",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "convert types",
      "strict"
     ]
    },
    "calendar": {
     "description": "Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "categoryarray": {
     "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "categoryarraysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
     "editType": "none",
     "valType": "string"
    },
    "categoryorder": {
     "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.",
     "dflt": "trace",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "trace",
      "category ascending",
      "category descending",
      "array",
      "total ascending",
      "total descending",
      "min ascending",
      "min descending",
      "max ascending",
      "max descending",
      "sum ascending",
      "sum descending",
      "mean ascending",
      "mean descending",
      "median ascending",
      "median descending"
     ]
    },
    "color": {
     "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "constrain": {
     "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "range",
      "domain"
     ]
    },
    "constraintoward": {
     "description": "If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "left",
      "center",
      "right",
      "top",
      "middle",
      "bottom"
     ]
    },
    "dividercolor": {
     "description": "Sets the color of the dividers Only has an effect on *multicategory* axes.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "dividerwidth": {
     "description": "Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.",
     "dflt": 1,
     "editType": "ticks",
     "valType": "number"
    },
    "domain": {
     "description": "Sets the domain of this axis (in plot fraction).",
     "dflt": [
      0,
      1
     ],
     "editType": "plot",
     "items": [
      {
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      {
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      }
     ],
     "valType": "info_array"
    },
    "dtick": {
     "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
     "editType": "ticks",
     "impliedEdits": {
      "tickmode": "linear"
     },
     "valType": "any"
    },
    "editType": "calc",
    "exponentformat": {
     "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
     "dflt": "B",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "none",
      "e",
      "E",
      "power",
      "SI",
      "B"
     ]
    },
    "fixedrange": {
     "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "gridcolor": {
     "description": "Sets the color of the grid lines.",
     "dflt": "#eee",
     "editType": "ticks",
     "valType": "color"
    },
    "gridwidth": {
     "description": "Sets the width (in px) of the grid lines.",
     "dflt": 1,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "hoverformat": {
     "description": "Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "layer": {
     "description": "Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.",
     "dflt": "above traces",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "above traces",
      "below traces"
     ]
    },
    "linecolor": {
     "description": "Sets the axis line color.",
     "dflt": "#444",
     "editType": "layoutstyle",
     "valType": "color"
    },
    "linewidth": {
     "description": "Sets the width (in px) of the axis line.",
     "dflt": 1,
     "editType": "ticks+layoutstyle",
     "min": 0,
     "valType": "number"
    },
    "matches": {
     "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "minexponent": {
     "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
     "dflt": 3,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "mirror": {
     "description": "Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.",
     "dflt": false,
     "editType": "ticks+layoutstyle",
     "valType": "enumerated",
     "values": [
      true,
      "ticks",
      false,
      "all",
      "allticks"
     ]
    },
    "nticks": {
     "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
     "dflt": 0,
     "editType": "ticks",
     "min": 0,
     "valType": "integer"
    },
    "overlaying": {
     "description": "If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "free",
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "position": {
     "description": "Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.",
     "dflt": 0,
     "editType": "plot",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "range": {
     "anim": true,
     "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
     "editType": "axrange",
     "impliedEdits": {
      "autorange": false
     },
     "items": [
      {
       "anim": true,
       "editType": "axrange",
       "impliedEdits": {
        "^autorange": false
       },
       "valType": "any"
      },
      {
       "anim": true,
       "editType": "axrange",
       "impliedEdits": {
        "^autorange": false
       },
       "valType": "any"
      }
     ],
     "valType": "info_array"
    },
    "rangebreaks": {
     "items": {
      "rangebreak": {
       "bounds": {
        "description": "Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.",
        "editType": "calc",
        "items": [
         {
          "editType": "calc",
          "valType": "any"
         },
         {
          "editType": "calc",
          "valType": "any"
         }
        ],
        "valType": "info_array"
       },
       "dvalue": {
        "description": "Sets the size of each `values` item. The default is one day in milliseconds.",
        "dflt": 86400000,
        "editType": "calc",
        "min": 0,
        "valType": "number"
       },
       "editType": "calc",
       "enabled": {
        "description": "Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for *date* axis type.",
        "dflt": true,
        "editType": "calc",
        "valType": "boolean"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "none",
        "valType": "string"
       },
       "pattern": {
        "description": "Determines a pattern on the time line that generates breaks. If *day of week* - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If *hour* - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] }  or simply { bounds: ['sat', 'mon'] }   breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] }   breaks from 5pm to 8am (i.e. skips non-work hours).",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "day of week",
         "hour",
         ""
        ]
       },
       "role": "object",
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "calc",
        "valType": "string"
       },
       "values": {
        "description": "Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.",
        "editType": "calc",
        "freeLength": true,
        "items": {
         "editType": "calc",
         "valType": "any"
        },
        "valType": "info_array"
       }
      }
     },
     "role": "object"
    },
    "rangemode": {
     "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.",
     "dflt": "normal",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "normal",
      "tozero",
      "nonnegative"
     ]
    },
    "role": "object",
    "scaleanchor": {
     "description": "If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
     ]
    },
    "scaleratio": {
     "description": "If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "separatethousands": {
     "description": "If \"true\", even 4-digit integers are separated",
     "dflt": false,
     "editType": "ticks",
     "valType": "boolean"
    },
    "showdividers": {
     "description": "Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.",
     "dflt": true,
     "editType": "ticks",
     "valType": "boolean"
    },
    "showexponent": {
     "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
     "dflt": "all",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ]
    },
    "showgrid": {
     "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
     "editType": "ticks",
     "valType": "boolean"
    },
    "showline": {
     "description": "Determines whether or not a line bounding this axis is drawn.",
     "dflt": false,
     "editType": "ticks+layoutstyle",
     "valType": "boolean"
    },
    "showspikes": {
     "description": "Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest",
     "dflt": false,
     "editType": "modebar",
     "valType": "boolean"
    },
    "showticklabels": {
     "description": "Determines whether or not the tick labels are drawn.",
     "dflt": true,
     "editType": "ticks",
     "valType": "boolean"
    },
    "showtickprefix": {
     "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
     "dflt": "all",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ]
    },
    "showticksuffix": {
     "description": "Same as `showtickprefix` but for tick suffixes.",
     "dflt": "all",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "all",
      "first",
      "last",
      "none"
     ]
    },
    "side": {
     "description": "Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "top",
      "bottom",
      "left",
      "right"
     ]
    },
    "spikecolor": {
     "description": "Sets the spike color. If undefined, will use the series color",
     "dflt": null,
     "editType": "none",
     "valType": "color"
    },
    "spikedash": {
     "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
     "dflt": "dash",
     "editType": "none",
     "valType": "string",
     "values": [
      "solid",
      "dot",
      "dash",
      "longdash",
      "dashdot",
      "longdashdot"
     ]
    },
    "spikemode": {
     "description": "Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on",
     "dflt": "toaxis",
     "editType": "none",
     "flags": [
      "toaxis",
      "across",
      "marker"
     ],
     "valType": "flaglist"
    },
    "spikesnap": {
     "description": "Determines whether spikelines are stuck to the cursor or to the closest datapoints.",
     "dflt": "hovered data",
     "editType": "none",
     "valType": "enumerated",
     "values": [
      "data",
      "cursor",
      "hovered data"
     ]
    },
    "spikethickness": {
     "description": "Sets the width (in px) of the zero line.",
     "dflt": 3,
     "editType": "none",
     "valType": "number"
    },
    "tick0": {
     "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
     "editType": "ticks",
     "impliedEdits": {
      "tickmode": "linear"
     },
     "valType": "any"
    },
    "tickangle": {
     "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
     "dflt": "auto",
     "editType": "ticks",
     "valType": "angle"
    },
    "tickcolor": {
     "description": "Sets the tick color.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "tickfont": {
     "color": {
      "editType": "ticks",
      "valType": "color"
     },
     "description": "Sets the tick font.",
     "editType": "ticks",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "ticks",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "ticks",
      "min": 1,
      "valType": "number"
     }
    },
    "tickformat": {
     "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
     "dflt": "",
     "editType": "ticks",
     "valType": "string"
    },
    "tickformatstops": {
     "items": {
      "tickformatstop": {
       "dtickrange": {
        "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
        "editType": "ticks",
        "items": [
         {
          "editType": "ticks",
          "valType": "any"
         },
         {
          "editType": "ticks",
          "valType": "any"
         }
        ],
        "valType": "info_array"
       },
       "editType": "ticks",
       "enabled": {
        "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
        "dflt": true,
        "editType": "ticks",
        "valType": "boolean"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "none",
        "valType": "string"
       },
       "role": "object",
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "calc",
        "valType": "string"
       },
       "value": {
        "description": "string - dtickformat for described zoom level, the same as *tickformat*",
        "dflt": "",
        "editType": "ticks",
        "valType": "string"
       }
      }
     },
     "role": "object"
    },
    "ticklabelmode": {
     "description": "Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.",
     "dflt": "instant",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "instant",
      "period"
     ]
    },
    "ticklabeloverflow": {
     "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "allow",
      "hide past div",
      "hide past domain"
     ]
    },
    "ticklabelposition": {
     "description": "Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.",
     "dflt": "outside",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "outside",
      "inside",
      "outside top",
      "inside top",
      "outside left",
      "inside left",
      "outside right",
      "inside right",
      "outside bottom",
      "inside bottom"
     ]
    },
    "ticklen": {
     "description": "Sets the tick length (in px).",
     "dflt": 5,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "tickmode": {
     "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
     "editType": "ticks",
     "impliedEdits": {},
     "valType": "enumerated",
     "values": [
      "auto",
      "linear",
      "array"
     ]
    },
    "tickprefix": {
     "description": "Sets a tick label prefix.",
     "dflt": "",
     "editType": "ticks",
     "valType": "string"
    },
    "ticks": {
     "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "outside",
      "inside",
      ""
     ]
    },
    "tickson": {
     "description": "Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.",
     "dflt": "labels",
     "editType": "ticks",
     "valType": "enumerated",
     "values": [
      "labels",
      "boundaries"
     ]
    },
    "ticksuffix": {
     "description": "Sets a tick label suffix.",
     "dflt": "",
     "editType": "ticks",
     "valType": "string"
    },
    "ticktext": {
     "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
     "editType": "ticks",
     "valType": "data_array"
    },
    "ticktextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
     "editType": "none",
     "valType": "string"
    },
    "tickvals": {
     "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
     "editType": "ticks",
     "valType": "data_array"
    },
    "tickvalssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
     "editType": "none",
     "valType": "string"
    },
    "tickwidth": {
     "description": "Sets the tick width (in px).",
     "dflt": 1,
     "editType": "ticks",
     "min": 0,
     "valType": "number"
    },
    "title": {
     "editType": "ticks",
     "font": {
      "color": {
       "editType": "ticks",
       "valType": "color"
      },
      "description": "Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.",
      "editType": "ticks",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "ticks",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "ticks",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "standoff": {
      "description": "Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.",
      "editType": "ticks",
      "min": 0,
      "valType": "number"
     },
     "text": {
      "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
      "editType": "ticks",
      "valType": "string"
     }
    },
    "type": {
     "_noTemplating": true,
     "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
     "dflt": "-",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "-",
      "linear",
      "log",
      "date",
      "category",
      "multicategory"
     ]
    },
    "uirevision": {
     "description": "Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
     "editType": "plot",
     "valType": "boolean"
    },
    "zeroline": {
     "description": "Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.",
     "editType": "ticks",
     "valType": "boolean"
    },
    "zerolinecolor": {
     "description": "Sets the line color of the zero line.",
     "dflt": "#444",
     "editType": "ticks",
     "valType": "color"
    },
    "zerolinewidth": {
     "description": "Sets the width (in px) of the zero line.",
     "dflt": 1,
     "editType": "ticks",
     "valType": "number"
    }
   }
  }
 },
 "traces": {
  "bar": {
   "animatable": true,
   "attributes": {
    "_deprecated": {
     "bardir": {
      "description": "Renamed to `orientation`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "v",
       "h"
      ]
     }
    },
    "alignmentgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "base": {
     "arrayOk": true,
     "description": "Sets where the bar base is drawn (in position axis units). In *stack* or *relative* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.",
     "dflt": null,
     "editType": "calc",
     "valType": "any"
    },
    "basesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  base .",
     "editType": "none",
     "valType": "string"
    },
    "cliponaxis": {
     "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    },
    "constraintext": {
     "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
     "dflt": "both",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "inside",
      "outside",
      "both",
      "none"
     ]
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "anim": true,
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dy": {
     "anim": true,
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "error_x": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "style",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "style",
      "valType": "color"
     },
     "copy_ystyle": {
      "editType": "plot",
      "valType": "boolean"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "plot",
      "min": 0,
      "valType": "number"
     }
    },
    "error_y": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "style",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "style",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "plot",
      "min": 0,
      "valType": "number"
     }
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "anim": true,
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "insidetextanchor": {
     "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
     "dflt": "end",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "end",
      "middle",
      "start"
     ]
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text` lying inside the bar.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "anim": true,
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 0,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the opacity of the bars.",
      "dflt": 1,
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "pattern": {
      "bgcolor": {
       "arrayOk": true,
       "description": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is *overlay*. Otherwise, defaults to a transparent background.",
       "editType": "style",
       "valType": "color"
      },
      "bgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the pattern within the marker.",
      "editType": "style",
      "fgcolor": {
       "arrayOk": true,
       "description": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is *replace*. Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.",
       "editType": "style",
       "valType": "color"
      },
      "fgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  fgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "fgopacity": {
       "description": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "fillmode": {
       "description": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.",
       "dflt": "replace",
       "editType": "style",
       "valType": "enumerated",
       "values": [
        "replace",
        "overlay"
       ]
      },
      "role": "object",
      "shape": {
       "arrayOk": true,
       "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.",
       "dflt": "",
       "editType": "style",
       "valType": "enumerated",
       "values": [
        "",
        "/",
        "\\",
        "x",
        "-",
        "|",
        "+",
        "."
       ]
      },
      "shapesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  shape .",
       "editType": "none",
       "valType": "string"
      },
      "size": {
       "arrayOk": true,
       "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.",
       "dflt": 8,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      },
      "solidity": {
       "arrayOk": true,
       "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.",
       "dflt": 0.3,
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "soliditysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  solidity .",
       "editType": "none",
       "valType": "string"
      }
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "offset": {
     "arrayOk": true,
     "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
     "dflt": null,
     "editType": "calc",
     "valType": "number"
    },
    "offsetgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "offsetsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  offset .",
     "editType": "none",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "orientation": {
     "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "outsidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text` lying outside the bar.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textangle": {
     "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
     "dflt": "auto",
     "editType": "plot",
     "valType": "angle"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text`.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
     "dflt": "auto",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "inside",
      "outside",
      "auto",
      "none"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "bar",
    "uid": {
     "anim": true,
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "width": {
     "arrayOk": true,
     "description": "Sets the bar width (in position axis units).",
     "dflt": null,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "widthsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  width .",
     "editType": "none",
     "valType": "string"
    },
    "x": {
     "anim": true,
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "x0": {
     "anim": true,
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "anim": true,
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "y0": {
     "anim": true,
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "bar-like",
    "cartesian",
    "svg",
    "bar",
    "oriented",
    "errorBarsOK",
    "showLegend",
    "zoomScale"
   ],
   "layoutAttributes": {
    "bargap": {
     "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "bargroupgap": {
     "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
     "dflt": 0,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "barmode": {
     "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
     "dflt": "group",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "stack",
      "group",
      "overlay",
      "relative"
     ]
    },
    "barnorm": {
     "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divided by the sum of all values at that location coordinate. *percent* is the same but multiplied by 100 to show percentages.",
     "dflt": "",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "",
      "fraction",
      "percent"
     ]
    }
   },
   "meta": {
    "description": "The data visualized by the span of the bars is set in `y` if `orientation` is set th *v* (the default) and the labels are set in `x`. By setting `orientation` to *h*, the roles are interchanged."
   },
   "type": "bar"
  },
  "barpolar": {
   "animatable": false,
   "attributes": {
    "base": {
     "arrayOk": true,
     "description": "Sets where the bar base is drawn (in radial axis units). In *stack* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.",
     "dflt": null,
     "editType": "calc",
     "valType": "any"
    },
    "basesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  base .",
     "editType": "none",
     "valType": "string"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dr": {
     "description": "Sets the r coordinate step.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dtheta": {
     "description": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.",
     "editType": "calc",
     "valType": "number"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "r",
      "theta",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 0,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the opacity of the bars.",
      "dflt": 1,
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "pattern": {
      "bgcolor": {
       "arrayOk": true,
       "description": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is *overlay*. Otherwise, defaults to a transparent background.",
       "editType": "style",
       "valType": "color"
      },
      "bgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the pattern within the marker.",
      "editType": "style",
      "fgcolor": {
       "arrayOk": true,
       "description": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is *replace*. Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.",
       "editType": "style",
       "valType": "color"
      },
      "fgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  fgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "fgopacity": {
       "description": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "fillmode": {
       "description": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.",
       "dflt": "replace",
       "editType": "style",
       "valType": "enumerated",
       "values": [
        "replace",
        "overlay"
       ]
      },
      "role": "object",
      "shape": {
       "arrayOk": true,
       "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.",
       "dflt": "",
       "editType": "style",
       "valType": "enumerated",
       "values": [
        "",
        "/",
        "\\",
        "x",
        "-",
        "|",
        "+",
        "."
       ]
      },
      "shapesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  shape .",
       "editType": "none",
       "valType": "string"
      },
      "size": {
       "arrayOk": true,
       "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.",
       "dflt": 8,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      },
      "solidity": {
       "arrayOk": true,
       "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.",
       "dflt": 0.3,
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "soliditysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  solidity .",
       "editType": "none",
       "valType": "string"
      }
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "offset": {
     "arrayOk": true,
     "description": "Shifts the angular position where the bar is drawn (in *thetatunit* units).",
     "dflt": null,
     "editType": "calc",
     "valType": "number"
    },
    "offsetsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  offset .",
     "editType": "none",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "r": {
     "description": "Sets the radial coordinates",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "r0": {
     "description": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "rsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  r .",
     "editType": "none",
     "valType": "string"
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "subplot": {
     "description": "Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.",
     "dflt": "polar",
     "editType": "calc",
     "valType": "subplotid"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "theta": {
     "description": "Sets the angular coordinates",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "theta0": {
     "description": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "thetasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  theta .",
     "editType": "none",
     "valType": "string"
    },
    "thetaunit": {
     "description": "Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.",
     "dflt": "degrees",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "radians",
      "degrees",
      "gradians"
     ]
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "barpolar",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "width": {
     "arrayOk": true,
     "description": "Sets the bar angular width (in *thetaunit* units).",
     "dflt": null,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "widthsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  width .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "polar",
    "bar",
    "showLegend"
   ],
   "layoutAttributes": {
    "bargap": {
     "description": "Sets the gap between bars of adjacent location coordinates. Values are unitless, they represent fractions of the minimum difference in bar positions in the data.",
     "dflt": 0.1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "barmode": {
     "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
     "dflt": "stack",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "stack",
      "overlay"
     ]
    }
   },
   "meta": {
    "description": "The data visualized by the radial span of the bars is set in `r`",
    "hrName": "bar_polar"
   },
   "type": "barpolar"
  },
  "box": {
   "animatable": false,
   "attributes": {
    "alignmentgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "boxmean": {
     "description": "If *true*, the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If *sd* the standard deviation is also drawn. Defaults to *true* when `mean` is set. Defaults to *sd* when `sd` is set Otherwise defaults to *false*.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      "sd",
      false
     ]
    },
    "boxpoints": {
     "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the box(es) are shown with no sample points Defaults to *suspectedoutliers* when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to *all* under the q1/median/q3 signature. Otherwise defaults to *outliers*.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "all",
      "outliers",
      "suspectedoutliers",
      false
     ]
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "description": "Sets the x coordinate step for multi-box traces set using q1/median/q3.",
     "editType": "calc",
     "valType": "number"
    },
    "dy": {
     "description": "Sets the y coordinate step for multi-box traces set using q1/median/q3.",
     "editType": "calc",
     "valType": "number"
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "style",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoveron": {
     "description": "Do the hover effects highlight individual boxes  or sample points or both?",
     "dflt": "boxes+points",
     "editType": "style",
     "flags": [
      "boxes",
      "points"
     ],
     "valType": "flaglist"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "jitter": {
     "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the box(es).",
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the color of line bounding the box(es).",
      "editType": "style",
      "valType": "color"
     },
     "editType": "plot",
     "role": "object",
     "width": {
      "description": "Sets the width (in px) of line bounding the box(es).",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "lowerfence": {
     "description": "Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `lowerfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point below 1.5 times the IQR.",
     "editType": "calc",
     "valType": "data_array"
    },
    "lowerfencesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  lowerfence .",
     "editType": "none",
     "valType": "string"
    },
    "marker": {
     "color": {
      "arrayOk": false,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "editType": "plot",
     "line": {
      "color": {
       "arrayOk": false,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "dflt": "#444",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "outliercolor": {
       "description": "Sets the border line color of the outlier sample points. Defaults to marker.color",
       "editType": "style",
       "valType": "color"
      },
      "outlierwidth": {
       "description": "Sets the border line width (in px) of the outlier sample points.",
       "dflt": 1,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "width": {
       "arrayOk": false,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 0,
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "opacity": {
      "arrayOk": false,
      "description": "Sets the marker opacity.",
      "dflt": 1,
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "outliercolor": {
      "description": "Sets the color of the outlier sample points.",
      "dflt": "rgba(0, 0, 0, 0)",
      "editType": "style",
      "valType": "color"
     },
     "role": "object",
     "size": {
      "arrayOk": false,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "symbol": {
      "arrayOk": false,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     }
    },
    "mean": {
     "description": "Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `mean` is not provided but a sample (in `y` or `x`) is set, we compute the mean for each box using the sample values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "meansrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  mean .",
     "editType": "none",
     "valType": "string"
    },
    "median": {
     "description": "Sets the median values. There should be as many items as the number of boxes desired.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "mediansrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  median .",
     "editType": "none",
     "valType": "string"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical",
     "editType": "calc+clearAxisTypes",
     "valType": "string"
    },
    "notched": {
     "description": "Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 * IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to *false* unless `notchwidth` or `notchspan` is set.",
     "editType": "calc",
     "valType": "boolean"
    },
    "notchspan": {
     "description": "Sets the notch span from the boxes' `median` values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `notchspan` is not provided but a sample (in `y` or `x`) is set, we compute it as 1.57 * IQR / sqrt(N), where N is the sample size.",
     "editType": "calc",
     "valType": "data_array"
    },
    "notchspansrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  notchspan .",
     "editType": "none",
     "valType": "string"
    },
    "notchwidth": {
     "description": "Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).",
     "dflt": 0.25,
     "editType": "calc",
     "max": 0.5,
     "min": 0,
     "valType": "number"
    },
    "offsetgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "orientation": {
     "description": "Sets the orientation of the box(es). If *v* (*h*), the distribution is visualized along the vertical (horizontal).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "pointpos": {
     "description": "Sets the position of the sample points in relation to the box(es). If *0*, the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes",
     "editType": "calc",
     "max": 2,
     "min": -2,
     "valType": "number"
    },
    "q1": {
     "description": "Sets the Quartile 1 values. There should be as many items as the number of boxes desired.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "q1src": {
     "description": "Sets the source reference on Chart Studio Cloud for  q1 .",
     "editType": "none",
     "valType": "string"
    },
    "q3": {
     "description": "Sets the Quartile 3 values. There should be as many items as the number of boxes desired.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "q3src": {
     "description": "Sets the source reference on Chart Studio Cloud for  q3 .",
     "editType": "none",
     "valType": "string"
    },
    "quartilemethod": {
     "description": "Sets the method used to compute the sample's Q1 and Q3 quartiles. The *linear* method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://www.amstat.org/publications/jse/v14n3/langford.html). The *exclusive* method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The *inclusive* method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.",
     "dflt": "linear",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "linear",
      "exclusive",
      "inclusive"
     ]
    },
    "sd": {
     "description": "Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `sd` is not provided but a sample (in `y` or `x`) is set, we compute the standard deviation for each box using the sample values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "sdsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  sd .",
     "editType": "none",
     "valType": "string"
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "box",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "upperfence": {
     "description": "Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `upperfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point above 1.5 times the IQR.",
     "editType": "calc",
     "valType": "data_array"
    },
    "upperfencesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  upperfence .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "whiskerwidth": {
     "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
     "dflt": 0.5,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "width": {
     "description": "Sets the width of the box in data coordinate If *0* (default value) the width is automatically selected based on the positions of other box traces in the same subplot.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "x": {
     "description": "Sets the x sample data or coordinates. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "x0": {
     "description": "Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y sample data or coordinates. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "y0": {
     "description": "Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "symbols",
    "oriented",
    "box-violin",
    "showLegend",
    "boxLayout",
    "zoomScale"
   ],
   "layoutAttributes": {
    "boxgap": {
     "description": "Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have *width* set.",
     "dflt": 0.3,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "boxgroupgap": {
     "description": "Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have *width* set.",
     "dflt": 0.3,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "boxmode": {
     "description": "Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes. Has no effect on traces that have *width* set.",
     "dflt": "overlay",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "group",
      "overlay"
     ]
    }
   },
   "meta": {
    "description": "Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2, i.e. the median) is marked by a line inside the box. The fences grow outward from the boxes' edges, by default they span +/- 1.5 times the interquartile range (IQR: Q3-Q1), The sample mean and standard deviation as well as notches and the sample, outlier and suspected outliers points can be optionally added to the box plot. The values and positions corresponding to each boxes can be input using two signatures. The first signature expects users to supply the sample values in the `y` data array for vertical boxes (`x` for horizontal boxes). By supplying an `x` (`y`) array, one box per distinct `x` (`y`) value is drawn If no `x` (`y`) {array} is provided, a single box is drawn. In this case, the box is positioned with the trace `name` or with `x0` (`y0`) if provided. The second signature expects users to supply the boxes corresponding Q1, median and Q3 statistics in the `q1`, `median` and `q3` data arrays respectively. Other box features relying on statistics namely `lowerfence`, `upperfence`, `notchspan` can be set directly by the users. To have plotly compute them or to show sample points besides the boxes, users can set the `y` data array for vertical boxes (`x` for horizontal boxes) to a 2D array with the outer length corresponding to the number of boxes in the traces and the inner length corresponding the sample size."
   },
   "type": "box"
  },
  "candlestick": {
   "animatable": false,
   "attributes": {
    "close": {
     "description": "Sets the close values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "closesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  close .",
     "editType": "none",
     "valType": "string"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "decreasing": {
     "editType": "style",
     "fillcolor": {
      "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
      "editType": "style",
      "valType": "color"
     },
     "line": {
      "color": {
       "description": "Sets the color of line bounding the box(es).",
       "dflt": "#FF4136",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object",
      "width": {
       "description": "Sets the width (in px) of line bounding the box(es).",
       "dflt": 2,
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "high": {
     "description": "Sets the high values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "highsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  high .",
     "editType": "none",
     "valType": "string"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "split": {
      "description": "Show hover information (open, close, high, low) in separate labels.",
      "dflt": false,
      "editType": "style",
      "valType": "boolean"
     }
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "increasing": {
     "editType": "style",
     "fillcolor": {
      "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
      "editType": "style",
      "valType": "color"
     },
     "line": {
      "color": {
       "description": "Sets the color of line bounding the box(es).",
       "dflt": "#3D9970",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object",
      "width": {
       "description": "Sets the width (in px) of line bounding the box(es).",
       "dflt": 2,
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "editType": "style",
     "role": "object",
     "width": {
      "description": "Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "low": {
     "description": "Sets the low values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "lowsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  low .",
     "editType": "none",
     "valType": "string"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "open": {
     "description": "Sets the open values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "opensrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  open .",
     "editType": "none",
     "valType": "string"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "candlestick",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "whiskerwidth": {
     "description": "Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).",
     "dflt": 0,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "x": {
     "description": "Sets the x coordinates. If absent, linear coordinate will be generated.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "showLegend",
    "candlestick",
    "boxLayout"
   ],
   "layoutAttributes": {
    "boxgap": {
     "description": "Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have *width* set.",
     "dflt": 0.3,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "boxgroupgap": {
     "description": "Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have *width* set.",
     "dflt": 0.3,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "boxmode": {
     "description": "Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes. Has no effect on traces that have *width* set.",
     "dflt": "overlay",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "group",
      "overlay"
     ]
    }
   },
   "meta": {
    "description": "The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red."
   },
   "type": "candlestick"
  },
  "carpet": {
   "animatable": true,
   "attributes": {
    "a": {
     "description": "An array containing values of the first parameter value",
     "editType": "calc",
     "valType": "data_array"
    },
    "a0": {
     "description": "Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.",
     "dflt": 0,
     "editType": "calc",
     "valType": "number"
    },
    "aaxis": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of `title.text`. Note that value of `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "calc",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Deprecated in favor of `title.font`.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "titleoffset": {
       "description": "Deprecated in favor of `title.offset`.",
       "dflt": 10,
       "editType": "calc",
       "valType": "number"
      }
     },
     "arraydtick": {
      "description": "The stride between grid lines along the axis",
      "dflt": 1,
      "editType": "calc",
      "min": 1,
      "valType": "integer"
     },
     "arraytick0": {
      "description": "The starting index of grid lines along the axis",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "autorange": {
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
      "dflt": true,
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ]
     },
     "autotypenumbers": {
      "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
      "dflt": "convert types",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "convert types",
       "strict"
      ]
     },
     "categoryarray": {
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "categoryarraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
      "editType": "none",
      "valType": "string"
     },
     "categoryorder": {
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
      "dflt": "trace",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array"
      ]
     },
     "cheatertype": {
      "dflt": "value",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "index",
       "value"
      ]
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "editType": "calc",
      "valType": "color"
     },
     "dtick": {
      "description": "The stride between grid lines along the axis",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "endline": {
      "description": "Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.",
      "editType": "calc",
      "valType": "boolean"
     },
     "endlinecolor": {
      "description": "Sets the line color of the end line.",
      "editType": "calc",
      "valType": "color"
     },
     "endlinewidth": {
      "description": "Sets the width (in px) of the end line.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "fixedrange": {
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "gridcolor": {
      "description": "Sets the axis line color.",
      "editType": "calc",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "labelpadding": {
      "description": "Extra padding between label and the axis",
      "dflt": 10,
      "editType": "calc",
      "valType": "integer"
     },
     "labelprefix": {
      "description": "Sets a axis label prefix.",
      "editType": "calc",
      "valType": "string"
     },
     "labelsuffix": {
      "description": "Sets a axis label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number",
      "dflt": 3,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "minorgridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "#eee",
      "editType": "calc",
      "valType": "color"
     },
     "minorgridcount": {
      "description": "Sets the number of minor grid ticks per major grid tick",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "minorgridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "range": {
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "valType": "any"
       },
       {
        "editType": "calc",
        "valType": "any"
       }
      ],
      "valType": "info_array"
     },
     "rangemode": {
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
      "dflt": "normal",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ]
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.",
      "dflt": "start",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "start",
       "end",
       "both",
       "none"
      ]
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "smoothing": {
      "dflt": 1,
      "editType": "calc",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "startline": {
      "description": "Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.",
      "editType": "calc",
      "valType": "boolean"
     },
     "startlinecolor": {
      "description": "Sets the line color of the start line.",
      "editType": "calc",
      "valType": "color"
     },
     "startlinewidth": {
      "description": "Sets the width (in px) of the start line.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "tick0": {
      "description": "The starting index of grid lines along the axis",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "calc",
      "valType": "angle"
     },
     "tickfont": {
      "color": {
       "editType": "calc",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "calc",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "calc",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "calc",
         "items": [
          {
           "editType": "calc",
           "valType": "any"
          },
          {
           "editType": "calc",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "calc",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "calc",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "calc",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "calc",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "tickmode": {
      "dflt": "array",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "title": {
      "editType": "calc",
      "font": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "offset": {
       "description": "An additional amount by which to offset the title from the tick labels, given in pixels. Note that this used to be set by the now deprecated `titleoffset` attribute.",
       "dflt": 10,
       "editType": "calc",
       "valType": "number"
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      }
     },
     "type": {
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
      "dflt": "-",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "date",
       "category"
      ]
     }
    },
    "asrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  a .",
     "editType": "none",
     "valType": "string"
    },
    "b": {
     "description": "A two dimensional array of y coordinates at each carpet point.",
     "editType": "calc",
     "valType": "data_array"
    },
    "b0": {
     "description": "Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.",
     "dflt": 0,
     "editType": "calc",
     "valType": "number"
    },
    "baxis": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of `title.text`. Note that value of `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "calc",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Deprecated in favor of `title.font`.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "titleoffset": {
       "description": "Deprecated in favor of `title.offset`.",
       "dflt": 10,
       "editType": "calc",
       "valType": "number"
      }
     },
     "arraydtick": {
      "description": "The stride between grid lines along the axis",
      "dflt": 1,
      "editType": "calc",
      "min": 1,
      "valType": "integer"
     },
     "arraytick0": {
      "description": "The starting index of grid lines along the axis",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "autorange": {
      "description": "Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to *false*.",
      "dflt": true,
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ]
     },
     "autotypenumbers": {
      "description": "Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.",
      "dflt": "convert types",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "convert types",
       "strict"
      ]
     },
     "categoryarray": {
      "description": "Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "categoryarraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
      "editType": "none",
      "valType": "string"
     },
     "categoryorder": {
      "description": "Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
      "dflt": "trace",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "trace",
       "category ascending",
       "category descending",
       "array"
      ]
     },
     "cheatertype": {
      "dflt": "value",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "index",
       "value"
      ]
     },
     "color": {
      "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
      "editType": "calc",
      "valType": "color"
     },
     "dtick": {
      "description": "The stride between grid lines along the axis",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "endline": {
      "description": "Determines whether or not a line is drawn at along the final value of this axis. If *true*, the end line is drawn on top of the grid lines.",
      "editType": "calc",
      "valType": "boolean"
     },
     "endlinecolor": {
      "description": "Sets the line color of the end line.",
      "editType": "calc",
      "valType": "color"
     },
     "endlinewidth": {
      "description": "Sets the width (in px) of the end line.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "fixedrange": {
      "description": "Determines whether or not this axis is zoom-able. If true, then zoom is disabled.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "gridcolor": {
      "description": "Sets the axis line color.",
      "editType": "calc",
      "valType": "color"
     },
     "gridwidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "labelpadding": {
      "description": "Extra padding between label and the axis",
      "dflt": 10,
      "editType": "calc",
      "valType": "integer"
     },
     "labelprefix": {
      "description": "Sets a axis label prefix.",
      "editType": "calc",
      "valType": "string"
     },
     "labelsuffix": {
      "description": "Sets a axis label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "linecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "linewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number",
      "dflt": 3,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "minorgridcolor": {
      "description": "Sets the color of the grid lines.",
      "dflt": "#eee",
      "editType": "calc",
      "valType": "color"
     },
     "minorgridcount": {
      "description": "Sets the number of minor grid ticks per major grid tick",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "minorgridwidth": {
      "description": "Sets the width (in px) of the grid lines.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "range": {
      "description": "Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "valType": "any"
       },
       {
        "editType": "calc",
        "valType": "any"
       }
      ],
      "valType": "info_array"
     },
     "rangemode": {
      "description": "If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data.",
      "dflt": "normal",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "normal",
       "tozero",
       "nonnegative"
      ]
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showgrid": {
      "description": "Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     },
     "showline": {
      "description": "Determines whether or not a line bounding this axis is drawn.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showticklabels": {
      "description": "Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.",
      "dflt": "start",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "start",
       "end",
       "both",
       "none"
      ]
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "smoothing": {
      "dflt": 1,
      "editType": "calc",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "startline": {
      "description": "Determines whether or not a line is drawn at along the starting value of this axis. If *true*, the start line is drawn on top of the grid lines.",
      "editType": "calc",
      "valType": "boolean"
     },
     "startlinecolor": {
      "description": "Sets the line color of the start line.",
      "editType": "calc",
      "valType": "color"
     },
     "startlinewidth": {
      "description": "Sets the width (in px) of the start line.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "tick0": {
      "description": "The starting index of grid lines along the axis",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "calc",
      "valType": "angle"
     },
     "tickfont": {
      "color": {
       "editType": "calc",
       "valType": "color"
      },
      "description": "Sets the tick font.",
      "editType": "calc",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "calc",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "calc",
         "items": [
          {
           "editType": "calc",
           "valType": "any"
          },
          {
           "editType": "calc",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "calc",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "calc",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "calc",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "calc",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "tickmode": {
      "dflt": "array",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "title": {
      "editType": "calc",
      "font": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets this axis' title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "offset": {
       "description": "An additional amount by which to offset the title from the tick labels, given in pixels. Note that this used to be set by the now deprecated `titleoffset` attribute.",
       "dflt": 10,
       "editType": "calc",
       "valType": "number"
      },
      "role": "object",
      "text": {
       "description": "Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      }
     },
     "type": {
      "description": "Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.",
      "dflt": "-",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "-",
       "linear",
       "date",
       "category"
      ]
     }
    },
    "bsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  b .",
     "editType": "none",
     "valType": "string"
    },
    "carpet": {
     "description": "An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie",
     "editType": "calc",
     "valType": "string"
    },
    "cheaterslope": {
     "description": "The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "color": {
     "description": "Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.",
     "dflt": "#444",
     "editType": "plot",
     "valType": "color"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "da": {
     "description": "Sets the a coordinate step. See `a0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "db": {
     "description": "Sets the b coordinate step. See `b0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "font": {
     "color": {
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "description": "The default font used for axis & tick labels on this carpet",
     "editType": "calc",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "dflt": "\"Open Sans\", verdana, arial, sans-serif",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "dflt": 12,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     }
    },
    "ids": {
     "anim": true,
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "type": "carpet",
    "uid": {
     "anim": true,
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "A two dimensional array of y coordinates at each carpet point.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "carpet",
    "carpetAxis",
    "notLegendIsolatable",
    "noMultiCategory",
    "noHover",
    "noSortingByValue"
   ],
   "meta": {
    "description": "The data describing carpet axis layout is set in `y` and (optionally) also `x`. If only `y` is present, `x` the plot is interpreted as a cheater plot and is filled in using the `y` values. `x` and `y` may either be 2D arrays matching with each dimension matching that of `a` and `b`, or they may be 1D arrays with total length equal to that of `a` and `b`."
   },
   "type": "carpet"
  },
  "choropleth": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "featureidkey": {
     "description": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example *properties.name*.",
     "dflt": "id",
     "editType": "calc",
     "valType": "string"
    },
    "geo": {
     "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
     "dflt": "geo",
     "editType": "calc",
     "valType": "subplotid"
    },
    "geojson": {
     "description": "Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.",
     "editType": "calc",
     "valType": "any"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "location",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "locationmode": {
     "description": "Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.",
     "dflt": "ISO-3",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "ISO-3",
      "USA-states",
      "country names",
      "geojson-id"
     ]
    },
    "locations": {
     "description": "Sets the coordinates via location IDs or names. See `locationmode` for more info.",
     "editType": "calc",
     "valType": "data_array"
    },
    "locationssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  locations .",
     "editType": "none",
     "valType": "string"
    },
    "marker": {
     "editType": "calc",
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the opacity of the locations.",
      "dflt": 1,
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "selected": {
     "editType": "plot",
     "marker": {
      "editType": "plot",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with each location.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "choropleth",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "plot",
     "marker": {
      "editType": "plot",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "z": {
     "description": "Sets the color values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "geo",
    "noOpacity",
    "showLegend"
   ],
   "meta": {
    "description": "The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`."
   },
   "type": "choropleth"
  },
  "choroplethmapbox": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "below": {
     "description": "Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.",
     "editType": "plot",
     "valType": "string"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "featureidkey": {
     "description": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example *properties.name*.",
     "dflt": "id",
     "editType": "calc",
     "valType": "string"
    },
    "geojson": {
     "description": "Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.",
     "editType": "calc",
     "valType": "any"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "location",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "locations": {
     "description": "Sets which features found in *geojson* to plot using their feature `id` field.",
     "editType": "calc",
     "valType": "data_array"
    },
    "locationssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  locations .",
     "editType": "none",
     "valType": "string"
    },
    "marker": {
     "editType": "calc",
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "dflt": "#444",
       "editType": "plot",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 1,
       "editType": "plot",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the opacity of the locations.",
      "dflt": 1,
      "editType": "plot",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "selected": {
     "editType": "plot",
     "marker": {
      "editType": "plot",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "subplot": {
     "description": "Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.",
     "dflt": "mapbox",
     "editType": "calc",
     "valType": "subplotid"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with each location.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "choroplethmapbox",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "plot",
     "marker": {
      "editType": "plot",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "z": {
     "description": "Sets the color values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "mapbox",
    "gl",
    "noOpacity",
    "showLegend"
   ],
   "meta": {
    "description": "GeoJSON features to be filled are set in `geojson` The data that describes the choropleth value-to-color mapping is set in `locations` and `z`.",
    "hr_name": "choropleth_mapbox"
   },
   "type": "choroplethmapbox"
  },
  "cone": {
   "animatable": false,
   "attributes": {
    "anchor": {
     "description": "Sets the cones' anchor with respect to their x/y/z positions. Note that *cm* denote the cone's center of mass which corresponds to 1/4 from the tail to tip.",
     "dflt": "cm",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "tip",
      "tail",
      "cm",
      "center"
     ]
    },
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "cmid": {
     "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "cmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "x+y+z+norm+text+name",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "u",
      "v",
      "w",
      "norm",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `norm` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "lighting": {
     "ambient": {
      "description": "Ambient light increases overall color visibility but can wash out the image.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "diffuse": {
      "description": "Represents the extent that incident rays are reflected in a range of angles.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "facenormalsepsilon": {
      "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 0.000001,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "fresnel": {
      "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
      "dflt": 0.2,
      "editType": "calc",
      "max": 5,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "roughness": {
      "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
      "dflt": 0.5,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "specular": {
      "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
      "dflt": 0.05,
      "editType": "calc",
      "max": 2,
      "min": 0,
      "valType": "number"
     },
     "vertexnormalsepsilon": {
      "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 1e-12,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     }
    },
    "lightposition": {
     "editType": "calc",
     "role": "object",
     "x": {
      "description": "Numeric vector, representing the X coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "y": {
      "description": "Numeric vector, representing the Y coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "z": {
      "description": "Numeric vector, representing the Z coordinate for each vertex.",
      "dflt": 0,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "scene": {
     "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
     "dflt": "scene",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "sizemode": {
     "description": "Determines whether `sizeref` is set as a *scaled* (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as *absolute* value (in the same units as the vector field).",
     "dflt": "scaled",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "scaled",
      "absolute"
     ]
    },
    "sizeref": {
     "description": "Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum \"time\" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to *scaled*, `sizeref` is unitless, its default value is *0.5* With `sizemode` set to *absolute*, `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.",
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with the cones. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "type": "cone",
    "u": {
     "description": "Sets the x components of the vector field.",
     "editType": "calc",
     "valType": "data_array"
    },
    "uhoverformat": {
     "description": "Sets the hover text formatting rulefor `u`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "usrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  u .",
     "editType": "none",
     "valType": "string"
    },
    "v": {
     "description": "Sets the y components of the vector field.",
     "editType": "calc",
     "valType": "data_array"
    },
    "vhoverformat": {
     "description": "Sets the hover text formatting rulefor `v`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "vsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  v .",
     "editType": "none",
     "valType": "string"
    },
    "w": {
     "description": "Sets the z components of the vector field.",
     "editType": "calc",
     "valType": "data_array"
    },
    "whoverformat": {
     "description": "Sets the hover text formatting rulefor `w`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "wsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  w .",
     "editType": "none",
     "valType": "string"
    },
    "x": {
     "description": "Sets the x coordinates of the vector field and of the displayed cones.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates of the vector field and of the displayed cones.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the z coordinates of the vector field and of the displayed cones.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl3d",
    "showLegend"
   ],
   "meta": {
    "description": "Use cone traces to visualize vector fields.  Specify a vector field using 6 1D arrays, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, `w`. The cones are drawn exactly at the positions given by `x`, `y` and `z`."
   },
   "type": "cone"
  },
  "contour": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": false,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "autocontour": {
     "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.",
     "editType": "calc",
     "valType": "boolean"
    },
    "contours": {
     "coloring": {
      "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
      "dflt": "fill",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fill",
       "heatmap",
       "lines",
       "none"
      ]
     },
     "editType": "calc",
     "end": {
      "description": "Sets the end contour level value. Must be more than `contours.start`",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "valType": "number"
     },
     "impliedEdits": {
      "autocontour": false,
      "role": "object"
     },
     "labelfont": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "labelformat": {
      "description": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "operation": {
      "description": "Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.",
      "dflt": "=",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "=",
       "<",
       ">=",
       ">",
       "<=",
       "[]",
       "()",
       "[)",
       "(]",
       "][",
       ")(",
       "](",
       ")["
      ]
     },
     "role": "object",
     "showlabels": {
      "description": "Determines whether to label the contour lines with their values.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showlines": {
      "description": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "size": {
      "description": "Sets the step between each contour level. Must be positive.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "min": 0,
      "valType": "number"
     },
     "start": {
      "description": "Sets the starting contour level value. Must be less than `contours.end`",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "valType": "number"
     },
     "type": {
      "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
      "dflt": "levels",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "levels",
       "constraint"
      ]
     },
     "value": {
      "description": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.",
      "dflt": 0,
      "editType": "calc",
      "valType": "any"
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "number"
    },
    "dy": {
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "number"
    },
    "fillcolor": {
     "description": "Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "calc",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoverongaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.",
     "dflt": true,
     "editType": "none",
     "valType": "boolean"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "description": "Same as `text`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.",
      "editType": "style+colorbars",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "plot",
     "role": "object",
     "smoothing": {
      "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
      "dflt": 1,
      "editType": "plot",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "width": {
      "description": "Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.",
      "editType": "style+colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "ncontours": {
     "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
     "dflt": 15,
     "editType": "calc",
     "min": 1,
     "valType": "integer"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets the text elements associated with each z value.",
     "editType": "calc",
     "valType": "data_array"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "transpose": {
     "description": "Transposes the z data.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "type": "contour",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "xtype": "array"
     },
     "valType": "data_array"
    },
    "x0": {
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "xtype": {
     "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "ytype": "array"
     },
     "valType": "data_array"
    },
    "y0": {
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "ytype": {
     "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "z": {
     "description": "Sets the z data.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "2dMap",
    "contour",
    "showLegend"
   ],
   "meta": {
    "description": "The data from which contour lines are computed is set in `z`. Data in `z` must be a {2D array} of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to *true*, the above behavior is flipped."
   },
   "type": "contour"
  },
  "contourcarpet": {
   "animatable": false,
   "attributes": {
    "a": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "xtype": "array"
     },
     "valType": "data_array"
    },
    "a0": {
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "any"
    },
    "asrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  a .",
     "editType": "none",
     "valType": "string"
    },
    "atype": {
     "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": false,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "autocontour": {
     "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "b": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "ytype": "array"
     },
     "valType": "data_array"
    },
    "b0": {
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "any"
    },
    "bsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  b .",
     "editType": "none",
     "valType": "string"
    },
    "btype": {
     "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "carpet": {
     "description": "The `carpet` of the carpet axes on which this contour trace lies",
     "editType": "calc",
     "valType": "string"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "contours": {
     "coloring": {
      "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
      "dflt": "fill",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fill",
       "lines",
       "none"
      ]
     },
     "editType": "calc",
     "end": {
      "description": "Sets the end contour level value. Must be more than `contours.start`",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "valType": "number"
     },
     "impliedEdits": {
      "autocontour": false,
      "role": "object"
     },
     "labelfont": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "labelformat": {
      "description": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "operation": {
      "description": "Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.",
      "dflt": "=",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "=",
       "<",
       ">=",
       ">",
       "<=",
       "[]",
       "()",
       "[)",
       "(]",
       "][",
       ")(",
       "](",
       ")["
      ]
     },
     "role": "object",
     "showlabels": {
      "description": "Determines whether to label the contour lines with their values.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showlines": {
      "description": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "size": {
      "description": "Sets the step between each contour level. Must be positive.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "min": 0,
      "valType": "number"
     },
     "start": {
      "description": "Sets the starting contour level value. Must be less than `contours.end`",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "valType": "number"
     },
     "type": {
      "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
      "dflt": "levels",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "levels",
       "constraint"
      ]
     },
     "value": {
      "description": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.",
      "dflt": 0,
      "editType": "calc",
      "valType": "any"
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "da": {
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "number"
    },
    "db": {
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "number"
    },
    "fillcolor": {
     "description": "Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "calc",
     "valType": "color"
    },
    "hovertext": {
     "description": "Same as `text`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.",
      "editType": "style+colorbars",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "plot",
     "role": "object",
     "smoothing": {
      "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
      "dflt": 1,
      "editType": "plot",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "width": {
      "description": "Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.",
      "editType": "style+colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "ncontours": {
     "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
     "dflt": 15,
     "editType": "calc",
     "min": 1,
     "valType": "integer"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets the text elements associated with each z value.",
     "editType": "calc",
     "valType": "data_array"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transpose": {
     "description": "Transposes the z data.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "type": "contourcarpet",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "z": {
     "description": "Sets the z data.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "carpet",
    "contour",
    "symbols",
    "showLegend",
    "hasLines",
    "carpetDependent",
    "noHover",
    "noSortingByValue"
   ],
   "meta": {
    "description": "Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis.",
    "hrName": "contour_carpet"
   },
   "type": "contourcarpet"
  },
  "densitymapbox": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "below": {
     "description": "Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.",
     "editType": "plot",
     "valType": "string"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "lon",
      "lat",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "lat": {
     "description": "Sets the latitude coordinates (in degrees North).",
     "editType": "calc",
     "valType": "data_array"
    },
    "latsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  lat .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "lon": {
     "description": "Sets the longitude coordinates (in degrees East).",
     "editType": "calc",
     "valType": "data_array"
    },
    "lonsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  lon .",
     "editType": "none",
     "valType": "string"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "radius": {
     "arrayOk": true,
     "description": "Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.",
     "dflt": 30,
     "editType": "plot",
     "min": 1,
     "valType": "number"
    },
    "radiussrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  radius .",
     "editType": "none",
     "valType": "string"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "subplot": {
     "description": "Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.",
     "dflt": "mapbox",
     "editType": "calc",
     "valType": "subplotid"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "densitymapbox",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "z": {
     "description": "Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "mapbox",
    "gl",
    "showLegend"
   ],
   "meta": {
    "description": "Draws a bivariate kernel density estimation with a Gaussian kernel from `lon` and `lat` coordinates and optional `z` values using a colorscale.",
    "hr_name": "density_mapbox"
   },
   "type": "densitymapbox"
  },
  "funnel": {
   "animatable": false,
   "attributes": {
    "alignmentgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "cliponaxis": {
     "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    },
    "connector": {
     "editType": "plot",
     "fillcolor": {
      "description": "Sets the fill color.",
      "editType": "style",
      "valType": "color"
     },
     "line": {
      "color": {
       "description": "Sets the line color.",
       "dflt": "#444",
       "editType": "style",
       "valType": "color"
      },
      "dash": {
       "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
       "dflt": "solid",
       "editType": "style",
       "valType": "string",
       "values": [
        "solid",
        "dot",
        "dash",
        "longdash",
        "dashdot",
        "longdashdot"
       ]
      },
      "editType": "style",
      "role": "object",
      "width": {
       "description": "Sets the line width (in px).",
       "dflt": 0,
       "editType": "plot",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "visible": {
      "description": "Determines if connector regions and lines are drawn.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     }
    },
    "constraintext": {
     "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
     "dflt": "both",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "inside",
      "outside",
      "both",
      "none"
     ]
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dy": {
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "name",
      "x",
      "y",
      "text",
      "percent initial",
      "percent previous",
      "percent total"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `percentInitial`, `percentPrevious` and `percentTotal`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "insidetextanchor": {
     "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
     "dflt": "middle",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "end",
      "middle",
      "start"
     ]
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text` lying inside the bar.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 0,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the opacity of the bars.",
      "dflt": 1,
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "offset": {
     "arrayOk": false,
     "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
     "dflt": null,
     "editType": "calc",
     "valType": "number"
    },
    "offsetgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "orientation": {
     "description": "Sets the orientation of the funnels. With *v* (*h*), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only *y* array is presented or orientation is set to *v*. Also regarding graphs including only 'horizontal' funnels, *autorange* on the *y-axis* are set to *reversed*.",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "outsidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text` lying outside the bar.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textangle": {
     "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
     "dflt": 0,
     "editType": "plot",
     "valType": "angle"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text`.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textinfo": {
     "arrayOk": false,
     "description": "Determines which trace information appear on the graph. In the case of having multiple funnels, percentages & totals are computed separately (per trace).",
     "editType": "plot",
     "extras": [
      "none"
     ],
     "flags": [
      "label",
      "text",
      "percent initial",
      "percent previous",
      "percent total",
      "value"
     ],
     "valType": "flaglist"
    },
    "textposition": {
     "arrayOk": true,
     "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
     "dflt": "auto",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "inside",
      "outside",
      "auto",
      "none"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `percentInitial`, `percentPrevious`, `percentTotal`, `label` and `value`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "funnel",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "width": {
     "arrayOk": false,
     "description": "Sets the bar width (in position axis units).",
     "dflt": null,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "x0": {
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "y0": {
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "bar-like",
    "cartesian",
    "svg",
    "oriented",
    "showLegend",
    "zoomScale"
   ],
   "layoutAttributes": {
    "funnelgap": {
     "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "funnelgroupgap": {
     "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
     "dflt": 0,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "funnelmode": {
     "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
     "dflt": "stack",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "stack",
      "group",
      "overlay"
     ]
    }
   },
   "meta": {
    "description": "Visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a \"drop-off\" representation wherein each item appears in each stage it traversed. See also the \"funnelarea\" trace type for a different approach to visualizing funnel data."
   },
   "type": "funnel"
  },
  "funnelarea": {
   "animatable": false,
   "attributes": {
    "aspectratio": {
     "description": "Sets the ratio between height and width",
     "dflt": 1,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "baseratio": {
     "description": "Sets the ratio between bottom length and maximum top length.",
     "dflt": 0.333,
     "editType": "plot",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dlabel": {
     "description": "Sets the label step. See `label0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this funnelarea trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this funnelarea trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "percent",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `text` and `percent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying inside the sector.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "label0": {
     "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.",
     "dflt": 0,
     "editType": "calc",
     "valType": "number"
    },
    "labels": {
     "description": "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.",
     "editType": "calc",
     "valType": "data_array"
    },
    "labelssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  labels .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "colors": {
      "description": "Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.",
      "editType": "calc",
      "valType": "data_array"
     },
     "colorssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  colors .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.",
       "dflt": null,
       "editType": "style",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the line enclosing each sector.",
       "dflt": 1,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "role": "object"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "scalegroup": {
     "description": "If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "editType": "plot",
     "valType": "data_array"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo`.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textinfo": {
     "description": "Determines which trace information appear on the graph.",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "percent"
     ],
     "valType": "flaglist"
    },
    "textposition": {
     "arrayOk": true,
     "description": "Specifies the location of the `textinfo`.",
     "dflt": "inside",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "inside",
      "none"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `text` and `percent`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "title": {
     "editType": "plot",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "plot",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used for `title`. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
      "editType": "plot",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "plot",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "position": {
      "description": "Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.",
      "dflt": "top center",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "top left",
       "top center",
       "top right"
      ]
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the chart. If it is empty, no title is displayed. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "funnelarea",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "values": {
     "description": "Sets the values of the sectors. If omitted, we count occurrences of each label.",
     "editType": "calc",
     "valType": "data_array"
    },
    "valuessrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  values .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "pie-like",
    "funnelarea",
    "showLegend"
   ],
   "layoutAttributes": {
    "extendfunnelareacolors": {
     "description": "If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "funnelareacolorway": {
     "description": "Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.",
     "editType": "calc",
     "valType": "colorlist"
    },
    "hiddenlabels": {
     "description": "hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts",
     "editType": "calc",
     "valType": "data_array"
    },
    "hiddenlabelssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hiddenlabels .",
     "editType": "none",
     "valType": "string"
    }
   },
   "meta": {
    "description": "Visualize stages in a process using area-encoded trapezoids. This trace can be used to show data in a part-to-whole representation similar to a \"pie\" trace, wherein each item appears in a single stage. See also the \"funnel\" trace type for a different approach to visualizing funnel data."
   },
   "type": "funnelarea"
  },
  "heatmap": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": false,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array and `zsmooth` is not false; otherwise it is defaulted to false.",
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "number"
    },
    "dy": {
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "number"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoverongaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.",
     "dflt": true,
     "editType": "none",
     "valType": "boolean"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "description": "Same as `text`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets the text elements associated with each z value.",
     "editType": "calc",
     "valType": "data_array"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "transpose": {
     "description": "Transposes the z data.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "type": "heatmap",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "xtype": "array"
     },
     "valType": "data_array"
    },
    "x0": {
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xgap": {
     "description": "Sets the horizontal gap (in pixels) between bricks.",
     "dflt": 0,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "xtype": {
     "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "ytype": "array"
     },
     "valType": "data_array"
    },
    "y0": {
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "ygap": {
     "description": "Sets the vertical gap (in pixels) between bricks.",
     "dflt": 0,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "ytype": {
     "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "z": {
     "description": "Sets the z data.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsmooth": {
     "description": "Picks a smoothing algorithm use to smooth `z` data.",
     "dflt": false,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "fast",
      "best",
      false
     ]
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "2dMap",
    "showLegend"
   ],
   "meta": {
    "description": "The data that describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a {2D array} of values (ragged or not) or a 1D array of values. In the case where `z` is a {2D array}, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements. If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D {array}, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets."
   },
   "type": "heatmap"
  },
  "heatmapgl": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": false,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "calc",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "calc",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "calc",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "calc",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "calc",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "calc",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "calc",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "calc",
         "items": [
          {
           "editType": "calc",
           "valType": "any"
          },
          {
           "editType": "calc",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "calc",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "calc",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "calc",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "calc",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "calc",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "calc",
      "font": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "calc",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "number"
    },
    "dy": {
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "number"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets the text elements associated with each z value.",
     "editType": "calc",
     "valType": "data_array"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "transpose": {
     "description": "Transposes the z data.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "type": "heatmapgl",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc",
     "impliedEdits": {
      "xtype": "array"
     },
     "valType": "data_array"
    },
    "x0": {
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc",
     "impliedEdits": {
      "xtype": "scaled"
     },
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "xtype": {
     "description": "If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc",
     "impliedEdits": {
      "ytype": "array"
     },
     "valType": "data_array"
    },
    "y0": {
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc",
     "impliedEdits": {
      "ytype": "scaled"
     },
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "ytype": {
     "description": "If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "array",
      "scaled"
     ]
    },
    "z": {
     "description": "Sets the z data.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsmooth": {
     "description": "Picks a smoothing algorithm use to smooth `z` data.",
     "dflt": "fast",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "fast",
      false
     ]
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl",
    "gl2d",
    "2dMap"
   ],
   "meta": {
    "description": "*heatmapgl* trace is deprecated! Please consider switching to the *heatmap* or *image* trace types. Alternatively you could contribute/sponsor rewriting this trace type based on cartesian features and using regl framework. WebGL version of the heatmap trace type."
   },
   "type": "heatmapgl"
  },
  "histogram": {
   "animatable": false,
   "attributes": {
    "_deprecated": {
     "bardir": {
      "description": "Renamed to `orientation`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "v",
       "h"
      ]
     }
    },
    "alignmentgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "autobinx": {
     "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.",
     "dflt": null,
     "editType": "calc",
     "valType": "boolean"
    },
    "autobiny": {
     "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.",
     "dflt": null,
     "editType": "calc",
     "valType": "boolean"
    },
    "bingroup": {
     "description": "Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same *orientation* under `barmode` *stack*, *relative* and *group* are forced into the same bingroup, Using `bingroup`, traces under `barmode` *overlay* and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d* trace can share the same `bingroup`",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "cumulative": {
     "currentbin": {
      "description": "Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. *include* is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. *exclude* makes the opposite half-bin bias, and *half* removes it.",
      "dflt": "include",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "include",
       "exclude",
       "half"
      ]
     },
     "direction": {
      "description": "Only applies if cumulative is enabled. If *increasing* (default) we sum all prior bins, so the result increases from left to right. If *decreasing* we sum later bins so the result decreases from left to right.",
      "dflt": "increasing",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "increasing",
       "decreasing"
      ]
     },
     "editType": "calc",
     "enabled": {
      "description": "If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the *density* `histnorm` settings behave the same as their equivalents without *density*: ** and *density* both rise to the number of data points, and *probability* and *probability density* both rise to the number of sample points.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "role": "object"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "error_x": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "style",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "style",
      "valType": "color"
     },
     "copy_ystyle": {
      "editType": "plot",
      "valType": "boolean"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "plot",
      "min": 0,
      "valType": "number"
     }
    },
    "error_y": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "style",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "style",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "plot",
      "min": 0,
      "valType": "number"
     }
    },
    "histfunc": {
     "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
     "dflt": "count",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "count",
      "sum",
      "avg",
      "min",
      "max"
     ]
    },
    "histnorm": {
     "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
     "dflt": "",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "",
      "percent",
      "probability",
      "density",
      "probability density"
     ]
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `binNumber` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 0,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the opacity of the bars.",
      "dflt": 1,
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "pattern": {
      "bgcolor": {
       "arrayOk": true,
       "description": "When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is *overlay*. Otherwise, defaults to a transparent background.",
       "editType": "style",
       "valType": "color"
      },
      "bgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the pattern within the marker.",
      "editType": "style",
      "fgcolor": {
       "arrayOk": true,
       "description": "When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is *replace*. Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.",
       "editType": "style",
       "valType": "color"
      },
      "fgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  fgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "fgopacity": {
       "description": "Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "fillmode": {
       "description": "Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.",
       "dflt": "replace",
       "editType": "style",
       "valType": "enumerated",
       "values": [
        "replace",
        "overlay"
       ]
      },
      "role": "object",
      "shape": {
       "arrayOk": true,
       "description": "Sets the shape of the pattern fill. By default, no pattern is used for filling the area.",
       "dflt": "",
       "editType": "style",
       "valType": "enumerated",
       "values": [
        "",
        "/",
        "\\",
        "x",
        "-",
        "|",
        "+",
        "."
       ]
      },
      "shapesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  shape .",
       "editType": "none",
       "valType": "string"
      },
      "size": {
       "arrayOk": true,
       "description": "Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.",
       "dflt": 8,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      },
      "solidity": {
       "arrayOk": true,
       "description": "Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.",
       "dflt": 0.3,
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "soliditysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  solidity .",
       "editType": "none",
       "valType": "string"
      }
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "nbinsx": {
     "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "integer"
    },
    "nbinsy": {
     "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "integer"
    },
    "offsetgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "orientation": {
     "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "histogram",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object"
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the sample data to be binned on the x axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xbins": {
     "editType": "calc",
     "end": {
      "description": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.",
      "editType": "calc",
      "valType": "any"
     },
     "role": "object",
     "size": {
      "description": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.",
      "editType": "calc",
      "valType": "any"
     },
     "start": {
      "description": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.",
      "editType": "calc",
      "valType": "any"
     }
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the sample data to be binned on the y axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ybins": {
     "editType": "calc",
     "end": {
      "description": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.",
      "editType": "calc",
      "valType": "any"
     },
     "role": "object",
     "size": {
      "description": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.",
      "editType": "calc",
      "valType": "any"
     },
     "start": {
      "description": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.",
      "editType": "calc",
      "valType": "any"
     }
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "bar-like",
    "cartesian",
    "svg",
    "bar",
    "histogram",
    "oriented",
    "errorBarsOK",
    "showLegend"
   ],
   "layoutAttributes": {
    "bargap": {
     "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "bargroupgap": {
     "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
     "dflt": 0,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "barmode": {
     "description": "Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
     "dflt": "group",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "stack",
      "group",
      "overlay",
      "relative"
     ]
    },
    "barnorm": {
     "description": "Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divided by the sum of all values at that location coordinate. *percent* is the same but multiplied by 100 to show percentages.",
     "dflt": "",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "",
      "fraction",
      "percent"
     ]
    }
   },
   "meta": {
    "description": "The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided."
   },
   "type": "histogram"
  },
  "histogram2d": {
   "animatable": false,
   "attributes": {
    "autobinx": {
     "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.",
     "dflt": null,
     "editType": "calc",
     "valType": "boolean"
    },
    "autobiny": {
     "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.",
     "dflt": null,
     "editType": "calc",
     "valType": "boolean"
    },
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": false,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "bingroup": {
     "description": "Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of *1* on two histogram2d traces will make them their x-bins and y-bins match separately.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "histfunc": {
     "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
     "dflt": "count",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "count",
      "sum",
      "avg",
      "min",
      "max"
     ]
    },
    "histnorm": {
     "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
     "dflt": "",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "",
      "percent",
      "probability",
      "density",
      "probability density"
     ]
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "color": {
      "description": "Sets the aggregation data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "role": "object"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "nbinsx": {
     "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "integer"
    },
    "nbinsy": {
     "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "integer"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "histogram2d",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the sample data to be binned on the x axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xbingroup": {
     "description": "Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "xbins": {
     "editType": "calc",
     "end": {
      "description": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.",
      "editType": "calc",
      "valType": "any"
     },
     "role": "object",
     "size": {
      "description": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). ",
      "editType": "calc",
      "valType": "any"
     },
     "start": {
      "description": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. ",
      "editType": "calc",
      "valType": "any"
     }
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xgap": {
     "description": "Sets the horizontal gap (in pixels) between bricks.",
     "dflt": 0,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the sample data to be binned on the y axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ybingroup": {
     "description": "Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "ybins": {
     "editType": "calc",
     "end": {
      "description": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.",
      "editType": "calc",
      "valType": "any"
     },
     "role": "object",
     "size": {
      "description": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). ",
      "editType": "calc",
      "valType": "any"
     },
     "start": {
      "description": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. ",
      "editType": "calc",
      "valType": "any"
     }
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "ygap": {
     "description": "Sets the vertical gap (in pixels) between bricks.",
     "dflt": 0,
     "editType": "plot",
     "min": 0,
     "valType": "number"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the aggregation data.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "plot",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsmooth": {
     "description": "Picks a smoothing algorithm use to smooth `z` data.",
     "dflt": false,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "fast",
      "best",
      false
     ]
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "2dMap",
    "histogram",
    "showLegend"
   ],
   "meta": {
    "description": "The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap.",
    "hrName": "histogram_2d"
   },
   "type": "histogram2d"
  },
  "histogram2dcontour": {
   "animatable": false,
   "attributes": {
    "autobinx": {
     "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.",
     "dflt": null,
     "editType": "calc",
     "valType": "boolean"
    },
    "autobiny": {
     "description": "Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.",
     "dflt": null,
     "editType": "calc",
     "valType": "boolean"
    },
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "autocontour": {
     "description": "Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "bingroup": {
     "description": "Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of *1* on two histogram2d traces will make them their x-bins and y-bins match separately.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "contours": {
     "coloring": {
      "description": "Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.",
      "dflt": "fill",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fill",
       "heatmap",
       "lines",
       "none"
      ]
     },
     "editType": "calc",
     "end": {
      "description": "Sets the end contour level value. Must be more than `contours.start`",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "valType": "number"
     },
     "impliedEdits": {
      "autocontour": false,
      "role": "object"
     },
     "labelfont": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "labelformat": {
      "description": "Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "operation": {
      "description": "Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.",
      "dflt": "=",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "=",
       "<",
       ">=",
       ">",
       "<=",
       "[]",
       "()",
       "[)",
       "(]",
       "][",
       ")(",
       "](",
       ")["
      ]
     },
     "role": "object",
     "showlabels": {
      "description": "Determines whether to label the contour lines with their values.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "showlines": {
      "description": "Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "size": {
      "description": "Sets the step between each contour level. Must be positive.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "min": 0,
      "valType": "number"
     },
     "start": {
      "description": "Sets the starting contour level value. Must be less than `contours.end`",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "^autocontour": false
      },
      "valType": "number"
     },
     "type": {
      "description": "If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.",
      "dflt": "levels",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "levels",
       "constraint"
      ]
     },
     "value": {
      "description": "Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.",
      "dflt": 0,
      "editType": "calc",
      "valType": "any"
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "histfunc": {
     "description": "Specifies the binning function used for this histogram trace. If *count*, the histogram values are computed by counting the number of values lying inside each bin. If *sum*, *avg*, *min*, *max*, the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.",
     "dflt": "count",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "count",
      "sum",
      "avg",
      "min",
      "max"
     ]
    },
    "histnorm": {
     "description": "Specifies the type of normalization used for this histogram trace. If **, the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If *percent* / *probability*, the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If *density*, the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If *probability density*, the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).",
     "dflt": "",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "",
      "percent",
      "probability",
      "density",
      "probability density"
     ]
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.",
      "editType": "style+colorbars",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "plot",
     "role": "object",
     "smoothing": {
      "description": "Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.",
      "dflt": 1,
      "editType": "plot",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "width": {
      "description": "Sets the contour line width in (in px)",
      "dflt": 0.5,
      "editType": "style+colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "color": {
      "description": "Sets the aggregation data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "role": "object"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "nbinsx": {
     "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "integer"
    },
    "nbinsy": {
     "description": "Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "integer"
    },
    "ncontours": {
     "description": "Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.",
     "dflt": 15,
     "editType": "calc",
     "min": 1,
     "valType": "integer"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "histogram2dcontour",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the sample data to be binned on the x axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xbingroup": {
     "description": "Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "xbins": {
     "editType": "calc",
     "end": {
      "description": "Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.",
      "editType": "calc",
      "valType": "any"
     },
     "role": "object",
     "size": {
      "description": "Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). ",
      "editType": "calc",
      "valType": "any"
     },
     "start": {
      "description": "Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. ",
      "editType": "calc",
      "valType": "any"
     }
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the sample data to be binned on the y axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ybingroup": {
     "description": "Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "ybins": {
     "editType": "calc",
     "end": {
      "description": "Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.",
      "editType": "calc",
      "valType": "any"
     },
     "role": "object",
     "size": {
      "description": "Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or *M<n>* for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). ",
      "editType": "calc",
      "valType": "any"
     },
     "start": {
      "description": "Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. ",
      "editType": "calc",
      "valType": "any"
     }
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the aggregation data.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax`  Defaults to `false` when `zmin` and `zmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "zmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zmid": {
     "description": "Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "zmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "zauto": false
     },
     "valType": "number"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "2dMap",
    "contour",
    "histogram",
    "showLegend"
   ],
   "meta": {
    "description": "The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot.",
    "hrName": "histogram_2d_contour"
   },
   "type": "histogram2dcontour"
  },
  "icicle": {
   "animatable": true,
   "attributes": {
    "branchvalues": {
     "description": "Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.",
     "dflt": "remainder",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "remainder",
      "total"
     ]
    },
    "count": {
     "description": "Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.",
     "dflt": "leaves",
     "editType": "calc",
     "flags": [
      "branches",
      "leaves"
     ],
     "valType": "flaglist"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this icicle trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this icicle trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this icicle trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this icicle trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "label+text+value+name",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "name",
      "current path",
      "percent root",
      "percent entry",
      "percent parent"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "anim": true,
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying inside the sector.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "labels": {
     "description": "Sets the labels of each of the sectors.",
     "editType": "calc",
     "valType": "data_array"
    },
    "labelssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  labels .",
     "editType": "none",
     "valType": "string"
    },
    "leaf": {
     "editType": "plot",
     "opacity": {
      "description": "Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7",
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "role": "object"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "level": {
     "anim": true,
     "description": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.",
     "editType": "plot",
     "valType": "any"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colorsis set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if colorsis set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colors": {
      "description": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.",
      "editType": "calc",
      "valType": "data_array"
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if colorsis set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  colors .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.",
       "dflt": null,
       "editType": "style",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the line enclosing each sector.",
       "dflt": 1,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if colorsis set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colorsis set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "maxdepth": {
     "description": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.",
     "dflt": -1,
     "editType": "plot",
     "valType": "integer"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "outsidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "parents": {
     "description": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.",
     "editType": "calc",
     "valType": "data_array"
    },
    "parentssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  parents .",
     "editType": "none",
     "valType": "string"
    },
    "pathbar": {
     "edgeshape": {
      "description": "Determines which shape is used for edges between `barpath` labels.",
      "dflt": ">",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       ">",
       "<",
       "|",
       "/",
       "\\"
      ]
     },
     "editType": "calc",
     "role": "object",
     "side": {
      "description": "Determines on which side of the the treemap the `pathbar` should be presented.",
      "dflt": "top",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "top",
       "bottom"
      ]
     },
     "textfont": {
      "color": {
       "arrayOk": true,
       "editType": "plot",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used inside `pathbar`.",
      "editType": "plot",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "plot",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "thickness": {
      "description": "Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.",
      "editType": "plot",
      "min": 12,
      "valType": "number"
     },
     "visible": {
      "description": "Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     }
    },
    "root": {
     "color": {
      "description": "sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object"
    },
    "sort": {
     "description": "Determines whether or not the sectors are reordered from largest to smallest.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "editType": "plot",
     "valType": "data_array"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo`.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textinfo": {
     "description": "Determines which trace information appear on the graph.",
     "editType": "plot",
     "extras": [
      "none"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "current path",
      "percent root",
      "percent entry",
      "percent parent"
     ],
     "valType": "flaglist"
    },
    "textposition": {
     "description": "Sets the positions of the `text` elements.",
     "dflt": "top left",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "tiling": {
     "editType": "calc",
     "flip": {
      "description": "Determines if the positions obtained from solver are flipped on each axis.",
      "dflt": "",
      "editType": "plot",
      "flags": [
       "x",
       "y"
      ],
      "valType": "flaglist"
     },
     "orientation": {
      "description": "When set in conjunction with `tiling.flip`, determines on which side the root nodes are drawn in the chart. If `tiling.orientation` is *v* and `tiling.flip` is **, the root nodes appear at the top. If `tiling.orientation` is *v* and `tiling.flip` is *y*, the root nodes appear at the bottom. If `tiling.orientation` is *h* and `tiling.flip` is **, the root nodes appear at the left. If `tiling.orientation` is *h* and `tiling.flip` is *x*, the root nodes appear at the right.",
      "dflt": "h",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "v",
       "h"
      ]
     },
     "pad": {
      "description": "Sets the inner padding (in px).",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "role": "object"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "icicle",
    "uid": {
     "anim": true,
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "values": {
     "description": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.",
     "editType": "calc",
     "valType": "data_array"
    },
    "valuessrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  values .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [],
   "layoutAttributes": {
    "extendiciclecolors": {
     "description": "If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "iciclecolorway": {
     "description": "Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.",
     "editType": "calc",
     "valType": "colorlist"
    }
   },
   "meta": {
    "description": "Visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles. The icicle sectors are determined by the entries in *labels* or *ids* and in *parents*."
   },
   "type": "icicle"
  },
  "image": {
   "animatable": false,
   "attributes": {
    "colormodel": {
     "description": "Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "rgb",
      "rgba",
      "rgba256",
      "hsl",
      "hsla"
     ]
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "description": "Set the pixel's horizontal size.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dy": {
     "description": "Set the pixel's vertical size",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "x+y+z+text+name",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "color",
      "name",
      "text"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `z`, `color` and `colormodel`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "description": "Same as `text`.",
     "editType": "plot",
     "valType": "data_array"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "source": {
     "description": "Specifies the data URI of the image to be visualized. The URI consists of \"data:image/[<media subtype>][;base64],<data>\"",
     "editType": "calc",
     "valType": "string"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets the text elements associated with each z value.",
     "editType": "plot",
     "valType": "data_array"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "type": "image",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x0": {
     "description": "Set the image's x position.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "y0": {
     "description": "Set the image's y position.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "z": {
     "description": "A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.",
     "editType": "calc",
     "valType": "data_array"
    },
    "zmax": {
     "description": "Array defining the higher bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [255, 255, 255]. For the `rgba` colormodel, it is [255, 255, 255, 1]. For the `rgba256` colormodel, it is [255, 255, 255, 255]. For the `hsl` colormodel, it is [360, 100, 100]. For the `hsla` colormodel, it is [360, 100, 100, 1].",
     "editType": "calc",
     "items": [
      {
       "editType": "calc",
       "valType": "number"
      },
      {
       "editType": "calc",
       "valType": "number"
      },
      {
       "editType": "calc",
       "valType": "number"
      },
      {
       "editType": "calc",
       "valType": "number"
      }
     ],
     "valType": "info_array"
    },
    "zmin": {
     "description": "Array defining the lower bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [0, 0, 0]. For the `rgba` colormodel, it is [0, 0, 0, 0]. For the `rgba256` colormodel, it is [0, 0, 0, 0]. For the `hsl` colormodel, it is [0, 0, 0]. For the `hsla` colormodel, it is [0, 0, 0, 0].",
     "editType": "calc",
     "items": [
      {
       "editType": "calc",
       "valType": "number"
      },
      {
       "editType": "calc",
       "valType": "number"
      },
      {
       "editType": "calc",
       "valType": "number"
      },
      {
       "editType": "calc",
       "valType": "number"
      }
     ],
     "valType": "info_array"
    },
    "zsmooth": {
     "description": "Picks a smoothing algorithm used to smooth `z` data. This only applies for image traces that use the `source` attribute.",
     "dflt": false,
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "fast",
      false
     ]
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "2dMap",
    "noSortingByValue"
   ],
   "meta": {
    "description": "Display an image, i.e. data on a 2D regular raster. By default, when an image is displayed in a subplot, its y axis will be reversed (ie. `autorange: 'reversed'`), constrained to the domain (ie. `constrain: 'domain'`) and it will have the same scale as its x axis (ie. `scaleanchor: 'x,`) in order for pixels to be rendered as squares."
   },
   "type": "image"
  },
  "indicator": {
   "animatable": true,
   "attributes": {
    "align": {
     "description": "Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "left",
      "center",
      "right"
     ]
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "delta": {
     "decreasing": {
      "color": {
       "description": "Sets the color for increasing value.",
       "dflt": "#FF4136",
       "editType": "plot",
       "valType": "color"
      },
      "editType": "plot",
      "role": "object",
      "symbol": {
       "description": "Sets the symbol to display for increasing value",
       "dflt": "▼",
       "editType": "plot",
       "valType": "string"
      }
     },
     "editType": "calc",
     "font": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Set the font used to display the delta",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "increasing": {
      "color": {
       "description": "Sets the color for increasing value.",
       "dflt": "#3D9970",
       "editType": "plot",
       "valType": "color"
      },
      "editType": "plot",
      "role": "object",
      "symbol": {
       "description": "Sets the symbol to display for increasing value",
       "dflt": "▲",
       "editType": "plot",
       "valType": "string"
      }
     },
     "position": {
      "description": "Sets the position of delta with respect to the number.",
      "dflt": "bottom",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "top",
       "bottom",
       "left",
       "right"
      ]
     },
     "reference": {
      "description": "Sets the reference value to compute the delta. By default, it is set to the current value.",
      "editType": "calc",
      "valType": "number"
     },
     "relative": {
      "description": "Show relative change",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "valueformat": {
      "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
      "editType": "plot",
      "valType": "string"
     }
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this indicator trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this indicator trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this indicator trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this indicator trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "gauge": {
     "axis": {
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "plot",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "plot",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "plot",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "plot",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "plot",
       "min": 0,
       "valType": "integer"
      },
      "range": {
       "description": "Sets the range of this axis.",
       "editType": "plot",
       "items": [
        {
         "editType": "plot",
         "valType": "number"
        },
        {
         "editType": "plot",
         "valType": "number"
        }
       ],
       "valType": "info_array"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "plot",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "plot",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "plot",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "plot",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "plot",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "plot",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "plot",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "plot",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "plot",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "plot",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "plot",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "plot",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "plot",
          "items": [
           {
            "editType": "plot",
            "valType": "any"
           },
           {
            "editType": "plot",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "plot",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "plot",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "plot",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "plot",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "plot",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "plot",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "plot",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "plot",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "outside",
       "editType": "plot",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "plot",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "plot",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "plot",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "plot",
       "min": 0,
       "valType": "number"
      },
      "visible": {
       "description": "A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false",
       "dflt": true,
       "editType": "plot",
       "valType": "boolean"
      }
     },
     "bar": {
      "color": {
       "description": "Sets the background color of the arc.",
       "dflt": "green",
       "editType": "plot",
       "valType": "color"
      },
      "description": "Set the appearance of the gauge's value",
      "editType": "calc",
      "line": {
       "color": {
        "description": "Sets the color of the line enclosing each sector.",
        "dflt": "#444",
        "editType": "plot",
        "valType": "color"
       },
       "editType": "calc",
       "role": "object",
       "width": {
        "description": "Sets the width (in px) of the line enclosing each sector.",
        "dflt": 0,
        "editType": "plot",
        "min": 0,
        "valType": "number"
       }
      },
      "role": "object",
      "thickness": {
       "description": "Sets the thickness of the bar as a fraction of the total thickness of the gauge.",
       "dflt": 1,
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      }
     },
     "bgcolor": {
      "description": "Sets the gauge background color.",
      "editType": "plot",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the color of the border enclosing the gauge.",
      "dflt": "#444",
      "editType": "plot",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) of the border enclosing the gauge.",
      "dflt": 1,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "description": "The gauge of the Indicator plot.",
     "editType": "plot",
     "role": "object",
     "shape": {
      "description": "Set the shape of the gauge",
      "dflt": "angular",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "angular",
       "bullet"
      ]
     },
     "steps": {
      "items": {
       "step": {
        "color": {
         "description": "Sets the background color of the arc.",
         "editType": "plot",
         "valType": "color"
        },
        "editType": "calc",
        "line": {
         "color": {
          "description": "Sets the color of the line enclosing each sector.",
          "dflt": "#444",
          "editType": "plot",
          "valType": "color"
         },
         "editType": "calc",
         "role": "object",
         "width": {
          "description": "Sets the width (in px) of the line enclosing each sector.",
          "dflt": 0,
          "editType": "plot",
          "min": 0,
          "valType": "number"
         }
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "none",
         "valType": "string"
        },
        "range": {
         "description": "Sets the range of this axis.",
         "editType": "plot",
         "items": [
          {
           "editType": "plot",
           "valType": "number"
          },
          {
           "editType": "plot",
           "valType": "number"
          }
         ],
         "valType": "info_array"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "thickness": {
         "description": "Sets the thickness of the bar as a fraction of the total thickness of the gauge.",
         "dflt": 1,
         "editType": "plot",
         "max": 1,
         "min": 0,
         "valType": "number"
        }
       }
      },
      "role": "object"
     },
     "threshold": {
      "editType": "plot",
      "line": {
       "color": {
        "description": "Sets the color of the threshold line.",
        "dflt": "#444",
        "editType": "plot",
        "valType": "color"
       },
       "editType": "plot",
       "role": "object",
       "width": {
        "description": "Sets the width (in px) of the threshold line.",
        "dflt": 1,
        "editType": "plot",
        "min": 0,
        "valType": "number"
       }
      },
      "role": "object",
      "thickness": {
       "description": "Sets the thickness of the threshold line as a fraction of the thickness of the gauge.",
       "dflt": 0.85,
       "editType": "plot",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "value": {
       "description": "Sets a treshold value drawn as a line.",
       "dflt": false,
       "editType": "calc",
       "valType": "number"
      }
     }
    },
    "ids": {
     "anim": true,
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.",
     "dflt": "number",
     "editType": "calc",
     "flags": [
      "number",
      "delta",
      "gauge"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "number": {
     "editType": "plot",
     "font": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Set the font used to display main number",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "prefix": {
      "description": "Sets a prefix appearing before the number.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "role": "object",
     "suffix": {
      "description": "Sets a suffix appearing next to the number.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "valueformat": {
      "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     }
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "title": {
     "align": {
      "description": "Sets the horizontal alignment of the title. It defaults to `center` except for bullet charts for which it defaults to right.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "editType": "plot",
     "font": {
      "color": {
       "editType": "plot",
       "valType": "color"
      },
      "description": "Set the font used to display the title",
      "editType": "plot",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of this indicator.",
      "editType": "plot",
      "valType": "string"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "indicator",
    "uid": {
     "anim": true,
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "value": {
     "anim": true,
     "description": "Sets the number to be displayed.",
     "editType": "calc",
     "valType": "number"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "svg",
    "noOpacity",
    "noHover"
   ],
   "meta": {
    "description": "An indicator is used to visualize a single `value` along with some contextual information such as `steps` or a `threshold`, using a combination of three visual elements: a number, a delta, and/or a gauge. Deltas are taken with respect to a `reference`. Gauges can be either angular or bullet (aka linear) gauges."
   },
   "type": "indicator"
  },
  "isosurface": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "caps": {
     "editType": "calc",
     "role": "object",
     "x": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "show": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "y": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "show": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "z": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "show": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      }
     }
    },
    "cauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "cmid": {
     "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "cmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "calc",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "calc",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "calc",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "calc",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "calc",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "calc",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "calc",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "calc",
         "items": [
          {
           "editType": "calc",
           "valType": "any"
          },
          {
           "editType": "calc",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "calc",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "calc",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "calc",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "calc",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "calc",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "calc",
      "font": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "calc",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "contour": {
     "color": {
      "description": "Sets the color of the contour lines.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "show": {
      "description": "Sets whether or not dynamic contours are shown on hover",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width of the contour lines.",
      "dflt": 2,
      "editType": "calc",
      "max": 16,
      "min": 1,
      "valType": "number"
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "flatshading": {
     "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "isomax": {
     "description": "Sets the maximum boundary for iso-surface plot.",
     "editType": "calc",
     "valType": "number"
    },
    "isomin": {
     "description": "Sets the minimum boundary for iso-surface plot.",
     "editType": "calc",
     "valType": "number"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "lighting": {
     "ambient": {
      "description": "Ambient light increases overall color visibility but can wash out the image.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "diffuse": {
      "description": "Represents the extent that incident rays are reflected in a range of angles.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "facenormalsepsilon": {
      "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 0,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "fresnel": {
      "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
      "dflt": 0.2,
      "editType": "calc",
      "max": 5,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "roughness": {
      "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
      "dflt": 0.5,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "specular": {
      "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
      "dflt": 0.05,
      "editType": "calc",
      "max": 2,
      "min": 0,
      "valType": "number"
     },
     "vertexnormalsepsilon": {
      "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 1e-12,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     }
    },
    "lightposition": {
     "editType": "calc",
     "role": "object",
     "x": {
      "description": "Numeric vector, representing the X coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "y": {
      "description": "Numeric vector, representing the Y coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "z": {
      "description": "Numeric vector, representing the Z coordinate for each vertex.",
      "dflt": 0,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "scene": {
     "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
     "dflt": "scene",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "slices": {
     "editType": "calc",
     "role": "object",
     "x": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "locations": {
       "description": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.",
       "dflt": [],
       "editType": "calc",
       "valType": "data_array"
      },
      "locationssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  locations .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not slice planes about the x dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "y": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "locations": {
       "description": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.",
       "dflt": [],
       "editType": "calc",
       "valType": "data_array"
      },
      "locationssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  locations .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not slice planes about the y dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "z": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "locations": {
       "description": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.",
       "dflt": [],
       "editType": "calc",
       "valType": "data_array"
      },
      "locationssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  locations .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not slice planes about the z dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     }
    },
    "spaceframe": {
     "editType": "calc",
     "fill": {
      "description": "Sets the fill ratio of the `spaceframe` elements. The default fill value is 0.15 meaning that only 15% of the area of every faces of tetras would be shaded. Applying a greater `fill` ratio would allow the creation of stronger elements or could be sued to have entirely closed areas (in case of using 1).",
      "dflt": 0.15,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "show": {
      "description": "Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "surface": {
     "count": {
      "description": "Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.",
      "dflt": 2,
      "editType": "calc",
      "min": 1,
      "valType": "integer"
     },
     "editType": "calc",
     "fill": {
      "description": "Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
      "dflt": 1,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "pattern": {
      "description": "Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.",
      "dflt": "all",
      "editType": "calc",
      "extras": [
       "all",
       "odd",
       "even"
      ],
      "flags": [
       "A",
       "B",
       "C",
       "D",
       "E"
      ],
      "valType": "flaglist"
     },
     "role": "object",
     "show": {
      "description": "Hides/displays surfaces between minimum and maximum iso-values.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "type": "isosurface",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "value": {
     "description": "Sets the 4th dimension (value) of the vertices.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "valuehoverformat": {
     "description": "Sets the hover text formatting rulefor `value`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "valuesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  value .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the X coordinates of the vertices on X axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the Y coordinates of the vertices on Y axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the Z coordinates of the vertices on Z axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl3d",
    "showLegend"
   ],
   "meta": {
    "description": "Draws isosurfaces between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid. Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace."
   },
   "type": "isosurface"
  },
  "mesh3d": {
   "animatable": false,
   "attributes": {
    "alphahull": {
     "description": "Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.",
     "dflt": -1,
     "editType": "calc",
     "valType": "number"
    },
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "cmid": {
     "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "cmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "color": {
     "description": "Sets the color of the whole mesh",
     "editType": "calc",
     "valType": "color"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "contour": {
     "color": {
      "description": "Sets the color of the contour lines.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "show": {
      "description": "Sets whether or not dynamic contours are shown on hover",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width of the contour lines.",
      "dflt": 2,
      "editType": "calc",
      "max": 16,
      "min": 1,
      "valType": "number"
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "delaunayaxis": {
     "description": "Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.",
     "dflt": "z",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "x",
      "y",
      "z"
     ]
    },
    "facecolor": {
     "description": "Sets the color of each face Overrides *color* and *vertexcolor*.",
     "editType": "calc",
     "valType": "data_array"
    },
    "facecolorsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  facecolor .",
     "editType": "none",
     "valType": "string"
    },
    "flatshading": {
     "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "i": {
     "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.",
     "editType": "calc",
     "valType": "data_array"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "intensity": {
     "description": "Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.",
     "editType": "calc",
     "valType": "data_array"
    },
    "intensitymode": {
     "description": "Determines the source of `intensity` values.",
     "dflt": "vertex",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "vertex",
      "cell"
     ]
    },
    "intensitysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  intensity .",
     "editType": "none",
     "valType": "string"
    },
    "isrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  i .",
     "editType": "none",
     "valType": "string"
    },
    "j": {
     "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.",
     "editType": "calc",
     "valType": "data_array"
    },
    "jsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  j .",
     "editType": "none",
     "valType": "string"
    },
    "k": {
     "description": "A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.",
     "editType": "calc",
     "valType": "data_array"
    },
    "ksrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  k .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "lighting": {
     "ambient": {
      "description": "Ambient light increases overall color visibility but can wash out the image.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "diffuse": {
      "description": "Represents the extent that incident rays are reflected in a range of angles.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "facenormalsepsilon": {
      "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 0.000001,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "fresnel": {
      "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
      "dflt": 0.2,
      "editType": "calc",
      "max": 5,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "roughness": {
      "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
      "dflt": 0.5,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "specular": {
      "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
      "dflt": 0.05,
      "editType": "calc",
      "max": 2,
      "min": 0,
      "valType": "number"
     },
     "vertexnormalsepsilon": {
      "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 1e-12,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     }
    },
    "lightposition": {
     "editType": "calc",
     "role": "object",
     "x": {
      "description": "Numeric vector, representing the X coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "y": {
      "description": "Numeric vector, representing the Y coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "z": {
      "description": "Numeric vector, representing the Z coordinate for each vertex.",
      "dflt": 0,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "scene": {
     "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
     "dflt": "scene",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "type": "mesh3d",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "vertexcolor": {
     "description": "Sets the color of each vertex Overrides *color*. While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.",
     "editType": "calc",
     "valType": "data_array"
    },
    "vertexcolorsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  vertexcolor .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "zcalendar": {
     "description": "Sets the calendar system to use with `z` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl3d",
    "showLegend"
   ],
   "meta": {
    "description": "Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm"
   },
   "type": "mesh3d"
  },
  "ohlc": {
   "animatable": false,
   "attributes": {
    "close": {
     "description": "Sets the close values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "closesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  close .",
     "editType": "none",
     "valType": "string"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "decreasing": {
     "editType": "style",
     "line": {
      "color": {
       "description": "Sets the line color.",
       "dflt": "#FF4136",
       "editType": "style",
       "valType": "color"
      },
      "dash": {
       "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
       "dflt": "solid",
       "editType": "style",
       "valType": "string",
       "values": [
        "solid",
        "dot",
        "dash",
        "longdash",
        "dashdot",
        "longdashdot"
       ]
      },
      "editType": "style",
      "role": "object",
      "width": {
       "description": "Sets the line width (in px).",
       "dflt": 2,
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "high": {
     "description": "Sets the high values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "highsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  high .",
     "editType": "none",
     "valType": "string"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "split": {
      "description": "Show hover information (open, close, high, low) in separate labels.",
      "dflt": false,
      "editType": "style",
      "valType": "boolean"
     }
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "increasing": {
     "editType": "style",
     "line": {
      "color": {
       "description": "Sets the line color.",
       "dflt": "#3D9970",
       "editType": "style",
       "valType": "color"
      },
      "dash": {
       "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
       "dflt": "solid",
       "editType": "style",
       "valType": "string",
       "values": [
        "solid",
        "dot",
        "dash",
        "longdash",
        "dashdot",
        "longdashdot"
       ]
      },
      "editType": "style",
      "role": "object",
      "width": {
       "description": "Sets the line width (in px).",
       "dflt": 2,
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "style",
     "role": "object",
     "width": {
      "description": "[object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "low": {
     "description": "Sets the low values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "lowsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  low .",
     "editType": "none",
     "valType": "string"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "open": {
     "description": "Sets the open values.",
     "editType": "calc",
     "valType": "data_array"
    },
    "opensrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  open .",
     "editType": "none",
     "valType": "string"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "tickwidth": {
     "description": "Sets the width of the open/close tick marks relative to the *x* minimal interval.",
     "dflt": 0.3,
     "editType": "calc",
     "max": 0.5,
     "min": 0,
     "valType": "number"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "ohlc",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates. If absent, linear coordinate will be generated.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "showLegend"
   ],
   "meta": {
    "description": "The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red."
   },
   "type": "ohlc"
  },
  "parcats": {
   "animatable": false,
   "attributes": {
    "arrangement": {
     "description": "Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.",
     "dflt": "perpendicular",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "perpendicular",
      "freeform",
      "fixed"
     ]
    },
    "bundlecolors": {
     "description": "Sort paths so that like colors are bundled together within each category.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    },
    "counts": {
     "arrayOk": true,
     "description": "The number of observations represented by each state. Defaults to 1 so that each state represents one observation",
     "dflt": 1,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "countssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  counts .",
     "editType": "none",
     "valType": "string"
    },
    "dimensions": {
     "items": {
      "dimension": {
       "categoryarray": {
        "description": "Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.",
        "editType": "calc",
        "valType": "data_array"
       },
       "categoryarraysrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  categoryarray .",
        "editType": "none",
        "valType": "string"
       },
       "categoryorder": {
        "description": "Specifies the ordering logic for the categories in the dimension. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.",
        "dflt": "trace",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "trace",
         "category ascending",
         "category descending",
         "array"
        ]
       },
       "description": "The dimensions (variables) of the parallel categories diagram.",
       "displayindex": {
        "description": "The display index of dimension, from left to right, zero indexed, defaults to dimension index.",
        "editType": "calc",
        "valType": "integer"
       },
       "editType": "calc",
       "label": {
        "description": "The shown name of the dimension.",
        "editType": "calc",
        "valType": "string"
       },
       "role": "object",
       "ticktext": {
        "description": "Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to *array*. Should be an array the same length as `categoryarray` Used with `categoryorder`.",
        "editType": "calc",
        "valType": "data_array"
       },
       "ticktextsrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
        "editType": "none",
        "valType": "string"
       },
       "values": {
        "description": "Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).",
        "dflt": [],
        "editType": "calc",
        "valType": "data_array"
       },
       "valuessrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  values .",
        "editType": "none",
        "valType": "string"
       },
       "visible": {
        "description": "Shows the dimension when set to `true` (the default). Hides the dimension for `false`.",
        "dflt": true,
        "editType": "calc",
        "valType": "boolean"
       }
      }
     },
     "role": "object"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this parcats trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this parcats trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this parcats trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this parcats trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "hoverinfo": {
     "arrayOk": false,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "plot",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "count",
      "probability"
     ],
     "valType": "flaglist"
    },
    "hoveron": {
     "description": "Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.",
     "dflt": "category",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "category",
      "color",
      "dimension"
     ]
    },
    "hovertemplate": {
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `count`, `probability`, `category`, `categorycount`, `colorcount` and `bandcolorcount`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "labelfont": {
     "color": {
      "editType": "calc",
      "valType": "color"
     },
     "description": "Sets the font for the `dimension` labels.",
     "editType": "calc",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "calc",
      "min": 1,
      "valType": "number"
     }
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "line": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "hovertemplate": {
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `count` and `probability`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "shape": {
      "description": "Sets the shape of the paths. If `linear`, paths are composed of straight lines. If `hspline`, paths are composed of horizontal curved splines",
      "dflt": "linear",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "linear",
       "hspline"
      ]
     },
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "sortpaths": {
     "description": "Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.",
     "dflt": "forward",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "forward",
      "backward"
     ]
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "tickfont": {
     "color": {
      "editType": "calc",
      "valType": "color"
     },
     "description": "Sets the font for the `category` labels.",
     "editType": "calc",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "calc",
      "min": 1,
      "valType": "number"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "parcats",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "noOpacity"
   ],
   "meta": {
    "description": "Parallel categories diagram for multidimensional categorical data."
   },
   "type": "parcats"
  },
  "parcoords": {
   "animatable": false,
   "attributes": {
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dimensions": {
     "items": {
      "dimension": {
       "constraintrange": {
        "description": "The domain range to which the filter on the dimension is constrained. Must be an array of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.",
        "dimensions": "1-2",
        "editType": "plot",
        "freeLength": true,
        "items": [
         {
          "editType": "plot",
          "valType": "any"
         },
         {
          "editType": "plot",
          "valType": "any"
         }
        ],
        "valType": "info_array"
       },
       "description": "The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.",
       "editType": "calc",
       "label": {
        "description": "The shown name of the dimension.",
        "editType": "plot",
        "valType": "string"
       },
       "multiselect": {
        "description": "Do we allow multiple selection ranges or just a single range?",
        "dflt": true,
        "editType": "plot",
        "valType": "boolean"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "none",
        "valType": "string"
       },
       "range": {
        "description": "The domain range that represents the full, shown axis extent. Defaults to the `values` extent. Must be an array of `[fromValue, toValue]` with finite numbers as elements.",
        "editType": "plot",
        "items": [
         {
          "editType": "plot",
          "valType": "number"
         },
         {
          "editType": "plot",
          "valType": "number"
         }
        ],
        "valType": "info_array"
       },
       "role": "object",
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "calc",
        "valType": "string"
       },
       "tickformat": {
        "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
        "dflt": "",
        "editType": "plot",
        "valType": "string"
       },
       "ticktext": {
        "description": "Sets the text displayed at the ticks position via `tickvals`.",
        "editType": "plot",
        "valType": "data_array"
       },
       "ticktextsrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
        "editType": "none",
        "valType": "string"
       },
       "tickvals": {
        "description": "Sets the values at which ticks on this axis appear.",
        "editType": "plot",
        "valType": "data_array"
       },
       "tickvalssrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
        "editType": "none",
        "valType": "string"
       },
       "values": {
        "description": "Dimension values. `values[n]` represents the value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated). Each value must be a finite number.",
        "editType": "calc",
        "valType": "data_array"
       },
       "valuessrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  values .",
        "editType": "none",
        "valType": "string"
       },
       "visible": {
        "description": "Shows the dimension when set to `true` (the default). Hides the dimension for `false`.",
        "dflt": true,
        "editType": "plot",
        "valType": "boolean"
       }
      }
     },
     "role": "object"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this parcoords trace .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "editType": "plot",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this parcoords trace .",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this parcoords trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this parcoords trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "plot",
      "items": [
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "plot",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "labelangle": {
     "description": "Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with *labelangle* may be positioned better inside margins when `labelposition` is set to *bottom*.",
     "dflt": 0,
     "editType": "plot",
     "valType": "angle"
    },
    "labelfont": {
     "color": {
      "editType": "plot",
      "valType": "color"
     },
     "description": "Sets the font for the `dimension` labels.",
     "editType": "plot",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "plot",
      "min": 1,
      "valType": "number"
     }
    },
    "labelside": {
     "description": "Specifies the location of the `label`. *top* positions labels above, next to the title *bottom* positions labels below the graph Tilted labels with *labelangle* may be positioned better inside margins when `labelposition` is set to *bottom*.",
     "dflt": "top",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "top",
      "bottom"
     ]
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": false,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": [
       [
        0,
        "#440154"
       ],
       [
        0.06274509803921569,
        "#48186a"
       ],
       [
        0.12549019607843137,
        "#472d7b"
       ],
       [
        0.18823529411764706,
        "#424086"
       ],
       [
        0.25098039215686274,
        "#3b528b"
       ],
       [
        0.3137254901960784,
        "#33638d"
       ],
       [
        0.3764705882352941,
        "#2c728e"
       ],
       [
        0.4392156862745098,
        "#26828e"
       ],
       [
        0.5019607843137255,
        "#21918c"
       ],
       [
        0.5647058823529412,
        "#1fa088"
       ],
       [
        0.6274509803921569,
        "#28ae80"
       ],
       [
        0.6901960784313725,
        "#3fbc73"
       ],
       [
        0.7529411764705882,
        "#5ec962"
       ],
       [
        0.8156862745098039,
        "#84d44b"
       ],
       [
        0.8784313725490196,
        "#addc30"
       ],
       [
        0.9411764705882353,
        "#d8e219"
       ],
       [
        1,
        "#fde725"
       ]
      ],
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "rangefont": {
     "color": {
      "editType": "plot",
      "valType": "color"
     },
     "description": "Sets the font for the `dimension` range values.",
     "editType": "plot",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "plot",
      "min": 1,
      "valType": "number"
     }
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "tickfont": {
     "color": {
      "editType": "plot",
      "valType": "color"
     },
     "description": "Sets the font for the `dimension` tick values.",
     "editType": "plot",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "plot",
      "min": 1,
      "valType": "number"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "parcoords",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "gl",
    "regl",
    "noOpacity",
    "noHover"
   ],
   "meta": {
    "description": "Parallel coordinates for multidimensional exploratory data analysis. The samples are specified in `dimensions`. The colors are set in `line.color`."
   },
   "type": "parcoords"
  },
  "pie": {
   "animatable": false,
   "attributes": {
    "_deprecated": {
     "title": {
      "description": "Deprecated in favor of `title.text`. Note that value of `title` is no longer a simple *string* but a set of sub-attributes.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "titlefont": {
      "color": {
       "arrayOk": true,
       "editType": "plot",
       "valType": "color"
      },
      "description": "Deprecated in favor of `title.font`.",
      "editType": "plot",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "size": {
       "arrayOk": true,
       "editType": "plot",
       "min": 1,
       "valType": "number"
      }
     },
     "titleposition": {
      "description": "Deprecated in favor of `title.position`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "top left",
       "top center",
       "top right",
       "middle center",
       "bottom left",
       "bottom center",
       "bottom right"
      ]
     }
    },
    "automargin": {
     "description": "Determines whether outside text labels can push the margins.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "direction": {
     "description": "Specifies the direction at which succeeding sectors follow one another.",
     "dflt": "counterclockwise",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "clockwise",
      "counterclockwise"
     ]
    },
    "dlabel": {
     "description": "Sets the label step. See `label0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this pie trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this pie trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this pie trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this pie trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "hole": {
     "description": "Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.",
     "dflt": 0,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "percent",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying inside the sector.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "insidetextorientation": {
     "description": "Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.",
     "dflt": "auto",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "horizontal",
      "radial",
      "tangential",
      "auto"
     ]
    },
    "label0": {
     "description": "Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.",
     "dflt": 0,
     "editType": "calc",
     "valType": "number"
    },
    "labels": {
     "description": "Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.",
     "editType": "calc",
     "valType": "data_array"
    },
    "labelssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  labels .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "colors": {
      "description": "Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.",
      "editType": "calc",
      "valType": "data_array"
     },
     "colorssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  colors .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets the color of the line enclosing each sector.",
       "dflt": "#444",
       "editType": "style",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the line enclosing each sector.",
       "dflt": 0,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "role": "object"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "outsidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying outside the sector.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "pull": {
     "arrayOk": true,
     "description": "Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.",
     "dflt": 0,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "pullsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  pull .",
     "editType": "none",
     "valType": "string"
    },
    "rotation": {
     "description": "Instead of the first slice starting at 12 o'clock, rotate to some other angle.",
     "dflt": 0,
     "editType": "calc",
     "max": 360,
     "min": -360,
     "valType": "number"
    },
    "scalegroup": {
     "description": "If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "sort": {
     "description": "Determines whether or not the sectors are reordered from largest to smallest.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "editType": "plot",
     "valType": "data_array"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo`.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textinfo": {
     "description": "Determines which trace information appear on the graph.",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "percent"
     ],
     "valType": "flaglist"
    },
    "textposition": {
     "arrayOk": true,
     "description": "Specifies the location of the `textinfo`.",
     "dflt": "auto",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "inside",
      "outside",
      "auto",
      "none"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `label`, `color`, `value`, `percent` and `text`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "title": {
     "editType": "plot",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "plot",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used for `title`. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
      "editType": "plot",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "plot",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "position": {
      "description": "Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "top left",
       "top center",
       "top right",
       "middle center",
       "bottom left",
       "bottom center",
       "bottom right"
      ]
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the chart. If it is empty, no title is displayed. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
      "dflt": "",
      "editType": "plot",
      "valType": "string"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "pie",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "values": {
     "description": "Sets the values of the sectors. If omitted, we count occurrences of each label.",
     "editType": "calc",
     "valType": "data_array"
    },
    "valuessrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  values .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "pie-like",
    "pie",
    "showLegend"
   ],
   "layoutAttributes": {
    "extendpiecolors": {
     "description": "If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "hiddenlabels": {
     "description": "hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts",
     "editType": "calc",
     "valType": "data_array"
    },
    "hiddenlabelssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hiddenlabels .",
     "editType": "none",
     "valType": "string"
    },
    "piecolorway": {
     "description": "Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.",
     "editType": "calc",
     "valType": "colorlist"
    }
   },
   "meta": {
    "description": "A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors`"
   },
   "type": "pie"
  },
  "pointcloud": {
   "animatable": false,
   "attributes": {
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "indices": {
     "description": "A sequential value, 0..n, supply it to avoid creating this array inside plotting. If specified, it must be a typed `Int32Array` array. Its length must be equal to or greater than the number of points. For the best performance and memory use, create one large `indices` typed array that is guaranteed to be at least as long as the largest number of points during use, and reuse it on each `Plotly.restyle()` call.",
     "editType": "calc",
     "valType": "data_array"
    },
    "indicessrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  indices .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "blend": {
      "description": "Determines if colors are blended together for a translucency effect in case `opacity` is specified as a value less then `1`. Setting `blend` to `true` reduces zoom/pan speed if used with large numbers of points.",
      "dflt": null,
      "editType": "calc",
      "valType": "boolean"
     },
     "border": {
      "arearatio": {
       "description": "Specifies what fraction of the marker area is covered with the border.",
       "dflt": 0,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "color": {
       "arrayOk": false,
       "description": "Sets the stroke color. It accepts a specific color. If the color is not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "role": "object"
     },
     "color": {
      "arrayOk": false,
      "description": "Sets the marker fill color. It accepts a specific color.If the color is not fully opaque and there are hundreds of thousandsof points, it may cause slower zooming and panning.",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "opacity": {
      "arrayOk": false,
      "description": "Sets the marker opacity. The default value is `1` (fully opaque). If the markers are not fully opaque and there are hundreds of thousands of points, it may cause slower zooming and panning. Opacity fades the color even if `blend` is left on `false` even if there is no translucency effect in that case.",
      "dflt": 1,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "sizemax": {
      "description": "Sets the maximum size (in px) of the rendered marker points. Effective when the `pointcloud` shows only few points.",
      "dflt": 20,
      "editType": "calc",
      "min": 0.1,
      "valType": "number"
     },
     "sizemin": {
      "description": "Sets the minimum size (in px) of the rendered marker points, effective when the `pointcloud` shows a million or more points.",
      "dflt": 0.5,
      "editType": "calc",
      "max": 2,
      "min": 0.1,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "type": "pointcloud",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xbounds": {
     "description": "Specify `xbounds` in the shape of `[xMin, xMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `ybounds` for the performance benefits.",
     "editType": "calc",
     "valType": "data_array"
    },
    "xboundssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  xbounds .",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "xy": {
     "description": "Faster alternative to specifying `x` and `y` separately. If supplied, it must be a typed `Float32Array` array that represents points such that `xy[i * 2] = x[i]` and `xy[i * 2 + 1] = y[i]`",
     "editType": "calc",
     "valType": "data_array"
    },
    "xysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  xy .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ybounds": {
     "description": "Specify `ybounds` in the shape of `[yMin, yMax] to avoid looping through the `xy` typed array. Use it in conjunction with `xy` and `xbounds` for the performance benefits.",
     "editType": "calc",
     "valType": "data_array"
    },
    "yboundssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ybounds .",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl",
    "gl2d",
    "showLegend"
   ],
   "meta": {
    "description": "*pointcloud* trace is deprecated! Please consider switching to the *scattergl* trace type. The data visualized as a point cloud set in `x` and `y` using the WebGl plotting engine."
   },
   "type": "pointcloud"
  },
  "sankey": {
   "animatable": false,
   "attributes": {
    "arrangement": {
     "description": "If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.",
     "dflt": "snap",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "snap",
      "perpendicular",
      "freeform",
      "fixed"
     ]
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this sankey trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this sankey trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this sankey trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this sankey trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "hoverinfo": {
     "arrayOk": false,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired. Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo` for nodes and links respectively.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [],
     "valType": "flaglist"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "calc",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "calc",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "calc",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "calc",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "calc",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "link": {
     "color": {
      "arrayOk": true,
      "description": "Sets the `link` color. It can be a single value, or an array for specifying color for each `link`. If `link.color` is omitted, then by default, a translucent grey link will be used.",
      "editType": "calc",
      "valType": "color"
     },
     "colorscales": {
      "items": {
       "concentrationscales": {
        "cmax": {
         "description": "Sets the upper bound of the color domain.",
         "dflt": 1,
         "editType": "calc",
         "valType": "number"
        },
        "cmin": {
         "description": "Sets the lower bound of the color domain.",
         "dflt": 0,
         "editType": "calc",
         "valType": "number"
        },
        "colorscale": {
         "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
         "dflt": [
          [
           0,
           "white"
          ],
          [
           1,
           "black"
          ]
         ],
         "editType": "calc",
         "impliedEdits": {
          "autocolorscale": false
         },
         "valType": "colorscale"
        },
        "editType": "calc",
        "label": {
         "description": "The label of the links to color based on their concentration within a flow.",
         "dflt": "",
         "editType": "calc",
         "valType": "string"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "calc",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "customdata": {
      "description": "Assigns extra data to each link.",
      "editType": "calc",
      "valType": "data_array"
     },
     "customdatasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
      "editType": "none",
      "valType": "string"
     },
     "description": "The links of the Sankey plot.",
     "editType": "calc",
     "hoverinfo": {
      "description": "Determines which trace information appear when hovering links. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "none",
       "skip"
      ]
     },
     "hoverlabel": {
      "align": {
       "arrayOk": true,
       "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
       "dflt": "auto",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "right",
        "auto"
       ]
      },
      "alignsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  align .",
       "editType": "none",
       "valType": "string"
      },
      "bgcolor": {
       "arrayOk": true,
       "description": "Sets the background color of the hover labels for this trace",
       "editType": "calc",
       "valType": "color"
      },
      "bgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "bordercolor": {
       "arrayOk": true,
       "description": "Sets the border color of the hover labels for this trace.",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "font": {
       "color": {
        "arrayOk": true,
        "editType": "calc",
        "valType": "color"
       },
       "colorsrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  color .",
        "editType": "none",
        "valType": "string"
       },
       "description": "Sets the font used in hover labels.",
       "editType": "calc",
       "family": {
        "arrayOk": true,
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "familysrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  family .",
        "editType": "none",
        "valType": "string"
       },
       "role": "object",
       "size": {
        "arrayOk": true,
        "editType": "calc",
        "min": 1,
        "valType": "number"
       },
       "sizesrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  size .",
        "editType": "none",
        "valType": "string"
       }
      },
      "namelength": {
       "arrayOk": true,
       "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
       "dflt": 15,
       "editType": "calc",
       "min": -1,
       "valType": "integer"
      },
      "namelengthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object"
     },
     "hovertemplate": {
      "arrayOk": true,
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "hovertemplatesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
      "editType": "none",
      "valType": "string"
     },
     "label": {
      "description": "The shown name of the link.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "labelsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  label .",
      "editType": "none",
      "valType": "string"
     },
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets the color of the `line` around each `link`.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the `line` around each `link`.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "role": "object",
     "source": {
      "description": "An integer number `[0..nodes.length - 1]` that represents the source node.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "sourcesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  source .",
      "editType": "none",
      "valType": "string"
     },
     "target": {
      "description": "An integer number `[0..nodes.length - 1]` that represents the target node.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "targetsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  target .",
      "editType": "none",
      "valType": "string"
     },
     "value": {
      "description": "A numeric value representing the flow volume value.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "valuesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  value .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "node": {
     "color": {
      "arrayOk": true,
      "description": "Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.",
      "editType": "calc",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "customdata": {
      "description": "Assigns extra data to each node.",
      "editType": "calc",
      "valType": "data_array"
     },
     "customdatasrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
      "editType": "none",
      "valType": "string"
     },
     "description": "The nodes of the Sankey plot.",
     "editType": "calc",
     "groups": {
      "description": "Groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.",
      "dflt": [],
      "dimensions": 2,
      "editType": "calc",
      "freeLength": true,
      "impliedEdits": {
       "x": [],
       "y": []
      },
      "items": {
       "editType": "calc",
       "valType": "number"
      },
      "valType": "info_array"
     },
     "hoverinfo": {
      "description": "Determines which trace information appear when hovering nodes. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "none",
       "skip"
      ]
     },
     "hoverlabel": {
      "align": {
       "arrayOk": true,
       "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
       "dflt": "auto",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "right",
        "auto"
       ]
      },
      "alignsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  align .",
       "editType": "none",
       "valType": "string"
      },
      "bgcolor": {
       "arrayOk": true,
       "description": "Sets the background color of the hover labels for this trace",
       "editType": "calc",
       "valType": "color"
      },
      "bgcolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
       "editType": "none",
       "valType": "string"
      },
      "bordercolor": {
       "arrayOk": true,
       "description": "Sets the border color of the hover labels for this trace.",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "font": {
       "color": {
        "arrayOk": true,
        "editType": "calc",
        "valType": "color"
       },
       "colorsrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  color .",
        "editType": "none",
        "valType": "string"
       },
       "description": "Sets the font used in hover labels.",
       "editType": "calc",
       "family": {
        "arrayOk": true,
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "familysrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  family .",
        "editType": "none",
        "valType": "string"
       },
       "role": "object",
       "size": {
        "arrayOk": true,
        "editType": "calc",
        "min": 1,
        "valType": "number"
       },
       "sizesrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  size .",
        "editType": "none",
        "valType": "string"
       }
      },
      "namelength": {
       "arrayOk": true,
       "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
       "dflt": 15,
       "editType": "calc",
       "min": -1,
       "valType": "integer"
      },
      "namelengthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object"
     },
     "hovertemplate": {
      "arrayOk": true,
      "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "hovertemplatesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
      "editType": "none",
      "valType": "string"
     },
     "label": {
      "description": "The shown name of the node.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "labelsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  label .",
      "editType": "none",
      "valType": "string"
     },
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets the color of the `line` around each `node`.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the `line` around each `node`.",
       "dflt": 0.5,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "pad": {
      "arrayOk": false,
      "description": "Sets the padding (in px) between the `nodes`.",
      "dflt": 20,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "thickness": {
      "arrayOk": false,
      "description": "Sets the thickness (in px) of the `nodes`.",
      "dflt": 20,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "x": {
      "description": "The normalized horizontal position of the node.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "xsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  x .",
      "editType": "none",
      "valType": "string"
     },
     "y": {
      "description": "The normalized vertical position of the node.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "ysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  y .",
      "editType": "none",
      "valType": "string"
     }
    },
    "orientation": {
     "description": "Sets the orientation of the Sankey diagram.",
     "dflt": "h",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "textfont": {
     "color": {
      "editType": "calc",
      "valType": "color"
     },
     "description": "Sets the font for node labels",
     "editType": "calc",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "calc",
      "min": 1,
      "valType": "number"
     }
    },
    "type": "sankey",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "valueformat": {
     "description": "Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
     "dflt": ".3s",
     "editType": "calc",
     "valType": "string"
    },
    "valuesuffix": {
     "description": "Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "noOpacity"
   ],
   "meta": {
    "description": "Sankey plots for network flow data analysis. The nodes are specified in `nodes` and the links between sources and targets in `links`. The colors are set in `nodes[i].color` and `links[i].color`, otherwise defaults are used."
   },
   "type": "sankey"
  },
  "scatter": {
   "animatable": true,
   "attributes": {
    "cliponaxis": {
     "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "anim": true,
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dy": {
     "anim": true,
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "error_x": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "style",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "style",
      "valType": "color"
     },
     "copy_ystyle": {
      "editType": "plot",
      "valType": "boolean"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "plot",
      "min": 0,
      "valType": "number"
     }
    },
    "error_y": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "style",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "style",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "style",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "plot",
      "min": 0,
      "valType": "number"
     }
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "tozeroy",
      "tozerox",
      "tonexty",
      "tonextx",
      "toself",
      "tonext"
     ]
    },
    "fillcolor": {
     "anim": true,
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "style",
     "valType": "color"
    },
    "groupnorm": {
     "description": "Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With *fraction*, the value of each trace at each location is divided by the sum of all trace values at that location. *percent* is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.",
     "dflt": "",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "",
      "fraction",
      "percent"
     ]
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoveron": {
     "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
     "editType": "style",
     "flags": [
      "points",
      "fills"
     ],
     "valType": "flaglist"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "anim": true,
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "anim": true,
      "description": "Sets the line color.",
      "editType": "style",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "plot",
     "role": "object",
     "shape": {
      "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
      "dflt": "linear",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "linear",
       "spline",
       "hv",
       "vh",
       "hvh",
       "vhv"
      ]
     },
     "simplify": {
      "description": "Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     },
     "smoothing": {
      "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
      "dflt": 1,
      "editType": "plot",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "width": {
      "anim": true,
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "anim": true,
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "gradient": {
      "color": {
       "arrayOk": true,
       "description": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "type": {
       "arrayOk": true,
       "description": "Sets the type of gradient used to fill the markers",
       "dflt": "none",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "radial",
        "horizontal",
        "vertical",
        "none"
       ]
      },
      "typesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  type .",
       "editType": "none",
       "valType": "string"
      }
     },
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "anim": true,
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "anim": true,
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "maxdisplayed": {
      "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "opacity": {
      "anim": true,
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "anim": true,
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "style",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "orientation": {
     "description": "Only relevant when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Sets the stacking direction. With *v* (*h*), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stackgaps": {
     "description": "Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is *legendonly* but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With *infer zero* we insert a zero at these locations. With *interpolate* we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.",
     "dflt": "infer zero",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "infer zero",
      "interpolate"
     ]
    },
    "stackgroup": {
     "description": "Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is *h*). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using *tonexty* (*tonextx*) if `orientation` is *h* (*v*) and sets the default `mode` to *lines* irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the text font.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. ",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scatter",
    "uid": {
     "anim": true,
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "anim": true,
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "x0": {
     "anim": true,
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "anim": true,
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "y0": {
     "anim": true,
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "symbols",
    "errorBarsOK",
    "showLegend",
    "scatter-like",
    "zoomScale"
   ],
   "meta": {
    "description": "The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts. The data visualized as scatter point or lines is set in `x` and `y`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays."
   },
   "type": "scatter"
  },
  "scatter3d": {
   "animatable": false,
   "attributes": {
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "error_x": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "calc",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "calc",
      "valType": "color"
     },
     "copy_zstyle": {
      "editType": "calc",
      "valType": "boolean"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "error_y": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "calc",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "calc",
      "valType": "color"
     },
     "copy_zstyle": {
      "editType": "calc",
      "valType": "boolean"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "error_z": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "calc",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax`  Has an effect only if in `line.color`is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `line.color`is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets thelinecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "calc",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "calc",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "calc",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "calc",
          "items": [
           {
            "editType": "calc",
            "valType": "any"
           },
           {
            "editType": "calc",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "calc",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "calc",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "calc",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "calc",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "calc",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "calc",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "calc",
       "font": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "calc",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "dash": {
      "description": "Sets the dash style of the lines.",
      "dflt": "solid",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "dash",
       "dashdot",
       "dot",
       "longdash",
       "longdashdot",
       "solid"
      ]
     },
     "editType": "calc",
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `line.color`is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "calc",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "calc",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "calc",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "calc",
          "items": [
           {
            "editType": "calc",
            "valType": "any"
           },
           {
            "editType": "calc",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "calc",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "calc",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "calc",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "calc",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "calc",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "calc",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "calc",
       "font": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "calc",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "calc",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": false,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "opacity": {
      "arrayOk": false,
      "description": "Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set *marker.color* to an rgba color and use its alpha channel.",
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 8,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type.",
      "dflt": "circle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "circle",
       "circle-open",
       "cross",
       "diamond",
       "diamond-open",
       "square",
       "square-open",
       "x"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
     "dflt": "lines+markers",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "projection": {
     "editType": "calc",
     "role": "object",
     "x": {
      "editType": "calc",
      "opacity": {
       "description": "Sets the projection color.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "scale": {
       "description": "Sets the scale factor determining the size of the projection marker points.",
       "dflt": 0.6666666666666666,
       "editType": "calc",
       "max": 10,
       "min": 0,
       "valType": "number"
      },
      "show": {
       "description": "Sets whether or not projections are shown along the x axis.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "y": {
      "editType": "calc",
      "opacity": {
       "description": "Sets the projection color.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "scale": {
       "description": "Sets the scale factor determining the size of the projection marker points.",
       "dflt": 0.6666666666666666,
       "editType": "calc",
       "max": 10,
       "min": 0,
       "valType": "number"
      },
      "show": {
       "description": "Sets whether or not projections are shown along the y axis.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "z": {
      "editType": "calc",
      "opacity": {
       "description": "Sets the projection color.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "scale": {
       "description": "Sets the scale factor determining the size of the projection marker points.",
       "dflt": 0.6666666666666666,
       "editType": "calc",
       "max": 10,
       "min": 0,
       "valType": "number"
      },
      "show": {
       "description": "Sets whether or not projections are shown along the z axis.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     }
    },
    "scene": {
     "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
     "dflt": "scene",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "surfaceaxis": {
     "description": "If *-1*, the scatter points are not fill with a surface If *0*, *1*, *2*, the scatter points are filled with a Delaunay surface about the x, y, z respectively.",
     "dflt": -1,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      -1,
      0,
      1,
      2
     ]
    },
    "surfacecolor": {
     "description": "Sets the surface fill color.",
     "editType": "calc",
     "valType": "color"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "calc",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "family": {
      "arrayOk": false,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "top center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. ",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scatter3d",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the z coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "zcalendar": {
     "description": "Sets the calendar system to use with `z` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl3d",
    "symbols",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "The data visualized as scatter point or lines in 3D dimension is set in `x`, `y`, `z`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` Projections are achieved via `projection`. Surface fills are achieved via `surfaceaxis`.",
    "hrName": "scatter_3d"
   },
   "type": "scatter3d"
  },
  "scattercarpet": {
   "animatable": false,
   "attributes": {
    "a": {
     "description": "Sets the a-axis coordinates.",
     "editType": "calc",
     "valType": "data_array"
    },
    "asrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  a .",
     "editType": "none",
     "valType": "string"
    },
    "b": {
     "description": "Sets the b-axis coordinates.",
     "editType": "calc",
     "valType": "data_array"
    },
    "bsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  b .",
     "editType": "none",
     "valType": "string"
    },
    "carpet": {
     "description": "An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie",
     "editType": "calc",
     "valType": "string"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
     "dflt": "none",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "toself",
      "tonext"
     ]
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "style",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "a",
      "b",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoveron": {
     "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
     "editType": "style",
     "flags": [
      "points",
      "fills"
     ],
     "valType": "flaglist"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the line color.",
      "editType": "style",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "calc",
     "role": "object",
     "shape": {
      "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
      "dflt": "linear",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "linear",
       "spline"
      ]
     },
     "smoothing": {
      "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
      "dflt": 1,
      "editType": "plot",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "gradient": {
      "color": {
       "arrayOk": true,
       "description": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "type": {
       "arrayOk": true,
       "description": "Sets the type of gradient used to fill the markers",
       "dflt": "none",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "radial",
        "horizontal",
        "vertical",
        "none"
       ]
      },
      "typesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  type .",
       "editType": "none",
       "valType": "string"
      }
     },
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "maxdisplayed": {
      "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "style",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
     "dflt": "markers",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the text font.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `a`, `b` and `text`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scattercarpet",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    }
   },
   "categories": [
    "svg",
    "carpet",
    "symbols",
    "showLegend",
    "carpetDependent",
    "zoomScale"
   ],
   "meta": {
    "description": "Plots a scatter trace on either the first carpet axis or the carpet axis with a matching `carpet` attribute.",
    "hrName": "scatter_carpet"
   },
   "type": "scattercarpet"
  },
  "scattergeo": {
   "animatable": false,
   "attributes": {
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "featureidkey": {
     "description": "Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example *properties.name*.",
     "dflt": "id",
     "editType": "calc",
     "valType": "string"
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.",
     "dflt": "none",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "toself"
     ]
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "calc",
     "valType": "color"
    },
    "geo": {
     "description": "Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.",
     "dflt": "geo",
     "editType": "calc",
     "valType": "subplotid"
    },
    "geojson": {
     "description": "Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when `locations` is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.",
     "editType": "calc",
     "valType": "any"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "lon",
      "lat",
      "location",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "lat": {
     "description": "Sets the latitude coordinates (in degrees North).",
     "editType": "calc",
     "valType": "data_array"
    },
    "latsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  lat .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the line color.",
      "editType": "calc",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "calc",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "calc",
     "role": "object",
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "locationmode": {
     "description": "Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.",
     "dflt": "ISO-3",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "ISO-3",
      "USA-states",
      "country names",
      "geojson-id"
     ]
    },
    "locations": {
     "description": "Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.",
     "editType": "calc",
     "valType": "data_array"
    },
    "locationssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  locations .",
     "editType": "none",
     "valType": "string"
    },
    "lon": {
     "description": "Sets the longitude coordinates (in degrees East).",
     "editType": "calc",
     "valType": "data_array"
    },
    "lonsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  lon .",
     "editType": "none",
     "valType": "string"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "calc",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "calc",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "calc",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "calc",
          "items": [
           {
            "editType": "calc",
            "valType": "any"
           },
           {
            "editType": "calc",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "calc",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "calc",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "calc",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "calc",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "calc",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "calc",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "calc",
       "font": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "calc",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "gradient": {
      "color": {
       "arrayOk": true,
       "description": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "type": {
       "arrayOk": true,
       "description": "Sets the type of gradient used to fill the markers",
       "dflt": "none",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "radial",
        "horizontal",
        "vertical",
        "none"
       ]
      },
      "typesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  type .",
       "editType": "none",
       "valType": "string"
      }
     },
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "calc",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
     "dflt": "markers",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "selected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "calc",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the text font.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `lat`, `lon`, `location` and `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scattergeo",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "geo",
    "symbols",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`.",
    "hrName": "scatter_geo"
   },
   "type": "scattergeo"
  },
  "scattergl": {
   "animatable": false,
   "attributes": {
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dx": {
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dy": {
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "error_x": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "calc",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "calc",
      "valType": "color"
     },
     "copy_ystyle": {
      "editType": "calc",
      "valType": "boolean"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "error_y": {
     "_deprecated": {
      "opacity": {
       "description": "Obsolete. Use the alpha channel in error bar `color` to set the opacity.",
       "editType": "calc",
       "valType": "number"
      }
     },
     "array": {
      "description": "Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminus": {
      "description": "Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.",
      "editType": "calc",
      "valType": "data_array"
     },
     "arrayminussrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  arrayminus .",
      "editType": "none",
      "valType": "string"
     },
     "arraysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  array .",
      "editType": "none",
      "valType": "string"
     },
     "color": {
      "description": "Sets the stoke color of the error bars.",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "symmetric": {
      "description": "Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.",
      "editType": "calc",
      "valType": "boolean"
     },
     "thickness": {
      "description": "Sets the thickness (in px) of the error bars.",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "traceref": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "tracerefminus": {
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "type": {
      "description": "Determines the rule used to generate the error bars. If *constant`, the bar lengths are of a constant value. Set this constant in `value`. If *percent*, the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If *sqrt*, the bar lengths correspond to the square of the underlying data. If *data*, the bar lengths are set with data set `array`.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "percent",
       "constant",
       "sqrt",
       "data"
      ]
     },
     "value": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "valueminus": {
      "description": "Sets the value of either the percentage (if `type` is set to *percent*) or the constant (if `type` is set to *constant*) corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "visible": {
      "description": "Determines whether or not this set of error bars is visible.",
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width (in px) of the cross-bar at both ends of the error bars.",
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
     "dflt": "none",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "tozeroy",
      "tozerox",
      "tonexty",
      "tonextx",
      "toself",
      "tonext"
     ]
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "calc",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the line color.",
      "editType": "calc",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the style of the lines.",
      "dflt": "solid",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "dash",
       "dashdot",
       "dot",
       "longdash",
       "longdashdot",
       "solid"
      ]
     },
     "editType": "calc",
     "role": "object",
     "shape": {
      "description": "Determines the line shape. The values correspond to step-wise line shapes.",
      "dflt": "linear",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "linear",
       "hv",
       "vh",
       "hvh",
       "vhv"
      ]
     },
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "calc",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "calc",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "calc",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "calc",
          "items": [
           {
            "editType": "calc",
            "valType": "any"
           },
           {
            "editType": "calc",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "calc",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "calc",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "calc",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "calc",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "calc",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "calc",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "calc",
       "font": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "calc",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "calc",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace.",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "selected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "calc",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the text font.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. ",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scattergl",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "x0": {
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "y0": {
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl",
    "regl",
    "cartesian",
    "symbols",
    "errorBarsOK",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "The data visualized as scatter point or lines is set in `x` and `y` using the WebGL plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays.",
    "hrName": "scatter_gl"
   },
   "type": "scattergl"
  },
  "scattermapbox": {
   "animatable": false,
   "attributes": {
    "below": {
     "description": "Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to *''*.",
     "editType": "calc",
     "valType": "string"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.",
     "dflt": "none",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "toself"
     ]
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "calc",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "lon",
      "lat",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "lat": {
     "description": "Sets the latitude coordinates (in degrees North).",
     "editType": "calc",
     "valType": "data_array"
    },
    "latsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  lat .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the line color.",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "lon": {
     "description": "Sets the longitude coordinates (in degrees East).",
     "editType": "calc",
     "valType": "data_array"
    },
    "lonsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  lon .",
     "editType": "none",
     "valType": "string"
    },
    "marker": {
     "allowoverlap": {
      "description": "Flag to draw all symbols, even if they overlap.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "angle": {
      "arrayOk": true,
      "description": "Sets the marker orientation from true North, in degrees clockwise. When using the *auto* default, no rotation would be applied in perspective views which is different from using a zero angle.",
      "dflt": "auto",
      "editType": "calc",
      "valType": "number"
     },
     "anglesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  angle .",
      "editType": "none",
      "valType": "string"
     },
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "calc",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "calc",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "calc",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "calc",
          "items": [
           {
            "editType": "calc",
            "valType": "any"
           },
           {
            "editType": "calc",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "calc",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "calc",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "calc",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "calc",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "calc",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "calc",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "calc",
       "font": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "calc",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for *circle* symbols.",
      "dflt": "circle",
      "editType": "calc",
      "valType": "string"
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.",
     "dflt": "markers",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "selected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "subplot": {
     "description": "Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.",
     "dflt": "mapbox",
     "editType": "calc",
     "valType": "subplotid"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "editType": "calc",
      "valType": "color"
     },
     "description": "Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to *symbol*.",
     "editType": "calc",
     "family": {
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "dflt": "Open Sans Regular, Arial Unicode MS Regular",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "role": "object",
     "size": {
      "editType": "calc",
      "min": 1,
      "valType": "number"
     }
    },
    "textposition": {
     "arrayOk": false,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `lat`, `lon` and `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scattermapbox",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "mapbox",
    "gl",
    "symbols",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "The data visualized as scatter point, lines or marker symbols on a Mapbox GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`.",
    "hrName": "scatter_mapbox"
   },
   "type": "scattermapbox"
  },
  "scatterpolar": {
   "animatable": false,
   "attributes": {
    "cliponaxis": {
     "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dr": {
     "description": "Sets the r coordinate step.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dtheta": {
     "description": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.",
     "editType": "calc",
     "valType": "number"
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterpolar has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
     "dflt": "none",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "toself",
      "tonext"
     ]
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "style",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "r",
      "theta",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoveron": {
     "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
     "editType": "style",
     "flags": [
      "points",
      "fills"
     ],
     "valType": "flaglist"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the line color.",
      "editType": "style",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "calc",
     "role": "object",
     "shape": {
      "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
      "dflt": "linear",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "linear",
       "spline"
      ]
     },
     "smoothing": {
      "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
      "dflt": 1,
      "editType": "plot",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "gradient": {
      "color": {
       "arrayOk": true,
       "description": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "type": {
       "arrayOk": true,
       "description": "Sets the type of gradient used to fill the markers",
       "dflt": "none",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "radial",
        "horizontal",
        "vertical",
        "none"
       ]
      },
      "typesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  type .",
       "editType": "none",
       "valType": "string"
      }
     },
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "maxdisplayed": {
      "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "style",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "r": {
     "description": "Sets the radial coordinates",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "r0": {
     "description": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "rsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  r .",
     "editType": "none",
     "valType": "string"
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "subplot": {
     "description": "Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.",
     "dflt": "polar",
     "editType": "calc",
     "valType": "subplotid"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the text font.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `r`, `theta` and `text`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "theta": {
     "description": "Sets the angular coordinates",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "theta0": {
     "description": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "thetasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  theta .",
     "editType": "none",
     "valType": "string"
    },
    "thetaunit": {
     "description": "Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.",
     "dflt": "degrees",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "radians",
      "degrees",
      "gradians"
     ]
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scatterpolar",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "polar",
    "symbols",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "The scatterpolar trace type encompasses line charts, scatter charts, text charts, and bubble charts in polar coordinates. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.",
    "hrName": "scatter_polar"
   },
   "type": "scatterpolar"
  },
  "scatterpolargl": {
   "animatable": false,
   "attributes": {
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "dr": {
     "description": "Sets the r coordinate step.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dtheta": {
     "description": "Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.",
     "editType": "calc",
     "valType": "number"
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Defaults to *none* unless this trace is stacked, then it gets *tonexty* (*tonextx*) if `orientation` is *v* (*h*) Use with `fillcolor` if not *none*. *tozerox* and *tozeroy* fill to x=0 and y=0 respectively. *tonextx* and *tonexty* fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like *tozerox* and *tozeroy*. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.",
     "dflt": "none",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "tozeroy",
      "tozerox",
      "tonexty",
      "tonextx",
      "toself",
      "tonext"
     ]
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "calc",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "r",
      "theta",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the line color.",
      "editType": "calc",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the style of the lines.",
      "dflt": "solid",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "dash",
       "dashdot",
       "dot",
       "longdash",
       "longdashdot",
       "solid"
      ]
     },
     "editType": "calc",
     "role": "object",
     "shape": {
      "description": "Determines the line shape. The values correspond to step-wise line shapes.",
      "dflt": "linear",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "linear",
       "hv",
       "vh",
       "hvh",
       "vhv"
      ]
     },
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "calc",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "calc",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "calc",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "calc",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "calc",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "calc",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "calc",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "calc",
          "items": [
           {
            "editType": "calc",
            "valType": "any"
           },
           {
            "editType": "calc",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "calc",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "calc",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "calc",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "calc",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "calc",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "calc",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "calc",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "calc",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "calc",
       "font": {
        "color": {
         "editType": "calc",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "calc",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "calc",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "calc",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "calc",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "calc",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "calc",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "r": {
     "description": "Sets the radial coordinates",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "r0": {
     "description": "Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "rsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  r .",
     "editType": "none",
     "valType": "string"
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "subplot": {
     "description": "Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.",
     "dflt": "polar",
     "editType": "calc",
     "valType": "subplotid"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "calc",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the text font.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `r`, `theta` and `text`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "theta": {
     "description": "Sets the angular coordinates",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "theta0": {
     "description": "Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "thetasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  theta .",
     "editType": "none",
     "valType": "string"
    },
    "thetaunit": {
     "description": "Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.",
     "dflt": "degrees",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "radians",
      "degrees",
      "gradians"
     ]
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scatterpolargl",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "gl",
    "regl",
    "polar",
    "symbols",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "The scatterpolargl trace type encompasses line charts, scatter charts, and bubble charts in polar coordinates using the WebGL plotting engine. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.",
    "hrName": "scatter_polar_gl"
   },
   "type": "scatterpolargl"
  },
  "scatterternary": {
   "animatable": false,
   "attributes": {
    "a": {
     "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "asrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  a .",
     "editType": "none",
     "valType": "string"
    },
    "b": {
     "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "bsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  b .",
     "editType": "none",
     "valType": "string"
    },
    "c": {
     "description": "Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "cliponaxis": {
     "description": "Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "csrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  c .",
     "editType": "none",
     "valType": "string"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "fill": {
     "description": "Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scatterternary has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.",
     "dflt": "none",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "none",
      "toself",
      "tonext"
     ]
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "style",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "a",
      "b",
      "c",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoveron": {
     "description": "Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.",
     "editType": "style",
     "flags": [
      "points",
      "fills"
     ],
     "valType": "flaglist"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the line color.",
      "editType": "style",
      "valType": "color"
     },
     "dash": {
      "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
      "dflt": "solid",
      "editType": "style",
      "valType": "string",
      "values": [
       "solid",
       "dot",
       "dash",
       "longdash",
       "dashdot",
       "longdashdot"
      ]
     },
     "editType": "calc",
     "role": "object",
     "shape": {
      "description": "Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.",
      "dflt": "linear",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "linear",
       "spline"
      ]
     },
     "smoothing": {
      "description": "Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).",
      "dflt": 1,
      "editType": "plot",
      "max": 1.3,
      "min": 0,
      "valType": "number"
     },
     "width": {
      "description": "Sets the line width (in px).",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "gradient": {
      "color": {
       "arrayOk": true,
       "description": "Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "type": {
       "arrayOk": true,
       "description": "Sets the type of gradient used to fill the markers",
       "dflt": "none",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "radial",
        "horizontal",
        "vertical",
        "none"
       ]
      },
      "typesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  type .",
       "editType": "none",
       "valType": "string"
      }
     },
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "plot",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "style",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "maxdisplayed": {
      "description": "Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.",
      "dflt": 0,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "style",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "mode": {
     "description": "Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.",
     "dflt": "markers",
     "editType": "calc",
     "extras": [
      "none"
     ],
     "flags": [
      "lines",
      "markers",
      "text"
     ],
     "valType": "flaglist"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "subplot": {
     "description": "Sets a reference between this trace's data coordinates and a ternary subplot. If *ternary* (the default value), the data refer to `layout.ternary`. If *ternary2*, the data refer to `layout.ternary2`, and so on.",
     "dflt": "ternary",
     "editType": "calc",
     "valType": "subplotid"
    },
    "sum": {
     "description": "The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the text font.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textposition": {
     "arrayOk": true,
     "description": "Sets the positions of the `text` elements with respects to the (x,y) coordinates.",
     "dflt": "middle center",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `a`, `b`, `c` and `text`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "scatterternary",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "textfont": {
      "color": {
       "description": "Sets the text font color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object"
     }
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "ternary",
    "symbols",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "Provides similar functionality to the *scatter* type but on a ternary phase diagram. The data is provided by at least two arrays out of `a`, `b`, `c` triplets.",
    "hrName": "scatter_ternary"
   },
   "type": "scatterternary"
  },
  "splom": {
   "animatable": false,
   "attributes": {
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "diagonal": {
     "editType": "calc",
     "role": "object",
     "visible": {
      "description": "Determines whether or not subplots on the diagonal are displayed.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "dimensions": {
     "items": {
      "dimension": {
       "axis": {
        "editType": "calc+clearAxisTypes",
        "matches": {
         "description": "Determines whether or not the x & y axes generated by this dimension match. Equivalent to setting the `matches` axis attribute in the layout with the correct axis id.",
         "dflt": false,
         "editType": "calc",
         "valType": "boolean"
        },
        "role": "object",
        "type": {
         "description": "Sets the axis type for this dimension's generated x and y axes. Note that the axis `type` values set in layout take precedence over this attribute.",
         "editType": "calc+clearAxisTypes",
         "valType": "enumerated",
         "values": [
          "linear",
          "log",
          "date",
          "category"
         ]
        }
       },
       "editType": "calc+clearAxisTypes",
       "label": {
        "description": "Sets the label corresponding to this splom dimension.",
        "editType": "calc",
        "valType": "string"
       },
       "name": {
        "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
        "editType": "none",
        "valType": "string"
       },
       "role": "object",
       "templateitemname": {
        "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
        "editType": "calc",
        "valType": "string"
       },
       "values": {
        "description": "Sets the dimension values to be plotted.",
        "editType": "calc+clearAxisTypes",
        "valType": "data_array"
       },
       "valuessrc": {
        "description": "Sets the source reference on Chart Studio Cloud for  values .",
        "editType": "none",
        "valType": "string"
       },
       "visible": {
        "description": "Determines whether or not this dimension is shown on the graph. Note that even visible false dimension contribute to the default grid generate by this splom trace.",
        "dflt": true,
        "editType": "calc",
        "valType": "boolean"
       }
      }
     },
     "role": "object"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if in `marker.color`is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "style",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.color`is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "style",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "color": {
      "arrayOk": true,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if in `marker.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "autocolorscale": {
       "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color`is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cauto": {
       "description": "Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax`  Has an effect only if in `marker.line.color`is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.",
       "dflt": true,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "boolean"
      },
      "cmax": {
       "description": "Sets the upper bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "cmid": {
       "description": "Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {},
       "valType": "number"
      },
      "cmin": {
       "description": "Sets the lower bound of the color domain. Has an effect only if in `marker.line.color`is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "cauto": false
       },
       "valType": "number"
      },
      "color": {
       "arrayOk": true,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "editType": "calc",
       "valType": "color"
      },
      "coloraxis": {
       "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
       "dflt": null,
       "editType": "calc",
       "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
       "valType": "subplotid"
      },
      "colorscale": {
       "description": "Sets the colorscale. Has an effect only if in `marker.line.color`is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
       "dflt": null,
       "editType": "calc",
       "impliedEdits": {
        "autocolorscale": false
       },
       "valType": "colorscale"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "reversescale": {
       "description": "Reverses the color mapping if true. Has an effect only if in `marker.line.color`is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.",
       "dflt": false,
       "editType": "plot",
       "valType": "boolean"
      },
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "opacity": {
      "arrayOk": true,
      "description": "Sets the marker opacity.",
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "opacitysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  opacity .",
      "editType": "none",
      "valType": "string"
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if in `marker.color`is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color`is set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "size": {
      "arrayOk": true,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "markerSize",
      "min": 0,
      "valType": "number"
     },
     "sizemin": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "sizemode": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.",
      "dflt": "diameter",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "diameter",
       "area"
      ]
     },
     "sizeref": {
      "description": "Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.",
      "dflt": 1,
      "editType": "calc",
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     },
     "symbol": {
      "arrayOk": true,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "style",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     },
     "symbolsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  symbol .",
      "editType": "none",
      "valType": "string"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "selected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "showlowerhalf": {
     "description": "Determines whether or not subplots on the lower half from the diagonal are displayed.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "showupperhalf": {
     "description": "Determines whether or not subplots on the upper half from the diagonal are displayed.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "splom",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "calc",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "calc",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "xaxes": {
     "description": "Sets the list of x axes corresponding to dimensions of this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.",
     "editType": "calc",
     "freeLength": true,
     "items": {
      "editType": "plot",
      "regex": "/^x([2-9]|[1-9][0-9]+)?( domain)?$/",
      "valType": "subplotid"
     },
     "valType": "info_array"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yaxes": {
     "description": "Sets the list of y axes corresponding to dimensions of this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.",
     "editType": "calc",
     "freeLength": true,
     "items": {
      "editType": "plot",
      "regex": "/^y([2-9]|[1-9][0-9]+)?( domain)?$/",
      "valType": "subplotid"
     },
     "valType": "info_array"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl",
    "regl",
    "cartesian",
    "symbols",
    "showLegend",
    "scatter-like"
   ],
   "meta": {
    "description": "Splom traces generate scatter plot matrix visualizations. Each splom `dimensions` items correspond to a generated axis. Values for each of those dimensions are set in `dimensions[i].values`. Splom traces support all `scattergl` marker style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style. "
   },
   "type": "splom"
  },
  "streamtube": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "cmid": {
     "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "cmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "colorbars",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "colorbars",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "colorbars",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "colorbars",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "colorbars",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "colorbars",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "colorbars",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "colorbars",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "colorbars",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "colorbars",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "colorbars",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "colorbars",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "colorbars",
         "items": [
          {
           "editType": "colorbars",
           "valType": "any"
          },
          {
           "editType": "colorbars",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "colorbars",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "colorbars",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "colorbars",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "colorbars",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "colorbars",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "colorbars",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "colorbars",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "colorbars",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "colorbars",
      "font": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "colorbars",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "colorbars",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "colorbars",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "colorbars",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "x+y+z+norm+text+name",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "u",
      "v",
      "w",
      "norm",
      "divergence",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `tubex`, `tubey`, `tubez`, `tubeu`, `tubev`, `tubew`, `norm` and `divergence`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "lighting": {
     "ambient": {
      "description": "Ambient light increases overall color visibility but can wash out the image.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "diffuse": {
      "description": "Represents the extent that incident rays are reflected in a range of angles.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "facenormalsepsilon": {
      "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 0.000001,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "fresnel": {
      "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
      "dflt": 0.2,
      "editType": "calc",
      "max": 5,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "roughness": {
      "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
      "dflt": 0.5,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "specular": {
      "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
      "dflt": 0.05,
      "editType": "calc",
      "max": 2,
      "min": 0,
      "valType": "number"
     },
     "vertexnormalsepsilon": {
      "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 1e-12,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     }
    },
    "lightposition": {
     "editType": "calc",
     "role": "object",
     "x": {
      "description": "Numeric vector, representing the X coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "y": {
      "description": "Numeric vector, representing the Y coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "z": {
      "description": "Numeric vector, representing the Z coordinate for each vertex.",
      "dflt": 0,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     }
    },
    "maxdisplayed": {
     "description": "The maximum number of displayed segments in a streamtube.",
     "dflt": 1000,
     "editType": "calc",
     "min": 0,
     "valType": "integer"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
     "dflt": false,
     "editType": "plot",
     "valType": "boolean"
    },
    "scene": {
     "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
     "dflt": "scene",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "style",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "sizeref": {
     "description": "The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.",
     "dflt": 1,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "starts": {
     "editType": "calc",
     "role": "object",
     "x": {
      "description": "Sets the x components of the starting position of the streamtubes",
      "editType": "calc",
      "valType": "data_array"
     },
     "xsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  x .",
      "editType": "none",
      "valType": "string"
     },
     "y": {
      "description": "Sets the y components of the starting position of the streamtubes",
      "editType": "calc",
      "valType": "data_array"
     },
     "ysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  y .",
      "editType": "none",
      "valType": "string"
     },
     "z": {
      "description": "Sets the z components of the starting position of the streamtubes",
      "editType": "calc",
      "valType": "data_array"
     },
     "zsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  z .",
      "editType": "none",
      "valType": "string"
     }
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets a text element associated with this trace. If trace `hoverinfo` contains a *text* flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "type": "streamtube",
    "u": {
     "description": "Sets the x components of the vector field.",
     "editType": "calc",
     "valType": "data_array"
    },
    "uhoverformat": {
     "description": "Sets the hover text formatting rulefor `u`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "usrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  u .",
     "editType": "none",
     "valType": "string"
    },
    "v": {
     "description": "Sets the y components of the vector field.",
     "editType": "calc",
     "valType": "data_array"
    },
    "vhoverformat": {
     "description": "Sets the hover text formatting rulefor `v`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "vsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  v .",
     "editType": "none",
     "valType": "string"
    },
    "w": {
     "description": "Sets the z components of the vector field.",
     "editType": "calc",
     "valType": "data_array"
    },
    "whoverformat": {
     "description": "Sets the hover text formatting rulefor `w`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "wsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  w .",
     "editType": "none",
     "valType": "string"
    },
    "x": {
     "description": "Sets the x coordinates of the vector field.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates of the vector field.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the z coordinates of the vector field.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl3d",
    "showLegend"
   ],
   "meta": {
    "description": "Use a streamtube trace to visualize flow in a vector field.  Specify a vector field using 6 1D arrays of equal length, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, and `w`.  By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value. To specify your own starting position, use attributes `starts.x`, `starts.y` and `starts.z`. The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w)."
   },
   "type": "streamtube"
  },
  "sunburst": {
   "animatable": true,
   "attributes": {
    "branchvalues": {
     "description": "Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.",
     "dflt": "remainder",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "remainder",
      "total"
     ]
    },
    "count": {
     "description": "Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.",
     "dflt": "leaves",
     "editType": "calc",
     "flags": [
      "branches",
      "leaves"
     ],
     "valType": "flaglist"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this sunburst trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this sunburst trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this sunburst trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this sunburst trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "label+text+value+name",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "name",
      "current path",
      "percent root",
      "percent entry",
      "percent parent"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "anim": true,
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying inside the sector.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "insidetextorientation": {
     "description": "Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.",
     "dflt": "auto",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "horizontal",
      "radial",
      "tangential",
      "auto"
     ]
    },
    "labels": {
     "description": "Sets the labels of each of the sectors.",
     "editType": "calc",
     "valType": "data_array"
    },
    "labelssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  labels .",
     "editType": "none",
     "valType": "string"
    },
    "leaf": {
     "editType": "plot",
     "opacity": {
      "description": "Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7",
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "role": "object"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "level": {
     "anim": true,
     "description": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.",
     "editType": "plot",
     "valType": "any"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colorsis set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if colorsis set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colors": {
      "description": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.",
      "editType": "calc",
      "valType": "data_array"
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if colorsis set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  colors .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.",
       "dflt": null,
       "editType": "style",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the line enclosing each sector.",
       "dflt": 1,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if colorsis set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colorsis set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "maxdepth": {
     "description": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.",
     "dflt": -1,
     "editType": "plot",
     "valType": "integer"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "outsidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented at the center of a sunburst graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "parents": {
     "description": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.",
     "editType": "calc",
     "valType": "data_array"
    },
    "parentssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  parents .",
     "editType": "none",
     "valType": "string"
    },
    "root": {
     "color": {
      "description": "sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object"
    },
    "rotation": {
     "description": "Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.",
     "dflt": 0,
     "editType": "plot",
     "valType": "angle"
    },
    "sort": {
     "description": "Determines whether or not the sectors are reordered from largest to smallest.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "editType": "plot",
     "valType": "data_array"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo`.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textinfo": {
     "description": "Determines which trace information appear on the graph.",
     "editType": "plot",
     "extras": [
      "none"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "current path",
      "percent root",
      "percent entry",
      "percent parent"
     ],
     "valType": "flaglist"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "sunburst",
    "uid": {
     "anim": true,
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "values": {
     "description": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.",
     "editType": "calc",
     "valType": "data_array"
    },
    "valuessrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  values .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [],
   "layoutAttributes": {
    "extendsunburstcolors": {
     "description": "If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "sunburstcolorway": {
     "description": "Sets the default sunburst slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendsunburstcolors`.",
     "editType": "calc",
     "valType": "colorlist"
    }
   },
   "meta": {
    "description": "Visualize hierarchal data spanning outward radially from root to leaves. The sunburst sectors are determined by the entries in *labels* or *ids* and in *parents*."
   },
   "type": "sunburst"
  },
  "surface": {
   "animatable": false,
   "attributes": {
    "_deprecated": {
     "zauto": {
      "description": "Obsolete. Use `cauto` instead.",
      "editType": "calc"
     },
     "zmax": {
      "description": "Obsolete. Use `cmax` instead.",
      "editType": "calc"
     },
     "zmin": {
      "description": "Obsolete. Use `cmin` instead.",
      "editType": "calc"
     }
    },
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": false,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "cmid": {
     "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "cmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "calc",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "calc",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "calc",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "calc",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "calc",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "calc",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "calc",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "calc",
         "items": [
          {
           "editType": "calc",
           "valType": "any"
          },
          {
           "editType": "calc",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "calc",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "calc",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "calc",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "calc",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "calc",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "calc",
      "font": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "calc",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "connectgaps": {
     "description": "Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "contours": {
     "editType": "calc",
     "role": "object",
     "x": {
      "color": {
       "description": "Sets the color of the contour lines.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "end": {
       "description": "Sets the end contour level value. Must be more than `contours.start`",
       "dflt": null,
       "editType": "calc",
       "valType": "number"
      },
      "highlight": {
       "description": "Determines whether or not contour lines about the x dimension are highlighted on hover.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "highlightcolor": {
       "description": "Sets the color of the highlighted contour lines.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "highlightwidth": {
       "description": "Sets the width of the highlighted contour lines.",
       "dflt": 2,
       "editType": "calc",
       "max": 16,
       "min": 1,
       "valType": "number"
      },
      "project": {
       "editType": "calc",
       "role": "object",
       "x": {
        "description": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       },
       "y": {
        "description": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       },
       "z": {
        "description": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       }
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not contour lines about the x dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "size": {
       "description": "Sets the step between each contour level. Must be positive.",
       "dflt": null,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "start": {
       "description": "Sets the starting contour level value. Must be less than `contours.end`",
       "dflt": null,
       "editType": "calc",
       "valType": "number"
      },
      "usecolormap": {
       "description": "An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "width": {
       "description": "Sets the width of the contour lines.",
       "dflt": 2,
       "editType": "calc",
       "max": 16,
       "min": 1,
       "valType": "number"
      }
     },
     "y": {
      "color": {
       "description": "Sets the color of the contour lines.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "end": {
       "description": "Sets the end contour level value. Must be more than `contours.start`",
       "dflt": null,
       "editType": "calc",
       "valType": "number"
      },
      "highlight": {
       "description": "Determines whether or not contour lines about the y dimension are highlighted on hover.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "highlightcolor": {
       "description": "Sets the color of the highlighted contour lines.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "highlightwidth": {
       "description": "Sets the width of the highlighted contour lines.",
       "dflt": 2,
       "editType": "calc",
       "max": 16,
       "min": 1,
       "valType": "number"
      },
      "project": {
       "editType": "calc",
       "role": "object",
       "x": {
        "description": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       },
       "y": {
        "description": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       },
       "z": {
        "description": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       }
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not contour lines about the y dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "size": {
       "description": "Sets the step between each contour level. Must be positive.",
       "dflt": null,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "start": {
       "description": "Sets the starting contour level value. Must be less than `contours.end`",
       "dflt": null,
       "editType": "calc",
       "valType": "number"
      },
      "usecolormap": {
       "description": "An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "width": {
       "description": "Sets the width of the contour lines.",
       "dflt": 2,
       "editType": "calc",
       "max": 16,
       "min": 1,
       "valType": "number"
      }
     },
     "z": {
      "color": {
       "description": "Sets the color of the contour lines.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "editType": "calc",
      "end": {
       "description": "Sets the end contour level value. Must be more than `contours.start`",
       "dflt": null,
       "editType": "calc",
       "valType": "number"
      },
      "highlight": {
       "description": "Determines whether or not contour lines about the z dimension are highlighted on hover.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      },
      "highlightcolor": {
       "description": "Sets the color of the highlighted contour lines.",
       "dflt": "#444",
       "editType": "calc",
       "valType": "color"
      },
      "highlightwidth": {
       "description": "Sets the width of the highlighted contour lines.",
       "dflt": 2,
       "editType": "calc",
       "max": 16,
       "min": 1,
       "valType": "number"
      },
      "project": {
       "editType": "calc",
       "role": "object",
       "x": {
        "description": "Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       },
       "y": {
        "description": "Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       },
       "z": {
        "description": "Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to *true* (the default), the projected lines are shown on hover. If `show` is set to *true*, the projected lines are shown in permanence.",
        "dflt": false,
        "editType": "calc",
        "valType": "boolean"
       }
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not contour lines about the z dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "size": {
       "description": "Sets the step between each contour level. Must be positive.",
       "dflt": null,
       "editType": "calc",
       "min": 0,
       "valType": "number"
      },
      "start": {
       "description": "Sets the starting contour level value. Must be less than `contours.end`",
       "dflt": null,
       "editType": "calc",
       "valType": "number"
      },
      "usecolormap": {
       "description": "An alternate to *color*. Determines whether or not the contour lines are colored using the trace *colorscale*.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      },
      "width": {
       "description": "Sets the width of the contour lines.",
       "dflt": 2,
       "editType": "calc",
       "max": 16,
       "min": 1,
       "valType": "number"
      }
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "hidesurface": {
     "description": "Determines whether or not a surface is drawn. For example, set `hidesurface` to *false* `contours.x.show` to *true* and `contours.y.show` to *true* to draw a wire frame plot.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "lighting": {
     "ambient": {
      "description": "Ambient light increases overall color visibility but can wash out the image.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "diffuse": {
      "description": "Represents the extent that incident rays are reflected in a range of angles.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "fresnel": {
      "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
      "dflt": 0.2,
      "editType": "calc",
      "max": 5,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "roughness": {
      "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
      "dflt": 0.5,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "specular": {
      "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
      "dflt": 0.05,
      "editType": "calc",
      "max": 2,
      "min": 0,
      "valType": "number"
     }
    },
    "lightposition": {
     "editType": "calc",
     "role": "object",
     "x": {
      "description": "Numeric vector, representing the X coordinate for each vertex.",
      "dflt": 10,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "y": {
      "description": "Numeric vector, representing the Y coordinate for each vertex.",
      "dflt": 10000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "z": {
      "description": "Numeric vector, representing the Z coordinate for each vertex.",
      "dflt": 0,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "opacityscale": {
     "description": "Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.",
     "editType": "calc",
     "valType": "any"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "scene": {
     "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
     "dflt": "scene",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "surfacecolor": {
     "description": "Sets the surface color values, used for setting a color scale independent of `z`.",
     "editType": "calc",
     "valType": "data_array"
    },
    "surfacecolorsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  surfacecolor .",
     "editType": "none",
     "valType": "string"
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with each z value. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "type": "surface",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xcalendar": {
     "description": "Sets the calendar system to use with `x` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "ycalendar": {
     "description": "Sets the calendar system to use with `y` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the z coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "zcalendar": {
     "description": "Sets the calendar system to use with `z` date data.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl3d",
    "2dMap",
    "showLegend"
   ],
   "meta": {
    "description": "The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a {2D array}. Coordinates in `x` and `y` can either be 1D {arrays} or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a {2D array}, where its bounds can be controlled using `cmin` and `cmax`."
   },
   "type": "surface"
  },
  "table": {
   "animatable": false,
   "attributes": {
    "cells": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.",
      "dflt": "center",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "fill": {
      "color": {
       "arrayOk": true,
       "description": "Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.",
       "dflt": "white",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object"
     },
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "",
      "editType": "calc",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "calc",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "format": {
      "description": "Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "formatsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  format .",
      "editType": "none",
      "valType": "string"
     },
     "height": {
      "description": "The height of cells.",
      "dflt": 20,
      "editType": "calc",
      "valType": "number"
     },
     "line": {
      "color": {
       "arrayOk": true,
       "dflt": "grey",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "dflt": 1,
       "editType": "calc",
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "prefix": {
      "arrayOk": true,
      "description": "Prefix for cell values.",
      "dflt": null,
      "editType": "calc",
      "valType": "string"
     },
     "prefixsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  prefix .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "suffix": {
      "arrayOk": true,
      "description": "Suffix for cell values.",
      "dflt": null,
      "editType": "calc",
      "valType": "string"
     },
     "suffixsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  suffix .",
      "editType": "none",
      "valType": "string"
     },
     "values": {
      "description": "Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "valuessrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  values .",
      "editType": "none",
      "valType": "string"
     }
    },
    "columnorder": {
     "description": "Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.",
     "editType": "calc",
     "valType": "data_array"
    },
    "columnordersrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  columnorder .",
     "editType": "none",
     "valType": "string"
    },
    "columnwidth": {
     "arrayOk": true,
     "description": "The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.",
     "dflt": null,
     "editType": "calc",
     "valType": "number"
    },
    "columnwidthsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  columnwidth .",
     "editType": "none",
     "valType": "string"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this table trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this table trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this table trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this table trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "editType": "calc",
    "header": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.",
      "dflt": "center",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "calc",
     "fill": {
      "color": {
       "arrayOk": true,
       "description": "Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.",
       "dflt": "white",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object"
     },
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "",
      "editType": "calc",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "calc",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "format": {
      "description": "Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "formatsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  format .",
      "editType": "none",
      "valType": "string"
     },
     "height": {
      "description": "The height of cells.",
      "dflt": 28,
      "editType": "calc",
      "valType": "number"
     },
     "line": {
      "color": {
       "arrayOk": true,
       "dflt": "grey",
       "editType": "calc",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "dflt": 1,
       "editType": "calc",
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "prefix": {
      "arrayOk": true,
      "description": "Prefix for cell values.",
      "dflt": null,
      "editType": "calc",
      "valType": "string"
     },
     "prefixsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  prefix .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "suffix": {
      "arrayOk": true,
      "description": "Suffix for cell values.",
      "dflt": null,
      "editType": "calc",
      "valType": "string"
     },
     "suffixsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  suffix .",
      "editType": "none",
      "valType": "string"
     },
     "values": {
      "description": "Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.",
      "dflt": [],
      "editType": "calc",
      "valType": "data_array"
     },
     "valuessrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  values .",
      "editType": "none",
      "valType": "string"
     }
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "type": "table",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [
    "noOpacity"
   ],
   "meta": {
    "description": "Table view for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a column-major order, ie. the grid is represented as a vector of column vectors."
   },
   "type": "table"
  },
  "treemap": {
   "animatable": true,
   "attributes": {
    "branchvalues": {
     "description": "Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.",
     "dflt": "remainder",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "remainder",
      "total"
     ]
    },
    "count": {
     "description": "Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.",
     "dflt": "leaves",
     "editType": "calc",
     "flags": [
      "branches",
      "leaves"
     ],
     "valType": "flaglist"
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "domain": {
     "column": {
      "description": "If there is a layout grid, use the domain for this column in the grid for this treemap trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "editType": "calc",
     "role": "object",
     "row": {
      "description": "If there is a layout grid, use the domain for this row in the grid for this treemap trace .",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "x": {
      "description": "Sets the horizontal domain of this treemap trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     },
     "y": {
      "description": "Sets the vertical domain of this treemap trace (in plot fraction).",
      "dflt": [
       0,
       1
      ],
      "editType": "calc",
      "items": [
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       },
       {
        "editType": "calc",
        "max": 1,
        "min": 0,
        "valType": "number"
       }
      ],
      "valType": "info_array"
     }
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "label+text+value+name",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "name",
      "current path",
      "percent root",
      "percent entry",
      "percent parent"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "anim": true,
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying inside the sector.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "labels": {
     "description": "Sets the labels of each of the sectors.",
     "editType": "calc",
     "valType": "data_array"
    },
    "labelssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  labels .",
     "editType": "none",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "level": {
     "anim": true,
     "description": "Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.",
     "editType": "plot",
     "valType": "any"
    },
    "marker": {
     "autocolorscale": {
      "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colorsis set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cauto": {
      "description": "Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax`  Has an effect only if colorsis set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.",
      "dflt": true,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "boolean"
     },
     "cmax": {
      "description": "Sets the upper bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "cmid": {
      "description": "Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {},
      "valType": "number"
     },
     "cmin": {
      "description": "Sets the lower bound of the color domain. Has an effect only if colorsis set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.",
      "dflt": null,
      "editType": "plot",
      "impliedEdits": {
       "cauto": false
      },
      "valType": "number"
     },
     "coloraxis": {
      "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
      "dflt": null,
      "editType": "calc",
      "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
      "valType": "subplotid"
     },
     "colorbar": {
      "_deprecated": {
       "title": {
        "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
        "editType": "colorbars",
        "valType": "string"
       },
       "titlefont": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Deprecated in favor of color bar's `title.font`.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "titleside": {
        "description": "Deprecated in favor of color bar's `title.side`.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       }
      },
      "bgcolor": {
       "description": "Sets the color of padded area.",
       "dflt": "rgba(0,0,0,0)",
       "editType": "colorbars",
       "valType": "color"
      },
      "bordercolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "borderwidth": {
       "description": "Sets the width (in px) or the border enclosing this color bar.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "dtick": {
       "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "editType": "colorbars",
      "exponentformat": {
       "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
       "dflt": "B",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "none",
        "e",
        "E",
        "power",
        "SI",
        "B"
       ]
      },
      "len": {
       "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "lenmode": {
       "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
       "dflt": "fraction",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "minexponent": {
       "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
       "dflt": 3,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "nticks": {
       "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
       "dflt": 0,
       "editType": "colorbars",
       "min": 0,
       "valType": "integer"
      },
      "outlinecolor": {
       "description": "Sets the axis line color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "outlinewidth": {
       "description": "Sets the width (in px) of the axis line.",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "separatethousands": {
       "description": "If \"true\", even 4-digit integers are separated",
       "dflt": false,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showexponent": {
       "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticklabels": {
       "description": "Determines whether or not the tick labels are drawn.",
       "dflt": true,
       "editType": "colorbars",
       "valType": "boolean"
      },
      "showtickprefix": {
       "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "showticksuffix": {
       "description": "Same as `showtickprefix` but for tick suffixes.",
       "dflt": "all",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "all",
        "first",
        "last",
        "none"
       ]
      },
      "thickness": {
       "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
       "dflt": 30,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "thicknessmode": {
       "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
       "dflt": "pixels",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "fraction",
        "pixels"
       ]
      },
      "tick0": {
       "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
       "editType": "colorbars",
       "impliedEdits": {
        "tickmode": "linear"
       },
       "valType": "any"
      },
      "tickangle": {
       "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
       "dflt": "auto",
       "editType": "colorbars",
       "valType": "angle"
      },
      "tickcolor": {
       "description": "Sets the tick color.",
       "dflt": "#444",
       "editType": "colorbars",
       "valType": "color"
      },
      "tickfont": {
       "color": {
        "editType": "colorbars",
        "valType": "color"
       },
       "description": "Sets the color bar's tick label font",
       "editType": "colorbars",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "colorbars",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "colorbars",
        "min": 1,
        "valType": "number"
       }
      },
      "tickformat": {
       "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "tickformatstops": {
       "items": {
        "tickformatstop": {
         "dtickrange": {
          "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
          "editType": "colorbars",
          "items": [
           {
            "editType": "colorbars",
            "valType": "any"
           },
           {
            "editType": "colorbars",
            "valType": "any"
           }
          ],
          "valType": "info_array"
         },
         "editType": "colorbars",
         "enabled": {
          "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
          "dflt": true,
          "editType": "colorbars",
          "valType": "boolean"
         },
         "name": {
          "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
          "editType": "colorbars",
          "valType": "string"
         },
         "role": "object",
         "templateitemname": {
          "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
          "editType": "colorbars",
          "valType": "string"
         },
         "value": {
          "description": "string - dtickformat for described zoom level, the same as *tickformat*",
          "dflt": "",
          "editType": "colorbars",
          "valType": "string"
         }
        }
       },
       "role": "object"
      },
      "ticklabeloverflow": {
       "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "allow",
        "hide past div",
        "hide past domain"
       ]
      },
      "ticklabelposition": {
       "description": "Determines where tick labels are drawn.",
       "dflt": "outside",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        "outside top",
        "inside top",
        "outside bottom",
        "inside bottom"
       ]
      },
      "ticklen": {
       "description": "Sets the tick length (in px).",
       "dflt": 5,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "tickmode": {
       "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
       "editType": "colorbars",
       "impliedEdits": {},
       "valType": "enumerated",
       "values": [
        "auto",
        "linear",
        "array"
       ]
      },
      "tickprefix": {
       "description": "Sets a tick label prefix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticks": {
       "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "outside",
        "inside",
        ""
       ]
      },
      "ticksuffix": {
       "description": "Sets a tick label suffix.",
       "dflt": "",
       "editType": "colorbars",
       "valType": "string"
      },
      "ticktext": {
       "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "ticktextsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
       "editType": "none",
       "valType": "string"
      },
      "tickvals": {
       "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
       "editType": "colorbars",
       "valType": "data_array"
      },
      "tickvalssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
       "editType": "none",
       "valType": "string"
      },
      "tickwidth": {
       "description": "Sets the tick width (in px).",
       "dflt": 1,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "title": {
       "editType": "colorbars",
       "font": {
        "color": {
         "editType": "colorbars",
         "valType": "color"
        },
        "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
        "editType": "colorbars",
        "family": {
         "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
         "editType": "colorbars",
         "noBlank": true,
         "strict": true,
         "valType": "string"
        },
        "role": "object",
        "size": {
         "editType": "colorbars",
         "min": 1,
         "valType": "number"
        }
       },
       "role": "object",
       "side": {
        "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
        "dflt": "top",
        "editType": "colorbars",
        "valType": "enumerated",
        "values": [
         "right",
         "top",
         "bottom"
        ]
       },
       "text": {
        "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
        "editType": "colorbars",
        "valType": "string"
       }
      },
      "x": {
       "description": "Sets the x position of the color bar (in plot fraction).",
       "dflt": 1.02,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "xanchor": {
       "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
       "dflt": "left",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "left",
        "center",
        "right"
       ]
      },
      "xpad": {
       "description": "Sets the amount of padding (in px) along the x direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      },
      "y": {
       "description": "Sets the y position of the color bar (in plot fraction).",
       "dflt": 0.5,
       "editType": "colorbars",
       "max": 3,
       "min": -2,
       "valType": "number"
      },
      "yanchor": {
       "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
       "dflt": "middle",
       "editType": "colorbars",
       "valType": "enumerated",
       "values": [
        "top",
        "middle",
        "bottom"
       ]
      },
      "ypad": {
       "description": "Sets the amount of padding (in px) along the y direction.",
       "dflt": 10,
       "editType": "colorbars",
       "min": 0,
       "valType": "number"
      }
     },
     "colors": {
      "description": "Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.",
      "editType": "calc",
      "valType": "data_array"
     },
     "colorscale": {
      "description": "Sets the colorscale. Has an effect only if colorsis set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
      "dflt": null,
      "editType": "calc",
      "impliedEdits": {
       "autocolorscale": false
      },
      "valType": "colorscale"
     },
     "colorssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  colors .",
      "editType": "none",
      "valType": "string"
     },
     "depthfade": {
      "description": "Determines if the sector colors are faded towards the background from the leaves up to the headers. This option is unavailable when a `colorscale` is present, defaults to false when `marker.colors` is set, but otherwise defaults to true. When set to *reversed*, the fading direction is inverted, that is the top elements within hierarchy are drawn with fully saturated colors while the leaves are faded towards the background color.",
      "editType": "style",
      "valType": "enumerated",
      "values": [
       true,
       false,
       "reversed"
      ]
     },
     "editType": "calc",
     "line": {
      "color": {
       "arrayOk": true,
       "description": "Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.",
       "dflt": null,
       "editType": "style",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "editType": "calc",
      "role": "object",
      "width": {
       "arrayOk": true,
       "description": "Sets the width (in px) of the line enclosing each sector.",
       "dflt": 1,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "widthsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  width .",
       "editType": "none",
       "valType": "string"
      }
     },
     "pad": {
      "b": {
       "description": "Sets the padding form the bottom (in px).",
       "editType": "plot",
       "min": 0,
       "valType": "number"
      },
      "editType": "calc",
      "l": {
       "description": "Sets the padding form the left (in px).",
       "editType": "plot",
       "min": 0,
       "valType": "number"
      },
      "r": {
       "description": "Sets the padding form the right (in px).",
       "editType": "plot",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "t": {
       "description": "Sets the padding form the top (in px).",
       "editType": "plot",
       "min": 0,
       "valType": "number"
      }
     },
     "reversescale": {
      "description": "Reverses the color mapping if true. Has an effect only if colorsis set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "role": "object",
     "showscale": {
      "description": "Determines whether or not a colorbar is displayed for this trace. Has an effect only if colorsis set to a numerical array.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "maxdepth": {
     "description": "Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.",
     "dflt": -1,
     "editType": "plot",
     "valType": "integer"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "outsidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "parents": {
     "description": "Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.",
     "editType": "calc",
     "valType": "data_array"
    },
    "parentssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  parents .",
     "editType": "none",
     "valType": "string"
    },
    "pathbar": {
     "edgeshape": {
      "description": "Determines which shape is used for edges between `barpath` labels.",
      "dflt": ">",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       ">",
       "<",
       "|",
       "/",
       "\\"
      ]
     },
     "editType": "calc",
     "role": "object",
     "side": {
      "description": "Determines on which side of the the treemap the `pathbar` should be presented.",
      "dflt": "top",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "top",
       "bottom"
      ]
     },
     "textfont": {
      "color": {
       "arrayOk": true,
       "editType": "plot",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used inside `pathbar`.",
      "editType": "plot",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "plot",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "plot",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "thickness": {
      "description": "Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.",
      "editType": "plot",
      "min": 12,
      "valType": "number"
     },
     "visible": {
      "description": "Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     }
    },
    "root": {
     "color": {
      "description": "sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object"
    },
    "sort": {
     "description": "Determines whether or not the sectors are reordered from largest to smallest.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "description": "Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "editType": "plot",
     "valType": "data_array"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "plot",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `textinfo`.",
     "editType": "plot",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "plot",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textinfo": {
     "description": "Determines which trace information appear on the graph.",
     "editType": "plot",
     "extras": [
      "none"
     ],
     "flags": [
      "label",
      "text",
      "value",
      "current path",
      "percent root",
      "percent entry",
      "percent parent"
     ],
     "valType": "flaglist"
    },
    "textposition": {
     "description": "Sets the positions of the `text` elements.",
     "dflt": "top left",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "top left",
      "top center",
      "top right",
      "middle left",
      "middle center",
      "middle right",
      "bottom left",
      "bottom center",
      "bottom right"
     ]
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "tiling": {
     "editType": "calc",
     "flip": {
      "description": "Determines if the positions obtained from solver are flipped on each axis.",
      "dflt": "",
      "editType": "plot",
      "flags": [
       "x",
       "y"
      ],
      "valType": "flaglist"
     },
     "packing": {
      "description": "Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling",
      "dflt": "squarify",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "squarify",
       "binary",
       "dice",
       "slice",
       "slice-dice",
       "dice-slice"
      ]
     },
     "pad": {
      "description": "Sets the inner padding (in px).",
      "dflt": 3,
      "editType": "plot",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "squarifyratio": {
      "description": "When using *squarify* `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/master/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using *squarify*, unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.",
      "dflt": 1,
      "editType": "plot",
      "min": 1,
      "valType": "number"
     }
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "treemap",
    "uid": {
     "anim": true,
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "values": {
     "description": "Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.",
     "editType": "calc",
     "valType": "data_array"
    },
    "valuessrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  values .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    }
   },
   "categories": [],
   "layoutAttributes": {
    "extendtreemapcolors": {
     "description": "If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "treemapcolorway": {
     "description": "Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.",
     "editType": "calc",
     "valType": "colorlist"
    }
   },
   "meta": {
    "description": "Visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles. The treemap sectors are determined by the entries in *labels* or *ids* and in *parents*."
   },
   "type": "treemap"
  },
  "violin": {
   "animatable": false,
   "attributes": {
    "alignmentgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "bandwidth": {
     "description": "Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.",
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "box": {
     "editType": "plot",
     "fillcolor": {
      "description": "Sets the inner box plot fill color.",
      "editType": "style",
      "valType": "color"
     },
     "line": {
      "color": {
       "description": "Sets the inner box plot bounding line color.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "role": "object",
      "width": {
       "description": "Sets the inner box plot bounding line width.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object",
     "visible": {
      "description": "Determines if an miniature box plot is drawn inside the violins. ",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.",
      "dflt": 0.25,
      "editType": "plot",
      "max": 1,
      "min": 0,
      "valType": "number"
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "fillcolor": {
     "description": "Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.",
     "editType": "style",
     "valType": "color"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hoveron": {
     "description": "Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?",
     "dflt": "violins+points+kde",
     "editType": "style",
     "extras": [
      "all"
     ],
     "flags": [
      "violins",
      "points",
      "kde"
     ],
     "valType": "flaglist"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "jitter": {
     "description": "Sets the amount of jitter in the sample points drawn. If *0*, the sample points align along the distribution axis. If *1*, the sample points are drawn in a random jitter of width equal to the width of the violins.",
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "line": {
     "color": {
      "description": "Sets the color of line bounding the violin(s).",
      "editType": "style",
      "valType": "color"
     },
     "editType": "plot",
     "role": "object",
     "width": {
      "description": "Sets the width (in px) of line bounding the violin(s).",
      "dflt": 2,
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "marker": {
     "color": {
      "arrayOk": false,
      "description": "Sets themarkercolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.",
      "editType": "style",
      "valType": "color"
     },
     "editType": "plot",
     "line": {
      "color": {
       "arrayOk": false,
       "description": "Sets themarker.linecolor. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.",
       "dflt": "#444",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "outliercolor": {
       "description": "Sets the border line color of the outlier sample points. Defaults to marker.color",
       "editType": "style",
       "valType": "color"
      },
      "outlierwidth": {
       "description": "Sets the border line width (in px) of the outlier sample points.",
       "dflt": 1,
       "editType": "style",
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "width": {
       "arrayOk": false,
       "description": "Sets the width (in px) of the lines bounding the marker points.",
       "dflt": 0,
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "opacity": {
      "arrayOk": false,
      "description": "Sets the marker opacity.",
      "dflt": 1,
      "editType": "style",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "outliercolor": {
      "description": "Sets the color of the outlier sample points.",
      "dflt": "rgba(0, 0, 0, 0)",
      "editType": "style",
      "valType": "color"
     },
     "role": "object",
     "size": {
      "arrayOk": false,
      "description": "Sets the marker size (in px).",
      "dflt": 6,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "symbol": {
      "arrayOk": false,
      "description": "Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.",
      "dflt": "circle",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       0,
       "0",
       "circle",
       100,
       "100",
       "circle-open",
       200,
       "200",
       "circle-dot",
       300,
       "300",
       "circle-open-dot",
       1,
       "1",
       "square",
       101,
       "101",
       "square-open",
       201,
       "201",
       "square-dot",
       301,
       "301",
       "square-open-dot",
       2,
       "2",
       "diamond",
       102,
       "102",
       "diamond-open",
       202,
       "202",
       "diamond-dot",
       302,
       "302",
       "diamond-open-dot",
       3,
       "3",
       "cross",
       103,
       "103",
       "cross-open",
       203,
       "203",
       "cross-dot",
       303,
       "303",
       "cross-open-dot",
       4,
       "4",
       "x",
       104,
       "104",
       "x-open",
       204,
       "204",
       "x-dot",
       304,
       "304",
       "x-open-dot",
       5,
       "5",
       "triangle-up",
       105,
       "105",
       "triangle-up-open",
       205,
       "205",
       "triangle-up-dot",
       305,
       "305",
       "triangle-up-open-dot",
       6,
       "6",
       "triangle-down",
       106,
       "106",
       "triangle-down-open",
       206,
       "206",
       "triangle-down-dot",
       306,
       "306",
       "triangle-down-open-dot",
       7,
       "7",
       "triangle-left",
       107,
       "107",
       "triangle-left-open",
       207,
       "207",
       "triangle-left-dot",
       307,
       "307",
       "triangle-left-open-dot",
       8,
       "8",
       "triangle-right",
       108,
       "108",
       "triangle-right-open",
       208,
       "208",
       "triangle-right-dot",
       308,
       "308",
       "triangle-right-open-dot",
       9,
       "9",
       "triangle-ne",
       109,
       "109",
       "triangle-ne-open",
       209,
       "209",
       "triangle-ne-dot",
       309,
       "309",
       "triangle-ne-open-dot",
       10,
       "10",
       "triangle-se",
       110,
       "110",
       "triangle-se-open",
       210,
       "210",
       "triangle-se-dot",
       310,
       "310",
       "triangle-se-open-dot",
       11,
       "11",
       "triangle-sw",
       111,
       "111",
       "triangle-sw-open",
       211,
       "211",
       "triangle-sw-dot",
       311,
       "311",
       "triangle-sw-open-dot",
       12,
       "12",
       "triangle-nw",
       112,
       "112",
       "triangle-nw-open",
       212,
       "212",
       "triangle-nw-dot",
       312,
       "312",
       "triangle-nw-open-dot",
       13,
       "13",
       "pentagon",
       113,
       "113",
       "pentagon-open",
       213,
       "213",
       "pentagon-dot",
       313,
       "313",
       "pentagon-open-dot",
       14,
       "14",
       "hexagon",
       114,
       "114",
       "hexagon-open",
       214,
       "214",
       "hexagon-dot",
       314,
       "314",
       "hexagon-open-dot",
       15,
       "15",
       "hexagon2",
       115,
       "115",
       "hexagon2-open",
       215,
       "215",
       "hexagon2-dot",
       315,
       "315",
       "hexagon2-open-dot",
       16,
       "16",
       "octagon",
       116,
       "116",
       "octagon-open",
       216,
       "216",
       "octagon-dot",
       316,
       "316",
       "octagon-open-dot",
       17,
       "17",
       "star",
       117,
       "117",
       "star-open",
       217,
       "217",
       "star-dot",
       317,
       "317",
       "star-open-dot",
       18,
       "18",
       "hexagram",
       118,
       "118",
       "hexagram-open",
       218,
       "218",
       "hexagram-dot",
       318,
       "318",
       "hexagram-open-dot",
       19,
       "19",
       "star-triangle-up",
       119,
       "119",
       "star-triangle-up-open",
       219,
       "219",
       "star-triangle-up-dot",
       319,
       "319",
       "star-triangle-up-open-dot",
       20,
       "20",
       "star-triangle-down",
       120,
       "120",
       "star-triangle-down-open",
       220,
       "220",
       "star-triangle-down-dot",
       320,
       "320",
       "star-triangle-down-open-dot",
       21,
       "21",
       "star-square",
       121,
       "121",
       "star-square-open",
       221,
       "221",
       "star-square-dot",
       321,
       "321",
       "star-square-open-dot",
       22,
       "22",
       "star-diamond",
       122,
       "122",
       "star-diamond-open",
       222,
       "222",
       "star-diamond-dot",
       322,
       "322",
       "star-diamond-open-dot",
       23,
       "23",
       "diamond-tall",
       123,
       "123",
       "diamond-tall-open",
       223,
       "223",
       "diamond-tall-dot",
       323,
       "323",
       "diamond-tall-open-dot",
       24,
       "24",
       "diamond-wide",
       124,
       "124",
       "diamond-wide-open",
       224,
       "224",
       "diamond-wide-dot",
       324,
       "324",
       "diamond-wide-open-dot",
       25,
       "25",
       "hourglass",
       125,
       "125",
       "hourglass-open",
       26,
       "26",
       "bowtie",
       126,
       "126",
       "bowtie-open",
       27,
       "27",
       "circle-cross",
       127,
       "127",
       "circle-cross-open",
       28,
       "28",
       "circle-x",
       128,
       "128",
       "circle-x-open",
       29,
       "29",
       "square-cross",
       129,
       "129",
       "square-cross-open",
       30,
       "30",
       "square-x",
       130,
       "130",
       "square-x-open",
       31,
       "31",
       "diamond-cross",
       131,
       "131",
       "diamond-cross-open",
       32,
       "32",
       "diamond-x",
       132,
       "132",
       "diamond-x-open",
       33,
       "33",
       "cross-thin",
       133,
       "133",
       "cross-thin-open",
       34,
       "34",
       "x-thin",
       134,
       "134",
       "x-thin-open",
       35,
       "35",
       "asterisk",
       135,
       "135",
       "asterisk-open",
       36,
       "36",
       "hash",
       136,
       "136",
       "hash-open",
       236,
       "236",
       "hash-dot",
       336,
       "336",
       "hash-open-dot",
       37,
       "37",
       "y-up",
       137,
       "137",
       "y-up-open",
       38,
       "38",
       "y-down",
       138,
       "138",
       "y-down-open",
       39,
       "39",
       "y-left",
       139,
       "139",
       "y-left-open",
       40,
       "40",
       "y-right",
       140,
       "140",
       "y-right-open",
       41,
       "41",
       "line-ew",
       141,
       "141",
       "line-ew-open",
       42,
       "42",
       "line-ns",
       142,
       "142",
       "line-ns-open",
       43,
       "43",
       "line-ne",
       143,
       "143",
       "line-ne-open",
       44,
       "44",
       "line-nw",
       144,
       "144",
       "line-nw-open",
       45,
       "45",
       "arrow-up",
       145,
       "145",
       "arrow-up-open",
       46,
       "46",
       "arrow-down",
       146,
       "146",
       "arrow-down-open",
       47,
       "47",
       "arrow-left",
       147,
       "147",
       "arrow-left-open",
       48,
       "48",
       "arrow-right",
       148,
       "148",
       "arrow-right-open",
       49,
       "49",
       "arrow-bar-up",
       149,
       "149",
       "arrow-bar-up-open",
       50,
       "50",
       "arrow-bar-down",
       150,
       "150",
       "arrow-bar-down-open",
       51,
       "51",
       "arrow-bar-left",
       151,
       "151",
       "arrow-bar-left-open",
       52,
       "52",
       "arrow-bar-right",
       152,
       "152",
       "arrow-bar-right-open"
      ]
     }
    },
    "meanline": {
     "color": {
      "description": "Sets the mean line color.",
      "editType": "style",
      "valType": "color"
     },
     "editType": "plot",
     "role": "object",
     "visible": {
      "description": "Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.",
      "dflt": false,
      "editType": "plot",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the mean line width.",
      "editType": "style",
      "min": 0,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute `scalegroup` (please see its description for details).",
     "editType": "calc+clearAxisTypes",
     "valType": "string"
    },
    "offsetgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "orientation": {
     "description": "Sets the orientation of the violin(s). If *v* (*h*), the distribution is visualized along the vertical (horizontal).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "pointpos": {
     "description": "Sets the position of the sample points in relation to the violins. If *0*, the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.",
     "editType": "calc",
     "max": 2,
     "min": -2,
     "valType": "number"
    },
    "points": {
     "description": "If *outliers*, only the sample points lying outside the whiskers are shown If *suspectedoutliers*, the outlier points are shown and points either less than 4*Q1-3*Q3 or greater than 4*Q3-3*Q1 are highlighted (see `outliercolor`) If *all*, all sample points are shown If *false*, only the violins are shown with no sample points. Defaults to *suspectedoutliers* when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to *outliers*.",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "all",
      "outliers",
      "suspectedoutliers",
      false
     ]
    },
    "scalegroup": {
     "description": "If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "scalemode": {
     "description": "Sets the metric by which the width of each violin is determined.*width* means each violin has the same (max) width*count* means the violins are scaled by the number of sample points makingup each violin.",
     "dflt": "width",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "width",
      "count"
     ]
    },
    "selected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of selected points.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of selected points.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of selected points.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "side": {
     "description": "Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under *overlay* mode, where one trace has `side` set to *positive* and the other to *negative*.",
     "dflt": "both",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "both",
      "positive",
      "negative"
     ]
    },
    "span": {
     "description": "Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to *manual*.",
     "editType": "calc",
     "items": [
      {
       "editType": "calc",
       "valType": "any"
      },
      {
       "editType": "calc",
       "valType": "any"
      }
     ],
     "valType": "info_array"
    },
    "spanmode": {
     "description": "Sets the method by which the span in data space where the density function will be computed. *soft* means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. *hard* means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode *manual* and fill in the `span` attribute.",
     "dflt": "soft",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "soft",
      "hard",
      "manual"
     ]
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "violin",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "unselected": {
     "editType": "style",
     "marker": {
      "color": {
       "description": "Sets the marker color of unselected points, applied only when a selection exists.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "opacity": {
       "description": "Sets the marker opacity of unselected points, applied only when a selection exists.",
       "editType": "style",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "size": {
       "description": "Sets the marker size of unselected points, applied only when a selection exists.",
       "editType": "style",
       "min": 0,
       "valType": "number"
      }
     },
     "role": "object"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "width": {
     "description": "Sets the width of the violin in data coordinates. If *0* (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.",
     "dflt": 0,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "x": {
     "description": "Sets the x sample data or coordinates. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "x0": {
     "description": "Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y sample data or coordinates. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "y0": {
     "description": "Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.",
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "cartesian",
    "svg",
    "symbols",
    "oriented",
    "box-violin",
    "showLegend",
    "violinLayout",
    "zoomScale"
   ],
   "layoutAttributes": {
    "violingap": {
     "description": "Sets the gap (in plot fraction) between violins of adjacent location coordinates. Has no effect on traces that have *width* set.",
     "dflt": 0.3,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "violingroupgap": {
     "description": "Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have *width* set.",
     "dflt": 0.3,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "violinmode": {
     "description": "Determines how violins at the same location coordinate are displayed on the graph. If *group*, the violins are plotted next to one another centered around the shared location. If *overlay*, the violins are plotted over one another, you might need to set *opacity* to see them multiple violins. Has no effect on traces that have *width* set.",
     "dflt": "overlay",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "group",
      "overlay"
     ]
    }
   },
   "meta": {
    "description": "In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) {array} is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided."
   },
   "type": "violin"
  },
  "volume": {
   "animatable": false,
   "attributes": {
    "autocolorscale": {
     "description": "Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default  palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "caps": {
     "editType": "calc",
     "role": "object",
     "x": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "show": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "y": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "show": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "z": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "role": "object",
      "show": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": true,
       "editType": "calc",
       "valType": "boolean"
      }
     }
    },
    "cauto": {
     "description": "Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax`  Defaults to `false` when `cmin` and `cmax` are set by the user.",
     "dflt": true,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "boolean"
    },
    "cmax": {
     "description": "Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "cmid": {
     "description": "Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {},
     "valType": "number"
    },
    "cmin": {
     "description": "Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "cauto": false
     },
     "valType": "number"
    },
    "coloraxis": {
     "description": "Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.",
     "dflt": null,
     "editType": "calc",
     "regex": "/^coloraxis([2-9]|[1-9][0-9]+)?$/",
     "valType": "subplotid"
    },
    "colorbar": {
     "_deprecated": {
      "title": {
       "description": "Deprecated in favor of color bar's `title.text`. Note that value of color bar's `title` is no longer a simple *string* but a set of sub-attributes.",
       "editType": "calc",
       "valType": "string"
      },
      "titlefont": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Deprecated in favor of color bar's `title.font`.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "titleside": {
       "description": "Deprecated in favor of color bar's `title.side`.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      }
     },
     "bgcolor": {
      "description": "Sets the color of padded area.",
      "dflt": "rgba(0,0,0,0)",
      "editType": "calc",
      "valType": "color"
     },
     "bordercolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "borderwidth": {
      "description": "Sets the width (in px) or the border enclosing this color bar.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "dtick": {
      "description": "Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "editType": "calc",
     "exponentformat": {
      "description": "Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.",
      "dflt": "B",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "none",
       "e",
       "E",
       "power",
       "SI",
       "B"
      ]
     },
     "len": {
      "description": "Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "lenmode": {
      "description": "Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.",
      "dflt": "fraction",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "minexponent": {
      "description": "Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.",
      "dflt": 3,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "nticks": {
      "description": "Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.",
      "dflt": 0,
      "editType": "calc",
      "min": 0,
      "valType": "integer"
     },
     "outlinecolor": {
      "description": "Sets the axis line color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "outlinewidth": {
      "description": "Sets the width (in px) of the axis line.",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "separatethousands": {
      "description": "If \"true\", even 4-digit integers are separated",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "showexponent": {
      "description": "If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticklabels": {
      "description": "Determines whether or not the tick labels are drawn.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     },
     "showtickprefix": {
      "description": "If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "showticksuffix": {
      "description": "Same as `showtickprefix` but for tick suffixes.",
      "dflt": "all",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "all",
       "first",
       "last",
       "none"
      ]
     },
     "thickness": {
      "description": "Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.",
      "dflt": 30,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "thicknessmode": {
      "description": "Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.",
      "dflt": "pixels",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "fraction",
       "pixels"
      ]
     },
     "tick0": {
      "description": "Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.",
      "editType": "calc",
      "impliedEdits": {
       "tickmode": "linear"
      },
      "valType": "any"
     },
     "tickangle": {
      "description": "Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.",
      "dflt": "auto",
      "editType": "calc",
      "valType": "angle"
     },
     "tickcolor": {
      "description": "Sets the tick color.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "tickfont": {
      "color": {
       "editType": "calc",
       "valType": "color"
      },
      "description": "Sets the color bar's tick label font",
      "editType": "calc",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "calc",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "calc",
       "min": 1,
       "valType": "number"
      }
     },
     "tickformat": {
      "description": "Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "tickformatstops": {
      "items": {
       "tickformatstop": {
        "dtickrange": {
         "description": "range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*",
         "editType": "calc",
         "items": [
          {
           "editType": "calc",
           "valType": "any"
          },
          {
           "editType": "calc",
           "valType": "any"
          }
         ],
         "valType": "info_array"
        },
        "editType": "calc",
        "enabled": {
         "description": "Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.",
         "dflt": true,
         "editType": "calc",
         "valType": "boolean"
        },
        "name": {
         "description": "When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.",
         "editType": "calc",
         "valType": "string"
        },
        "role": "object",
        "templateitemname": {
         "description": "Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.",
         "editType": "calc",
         "valType": "string"
        },
        "value": {
         "description": "string - dtickformat for described zoom level, the same as *tickformat*",
         "dflt": "",
         "editType": "calc",
         "valType": "string"
        }
       }
      },
      "role": "object"
     },
     "ticklabeloverflow": {
      "description": "Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "allow",
       "hide past div",
       "hide past domain"
      ]
     },
     "ticklabelposition": {
      "description": "Determines where tick labels are drawn.",
      "dflt": "outside",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       "outside top",
       "inside top",
       "outside bottom",
       "inside bottom"
      ]
     },
     "ticklen": {
      "description": "Sets the tick length (in px).",
      "dflt": 5,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "tickmode": {
      "description": "Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).",
      "editType": "calc",
      "impliedEdits": {},
      "valType": "enumerated",
      "values": [
       "auto",
       "linear",
       "array"
      ]
     },
     "tickprefix": {
      "description": "Sets a tick label prefix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticks": {
      "description": "Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.",
      "dflt": "",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "outside",
       "inside",
       ""
      ]
     },
     "ticksuffix": {
      "description": "Sets a tick label suffix.",
      "dflt": "",
      "editType": "calc",
      "valType": "string"
     },
     "ticktext": {
      "description": "Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "ticktextsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  ticktext .",
      "editType": "none",
      "valType": "string"
     },
     "tickvals": {
      "description": "Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.",
      "editType": "calc",
      "valType": "data_array"
     },
     "tickvalssrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  tickvals .",
      "editType": "none",
      "valType": "string"
     },
     "tickwidth": {
      "description": "Sets the tick width (in px).",
      "dflt": 1,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "title": {
      "editType": "calc",
      "font": {
       "color": {
        "editType": "calc",
        "valType": "color"
       },
       "description": "Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.",
       "editType": "calc",
       "family": {
        "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
        "editType": "calc",
        "noBlank": true,
        "strict": true,
        "valType": "string"
       },
       "role": "object",
       "size": {
        "editType": "calc",
        "min": 1,
        "valType": "number"
       }
      },
      "role": "object",
      "side": {
       "description": "Determines the location of color bar's title with respect to the color bar. Note that the title's location used to be set by the now deprecated `titleside` attribute.",
       "dflt": "top",
       "editType": "calc",
       "valType": "enumerated",
       "values": [
        "right",
        "top",
        "bottom"
       ]
      },
      "text": {
       "description": "Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.",
       "editType": "calc",
       "valType": "string"
      }
     },
     "x": {
      "description": "Sets the x position of the color bar (in plot fraction).",
      "dflt": 1.02,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "xanchor": {
      "description": "Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar.",
      "dflt": "left",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "left",
       "center",
       "right"
      ]
     },
     "xpad": {
      "description": "Sets the amount of padding (in px) along the x direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     },
     "y": {
      "description": "Sets the y position of the color bar (in plot fraction).",
      "dflt": 0.5,
      "editType": "calc",
      "max": 3,
      "min": -2,
      "valType": "number"
     },
     "yanchor": {
      "description": "Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar.",
      "dflt": "middle",
      "editType": "calc",
      "valType": "enumerated",
      "values": [
       "top",
       "middle",
       "bottom"
      ]
     },
     "ypad": {
      "description": "Sets the amount of padding (in px) along the y direction.",
      "dflt": 10,
      "editType": "calc",
      "min": 0,
      "valType": "number"
     }
    },
    "colorscale": {
     "description": "Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use`cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.",
     "dflt": null,
     "editType": "calc",
     "impliedEdits": {
      "autocolorscale": false
     },
     "valType": "colorscale"
    },
    "contour": {
     "color": {
      "description": "Sets the color of the contour lines.",
      "dflt": "#444",
      "editType": "calc",
      "valType": "color"
     },
     "editType": "calc",
     "role": "object",
     "show": {
      "description": "Sets whether or not dynamic contours are shown on hover",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     },
     "width": {
      "description": "Sets the width of the contour lines.",
      "dflt": 2,
      "editType": "calc",
      "max": 16,
      "min": 1,
      "valType": "number"
     }
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "flatshading": {
     "description": "Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "calc",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "x",
      "y",
      "z",
      "text",
      "name"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Same as `text`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "isomax": {
     "description": "Sets the maximum boundary for iso-surface plot.",
     "editType": "calc",
     "valType": "number"
    },
    "isomin": {
     "description": "Sets the minimum boundary for iso-surface plot.",
     "editType": "calc",
     "valType": "number"
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "lighting": {
     "ambient": {
      "description": "Ambient light increases overall color visibility but can wash out the image.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "diffuse": {
      "description": "Represents the extent that incident rays are reflected in a range of angles.",
      "dflt": 0.8,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "editType": "calc",
     "facenormalsepsilon": {
      "description": "Epsilon for face normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 0,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "fresnel": {
      "description": "Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.",
      "dflt": 0.2,
      "editType": "calc",
      "max": 5,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "roughness": {
      "description": "Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.",
      "dflt": 0.5,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "specular": {
      "description": "Represents the level that incident rays are reflected in a single direction, causing shine.",
      "dflt": 0.05,
      "editType": "calc",
      "max": 2,
      "min": 0,
      "valType": "number"
     },
     "vertexnormalsepsilon": {
      "description": "Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.",
      "dflt": 1e-12,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     }
    },
    "lightposition": {
     "editType": "calc",
     "role": "object",
     "x": {
      "description": "Numeric vector, representing the X coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "y": {
      "description": "Numeric vector, representing the Y coordinate for each vertex.",
      "dflt": 100000,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     },
     "z": {
      "description": "Numeric vector, representing the Z coordinate for each vertex.",
      "dflt": 0,
      "editType": "calc",
      "max": 100000,
      "min": -100000,
      "valType": "number"
     }
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.",
     "dflt": 1,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "opacityscale": {
     "description": "Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.",
     "editType": "calc",
     "valType": "any"
    },
    "reversescale": {
     "description": "Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "scene": {
     "description": "Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.",
     "dflt": "scene",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "showscale": {
     "description": "Determines whether or not a colorbar is displayed for this trace.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "slices": {
     "editType": "calc",
     "role": "object",
     "x": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "locations": {
       "description": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.",
       "dflt": [],
       "editType": "calc",
       "valType": "data_array"
      },
      "locationssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  locations .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not slice planes about the x dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "y": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "locations": {
       "description": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.",
       "dflt": [],
       "editType": "calc",
       "valType": "data_array"
      },
      "locationssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  locations .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not slice planes about the y dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     },
     "z": {
      "editType": "calc",
      "fill": {
       "description": "Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
       "dflt": 1,
       "editType": "calc",
       "max": 1,
       "min": 0,
       "valType": "number"
      },
      "locations": {
       "description": "Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.",
       "dflt": [],
       "editType": "calc",
       "valType": "data_array"
      },
      "locationssrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  locations .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "show": {
       "description": "Determines whether or not slice planes about the z dimension are drawn.",
       "dflt": false,
       "editType": "calc",
       "valType": "boolean"
      }
     }
    },
    "spaceframe": {
     "editType": "calc",
     "fill": {
      "description": "Sets the fill ratio of the `spaceframe` elements. The default fill value is 1 meaning that they are entirely shaded. Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
      "dflt": 1,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "show": {
      "description": "Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.",
      "dflt": false,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "surface": {
     "count": {
      "description": "Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.",
      "dflt": 2,
      "editType": "calc",
      "min": 1,
      "valType": "integer"
     },
     "editType": "calc",
     "fill": {
      "description": "Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.",
      "dflt": 1,
      "editType": "calc",
      "max": 1,
      "min": 0,
      "valType": "number"
     },
     "pattern": {
      "description": "Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.",
      "dflt": "all",
      "editType": "calc",
      "extras": [
       "all",
       "odd",
       "even"
      ],
      "flags": [
       "A",
       "B",
       "C",
       "D",
       "E"
      ],
      "valType": "flaglist"
     },
     "role": "object",
     "show": {
      "description": "Hides/displays surfaces between minimum and maximum iso-values.",
      "dflt": true,
      "editType": "calc",
      "valType": "boolean"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "type": "volume",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "value": {
     "description": "Sets the 4th dimension (value) of the vertices.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "valuehoverformat": {
     "description": "Sets the hover text formatting rulefor `value`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "valuesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  value .",
     "editType": "none",
     "valType": "string"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "x": {
     "description": "Sets the X coordinates of the vertices on X axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the Y coordinates of the vertices on Y axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    },
    "z": {
     "description": "Sets the Z coordinates of the vertices on Z axis.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "zhoverformat": {
     "description": "Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "zsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  z .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "gl3d",
    "showLegend"
   ],
   "meta": {
    "description": "Draws volume trace between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid. Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace."
   },
   "type": "volume"
  },
  "waterfall": {
   "animatable": false,
   "attributes": {
    "alignmentgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "base": {
     "arrayOk": false,
     "description": "Sets where the bar base is drawn (in position axis units).",
     "dflt": null,
     "editType": "calc",
     "valType": "number"
    },
    "cliponaxis": {
     "description": "Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.",
     "dflt": true,
     "editType": "plot",
     "valType": "boolean"
    },
    "connector": {
     "editType": "plot",
     "line": {
      "color": {
       "description": "Sets the line color.",
       "dflt": "#444",
       "editType": "style",
       "valType": "color"
      },
      "dash": {
       "description": "Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).",
       "dflt": "solid",
       "editType": "style",
       "valType": "string",
       "values": [
        "solid",
        "dot",
        "dash",
        "longdash",
        "dashdot",
        "longdashdot"
       ]
      },
      "editType": "plot",
      "role": "object",
      "width": {
       "description": "Sets the line width (in px).",
       "dflt": 2,
       "editType": "plot",
       "min": 0,
       "valType": "number"
      }
     },
     "mode": {
      "description": "Sets the shape of connector lines.",
      "dflt": "between",
      "editType": "plot",
      "valType": "enumerated",
      "values": [
       "spanning",
       "between"
      ]
     },
     "role": "object",
     "visible": {
      "description": "Determines if connector lines are drawn. ",
      "dflt": true,
      "editType": "plot",
      "valType": "boolean"
     }
    },
    "constraintext": {
     "description": "Constrain the size of text inside or outside a bar to be no larger than the bar itself.",
     "dflt": "both",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "inside",
      "outside",
      "both",
      "none"
     ]
    },
    "customdata": {
     "description": "Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements",
     "editType": "calc",
     "valType": "data_array"
    },
    "customdatasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  customdata .",
     "editType": "none",
     "valType": "string"
    },
    "decreasing": {
     "editType": "style",
     "marker": {
      "color": {
       "arrayOk": false,
       "description": "Sets the marker color of all decreasing values.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "line": {
       "color": {
        "arrayOk": false,
        "description": "Sets the line color of all decreasing values.",
        "editType": "style",
        "valType": "color"
       },
       "editType": "style",
       "role": "object",
       "width": {
        "arrayOk": false,
        "description": "Sets the line width of all decreasing values.",
        "dflt": 0,
        "editType": "style",
        "min": 0,
        "valType": "number"
       }
      },
      "role": "object"
     },
     "role": "object"
    },
    "dx": {
     "description": "Sets the x coordinate step. See `x0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "dy": {
     "description": "Sets the y coordinate step. See `y0` for more info.",
     "dflt": 1,
     "editType": "calc",
     "valType": "number"
    },
    "hoverinfo": {
     "arrayOk": true,
     "description": "Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.",
     "dflt": "all",
     "editType": "none",
     "extras": [
      "all",
      "none",
      "skip"
     ],
     "flags": [
      "name",
      "x",
      "y",
      "text",
      "initial",
      "delta",
      "final"
     ],
     "valType": "flaglist"
    },
    "hoverinfosrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hoverinfo .",
     "editType": "none",
     "valType": "string"
    },
    "hoverlabel": {
     "align": {
      "arrayOk": true,
      "description": "Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines",
      "dflt": "auto",
      "editType": "none",
      "valType": "enumerated",
      "values": [
       "left",
       "right",
       "auto"
      ]
     },
     "alignsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  align .",
      "editType": "none",
      "valType": "string"
     },
     "bgcolor": {
      "arrayOk": true,
      "description": "Sets the background color of the hover labels for this trace",
      "editType": "none",
      "valType": "color"
     },
     "bgcolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bgcolor .",
      "editType": "none",
      "valType": "string"
     },
     "bordercolor": {
      "arrayOk": true,
      "description": "Sets the border color of the hover labels for this trace.",
      "editType": "none",
      "valType": "color"
     },
     "bordercolorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  bordercolor .",
      "editType": "none",
      "valType": "string"
     },
     "editType": "none",
     "font": {
      "color": {
       "arrayOk": true,
       "editType": "none",
       "valType": "color"
      },
      "colorsrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  color .",
       "editType": "none",
       "valType": "string"
      },
      "description": "Sets the font used in hover labels.",
      "editType": "none",
      "family": {
       "arrayOk": true,
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "none",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "familysrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  family .",
       "editType": "none",
       "valType": "string"
      },
      "role": "object",
      "size": {
       "arrayOk": true,
       "editType": "none",
       "min": 1,
       "valType": "number"
      },
      "sizesrc": {
       "description": "Sets the source reference on Chart Studio Cloud for  size .",
       "editType": "none",
       "valType": "string"
      }
     },
     "namelength": {
      "arrayOk": true,
      "description": "Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.",
      "dflt": 15,
      "editType": "none",
      "min": -1,
      "valType": "integer"
     },
     "namelengthsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  namelength .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object"
    },
    "hovertemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `initial`, `delta` and `final`. Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\". To hide the secondary box completely, use an empty tag `<extra></extra>`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "hovertemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertemplate .",
     "editType": "none",
     "valType": "string"
    },
    "hovertext": {
     "arrayOk": true,
     "description": "Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "hovertextsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  hovertext .",
     "editType": "none",
     "valType": "string"
    },
    "ids": {
     "description": "Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.",
     "editType": "calc",
     "valType": "data_array"
    },
    "idssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  ids .",
     "editType": "none",
     "valType": "string"
    },
    "increasing": {
     "editType": "style",
     "marker": {
      "color": {
       "arrayOk": false,
       "description": "Sets the marker color of all increasing values.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "line": {
       "color": {
        "arrayOk": false,
        "description": "Sets the line color of all increasing values.",
        "editType": "style",
        "valType": "color"
       },
       "editType": "style",
       "role": "object",
       "width": {
        "arrayOk": false,
        "description": "Sets the line width of all increasing values.",
        "dflt": 0,
        "editType": "style",
        "min": 0,
        "valType": "number"
       }
      },
      "role": "object"
     },
     "role": "object"
    },
    "insidetextanchor": {
     "description": "Determines if texts are kept at center or start/end points in `textposition` *inside* mode.",
     "dflt": "end",
     "editType": "plot",
     "valType": "enumerated",
     "values": [
      "end",
      "middle",
      "start"
     ]
    },
    "insidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text` lying inside the bar.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "legendgroup": {
     "description": "Sets the legend group for this trace. Traces part of the same legend group hide/show at the same time when toggling legend items.",
     "dflt": "",
     "editType": "style",
     "valType": "string"
    },
    "legendgrouptitle": {
     "editType": "style",
     "font": {
      "color": {
       "editType": "style",
       "valType": "color"
      },
      "description": "Sets this legend group's title font.",
      "editType": "style",
      "family": {
       "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
       "editType": "style",
       "noBlank": true,
       "strict": true,
       "valType": "string"
      },
      "role": "object",
      "size": {
       "editType": "style",
       "min": 1,
       "valType": "number"
      }
     },
     "role": "object",
     "text": {
      "description": "Sets the title of the legend group.",
      "dflt": "",
      "editType": "style",
      "valType": "string"
     }
    },
    "legendrank": {
     "description": "Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with `*reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.",
     "dflt": 1000,
     "editType": "style",
     "valType": "number"
    },
    "measure": {
     "description": "An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.",
     "dflt": [],
     "editType": "calc",
     "valType": "data_array"
    },
    "measuresrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  measure .",
     "editType": "none",
     "valType": "string"
    },
    "meta": {
     "arrayOk": true,
     "description": "Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.",
     "editType": "plot",
     "valType": "any"
    },
    "metasrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  meta .",
     "editType": "none",
     "valType": "string"
    },
    "name": {
     "description": "Sets the trace name. The trace name appear as the legend item and on hover.",
     "editType": "style",
     "valType": "string"
    },
    "offset": {
     "arrayOk": true,
     "description": "Shifts the position where the bar is drawn (in position axis units). In *group* barmode, traces that set *offset* will be excluded and drawn in *overlay* mode instead.",
     "dflt": null,
     "editType": "calc",
     "valType": "number"
    },
    "offsetgroup": {
     "description": "Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "offsetsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  offset .",
     "editType": "none",
     "valType": "string"
    },
    "opacity": {
     "description": "Sets the opacity of the trace.",
     "dflt": 1,
     "editType": "style",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "orientation": {
     "description": "Sets the orientation of the bars. With *v* (*h*), the value of the each bar spans along the vertical (horizontal).",
     "editType": "calc+clearAxisTypes",
     "valType": "enumerated",
     "values": [
      "v",
      "h"
     ]
    },
    "outsidetextfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text` lying outside the bar.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "selectedpoints": {
     "description": "Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.",
     "editType": "calc",
     "valType": "any"
    },
    "showlegend": {
     "description": "Determines whether or not an item corresponding to this trace is shown in the legend.",
     "dflt": true,
     "editType": "style",
     "valType": "boolean"
    },
    "stream": {
     "editType": "calc",
     "maxpoints": {
      "description": "Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.",
      "dflt": 500,
      "editType": "calc",
      "max": 10000,
      "min": 0,
      "valType": "number"
     },
     "role": "object",
     "token": {
      "description": "The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     }
    },
    "text": {
     "arrayOk": true,
     "description": "Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.",
     "dflt": "",
     "editType": "calc",
     "valType": "string"
    },
    "textangle": {
     "description": "Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With *auto* the texts may automatically be rotated to fit with the maximum size in bars.",
     "dflt": "auto",
     "editType": "plot",
     "valType": "angle"
    },
    "textfont": {
     "color": {
      "arrayOk": true,
      "editType": "style",
      "valType": "color"
     },
     "colorsrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  color .",
      "editType": "none",
      "valType": "string"
     },
     "description": "Sets the font used for `text`.",
     "editType": "calc",
     "family": {
      "arrayOk": true,
      "description": "HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.",
      "editType": "calc",
      "noBlank": true,
      "strict": true,
      "valType": "string"
     },
     "familysrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  family .",
      "editType": "none",
      "valType": "string"
     },
     "role": "object",
     "size": {
      "arrayOk": true,
      "editType": "calc",
      "min": 1,
      "valType": "number"
     },
     "sizesrc": {
      "description": "Sets the source reference on Chart Studio Cloud for  size .",
      "editType": "none",
      "valType": "string"
     }
    },
    "textinfo": {
     "arrayOk": false,
     "description": "Determines which trace information appear on the graph. In the case of having multiple waterfalls, totals are computed separately (per trace).",
     "editType": "plot",
     "extras": [
      "none"
     ],
     "flags": [
      "label",
      "text",
      "initial",
      "delta",
      "final"
     ],
     "valType": "flaglist"
    },
    "textposition": {
     "arrayOk": true,
     "description": "Specifies the location of the `text`. *inside* positions `text` inside, next to the bar end (rotated and scaled if needed). *outside* positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. *auto* tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If *none*, no text appears.",
     "dflt": "auto",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "inside",
      "outside",
      "auto",
      "none"
     ]
    },
    "textpositionsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  textposition .",
     "editType": "none",
     "valType": "string"
    },
    "textsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  text .",
     "editType": "none",
     "valType": "string"
    },
    "texttemplate": {
     "arrayOk": true,
     "description": "Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. variables `initial`, `delta`, `final` and `label`.",
     "dflt": "",
     "editType": "plot",
     "valType": "string"
    },
    "texttemplatesrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  texttemplate .",
     "editType": "none",
     "valType": "string"
    },
    "totals": {
     "editType": "style",
     "marker": {
      "color": {
       "arrayOk": false,
       "description": "Sets the marker color of all intermediate sums and total values.",
       "editType": "style",
       "valType": "color"
      },
      "editType": "style",
      "line": {
       "color": {
        "arrayOk": false,
        "description": "Sets the line color of all intermediate sums and total values.",
        "editType": "style",
        "valType": "color"
       },
       "editType": "style",
       "role": "object",
       "width": {
        "arrayOk": false,
        "description": "Sets the line width of all intermediate sums and total values.",
        "dflt": 0,
        "editType": "style",
        "min": 0,
        "valType": "number"
       }
      },
      "role": "object"
     },
     "role": "object"
    },
    "transforms": {
     "items": {
      "transform": {
       "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.",
       "editType": "calc",
       "role": "object"
      }
     },
     "role": "object"
    },
    "type": "waterfall",
    "uid": {
     "description": "Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.",
     "editType": "plot",
     "valType": "string"
    },
    "uirevision": {
     "description": "Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.",
     "editType": "none",
     "valType": "any"
    },
    "visible": {
     "description": "Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).",
     "dflt": true,
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      true,
      false,
      "legendonly"
     ]
    },
    "width": {
     "arrayOk": true,
     "description": "Sets the bar width (in position axis units).",
     "dflt": null,
     "editType": "calc",
     "min": 0,
     "valType": "number"
    },
    "widthsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  width .",
     "editType": "none",
     "valType": "string"
    },
    "x": {
     "description": "Sets the x coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "x0": {
     "description": "Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "xaxis": {
     "description": "Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.",
     "dflt": "x",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "xhoverformat": {
     "description": "Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "xperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "xperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "xperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "xsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  x .",
     "editType": "none",
     "valType": "string"
    },
    "y": {
     "description": "Sets the y coordinates.",
     "editType": "calc+clearAxisTypes",
     "valType": "data_array"
    },
    "y0": {
     "description": "Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.",
     "dflt": 0,
     "editType": "calc+clearAxisTypes",
     "valType": "any"
    },
    "yaxis": {
     "description": "Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.",
     "dflt": "y",
     "editType": "calc+clearAxisTypes",
     "valType": "subplotid"
    },
    "yhoverformat": {
     "description": "Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.",
     "dflt": "",
     "editType": "none",
     "valType": "string"
    },
    "yperiod": {
     "description": "Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "yperiod0": {
     "description": "Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.",
     "editType": "calc",
     "valType": "any"
    },
    "yperiodalignment": {
     "description": "Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.",
     "dflt": "middle",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "start",
      "middle",
      "end"
     ]
    },
    "ysrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  y .",
     "editType": "none",
     "valType": "string"
    }
   },
   "categories": [
    "bar-like",
    "cartesian",
    "svg",
    "oriented",
    "showLegend",
    "zoomScale"
   ],
   "layoutAttributes": {
    "waterfallgap": {
     "description": "Sets the gap (in plot fraction) between bars of adjacent location coordinates.",
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "waterfallgroupgap": {
     "description": "Sets the gap (in plot fraction) between bars of the same location coordinate.",
     "dflt": 0,
     "editType": "calc",
     "max": 1,
     "min": 0,
     "valType": "number"
    },
    "waterfallmode": {
     "description": "Determines how bars at the same location coordinate are displayed on the graph. With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to an *opacity* to see multiple bars.",
     "dflt": "group",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "group",
      "overlay"
     ]
    }
   },
   "meta": {
    "description": "Draws waterfall trace which is useful graph to displays the contribution of various elements (either positive or negative) in a bar chart. The data visualized by the span of the bars is set in `y` if `orientation` is set th *v* (the default) and the labels are set in `x`. By setting `orientation` to *h*, the roles are interchanged."
   },
   "type": "waterfall"
  }
 },
 "transforms": {
  "aggregate": {
   "attributes": {
    "aggregations": {
     "items": {
      "aggregation": {
       "editType": "calc",
       "enabled": {
        "description": "Determines whether this aggregation function is enabled or disabled.",
        "dflt": true,
        "editType": "calc",
        "valType": "boolean"
       },
       "func": {
        "description": "Sets the aggregation function. All values from the linked `target`, corresponding to the same value in the `groups` array, are collected and reduced by this function. *count* is simply the number of values in the `groups` array, so does not even require the linked array to exist. *first* (*last*) is just the first (last) linked value. Invalid values are ignored, so for example in *avg* they do not contribute to either the numerator or the denominator. Any data type (numeric, date, category) may be aggregated with any function, even though in certain cases it is unlikely to make sense, for example a sum of dates or average of categories. *median* will return the average of the two central values if there is an even count. *mode* will return the first value to reach the maximum count, in case of a tie. *change* will return the difference between the first and last linked values. *range* will return the difference between the min and max linked values.",
        "dflt": "first",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "count",
         "sum",
         "avg",
         "median",
         "mode",
         "rms",
         "stddev",
         "min",
         "max",
         "first",
         "last",
         "change",
         "range"
        ]
       },
       "funcmode": {
        "description": "*stddev* supports two formula variants: *sample* (normalize by N-1) and *population* (normalize by N).",
        "dflt": "sample",
        "editType": "calc",
        "valType": "enumerated",
        "values": [
         "sample",
         "population"
        ]
       },
       "role": "object",
       "target": {
        "description": "A reference to the data array in the parent trace to aggregate. To aggregate by nested variables, use *.* to access them. For example, set `groups` to *marker.color* to aggregate over the marker color array. The referenced array must already exist, unless `func` is *count*, and each array may only be referenced once.",
        "editType": "calc",
        "valType": "string"
       }
      }
     },
     "role": "object"
    },
    "editType": "calc",
    "enabled": {
     "description": "Determines whether this aggregate transform is enabled or disabled.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "groups": {
     "arrayOk": true,
     "description": "Sets the grouping target to which the aggregation is applied. Data points with matching group values will be coalesced into one point, using the supplied aggregation functions to reduce data in other data arrays. If a string, `groups` is assumed to be a reference to a data array in the parent trace object. To aggregate by nested variables, use *.* to access them. For example, set `groups` to *marker.color* to aggregate about the marker color array. If an array, `groups` is itself the data array by which we aggregate.",
     "dflt": "x",
     "editType": "calc",
     "noBlank": true,
     "strict": true,
     "valType": "string"
    },
    "groupssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  groups .",
     "editType": "none",
     "valType": "string"
    }
   }
  },
  "filter": {
   "attributes": {
    "editType": "calc",
    "enabled": {
     "description": "Determines whether this filter transform is enabled or disabled.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "operation": {
     "description": "Sets the filter operation. *=* keeps items equal to `value` *!=* keeps items not equal to `value` *<* keeps items less than `value` *<=* keeps items less than or equal to `value` *>* keeps items greater than `value` *>=* keeps items greater than or equal to `value` *[]* keeps items inside `value[0]` to `value[1]` including both bounds *()* keeps items inside `value[0]` to `value[1]` excluding both bounds *[)* keeps items inside `value[0]` to `value[1]` including `value[0]` but excluding `value[1] *(]* keeps items inside `value[0]` to `value[1]` excluding `value[0]` but including `value[1] *][* keeps items outside `value[0]` to `value[1]` and equal to both bounds *)(* keeps items outside `value[0]` to `value[1]` *](* keeps items outside `value[0]` to `value[1]` and equal to `value[0]` *)[* keeps items outside `value[0]` to `value[1]` and equal to `value[1]` *{}* keeps items present in a set of values *}{* keeps items not present in a set of values",
     "dflt": "=",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "=",
      "!=",
      "<",
      ">=",
      ">",
      "<=",
      "[]",
      "()",
      "[)",
      "(]",
      "][",
      ")(",
      "](",
      ")[",
      "{}",
      "}{"
     ]
    },
    "preservegaps": {
     "description": "Determines whether or not gaps in data arrays produced by the filter operation are preserved. Setting this to *true* might be useful when plotting a line chart with `connectgaps` set to *false*.",
     "dflt": false,
     "editType": "calc",
     "valType": "boolean"
    },
    "target": {
     "arrayOk": true,
     "description": "Sets the filter target by which the filter is applied. If a string, `target` is assumed to be a reference to a data array in the parent trace object. To filter about nested variables, use *.* to access them. For example, set `target` to *marker.color* to filter about the marker color array. If an array, `target` is then the data array by which the filter is applied.",
     "dflt": "x",
     "editType": "calc",
     "noBlank": true,
     "strict": true,
     "valType": "string"
    },
    "targetcalendar": {
     "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. Sets the calendar system to use for `target`, if it is an array of dates. If `target` is a string (eg *x*) we use the corresponding trace attribute (eg `xcalendar`) if it exists, even if `targetcalendar` is provided.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    },
    "targetsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  target .",
     "editType": "none",
     "valType": "string"
    },
    "value": {
     "description": "Sets the value or values by which to filter. Values are expected to be in the same type as the data linked to `target`. When `operation` is set to one of the comparison values (=,!=,<,>=,>,<=) `value` is expected to be a number or a string. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) `value` is expected to be 2-item array where the first item is the lower bound and the second item is the upper bound. When `operation`, is set to one of the set values ({},}{) `value` is expected to be an array with as many items as the desired set elements.",
     "dflt": 0,
     "editType": "calc",
     "valType": "any"
    },
    "valuecalendar": {
     "description": "WARNING: All transforms are deprecated and may be removed from the API in next major version. Sets the calendar system to use for `value`, if it is a date.",
     "dflt": "gregorian",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "chinese",
      "coptic",
      "discworld",
      "ethiopian",
      "gregorian",
      "hebrew",
      "islamic",
      "jalali",
      "julian",
      "mayan",
      "nanakshahi",
      "nepali",
      "persian",
      "taiwan",
      "thai",
      "ummalqura"
     ]
    }
   }
  },
  "groupby": {
   "attributes": {
    "editType": "calc",
    "enabled": {
     "description": "Determines whether this group-by transform is enabled or disabled.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "groups": {
     "description": "Sets the groups in which the trace data will be split. For example, with `x` set to *[1, 2, 3, 4]* and `groups` set to *['a', 'b', 'a', 'b']*, the groupby transform with split in one trace with `x` [1, 3] and one trace with `x` [2, 4].",
     "dflt": [],
     "editType": "calc",
     "valType": "data_array"
    },
    "groupssrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  groups .",
     "editType": "none",
     "valType": "string"
    },
    "nameformat": {
     "description": "Pattern by which grouped traces are named. If only one trace is present, defaults to the group name (`\"%{group}\"`), otherwise defaults to the group name with trace name (`\"%{group} (%{trace})\"`). Available escape sequences are `%{group}`, which inserts the group name, and `%{trace}`, which inserts the trace name. If grouping GDP data by country when more than one trace is present, for example, the default \"%{group} (%{trace})\" would return \"Monaco (GDP per capita)\".",
     "editType": "calc",
     "valType": "string"
    },
    "styles": {
     "items": {
      "style": {
       "editType": "calc",
       "role": "object",
       "target": {
        "description": "The group value which receives these styles.",
        "editType": "calc",
        "valType": "string"
       },
       "value": {
        "_compareAsJSON": true,
        "description": "Sets each group styles. For example, with `groups` set to *['a', 'b', 'a', 'b']* and `styles` set to *[{target: 'a', value: { marker: { color: 'red' } }}] marker points in group *'a'* will be drawn in red.",
        "dflt": {},
        "editType": "calc",
        "valType": "any"
       }
      }
     },
     "role": "object"
    }
   }
  },
  "sort": {
   "attributes": {
    "editType": "calc",
    "enabled": {
     "description": "Determines whether this sort transform is enabled or disabled.",
     "dflt": true,
     "editType": "calc",
     "valType": "boolean"
    },
    "order": {
     "description": "Sets the sort transform order.",
     "dflt": "ascending",
     "editType": "calc",
     "valType": "enumerated",
     "values": [
      "ascending",
      "descending"
     ]
    },
    "target": {
     "arrayOk": true,
     "description": "Sets the target by which the sort transform is applied. If a string, *target* is assumed to be a reference to a data array in the parent trace object. To sort about nested variables, use *.* to access them. For example, set `target` to *marker.size* to sort about the marker size array. If an array, *target* is then the data array by which the sort transform is applied.",
     "dflt": "x",
     "editType": "calc",
     "noBlank": true,
     "strict": true,
     "valType": "string"
    },
    "targetsrc": {
     "description": "Sets the source reference on Chart Studio Cloud for  target .",
     "editType": "none",
     "valType": "string"
    }
   }
  }
 }
}