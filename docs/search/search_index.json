{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"examples/2D-Histogram/","title":"2D-Histogram","text":""},{"location":"examples/2D-Histogram/#2d-histogram-of-a-bivariate-normal-distribution","title":"2d-histogram-of-a-bivariate-normal-distribution","text":"<pre><code>var x = [];\nvar y = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n    y[i] = Math.random() + 1;\n}\n\nvar data = [\n  {\n    x: x,\n    y: y,\n    type: 'histogram2d'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/2D-Histogram/#2d-histogram-binning-and-styling-options","title":"2d-histogram-binning-and-styling-options","text":"<pre><code>var x = [];\nvar y = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n    y[i] = Math.random() + 1;\n}\n\nvar data = [\n  {\n    x: x,\n    y: y,\n    histnorm: 'probability',\n    autobinx: false,\n    xbins: {\n      start: -3,\n      end: 3,\n      size: 0.1\n    },\n    autobiny: false,\n    ybins: {\n      start: -2.5,\n      end: 4,\n      size: 0.1\n    },\n    colorscale: [['0', 'rgb(12,51,131)'], ['0.25', 'rgb(10,136,186)'], ['0.5', 'rgb(242,211,56)'], ['0.75', 'rgb(242,143,56)'], ['1', 'rgb(217,30,30)']],\n    type: 'histogram2d'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/2D-Histogram/#2d-histogram-overlaid-with-a-scatter-chart","title":"2d-histogram-overlaid-with-a-scatter-chart","text":"<pre><code>var x0 = [];\nvar y0 = [];\nvar x1 = [];\nvar y1 = [];\nvar x2 = [];\nvar y2 = [];\n\nfor (var i = 0; i &lt; 500; i ++)\n{\n    x0[i] = Math.random() + 1;\n    y0[i] = Math.random() + 1.5;\n}\n\nfor (var i = 0; i &lt; 100; i ++)\n{\n    x1[i] = Math.random();\n    y1[i] = Math.random() + 1;\n}\n\nfor (var i = 0; i &lt; 500; i ++)\n{\n    x2[i] = Math.random()*2;\n    y2[i] = Math.random()*3;\n}\n\nvar trace1 = {\n  x: x0,\n  y: y0,\n  mode: 'markers',\n  marker: {\n    symbol: 'circle',\n    opacity: 0.7,\n     color:'rgb(200,111,200)',\n  },\n  type: 'scatter',\n};\nvar trace2 = {\n  x: x1,\n  y: y1,\n  mode: 'markers',\n  marker: {\n    symbol: 'square',\n    opacity: 0.7,\n     color:'cyan',\n  },\n  type: 'scatter'\n};\nvar trace3 = {\n  x: x2,\n  y: y2,\n  type: 'histogram2d',\n  colorscale : [['0' , 'rgb(0,225,100)'],['1', 'rgb(100,0,200)']],\n\n};\n\nvar data = [trace1, trace2, trace3];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/2d-histogram-contour/","title":"2d-histogram-contour","text":""},{"location":"examples/2d-histogram-contour/#basic-2d-histogram-contour","title":"basic-2d-histogram-contour","text":"<pre><code>var x = [];\nvar y = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n    y[i] = Math.random() + 1;\n}\n\nvar data = [\n  {\n    x: x,\n    y: y,\n    type: 'histogram2dcontour'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/2d-histogram-contour/#2d-histogram-contour-colorscale","title":"2d-histogram-contour-colorscale","text":"<pre><code>var x = [];\nvar y = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n    y[i] = Math.random() + 1;\n}\n\nvar data = [\n  {\n    x: x,\n    y: y,\n    colorscale: 'Blues',\n    type: 'histogram2dcontour'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/2d-histogram-contour/#styled-2d-histogram-contour","title":"styled-2d-histogram-contour","text":"<pre><code>var x = [];\nvar y = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n    y[i] = Math.random() + 1;\n}\n\nvar data = [\n  {\n    x: x,\n    y: y,\n    colorscale: 'Blues',\n    type: 'histogram2dcontour',\n    contours: {\n      showlabels: true,\n      labelfont: {\n        family: 'Raleway',\n        color: 'white'\n      }\n    },\n    hoverlabel: {\n      bgcolor: 'white',\n      bordercolor: 'black',\n      font: {\n        family: 'Raleway',\n        color: 'black'\n      }\n    }\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/3d-axes/","title":"3d-axes","text":""},{"location":"examples/3d-axes/#range-of-axes","title":"range-of-axes","text":"<pre><code>function getrandom(num , mul) \n    {\n   var value = [ ];\n   for(i=0;i&lt;=num;i++)\n   {\n    var rand = Math.random() * mul;\n    value.push(rand);\n   }\n   return value;\n  }\n\n\nvar data=[\n    {\n     opacity:0.4,\n     type: 'scatter3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , -75),\n     z: getrandom(50 , -75),\n    },\n    {\n     opacity:0.5,\n     type: 'scatter3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , 75),\n     z: getrandom(50 , 75),\n    },\n    {\n     opacity:0.5,\n     type: 'scatter3d',\n     x: getrandom(50 , 100),\n     y: getrandom(50 , 100),\n     z: getrandom(50 , 100),\n    }\n];\nvar layout = {\n  scene:{\n     aspectmode: \"manual\",\n   aspectratio: {\n     x: 1, y: 0.7, z: 1,\n    },\n   xaxis: {\n    nticks: 9,\n    range: [-200, 100],\n  },\n   yaxis: {\n    nticks: 7,\n    range: [-100, 100],\n  },\n   zaxis: {\n   nticks: 10,\n   range: [-150, 100],\n  }},\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/3d-axes/#fixed-ratio-axes","title":"fixed-ratio-axes","text":"<pre><code>function getrandom(num , mul) \n    {\n       var value = [ ]\n        var i;\n        for(i=0;i&lt;=num;i++)\n       {\n         rand = Math.random() * mul;\n        value.push(rand);\n       }\n        return value;\n    }\n\nvar i;\ntraces = [];\nnames = ['cube', 'data', 'auto', 'manual'];\nfor (i=1; i&lt;5; i++){\n    traces.push({\n        x: getrandom(20, 4),\n        y: getrandom(20, 3),\n        z: getrandom(20, 5),\n        opacity:0.5,\n        mode: \"markers\",\n        type: \"mesh3d\",\n        scene: \"scene\" + i,\n        name: names[i-1]\n        }\n    )\n}\n\nvar layout = {\n    scene:{\n        aspectmode:'cube',\n        domain:{row:0, column:0}\n    },\n    scene2:{\n        aspectmode:'data',\n        domain:{row:1, column:0}\n    },\n    scene3:{\n        aspectmode:'auto',\n        domain:{row:0, column:1}\n    },\n    scene4:{\n        aspectmode:'manual',\n        aspectratio: {x:1, y:1, z:2},\n        domain: {row:1, column:1}\n    },\n    grid:{\n        pattern: 'independent',\n        rows:2,\n        columns:2\n    },\n\n};\n\nPlotly.newPlot('myDiv', traces, layout);</code></pre>"},{"location":"examples/3d-axes/#ticks-formatting","title":"ticks-formatting","text":"<pre><code>function getrandom(num , mul) \n    {\n     var value = [ ];\n     for(i=0;i&lt;=num;i++)\n     {\n      var rand = Math.random() * mul;\n      value.push(rand);\n     }\n     return value;\n    }\n\n\nvar data=[\n    {\n     opacity:0.4,\n     type: 'scatter3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , -75),\n     z: getrandom(50 , -75),\n    },\n];\nvar layout = {\n  scene:{ \n    xaxis: {\n     ticktext:['H20','C02','O2'],\n     tickvals:[-30, -45, -65, -10]\n  },\n  yaxis: {\n        nticks: 5,\n        tickfont:\n        {\n         color:'green',\n         family:'Old Standard TT, serif',\n         size: 14\n        },\n        ticksuffix:'$'\n        },\n  zaxis: {\n       ticks: 'outside',\n       tick0: 0,\n       tickwidth: 4}},\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/3d-axes/#axes-background-color","title":"axes-background-color","text":"<pre><code>function getrandom(num , mul) \n    {\n     var value = [ ];\n     for(i=0;i&lt;=num;i++)\n     {\n      var rand = Math.random() * mul;\n      value.push(rand);\n     }\n     return value;\n    }\n\nvar data=[\n    {\n     opacity:0.4,type: 'scatter3d',\n     x: getrandom(50 , 75),\n     y: getrandom(50 , 75),\n     z: getrandom(50 , 75),\n     mode:'markers'\n    },\n    {\n     opacity: 0.5,\n     type: 'scatter3d',\n     x: getrandom(75 , 75),\n     y: getrandom(75 , 75),\n     z: getrandom(75 , 75),\n     mode:'markers'\n    },\n    {\n     opacity: 0.5,\n     type: 'scatter3d',\n     x: getrandom(75 , 100),\n     y: getrandom(75 , 100),\n     z: getrandom(75 , 100),\n     mode:'markers'\n    }\n];\nvar layout = {\n   scene:{\n    xaxis: {\n     backgroundcolor: \"rgb(200, 200, 230)\",\n     gridcolor: \"rgb(255, 255, 255)\",\n     showbackground: true,\n     zerolinecolor: \"rgb(255, 255, 255)\",\n    }, \n    yaxis: {\n     backgroundcolor: \"rgb(230, 200,230)\",\n     gridcolor: \"rgb(255, 255, 255)\",\n     showbackground: true,\n     zerolinecolor: \"rgb(255, 255, 255)\"\n    }, \n    zaxis: {\n     backgroundcolor: \"rgb(230, 230,200)\",\n     gridcolor: \"rgb(255, 255, 255)\",\n     showbackground: true,\n     zerolinecolor: \"rgb(255, 255, 255)\"\n    }}\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/3d-axes/#camera-controls","title":"camera-controls","text":"<pre><code>function getrandom(num , mul) \n  {\n     var value = [ ];\n     for(i=0;i&lt;=num;i++)\n     {\n      var rand = Math.random() * mul;\n      value.push(rand);\n     }\n    return value;\n  }\nvar data = [\n  {\n    x: getrandom(20, 4), \n    y: getrandom(20, 3), \n    z: getrandom(20, 5),\n    opacity:0.5,\n    mode: \"markers\",\n    type: \"scatter3d\",\n    scene: \"scene1\",\n    name: \"Lower the view point\"\n  },\n   {\n    x:getrandom(20, 4), \n    y:getrandom(20, 3), \n    z:getrandom(20, 5),\n    opacity:0.5,\n    mode: \"markers\",\n    type: \"scatter3d\",\n    scene: \"scene2\",\n    name: \"x-z plane\"\n  },\n  {\n    x:getrandom(20, 4), \n    y:getrandom(20, 3), \n    z:getrandom(20, 5), \n    opacity:0.5,\n    mode: \"markers\",\n    type: \"scatter3d\",\n    scene: \"scene3\",\n    name: \"y-z plane\"\n  },\n   {\n    x:getrandom(10, 4), \n    y:getrandom(10, 3), \n    z:getrandom(10, 5), \n    opacity:0.5,\n    mode: \"markers\",\n    type: \"scatter3d\",\n    scene: \"scene4\",\n    name: \"View from above\"\n  },\n   {\n    x:getrandom(20, 4), \n    y:getrandom(20, 3), \n    z:getrandom(20, 5), \n    opacity:0.5,\n    mode: \"markers\",\n    type: \"scatter3d\",\n    scene: \"scene5\",\n    name: \"Zooming in\"\n  },\n];\nvar layout = {\n    scene1: {\n      domain: {\n            x: [0.00,  0.33], \n            y: [0.5, 1]\n        },\n      camera: {\n          center: {\n                x: 0, y: 0, z: 0 }, \n          eye: { \n                x: 2, y: 2, z: 0.1 }, \n           up: {\n                x: 0, y: 0, z: 1 }\n        },},\n\n    scene2: {\n      domain: {\n             x: [0.33,  0.66], \n             y: [0.5, 1.0]\n            },\n      camera: {\n          center: {\n                x: 0, y: 0, z: 0}, \n          eye: { \n                x:0.1, y:2.5, z:0.1}, \n          up: {\n                x: 0, y: 0, z: 1}\n        },},\n\n  scene3: {\n      domain: {\n             x: [0.66,  0.99], \n             y: [0.5, 1]\n            },\n      camera: {\n          center: {\n                x: 0, y: 0, z: 0}, \n          eye: { \n                 x:2.5, y:0.1, z:0.1}, \n          up: {\n                 x: 0, y: 0, z: 1}\n    },},    \n\n  scene4: {\n      domain: {\n             x: [0.15,  0.5], \n             y: [-0.25, 0.4]\n            },\n      camera: {\n        center: {\n              x: 0, y: 0, z: 0}, \n        eye: { \n              x:0.1, y:0.1, z:2.5}, \n        up: {\n              x: 0, y: 0, z: 1}\n    },},\n\n  scene5: {\n        domain: {\n               x: [0.62,  0.7], \n               y: [-0.2, 0.4]\n            },\n      camera: {\n        center: {\n              x: 0, y: 0, z: 0}, \n        eye: { \n              x:0.1, y:0.1, z:1}, \n        up: {\n              x: 0, y: 0, z: 1}\n    },},\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/3d-axes/#set-axes-title","title":"set-axes-title","text":"<pre><code>function getrandom(num , mul) {\n    var value = [ ];\n    for(i=0;i&lt;=num;i++)\n    {\n     var rand = Math.random() * mul;\n     value.push(rand);\n    }\n    return value;}\n\nvar trace1 = {\n    type:'mesh3d',\n    x: getrandom(1000,200), y: getrandom(1000,300), z: getrandom(1000,150),\n    color: 'lightblue',};\n\nvar trace2 = {\n    type:'mesh3d',\n    x: getrandom(1000,200), y: getrandom(1000,300), z: getrandom(1000,150),\n    color: 'pink'};\n\nvar layout = {\n    scene: {\n        xaxis: {\n            title: {\n                text: 'X AXIS TITLE'\n            }\n        },\n        yaxis: {\n            title: {\n                text: 'Y AXIS TITLE'\n            }\n        },\n        zaxis: {\n            title: {\n                text: 'Z AXIS TITLE'\n            }\n        }\n    },\n    autosize: false,\n    width: 550,\n    height: 500,\n    margin: {\n     l: 0,\n     r: 0,\n     b: 50,\n     t: 50,\n     pad: 4\n    },\n}\n\nPlotly.newPlot('myDiv', [trace1,trace2], layout);</code></pre>"},{"location":"examples/3d-hover/","title":"3d-hover","text":""},{"location":"examples/3d-hover/#customize-hover-for-spikelines","title":"customize-hover-for-spikelines","text":"<p>By default, Plotly's 3D plots display lines called \"spikelines\" while hovering over a point. These lines project from the hover point to each of the three axes' normal planes and then extend from those projection data points to the planes' wall boundaries.</p> <pre><code>function getrandom(num , mul) \n    {\n     var value = [ ];\n     for(i=0;i&lt;=num;i++)\n     {\n      var rand = Math.random() * mul;\n      value.push(rand);\n     }\n     return value;\n    }\n\n\nvar data=[\n    {\n     opacity:0.4,\n     type: 'scatter3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , -75),\n     z: getrandom(50 , -75),\n    },\n];\nvar layout = {\n  scene:{\n    xaxis: {\n         spikecolor: '#1fe5bd',\n         spikesides: false,\n         spikethickness: 6\n        },\n     yaxis: {\n         spikecolor: '#1fe5bd',\n         spikesides: false,\n         spikethickness: 6\n        },\n     zaxis: {\n         spikecolor: '#1fe5bd',\n         spikethickness: 6\n        }\n  },\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/3d-hover/#customize-hover-for-surface-contours","title":"customize-hover-for-surface-contours","text":"<p>In addition to spikelines, Plotly 3D Surface plots also display surface contours on hover by default. These are customized by styling the <code>contours</code> attribute in the surface trace.</p> <pre><code>x = [10,20,30,40]\ny = [0,1,2,3]\nz = [\n    [2,2,2,3],\n    [1,1,1,1],\n    [1,1,0,0],\n    [0,0,0,0]\n];\n\nvar data=[\n    {\n     opacity:0.9,\n     type: 'surface',\n     x:x, y:y, z:z,\n      contours: {\n         x: {\n             highlight: true,\n             highlightcolor: \"#41a7b3\"\n         },\n         y: { highlight: false },\n         z: { highlight: false}\n    }\n    },\n];\nvar layout = {\n  scene:{\n    xaxis: { showspikes: false },\n    yaxis: { showspikes: false },\n    zaxis: { showspikes: false }\n  },\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/3d-isosurface-plots/","title":"3d-isosurface-plots","text":""},{"location":"examples/3d-isosurface-plots/#basic-isosurface-plot","title":"basic-isosurface-plot","text":"<pre><code>var data = [\n    {\n        type: \"isosurface\",\n        x: [0,0,0,0,1,1,1,1],\n        y: [0,1,0,1,0,1,0,1],\n        z: [1,1,0,0,1,1,0,0],\n        value: [1,2,3,4,5,6,7,8],\n        isomin: 2,\n        isomax: 6,\n        colorscale: \"Reds\"\n    }\n];\n\nvar layout = {\n    margin: {t:0, l:0, b:0},\n    scene: {\n        camera: {\n            eye: {\n                x: 1.88,\n                y: -2.12,\n                z: 0.96\n            }\n        }\n    }\n};\n\nPlotly.newPlot('myDiv', data, layout, {showSendToCloud: true});</code></pre>"},{"location":"examples/3d-isosurface-plots/#isosurface-with-additional-slices","title":"isosurface-with-additional-slices","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/clebsch-cubic.csv', function(err, rows){\n  function unpack(rows, key) {\n  return rows.map(function(row) {return parseFloat(row[key]); });\n}\n\nvar data = [\n    {\n        type: \"isosurface\",\n        x: unpack(rows, 'x'),\n        y: unpack(rows, 'y'),\n        z: unpack(rows, 'z'),\n        value: unpack(rows, 'value'),\n        isomin: -100,\n        isomax: 100,\n        surface: {show: true, count: 1, fill: 0.8},\n        slices: {z: {\n          show: true, locations: [-0.3, 0.5]\n        }},\n        caps: {\n            x: {show: false},\n            y: {show: false},\n            z: {show: false}\n        },\n    }\n];\n\nvar layout = {\n    margin: {t:0, l:0, b:0},\n    scene: {\n        camera: {\n            eye: {\n                x: 1.86,\n                y: 0.61,\n                z: 0.98\n            }\n        }\n    }\n};\n\nPlotly.newPlot('myDiv', data, layout, {showSendToCloud: true});\n});</code></pre>"},{"location":"examples/3d-isosurface-plots/#multiple-isosurfaces-with-caps","title":"multiple-isosurfaces-with-caps","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/clebsch-cubic.csv', function(err, rows){\n  function unpack(rows, key) {\n  return rows.map(function(row) {return parseFloat(row[key]); });\n}\n\nvar data = [\n    {\n        type: \"isosurface\",\n        x: unpack(rows, 'x'),\n        y: unpack(rows, 'y'),\n        z: unpack(rows, 'z'),\n        value: unpack(rows, 'value'),\n        isomin: -10,\n        isomax: 10,\n        surface: {show: true, count: 4, fill: 1, pattern: 'odd'},\n        caps: {\n            x: {show: true},\n            y: {show: true},\n            z: {show: true}\n        },\n    }\n];\n\nvar layout = {\n    margin: {t:0, l:0, b:0},\n    scene: {\n        camera: {\n            eye: {\n                x: 1.86,\n                y: 0.61,\n                z: 0.98\n            }\n        }\n    }\n};\n\nPlotly.newPlot('myDiv', data, layout, {showSendToCloud: true});\n});</code></pre>"},{"location":"examples/3d-line-plots/","title":"3d-line-plots","text":""},{"location":"examples/3d-line-plots/#3d-line-plot","title":"3d-line-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/3d-line1.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row)\n          { return row[key]; }); }\n\nvar x = unpack(rows , 'x');\nvar y = unpack(rows , 'y');\nvar z = unpack(rows , 'z');\nvar c = unpack(rows , 'color');\nPlotly.newPlot('myDiv', [{\n  type: 'scatter3d',\n  mode: 'lines',\n  x: x,\n  y: y,\n  z: z,\n  opacity: 1,\n  line: {\n    width: 6,\n    color: c,\n    reversescale: false\n  }\n}], {\n  height: 640\n});\n});</code></pre>"},{"location":"examples/3d-line-plots/#3d-line-+-markers-plot","title":"3d-line-+-markers-plot","text":"<pre><code>var pointCount = 31;\nvar i, r;\n\nvar x = [];\nvar y = [];\nvar z = [];\nvar c = [];\n\nfor(i = 0; i &lt; pointCount; i++) \n{\n   r = 10 * Math.cos(i / 10);\n   x.push(r * Math.cos(i));\n   y.push(r * Math.sin(i));\n   z.push(i);\n   c.push(i)\n}\n\nPlotly.newPlot('myDiv', [{\n  type: 'scatter3d',\n  mode: 'lines+markers',\n  x: x,\n  y: y,\n  z: z,\n  line: {\n    width: 6,\n    color: c,\n    colorscale: \"Viridis\"},\n  marker: {\n    size: 3.5,\n    color: c,\n    colorscale: \"Greens\",\n    cmin: -20,\n    cmax: 50\n  }},                  \n]);</code></pre>"},{"location":"examples/3d-line-plots/#3d-line-spiral-plot","title":"3d-line-spiral-plot","text":"<pre><code>var pointCount = 3142;\nvar i, r;\n\nvar x = [];\nvar y = [];\nvar z = [];\nvar c = [];\n\nfor(i = 0; i &lt; pointCount; i++)\n {\n     r = i * (pointCount - i);\n     x.push(r * Math.cos(i / 30));\n     y.push(r * Math.sin(i / 30));\n     z.push(i);\n     c.push(i)\n }\n\nPlotly.newPlot('myDiv', [{\n     type: 'scatter3d',\n     mode: 'lines',\n     x: x,\n     y: y,\n     z: z,\n     opacity: 0.7,\n     line: {\n       width: 10,\n       color: c,\n       colorscale: 'Viridis'}\n    }]);</code></pre>"},{"location":"examples/3d-line-plots/#3d-random-walk-plot","title":"3d-random-walk-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/_3d-line-plot.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row)\n          { return row[key]; });\n      }\n\nvar trace1 = {\n  x: unpack(rows, 'x1'),\n  y: unpack(rows, 'y1'),\n  z: unpack(rows, 'z1'),\n  mode: 'lines',\n  marker: {\n    color: '#1f77b4',\n    size: 12,\n    symbol: 'circle',\n    line: {\n      color: 'rgb(0,0,0)',\n      width: 0\n    }},\n  line: {\n    color: '#1f77b4',\n    width: 1\n  },\n  type: 'scatter3d'\n};\n\nvar trace2 = {\n  x: unpack(rows, 'x2'),\n  y: unpack(rows, 'y2'),\n  z: unpack(rows, 'z2'),\n  mode: 'lines',\n  marker: {\n    color: '#9467bd',\n    size: 12,\n    symbol: 'circle',\n    line: {\n      color: 'rgb(0,0,0)',\n      width: 0\n    }},\n  line: {\n    color: 'rgb(44, 160, 44)',\n    width: 1\n  },\n  type: 'scatter3d'\n};\n\nvar trace3 = {\n  x: unpack(rows, 'x3'),\n  y: unpack(rows, 'y3'),\n  z: unpack(rows, 'z3'),\n  mode: 'lines',\n  marker: {\n    color: '#bcbd22',\n    size: 12,\n    symbol: 'circle',\n    line: {\n      color: 'rgb(0,0,0)',\n      width: 0\n    }},\n  line: {\n    color: '#bcbd22',\n    width: 1\n  },\n  type: 'scatter3d'\n};\n\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  title: {\n    text: '3D Line Plot'\n  },\n  autosize: false,\n  width: 500,\n  height: 500,\n  margin: {\n    l: 0,\n    r: 0,\n    b: 0,\n    t: 65\n  }\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-mesh/","title":"3d-mesh","text":""},{"location":"examples/3d-mesh/#simple-3d-mesh-plot","title":"simple-3d-mesh-plot","text":"<pre><code>// Generating random data..\na=[]; b=[]; c=[];\nfor(i=0;i&lt;50;i++)\n  {\n    var a_ = Math.random(); \n    a.push(a_);\n\n    var b_ = Math.random(); \n    b.push(b_);\n\n    var c_ = Math.random(); \n    c.push(c_);\n  }\n// Plotting the mesh\nvar data=[\n    {\n      opacity:0.8,\n      color:'rgb(300,100,200)',\n      type: 'mesh3d',\n      x: a,\n      y: b,\n      z: c,\n    }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/3d-mesh/#3d-mesh-plot-with-alphahull","title":"3d-mesh-plot-with-alphahull","text":"<pre><code>// Generating random data..\na=[]; b=[]; c=[];\nfor(i=0;i&lt;50;i++)\n  {\n  var a_ = Math.random(); \n   a.push(a_);\n\n  var b_ = Math.random(); \n   b.push(b_);\n\n  var c_ = Math.random(); \n   c.push(c_);\n  }\n// Plotting the mesh\nvar data=[\n  {\n    alphahull:5,\n    opacity:0.8,\n    color:'rgb(200,100,300)',\n    type: 'mesh3d',\n    x: a,\n    y: b,\n    z: c,\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/3d-mesh/#3d-mesh-tetrahedron","title":"3d-mesh-tetrahedron","text":"<pre><code>var data = [{\n    type: \"mesh3d\",\n    x: [0, 1, 2, 0],\n    y: [0, 0, 1, 2],\n    z: [0, 2, 0, 1],\n    i: [0, 0, 0, 1],\n    j: [1, 2, 3, 2],\n    k: [2, 3, 1, 3],\n    intensity: [0, 0.33, 0.66, 1],\n    colorscale: [\n      [0, 'rgb(255, 0, 0)'],\n      [0.5, 'rgb(0, 255, 0)'],\n      [1, 'rgb(0, 0, 255)']\n    ]\n  }\n];\n\nPlotly.newPlot('myDiv', data, {});</code></pre>"},{"location":"examples/3d-mesh/#3d-mesh-cube","title":"3d-mesh-cube","text":"<pre><code>var intensity = [0, 0.14285714285714285, 0.2857142857142857, 0.42857142857142855, 0.5714285714285714, 0.7142857142857143, 0.8571428571428571, 1];\n\nvar data = [{\n    type: \"mesh3d\",\n    x: [0, 0, 1, 1, 0, 0, 1, 1],\n    y: [0, 1, 1, 0, 0, 1, 1, 0],\n    z: [0, 0, 0, 0, 1, 1, 1, 1],\n    i: [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],\n    j: [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],\n    k: [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],\n    intensity: intensity,\n    colorscale: [\n      [0, 'rgb(255, 0, 255)'],\n      [0.5, 'rgb(0, 255, 0)'],\n      [1, 'rgb(0, 0, 255)']\n    ]\n  }\n];\n\nPlotly.newPlot('myDiv', data, {});</code></pre>"},{"location":"examples/3d-point-clustering/","title":"3d-point-clustering","text":""},{"location":"examples/3d-point-clustering/#3d-point-clustering","title":"3d-point-clustering","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/alpha_shape.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    var data = [{\n        x: unpack(rows, 'x'),\n        y: unpack(rows, 'y'),\n        z: unpack(rows, 'z'),\n        mode: 'markers',\n        type: 'scatter3d',\n        marker: {\n          color: 'rgb(23, 190, 207)',\n          size: 2\n        }\n    },{\n        alphahull: 7,\n        opacity: 0.1,\n        type: 'mesh3d',\n        x: unpack(rows, 'x'),\n        y: unpack(rows, 'y'),\n        z: unpack(rows, 'z')\n    }];\n\n    var layout = {\n        autosize: true,\n        height: 480,\n        scene: {\n            aspectratio: {\n                x: 1,\n                y: 1,\n                z: 1\n            },\n            camera: {\n                center: {\n                    x: 0,\n                    y: 0,\n                    z: 0\n                },\n                eye: {\n                    x: 1.25,\n                    y: 1.25,\n                    z: 1.25\n                },\n                up: {\n                    x: 0,\n                    y: 0,\n                    z: 1\n                }\n            },\n            xaxis: {\n                type: 'linear',\n                zeroline: false\n            },\n            yaxis: {\n                type: 'linear',\n                zeroline: false\n            },\n            zaxis: {\n                type: 'linear',\n                zeroline: false\n            }\n        },\n        title: {\n            text: '3d point clustering'\n        },\n        width: 477\n    };\n\n    Plotly.newPlot('myDiv', data, layout);\n\n});</code></pre>"},{"location":"examples/3d-scatter-plots/","title":"3d-scatter-plots","text":""},{"location":"examples/3d-scatter-plots/#3d-scatter-plot","title":"3d-scatter-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/3d-scatter.csv', function(err, rows){\nfunction unpack(rows, key) {\n    return rows.map(function(row)\n    { return row[key]; });}\n\nvar trace1 = {\n    x:unpack(rows, 'x1'), y: unpack(rows, 'y1'), z: unpack(rows, 'z1'),\n    mode: 'markers',\n    marker: {\n        size: 12,\n        line: {\n        color: 'rgba(217, 217, 217, 0.14)',\n        width: 0.5},\n        opacity: 0.8},\n    type: 'scatter3d'\n};\n\nvar trace2 = {\n    x:unpack(rows, 'x2'), y: unpack(rows, 'y2'), z: unpack(rows, 'z2'),\n    mode: 'markers',\n    marker: {\n        color: 'rgb(127, 127, 127)',\n        size: 12,\n        symbol: 'circle',\n        line: {\n        color: 'rgb(204, 204, 204)',\n        width: 1},\n        opacity: 0.8},\n    type: 'scatter3d'};\n\nvar data = [trace1, trace2];\nvar layout = {margin: {\n    l: 0,\n    r: 0,\n    b: 0,\n    t: 0\n  }};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-subplots/","title":"3d-subplots","text":""},{"location":"examples/3d-subplots/#multiple-3d-subplots","title":"multiple-3d-subplots","text":"<pre><code>function getrandom(num , mul) {\n    var value = [ ];\n    for ( i=0; i &lt;= num; i++ ) {\n        var rand = Math.random() * mul;\n        value.push(rand);\n    }\n    return value;\n}\n\nvar trace1 =  {\n     opacity: 0.5,\n     color: 'rgba(255,127,80,0.7)',\n     type: 'mesh3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , 75),\n     z: getrandom(50 , 75),\n     scene: \"scene1\"\n    };\n\nvar trace2 =  {\n     opacity: 0.5,\n     color: 'pink',\n     type: 'mesh3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , 75),\n     z: getrandom(50 , 75),\n     scene: \"scene2\"\n    };\n\nvar trace3 = {\n     opacity:0.4,\n     color:'rgb(033,255,100)',\n     type: 'mesh3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , -75),\n     z: getrandom(50 , -75),\n     scene: \"scene3\",\n    };\n\nvar trace4 = {\n     opacity: 0.5,\n     color:'rgb(200,100,200)',\n     type: 'mesh3d',\n     x: getrandom(50 , -75),\n     y: getrandom(50 , 75),\n     z: getrandom(50 , 75),\n     scene: \"scene4\"\n    };\n\nvar trace5 =  {\n    opacity: 0.5,\n    color:'rgb(00,150,200)',\n    type: 'mesh3d',\n    x: getrandom(50 , 100),\n    y: getrandom(50 , 100),\n    z: getrandom(50 , 100),\n    scene: \"scene5\",\n    }\n\nvar layout = {\n    scene1: {\n        domain: {\n            x: [0.0,  0.5],\n            y: [0.5, 1.0]\n        },},\n    scene2: {\n        domain: {\n            x: [0.5, 1],\n            y: [0.5, 1.0]\n        }},\n     scene3: {\n        domain: {\n            x: [0.0,  0.33],\n            y: [0, 0.5]\n        },},\n    scene4: {\n        domain: {\n            x: [0.33, 0.66],\n            y: [0, 0.5]\n        }},\n    scene5: {\n        domain: {\n            x: [0.66, 0.99],\n            y: [0, 0.5]\n        },},\n  height: 600,\n   margin: {\n    l: 0,\n    r: 0,\n    b: 0,\n    t: 0,\n    pad: 0\n  },\n}    \n\nPlotly.newPlot('myDiv', [trace1,trace2,trace3,trace4,trace5], layout);</code></pre>"},{"location":"examples/3d-surface-lighting/","title":"3d-surface-lighting","text":""},{"location":"examples/3d-surface-lighting/#ambient-lighting","title":"ambient-lighting","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/michaelbabyn/plot_data/master/sin_saddle.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar z_data = [ ];\nfor(i=0;i&lt;100;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n  z: z_data,\n  type: 'surface',\n  colorscale: 'Viridis',\n  lighting: {ambient: 0.9}\n  },\n   {\n  z: z_data,\n  type: 'surface',\n  scene: 'scene2',\n  colorscale:'Viridis',\n  lighting: {ambient: 0.2}\n  }\n];\n\nvar layout = {\n  title: {\n    text: 'Ambient Lighting'\n  },\n  grid: {\n    rows: 1,\n    columns: 2,\n    pattern: 'independent',\n  },\n    scene:{\n        aspectmode:'cube',\n        domain:{row:0, column:0}\n    },\n    scene2:{\n        aspectmode:'cube',\n        domain:{row:0, column:1}\n  }\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-surface-lighting/#roughness","title":"roughness","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/michaelbabyn/plot_data/master/sin_saddle.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar z_data = [];\nfor(i=0;i&lt;100;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n  z: z_data,\n  type: 'surface',\n  colorscale:'Viridis',\n  lighting: {roughness: 0.9}\n        },\n   {\n  z: z_data,\n  type: 'surface',\n  scene: 'scene2',\n  colorscale:'Viridis',\n  lighting: {roughness: 0.2}\n  }\n];\n\nvar layout = {\n  title: {\n    text: 'Roughness'\n  },\n  grid: {\n    rows: 1,\n    columns: 2,\n    pattern: 'independent',\n  },\n    scene:{\n        aspectmode:'cube',\n        domain:{row:0, column:0}\n    },\n    scene2:{\n        aspectmode:'cube',\n        domain:{row:0, column:1}\n  }\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-surface-lighting/#diffuse","title":"diffuse","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/michaelbabyn/plot_data/master/sin_saddle.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar z_data = []\nfor(i=0;i&lt;100;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n  z: z_data,\n  type: 'surface',\n  colorscale:'Viridis',\n  lighting: {diffuse: 0.9}\n        },\n   {\n  z: z_data,\n  type: 'surface',\n  scene: 'scene2',\n  colorscale:'Viridis',\n  lighting: {diffuse: 0.1}\n  }\n];\n\nvar layout = {\n  title: {\n    text: 'Diffuse Reflection'\n  },\n  grid: {\n    rows: 1,\n    columns: 2,\n    pattern: 'independent',\n  },\n    scene:{\n        aspectmode:'cube',\n        domain:{row:0, column:0}\n    },\n    scene2:{\n        aspectmode:'cube',\n        domain:{row:0, column:1}\n  }\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-surface-lighting/#specular","title":"specular","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/michaelbabyn/plot_data/master/sin_saddle.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar z_data = [];\nfor(i=0;i&lt;100;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n  z: z_data,\n  type: 'surface',\n  colorscale:'Viridis',\n  lighting: {specular: 0.1}\n        },\n   {\n  z: z_data,\n  type: 'surface',\n  scene: 'scene2',\n  colorscale:'Viridis',\n  lighting: {specular: 2}\n  }\n];\n\nvar layout = {\n  title: {\n    text: 'Specular Reflection'\n  },\n  grid: {\n    rows: 1,\n    columns: 2,\n    pattern: 'independent',\n  },\n    scene:{\n        aspectmode:'cube',\n        domain:{row:0, column:0}\n    },\n    scene2:{\n        aspectmode:'cube',\n        domain:{row:0, column:1}\n  },\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-surface-lighting/#fresnel","title":"fresnel","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/michaelbabyn/plot_data/master/sin_saddle.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar z_data = [];\nfor(i=0;i&lt;100;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n  z: z_data,\n  type: 'surface',\n  colorscale:'Viridis',\n  lighting: {fresnel: 0.1}\n        },\n   {\n  z: z_data,\n  type: 'surface',\n  scene: 'scene2',\n  colorscale:'Viridis',\n  lighting: {fresnel: 5}\n  }\n];\n\nvar layout = {\n  title: {\n    text: 'Fresnel'\n  },\n  grid: {\n    rows: 1,\n    columns: 2,\n    pattern: 'independent',\n  },\n    scene:{\n        aspectmode:'cube',\n        domain:{row:0, column:0}\n    },\n    scene2:{\n        aspectmode:'cube',\n        domain:{row:0, column:1}\n  }\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-surface-lighting/#reference","title":"reference","text":"<p>See https://plotly.com/javascript/reference/surface/#surface-lighting for more information!</p>"},{"location":"examples/3d-surface-plots/","title":"3d-surface-plots","text":""},{"location":"examples/3d-surface-plots/#topographical-3d-surface-plot","title":"topographical-3d-surface-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar z_data=[ ]\nfor(i=0;i&lt;24;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n           z: z_data,\n           type: 'surface'\n        }];\n\nvar layout = {\n  title: {\n    text: 'Mt Bruno Elevation'\n  },\n  autosize: false,\n  width: 500,\n  height: 500,\n  margin: {\n    l: 65,\n    r: 50,\n    b: 65,\n    t: 90,\n  }\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-surface-plots/#surface-plot-with-contours","title":"surface-plot-with-contours","text":"<p>Display and customize contour data for each axis using the <code>contours</code> attribute (reference).</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\nvar z_data=[ ]\nfor(i=0;i&lt;24;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n  z: z_data,\n  type: 'surface',\n  contours: {\n    z: {\n      show:true,\n      usecolormap: true,\n      highlightcolor:\"#42f462\",\n      project:{z: true}\n    }\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Mt Bruno Elevation With Projected Contours'\n  },\n  scene: {camera: {eye: {x: 1.87, y: 0.88, z: -0.64}}},\n  autosize: false,\n  width: 500,\n  height: 500,\n  margin: {\n    l: 65,\n    r: 50,\n    b: 65,\n    t: 90,\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/3d-surface-plots/#multiple-3d-surface-plots","title":"multiple-3d-surface-plots","text":"<pre><code>z1 = [\n    [8.83,8.89,8.81,8.87,8.9,8.87],\n    [8.89,8.94,8.85,8.94,8.96,8.92],\n    [8.84,8.9,8.82,8.92,8.93,8.91],\n    [8.79,8.85,8.79,8.9,8.94,8.92],\n    [8.79,8.88,8.81,8.9,8.95,8.92],\n    [8.8,8.82,8.78,8.91,8.94,8.92],\n    [8.75,8.78,8.77,8.91,8.95,8.92],\n    [8.8,8.8,8.77,8.91,8.95,8.94],\n    [8.74,8.81,8.76,8.93,8.98,8.99],\n    [8.89,8.99,8.92,9.1,9.13,9.11],\n    [8.97,8.97,8.91,9.09,9.11,9.11],\n    [9.04,9.08,9.05,9.25,9.28,9.27],\n    [9,9.01,9,9.2,9.23,9.2],\n    [8.99,8.99,8.98,9.18,9.2,9.19],\n    [8.93,8.97,8.97,9.18,9.2,9.18]\n];\n\nz2 = [];\nfor (var i=0;i&lt;z1.length;i++ ) { \n  z2_row = [];\n    for(var j=0;j&lt;z1[i].length;j++) { \n      z2_row.push(z1[i][j]+1);\n    }\n    z2.push(z2_row);\n}\n\nz3 = []\nfor (var i=0;i&lt;z1.length;i++ ) { \n  z3_row = [];\n    for(var j=0;j&lt;z1[i].length;j++) { \n      z3_row.push(z1[i][j]-1);\n    }\n    z3.push(z3_row);\n}\nvar data_z1 = {z: z1, type: 'surface'};\nvar data_z2 = {z: z2, showscale: false, opacity:0.9, type: 'surface'};\nvar data_z3 = {z: z3, showscale: false, opacity:0.9, type: 'surface'};\n\n\n\nPlotly.newPlot('myDiv', [data_z1, data_z2, data_z3]);</code></pre>"},{"location":"examples/LaTeX/","title":"LaTeX","text":""},{"location":"examples/LaTeX/#latex-typesetting","title":"latex-typesetting","text":"<pre><code>// remember to load MathJax.js?config=TeX-MML-AM_CHTML\nvar trace1 = {\n  x: [1, 2, 3, 4],\n  y: [1, 4, 9, 16],\n  name: '$\\\\alpha_{1c} = 352 \\\\pm 11 \\\\text{ km s}^{-1}$',\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [0.5, 2, 4.5, 8],\n  name: '$\\\\beta_{1c} = 25 \\\\pm 11 \\\\text{ km s}^{-1}$',\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    title: {\n      text: '$\\\\sqrt{(n_\\\\text{c}(t|{T_\\\\text{early}}))}$'\n    }\n  },\n  yaxis: {\n    title: {\n      text: '$d, r \\\\text{ (solar radius)}$'\n    }\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/ajax-call/","title":"ajax-call","text":""},{"location":"examples/ajax-call/#plotting-csv-data-from-ajax-call","title":"plotting-csv-data-from-ajax-call","text":"<pre><code>function makeplot() {\n  d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv\", function(data){ processData(data) } );\n\n};\n\nfunction processData(allRows) {\n\n  console.log(allRows);\n  var x = [], y = [], standard_deviation = [];\n\n  for (var i=0; i&lt;allRows.length; i++) {\n    row = allRows[i];\n    x.push( row['AAPL_x'] );\n    y.push( row['AAPL_y'] );\n  }\n  console.log( 'X',x, 'Y',y, 'SD',standard_deviation );\n  makePlotly( x, y, standard_deviation );\n}\n\nfunction makePlotly( x, y, standard_deviation ){\n  var plotDiv = document.getElementById(\"plot\");\n  var traces = [{\n    x: x,\n    y: y\n  }];\n\n  Plotly.newPlot('myDiv', traces, {\n    title: {\n        text: 'Plotting CSV data from AJAX call'\n    }\n});\n};\n  makeplot();</code></pre>"},{"location":"examples/animations/","title":"animations","text":""},{"location":"examples/animations/#animating-the-data","title":"animating-the-data","text":"<p>The animate command lets you add dynamic behavior to Plotly graphs in a number of different ways. At its core, <code>Plotly.animate</code> transitions traces to a new state or sequence of states. When you tell Plotly to animate, it merges the properties you've supplied into the current state of the plot. Therefore to animate a trace, you must first plot the trace you wish to animate.</p> <p>The example below transitions to new y-values each time the button is pressed. Since the transition animation occurs within a frame, <code>frame.duration</code> must be set at least as long as <code>transition.duration</code>. Note that to prevent artifacts while animating, the default line simplification algorithm is explicitly disabled. Currently, only scatter traces may be smoothly transitioned from one state to the next. Other traces are compatible with frames and animations but will be updated instantaneously.</p> <pre><code>Plotly.newPlot('myDiv', [{\n  x: [1, 2, 3],\n  y: [0, 0.5, 1],\n  line: {simplify: false},\n}]);\n\nfunction randomize() {\n  Plotly.animate('myDiv', {\n    data: [{y: [Math.random(), Math.random(), Math.random()]}],\n    traces: [0],\n    layout: {}\n  }, {\n    transition: {\n      duration: 500,\n      easing: 'cubic-in-out'\n    },\n    frame: {\n      duration: 500\n    }\n  })\n}</code></pre>"},{"location":"examples/animations/#animating-the-layout","title":"animating-the-layout","text":"<p>The example below transitions to a new axis range each time the button is pressed. A present limitation of the animate API is that only one of either data or layout may be smoothly transitioned at a time. If both are provided, the data will be updated instantaneously after the layout is transitioned.</p> <pre><code>var n = 500;\nvar x = [], y = [];\nfor (var i = 0; i &lt; n; i++) {\n  x[i] = i / (n - 1);\n  y[i] = x[i] + 0.2 * (Math.random() - 0.5);\n}\n\nPlotly.newPlot('myDiv', [{\n  x: x,\n  y: y,\n  mode: 'markers'\n}], {\n  xaxis: {range: [0, 1]},\n  yaxis: {range: [0, 1]}\n});\n\nfunction zoom() {\n  var min = 0.45 * Math.random();\n  var max = 0.55 + 0.45 * Math.random();\n  Plotly.animate('myDiv', {\n    layout: {\n      xaxis: {range: [min, max]},\n      yaxis: {range: [min, max]}\n    }\n  }, {\n    transition: {\n      duration: 500,\n      easing: 'cubic-in-out'\n    }\n  })\n}</code></pre>"},{"location":"examples/animations/#defining-named-frames-with-plotly.addframes","title":"defining-named-frames-with-plotly.addframes","text":"<p>The above examples pass the data itself through the <code>Plotly.animate</code> command. You may instead predefine named frames through the <code>Plotly.addFrames</code> command. Then, instead of passing frames through <code>Plotly.animate</code>, you may simply refer to a frame by name.</p> <p>Similar to traces, frames are assigned a serial index as they are added. Frames may be updated by passing an array of frame indices. For example, the command to update the frame with index 2 would be <code>Plotly.addFrames('myDiv', [{...}], [2])</code>. Frames can be similarly deleted with, for example, <code>Plotly.deleteFrames('myDiv', [2])</code>.</p> <p>The following example uses frames together with an <code>updatemenu</code> for interactive transitions.</p> <pre><code>var frames = [\n  {name: 'sine', data: [{x: [], y: []}]},\n  {name: 'cosine', data: [{x: [], y: []}]},\n  {name: 'circle', data: [{x: [], y: []}]},\n];\n\nvar n = 100;\nfor (var i = 0; i &lt; n; i++) {\n  var t = i / (n - 1) * 2 - 1;\n\n  // A sine wave:\n  frames[0].data[0].x[i] = t * Math.PI;\n  frames[0].data[0].y[i] = Math.sin(t * Math.PI);\n\n  // A cosine wave:\n  frames[1].data[0].x[i] = t * Math.PI;\n  frames[1].data[0].y[i] = Math.cos(t * Math.PI);\n\n  // A circle:\n  frames[2].data[0].x[i] = Math.sin(t * Math.PI);\n  frames[2].data[0].y[i] = Math.cos(t * Math.PI);\n}\n\nPlotly.newPlot('myDiv', [{\n  x: frames[0].data[0].x,\n  y: frames[0].data[0].y,\n  line: {simplify: false},\n}], {\n  xaxis: {range: [-Math.PI, Math.PI]},\n  yaxis: {range: [-1.2, 1.2]},\n  updatemenus: [{\n    buttons: [\n      {method: 'animate', args: [['sine']], label: 'sine'},\n      {method: 'animate', args: [['cosine']], label: 'cosine'},\n      {method: 'animate', args: [['circle']], label: 'circle'}\n    ]\n  }]\n}).then(function() {\n  Plotly.addFrames('myDiv', frames);\n});</code></pre>"},{"location":"examples/animations/#animating-sequences-of-frames","title":"animating-sequences-of-frames","text":"<p>The above examples have used one frame at a time. Whether passing objects as frames or referring to frames by name, you may pass multiple frames together in an array. If <code>null</code> or <code>undefined</code> is passed as the second argument (i.e. <code>Plotly.animate('myDiv')</code>), then all defined frames will be animated in sequence.</p> <p>The third argument of <code>Plotly.animate</code> contains animation options. The transition duration defines the amount of time spent interpolating a trace from one state to another (currently limited to scatter traces), while the frame duration defines the total time spent in that state, including time spent transitioning. The example below has two frames, each with their own transition and frame timing.</p> <pre><code>Plotly.newPlot('myDiv', [{\n  x: [0, 0],\n  y: [-1, 1],\n}], {\n  xaxis: {range: [-Math.PI, Math.PI]},\n  yaxis: {range: [-1.3, 1.3]}\n}).then(function () {\n  Plotly.addFrames('myDiv', [\n    {\n      data: [{x: [1, -1], y: [0, 0]}],\n      name: 'frame1'\n    }, {\n      data: [{x: [0, 0], y: [-1, 1]}],\n      name: 'frame2'\n    }\n  ]);\n})\n\nfunction startAnimation() {\n  Plotly.animate('myDiv', ['frame1', 'frame2'], {\n    frame: [\n      {duration: 1500},\n      {duration: 500},\n    ],\n    transition: [\n      {duration: 800, easing: 'elastic-in'},\n      {duration: 100, easing: 'cubic-in'},\n    ],\n    mode: 'afterall'\n  })\n}</code></pre>"},{"location":"examples/animations/#animating-many-frames-quickly","title":"animating-many-frames-quickly","text":"<p>By default and to ensure any properties that cannot be animated are applied to the plot, a full redraw occurs after each transition. This is generally desirable, but hurts performance when you wish to animate frames as quickly as possible. The example below performs a live simulation of the Lorenz attractor and greatly improves the performance by eliminating the redraw with  <code>redraw: false</code>.</p> <pre><code>var n = 100;\nvar x = [], y = [], z = [];\nvar dt = 0.015;\n\nfor (i = 0; i &lt; n; i++) {\n  x[i] = Math.random() * 2 - 1;\n  y[i] = Math.random() * 2 - 1;\n  z[i] = 30 + Math.random() * 10;\n}\n\nPlotly.newPlot('myDiv', [{\n  x: x,\n  y: z,\n  mode: 'markers'\n}], {\n  xaxis: {range: [-40, 40]},\n  yaxis: {range: [0, 60]}\n})\n\nfunction compute () {\n  var s = 10, b = 8/3, r = 28;\n  var dx, dy, dz;\n  var xh, yh, zh;\n  for (var i = 0; i &lt; n; i++) {\n    dx = s * (y[i] - x[i]);\n    dy = x[i] * (r - z[i]) - y[i];\n    dz = x[i] * y[i] - b * z[i];\n\n    xh = x[i] + dx * dt * 0.5;\n    yh = y[i] + dy * dt * 0.5;\n    zh = z[i] + dz * dt * 0.5;\n\n    dx = s * (yh - xh);\n    dy = xh * (r - zh) - yh;\n    dz = xh * yh - b * zh;\n\n    x[i] += dx * dt;\n    y[i] += dy * dt;\n    z[i] += dz * dt;\n  }\n}\n\nfunction update () {\n  compute();\n\n  Plotly.animate('myDiv', {\n    data: [{x: x, y: z}]\n  }, {\n    transition: {\n      duration: 0\n    },\n    frame: {\n      duration: 0,\n      redraw: false\n    }\n  });\n\n  requestAnimationFrame(update);\n}\n\nrequestAnimationFrame(update);</code></pre>"},{"location":"examples/animations/#object-constancy","title":"object-constancy","text":"<p>For scatter traces, you may wish to retain a marker's identity as it is updated. If you include an array of string ids with the trace, the marker identity will be retained. By shuffling the ids, the example below shuffles the markers each time the button is pressed.</p> <pre><code>function shuffleInPlace(array) {\n  for (var i = array.length - 1; i &gt; 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nvar ids = ['1', '2', '3', '4', '5', '6'];\n\nPlotly.newPlot('myDiv', [{\n  x: [1, 0.5, -0.5, -1, -0.5, 0.5],\n  y: [0, 0.866, 0.866, 0, -0.866, -0.866],\n  marker:{size:14,\n             color:['#631357', '#880E4F', '#AD1457',\n                      '#F06292', '#F48FB1']},\n  ids: ids,\n  mode: 'markers'\n}], {\n  xaxis: {range: [-3, 3]},\n  yaxis: {range: [-2, 2]}\n});\n\nfunction animateShuffle() {\n  shuffleInPlace(ids);\n  Plotly.animate('myDiv', [{\n    data: [{ids: ids}]\n  }]);\n}</code></pre>"},{"location":"examples/animations/#frame-groups-and-animation-modes","title":"frame-groups-and-animation-modes","text":"<p>The following example combines many of these concepts to draw a glass filling with water.</p> <p>The first row of buttons animates a different set of predefined frames by changing the second argument of <code>Plotly.animate</code>. Passing <code>null</code> or <code>undefined</code> animates all defined frames in sequence, while passing an array of strings (here, the frames in reverse) animates a specific sequence of frames. By passing a plain string (here, <code>lower</code> or <code>upper</code>), it filters the animated frames to those with a <code>group</code> property equal to that name. The stop button is accomplished by interrupting the current animation with an empty list of frames, therefore simply stopping the animation at the end of the current frame.</p> <p>The second row of buttons animates all frames with different animation modes. The <code>mode</code> option defines whether an animation either interrupts or follows the current animation. <code>immediate</code> mode discards all queued frames and begins a new sequence immediately. The <code>next</code> mode is very similar but doesn't begin the new animation until the end of the current frame. Finally, <code>afterall</code> queues the new frames so that the new animation begins only after all previous animations have completed.</p> <pre><code>var i, j, t, x, y, name;\nvar frames = [];\nvar nFrames = 10;\nvar n = 80;\nvar reverseFrames = [];\n\nfor (i = 0; i &lt; nFrames; i++) {\n  var fill = 0.1 + 0.9 * i / (nFrames - 1);\n  x = [-1];\n  y = [0];\n\n  // A wave across the top:\n  for (j = 0; j &lt; n; j++) {\n    t = j / (n - 1);\n    x.push(-1 - fill + (2 + 2 * fill) * t);\n    y.push(fill + 0.05 * Math.sin(t * Math.PI * 2 * i));\n  }\n\n  // Close the loop to draw the water:\n  x.push(1, -1);\n  y.push(0, 0);\n\n  // Choose a name:\n  name = 'frame' + i;\n\n  // Store it in an array so we can animate in reverse order:\n  reverseFrames.unshift(name);\n\n  // Create the frame:\n  frames.push({\n    name: name,\n    data: [{x: x, y: y}],\n    group: i &lt; nFrames / 2 ? 'lower' : 'upper'\n  })\n}\n\nPlotly.newPlot('myDiv', [{\n  // Set up the initial water:\n  x: frames[0].data[0].x,\n  y: frames[0].data[0].y,\n  mode: 'lines',\n  fill: 'toself',\n  showlegend: false,\n  line: {simplify: false}\n}, {\n  // Draw a glass:\n  x: [-1, 1, 2.1, -2.1, -1],\n  y: [0, 0, 1.1, 1.1, 0],\n  mode: 'lines',\n  fill: 'toself',\n  showlegend: false,\n  fillcolor: 'rgba(0, 0, 0, 0.1)',\n  line: {color: 'rgba(100,100,100,0.2)'}\n}], {\n  xaxis: {range: [-3, 3]},\n  yaxis: {range: [-0.1, 1.5]}\n}).then(function() {\n  // Add the frames so we can animate them:\n  Plotly.addFrames('myDiv', frames);\n});\n\n// Stop the animation by animating to an empty set of frames:\nfunction stopAnimation () {\n  Plotly.animate('myDiv', [], {mode: 'next'});\n}\n\nfunction startAnimation (groupOrFrames, mode) {\n  Plotly.animate('myDiv', groupOrFrames, {\n    transition: {\n      duration: 500,\n      easing: 'linear'\n    },\n    frame: {\n      duration: 500,\n      redraw: false,\n    },\n    mode: mode\n  });\n}</code></pre>"},{"location":"examples/animations/#animating-with-a-slider","title":"animating-with-a-slider","text":"<p>See Adding Sliders to Animations.</p>"},{"location":"examples/axes/","title":"axes","text":""},{"location":"examples/axes/#set-and-style-axes-title-labels-and-ticks","title":"set-and-style-axes-title-labels-and-ticks","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\", function(err, rows){\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\n  var x = unpack(rows, 'Date')\n  var y = unpack(rows, 'AAPL.Volume')\n\n  var trace = {\n    type: \"scatter\",\n    mode: \"lines\",\n    name: 'AAPL Volume',\n    x: x,\n    y: y,\n    line: {color: 'grey'}\n  }\n\n  var data = [trace];\n\nvar layout = {\n  title: {text: 'Volume of Apple Shares Traded'},\n  xaxis: {\n    title: {\n      text: 'AXIS TITLE',\n      font: {\n          family: 'Arial, sans-serif',\n          size: 18,\n          color: 'lightgrey'\n      }\n    },\n    showticklabels: true,\n    tickangle: 'auto',\n    tickfont: {\n      family: 'Old Standard TT, serif',\n      size: 14,\n      color: 'black'\n    },\n    exponentformat: 'e',\n    showexponent: 'all'\n  },\n  yaxis: {\n    title: {\n      text: 'AXIS TITLE',\n      font: {\n        family: 'Arial, sans-serif',\n        size: 18,\n        color: 'lightgrey'\n      }\n    },\n    showticklabels: true,\n    tickangle: 45,\n    tickfont: {\n      family: 'Old Standard TT, serif',\n      size: 14,\n      color: 'black'\n    },\n    exponentformat: 'e',\n    showexponent: 'all'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n})</code></pre>"},{"location":"examples/axes/#styling-and-coloring-axes-and-the-zero-line","title":"styling-and-coloring-axes-and-the-zero-line","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    showgrid: true,\n    zeroline: true,\n    showline: true,\n    mirror: 'ticks',\n    gridcolor: '#bdbdbd',\n    gridwidth: 2,\n    zerolinecolor: '#969696',\n    zerolinewidth: 4,\n    linecolor: '#636363',\n    linewidth: 6\n  },\n  yaxis: {\n    showgrid: true,\n    zeroline: true,\n    showline: true,\n    mirror: 'ticks',\n    gridcolor: '#bdbdbd',\n    gridwidth: 2,\n    zerolinecolor: '#969696',\n    zerolinewidth: 4,\n    linecolor: '#636363',\n    linewidth: 6\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#tick-placement-color-and-style","title":"tick-placement-color-and-style","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    tickmode: 'linear',\n    ticks: 'outside',\n    tick0: 0,\n    dtick: 0.25,\n    ticklen: 8,\n    tickwidth: 4,\n    tickcolor: '#000'\n  },\n  yaxis: {\n    tickmode: 'linear',\n    ticks: 'outside',\n    tick0: 0,\n    dtick: 0.25,\n    ticklen: 8,\n    tickwidth: 4,\n    tickcolor: '#000'\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#toggling-axes-lines-ticks-labels-and-autorange","title":"toggling-axes-lines-ticks-labels-and-autorange","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    autorange: true,\n    showgrid: false,\n    zeroline: false,\n    showline: false,\n    autotick: true,\n    ticks: '',\n    showticklabels: false\n  },\n  yaxis: {\n    autorange: true,\n    showgrid: false,\n    zeroline: false,\n    showline: false,\n    autotick: true,\n    ticks: '',\n    showticklabels: false\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#setting-the-range-of-axes-manually","title":"setting-the-range-of-axes-manually","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {range: [2, 5]},\n  yaxis: {range: [2, 5]}\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#nonnegative-tozero-and-normal-rangemode","title":"nonnegative-tozero-and-normal-rangemode","text":"<pre><code>var data = [\n  {\n    x: [2, 4, 6],\n    y: [-3, 0, 3],\n    type: 'scatter'\n  }\n];\nvar layout = {\n  showlegend: false,\n  xaxis: {\n    rangemode: 'tozero',\n    autorange: true\n  },\n  yaxis: {\n    rangemode: 'nonnegative',\n    autorange: true\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#enumerated-ticks-with-tickvals-and-ticktext","title":"enumerated-ticks-with-tickvals-and-ticktext","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/stockdata.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row)\n  { return row[key]; });}\n\nvar trace1 = {\n  x:unpack(rows, 'Date'),\n  y: unpack(rows, 'IBM'),\n  mode: 'markers',\n  marker: {\n    size: 7,\n    line: {\n    width: 0.5},\n    opacity: 0.8},\n  type: 'scatter'\n};\n\nvar layout = {\n  title: {\n    text: 'IBM Stock Data: Jan 2007 - Mar 2016'\n  },\n  xaxis: {\n    tickvals: ['2007-01-01', '2007-09-01', '2008-01-01', '2008-09-01', '2009-01-01', '2010-01-01', '2011-01-01', '2011-02-14', '2012-01-01', '2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01'],\n    ticktext: ['2007', 'Financial Crisis Starts', '2008', 'Financial Crisis Ends', '2009', '2010', '2011', 'IBM wins Jeopardy!', '2012', '2013', '2014', '2015', '2016']\n  }\n};\n\nvar data = [trace1];\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/axes/#logarithmic-axes","title":"logarithmic-axes","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  xaxis: {\n    type: 'log',\n    autorange: true\n  },\n  yaxis: {\n    type: 'log',\n    autorange: true\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#set-axis-title-position","title":"set-axis-title-position","text":"<p>This example sets <code>standoff</code> attribute to cartesian axes to determine the distance between the tick labels and the axis title. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting standoff and turning automargin on, plotly.js will push the margins to fit the axis title at given standoff distance.</p> <pre><code>var data = [{\n      mode: \"lines+markers\",\n      x:[\"December\", \"January\", \"February\"],\n      y:[4,1,3]\n    }]\n\n var layout = {\n      margin: {t:0,r:0,b:0,l:20},\n      xaxis: {\n        automargin: true,\n        tickangle: 90,\n        title: {\n          text: \"Month\",\n          standoff: 20\n        }},\n      yaxis: {\n        automargin: true,\n        tickangle: 90,\n        title: {\n          text: \"Temperature\",\n          standoff: 40\n        }}}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/axes/#reversed-axes","title":"reversed-axes","text":"<pre><code>var data = [\n  {\n    x: [1, 2],\n    y: [1, 2],\n    type: 'scatter'\n  }\n];\nvar layout = {xaxis: {autorange: 'reversed'}};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#reversed-axes-with-range-(-min/max-)-specified","title":"reversed-axes-with-range-(-min/max-)-specified","text":"<pre><code>var data = [\n  {\n    x: [0.0, 0.1, 0.2, 0.3, 0.4, 0.51, 0.61, 0.71, 0.81, 0.91, 1.01, 1.11, 1.21, 1.31, 1.41, 1.52, 1.62, 1.72, 1.82, 1.92, 2.02, 2.12, 2.22, 2.32, 2.42, 2.53, 2.63, 2.73, 2.83, 2.93, 3.03, 3.13, 3.23, 3.33, 3.43, 3.54, 3.64, 3.74, 3.84, 3.94, 4.04, 4.14, 4.24, 4.34, 4.44, 4.55, 4.65, 4.75, 4.85, 4.95, 5.05, 5.15, 5.25, 5.35, 5.45, 5.56, 5.66, 5.76, 5.86, 5.96, 6.06, 6.16, 6.26, 6.36, 6.46, 6.57, 6.67, 6.77, 6.87, 6.97, 7.07, 7.17, 7.27, 7.37, 7.47, 7.58, 7.68, 7.78, 7.88, 7.98, 8.08, 8.18, 8.28, 8.38, 8.48, 8.59, 8.69, 8.79, 8.89, 8.99, 9.09, 9.19, 9.29, 9.39, 9.49, 9.6, 9.7, 9.8, 9.9, 10.0],\n    y: [63, 65, 78, 92, 12, 50, 17, 31, 1, 25, 76, 66, 83, 38, 95, 23, 20, 88, 31, 26, 39, 74, 11, 84, 7, 13, 30, 85, 80, 47, 12, 89, 12, 35, 99, 78, 77, 56, 26, 13, 96, 55, 19, 88, 31, 1, 42, 39, 99, 62, 68, 61, 45, 44, 10, 25, 89, 82, 28, 2, 24, 1, 32, 16, 29, 40, 55, 75, 20, 41, 67, 33, 92, 14, 16, 22, 86, 55, 37, 42, 42, 85, 60, 11, 54, 3, 34, 29, 59, 28, 25, 67, 90, 10, 29, 16, 51, 17, 2, 34],\n    mode: \"markers\"\n  }\n];\nvar layout = {\n  title: {\n    text: \"Reversed Axis with Min/Max\"\n  },\n  xaxis: {\n    range: [10, 0]\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#categorical-axes","title":"categorical-axes","text":"<pre><code>var trace1 = {\n  x: ['A12', 'BC2', 109, '12F', 215, 304],\n  y: [1, 6, 3, 5, 1, 4],\n  mode: 'markers',\n  type: 'bar',\n  name: 'Team A',\n  text: ['Apples', 'Pears', 'Peaches', 'Bananas', 'Pineapples', 'Cherries'],\n};\n\nvar data = [ trace1 ];\n\nvar layout = {\n  xaxis: {\n    type: 'category',\n    title: {\n        text: 'Product Code'\n    }\n    },\n    yaxis: {\n        range: [0, 7],\n        title: {\n            text: 'Number of Items in Stock'\n        }\n    },\n  title: {text: 'Inventory'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#multi-category-axes","title":"multi-category-axes","text":"<pre><code>var trace1 = {\n  x: [\n    ['SF Zoo','SF Zoo','SF Zoo'],\n    ['giraffes', 'orangutans', 'monkeys']\n  ],\n  y: [20, 14, 23],\n  name: 'SF Zoo',\n  type: 'bar'\n};\n\nvar trace2 = {\n  x: [\n    ['LA Zoo','LA Zoo','LA Zoo'],\n    ['giraffes', 'orangutans', 'monkeys']\n  ],\n  y: [12, 18, 29],\n  name: 'LA Zoo',\n  type: 'bar'\n};\n\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false,\n  xaxis: {\n    tickson: \"boundaries\",\n    ticklen: 15,\n    showdividers: true,\n    dividercolor: 'grey',\n    dividerwidth: 2\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#using-dates-on-the-x-axis","title":"using-dates-on-the-x-axis","text":"<pre><code>var trace1 = {\n  x: ['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06', '2000-01-07', '2000-01-08', '2000-01-09', '2000-01-10', '2000-01-11', '2000-01-12', '2000-01-13', '2000-01-14', '2000-01-15', '2000-01-16', '2000-01-17', '2000-01-18', '2000-01-19', '2000-01-20', '2000-01-21', '2000-01-22', '2000-01-23', '2000-01-24', '2000-01-25', '2000-01-26', '2000-01-27', '2000-01-28', '2000-01-29', '2000-01-30', '2000-01-31'],\n  y: [4.3, 8.2, 4.1, 5.6, -3, -0.2, 0.3, 0.4, 4.1, 5, 4.6, -0.2, -8.5, -9.1, -2.7, -2.7, -17, -11.3, -5.5, -6.5, -16.9, -12, -6.1, -6.6, -7.9, -10.8, -14.8, -11, -4.4, -1.3, -1.1],\n  mode: 'lines',\n  type: 'scatter',\n  name: '2000'\n};\n\nvar data = [ trace1 ];\n\nvar layout = {\n  xaxis: {\n    type: 'date',\n    title: {\n      text: 'January Weather'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'Daily Mean Temperature'\n    }\n  },\n  title: {\n    text: '2000 Toronto January Weather'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#fixed-ratio-axes","title":"fixed-ratio-axes","text":"<pre><code>var trace0 = {\n  x: [0,1,1,0,0,1,1,2,2,3,3,2,2,3],\n  y: [0,0,1,1,3,3,2,2,3,3,1,1,0,0]\n}\n\nvar trace1 = {\n  x: [0,1,2,3],\n  y: [1,2,4,8],\n  yaxis:\"y2\"\n}\n\nvar trace2 = {\n  x: [1,10,100,10,1],\n  y: [0,1,2,3,4],\n  xaxis: \"x2\",\n  yaxis:\"y3\",\n}\n\nvar trace3 = {\n  x: [1,100,30,80,1],\n  y: [1,1.5,2,2.5,3],\n  xaxis:\"x2\",\n  yaxis:\"y4\"\n}\n\nvar data = [trace0,trace1,trace2,trace3]\n\nvar layout = {\n  width: 800,\n  height: 500,\n  title: {\n      text: \"fixed-ratio axes\"\n  },\n  xaxis: {\n      nticks: 10,\n      domain: [0, 0.45],\n      title: {\n          text: \"shared X axis\"\n      }\n  },\n  yaxis: {\n      scaleanchor: \"x\",\n      domain: [0, 0.45],\n      title: {\n          text: \"1:1\"\n      }\n  },\n  yaxis2: {\n      scaleanchor: \"x\",\n      scaleratio: 0.2,\n      domain: [0.55, 1],\n      title: {\n          text: \"1:5\"\n      }\n  },\n  xaxis2: {\n      type: \"log\",\n      domain: [0.55, 1],\n      anchor: \"y3\",\n      title: {\n          text: \"unconstrained log X\"\n      }\n  },\n  yaxis3: {\n      domain: [0, 0.45],\n      anchor: \"x2\",\n      title: {\n          text: \"Scale matches -&gt;\"\n      }\n  },\n  yaxis4: {\n      scaleanchor: \"y3\",\n      domain: [0.55, 1],\n      anchor: \"x2\",\n      title: {\n          text: \"Scale matches &lt;-\"\n      }\n  },\n  showlegend: false\n}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/axes/#specifying-label-aliases","title":"specifying-label-aliases","text":"<p>This example uses <code>labelalias</code> to update the text displayed for the x-axis values.</p> <pre><code>var trace1 = {\n  x: ['UK', 'US', 'Germany', 'France'],\n  y: [8, 3, 10, 3],\n  type: 'bar',\n};\n\nvar data = [trace1];\n\nvar layout = {\nxaxis: {\n  labelalias: {\n    UK: '\ud83c\uddec\ud83c\udde7 United Kingdom',\n    US: '\ud83c\uddfa\ud83c\uddf8 United States',\n    Germany: '\ud83c\udde9\ud83c\uddea Germany',\n    France: '\ud83c\uddeb\ud83c\uddf7 France'}\n  },\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/axes/#use-base64-encoded-typed-arrays","title":"use-base64-encoded-typed-arrays","text":"<p>Plotly.js 2.28.0 and later supports using base64-encoded typed arrays. To use a base64-encoded typed array, pass an object with the keys <code>bdata</code> (a base64-encoded string or the ArrayBuffer of an integer or float typed array) and <code>dtype</code> (the data type of the array, where the supported types are <code>float64</code>, <code>float32</code>, <code>int32</code>, <code>uint32</code>, <code>int16</code>, <code>uint16</code>, <code>int8</code>, <code>uint8</code>, and <code>uint8c</code>). You can also specify <code>shape</code> for multidimensional arrays. For example, <code>'4,10'</code> would be a 2D array with 4 rows and 10 columns.</p> <pre><code>var x = 'VVVVVVVV1b8AAAAAAAAAAFVVVVVVVdU/'\nvar y = 'q6qqPquqqr4='\nvar z = 'AABkAMgALAGQAfQB'\n\nvar trace1 = {\n  x: {\n    bdata: x,\n    dtype: 'f8'\n  },\n  y: {\n    bdata: y,\n    dtype: 'f4'\n  },\n  z: {\n    bdata: z,\n    dtype: 'u2',\n    shape: '2,3'\n  },\n  type: 'surface'\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/axes/#zero-line-layer","title":"zero-line-layer","text":"<p>New in 3.1</p> <p>By default, zero lines are displayed below traces. Set <code>zerolinelayer=\"above traces\"</code> on an axis to display its zero line above traces.</p> <pre><code>var trace1 = {\n  x: ['A', 'B', 'C', 'D', 'A'],\n  y: [2, 0, 4, -3, 2],\n  fill: 'toself',\n  mode: 'none',\n  fillcolor: 'lightpink',\n  type: 'scatter'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  yaxis: {\n    zerolinelayer: \"above traces\"  // Change to \"below traces\" to see the difference\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/","title":"bar-charts","text":""},{"location":"examples/bar-charts/#basic-bar-chart","title":"basic-bar-chart","text":"<pre><code>var data = [\n  {\n    x: ['giraffes', 'orangutans', 'monkeys'],\n    y: [20, 14, 23],\n    type: 'bar'\n  }\n];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/bar-charts/#grouped-bar-chart","title":"grouped-bar-chart","text":"<pre><code>var trace1 = {\n  x: ['giraffes', 'orangutans', 'monkeys'],\n  y: [20, 14, 23],\n  name: 'SF Zoo',\n  type: 'bar'\n};\n\nvar trace2 = {\n  x: ['giraffes', 'orangutans', 'monkeys'],\n  y: [12, 18, 29],\n  name: 'LA Zoo',\n  type: 'bar'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {barmode: 'group'};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#stacked-bar-chart","title":"stacked-bar-chart","text":"<pre><code>var trace1 = {\n  x: ['giraffes', 'orangutans', 'monkeys'],\n  y: [20, 14, 23],\n  name: 'SF Zoo',\n  type: 'bar'\n};\n\nvar trace2 = {\n  x: ['giraffes', 'orangutans', 'monkeys'],\n  y: [12, 18, 29],\n  name: 'LA Zoo',\n  type: 'bar'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {barmode: 'stack'};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#bar-chart-with-hover-text","title":"bar-chart-with-hover-text","text":"<pre><code>var trace1 = {\n  x: ['Liam', 'Sophie', 'Jacob', 'Mia', 'William', 'Olivia'],\n  y: [8.0, 8.0, 12.0, 12.0, 13.0, 20.0],\n  type: 'bar',\n  text: ['4.17 below the mean', '4.17 below the mean', '0.17 below the mean', '0.17 below the mean', '0.83 above the mean', '7.83 above the mean'],\n  marker: {\n    color: 'rgb(142,124,195)'\n  }\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'Number of Graphs Made this Week'\n  },\n  font:{\n    family: 'Raleway, sans-serif'\n  },\n  showlegend: false,\n  xaxis: {\n    tickangle: -45\n  },\n  yaxis: {\n    zeroline: false,\n    gridwidth: 2\n  },\n  bargap :0.05\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#bar-chart-with-direct-labels","title":"bar-chart-with-direct-labels","text":"<pre><code>var xValue = ['Product A', 'Product B', 'Product C'];\n\nvar yValue = [20, 14, 23];\n\nvar trace1 = {\n  x: xValue,\n  y: yValue,\n  type: 'bar',\n  text: yValue.map(String),\n  textposition: 'auto',\n  hoverinfo: 'none',\n  marker: {\n    color: 'rgb(158,202,225)',\n    opacity: 0.6,\n    line: {\n      color: 'rgb(8,48,107)',\n      width: 1.5\n    }\n  }\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'January 2013 Sales Report'\n  },\n  barmode: 'stack'\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#grouped-bar-chart-with-direct-labels","title":"grouped-bar-chart-with-direct-labels","text":"<pre><code>var xValue = ['Product A', 'Product B', 'Product C'];\n\nvar yValue = [20, 14, 23];\nvar yValue2 = [24, 16, 20];\n\nvar trace1 = {\n  x: xValue,\n  y: yValue,\n  type: 'bar',\n  text: yValue.map(String),\n  textposition: 'auto',\n  hoverinfo: 'none',\n  opacity: 0.5,\n  marker: {\n    color: 'rgb(158,202,225)',\n    line: {\n      color: 'rgb(8,48,107)',\n      width: 1.5\n    }\n  }\n};\n\nvar trace2 = {\n  x: xValue,\n  y: yValue2,\n  type: 'bar',\n  text: yValue2.map(String),\n  textposition: 'auto',\n  hoverinfo: 'none',\n  marker: {\n    color: 'rgba(58,200,225,.5)',\n    line: {\n      color: 'rgb(8,48,107)',\n      width: 1.5\n    }\n  }\n};\n\nvar data = [trace1,trace2];\n\nvar layout = {\n  title: {\n    text: 'January 2013 Sales Report'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#bar-chart-with-rotated-labels","title":"bar-chart-with-rotated-labels","text":"<pre><code>var trace1 = {\n  x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  y: [20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],\n  type: 'bar',\n  name: 'Primary Product',\n  marker: {\n    color: 'rgb(49,130,189)',\n    opacity: 0.7,\n  }\n};\n\nvar trace2 = {\n  x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  y: [19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],\n  type: 'bar',\n  name: 'Secondary Product',\n  marker: {\n    color: 'rgb(204,204,204)',\n    opacity: 0.5\n  }\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: '2013 Sales Report'\n  },\n  xaxis: {\n    tickangle: -45\n  },\n  barmode: 'group'\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#customizing-individual-bar-colors","title":"customizing-individual-bar-colors","text":"<pre><code>var trace1 = {\n  x: ['Feature A', 'Feature B', 'Feature C', 'Feature D', 'Feature E'],\n  y: [20, 14, 23, 25, 22],\n  marker:{\n    color: ['rgba(204,204,204,1)', 'rgba(222,45,38,0.8)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)']\n  },\n  type: 'bar'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'Least Used Feature'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#customizing-individual-bar-widths","title":"customizing-individual-bar-widths","text":"<pre><code>var trace0 = {\n  type: 'bar',\n  x: [1, 2, 3, 5.5, 10],\n  y: [10, 8, 6, 4, 2],\n  width: [0.8, 0.8, 0.8, 3.5, 4]\n}\n\nvar data = [trace0]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/bar-charts/#customizing-individual-bar-base","title":"customizing-individual-bar-base","text":"<pre><code>var data = [\n  {\n    type: 'bar',\n    x: ['2016','2017','2018'],\n    y: [500,600,700],\n    base: [-500,-600,-700],\n    hovertemplate: '%{base}',\n    marker: {\n      color: 'red'\n    },\n    name: 'expenses'\n  },\n  {\n    type: 'bar',\n    x: ['2016','2017','2018'],\n    y: [300,400,700],\n    base: 0,\n    marker: {\n      color: 'blue'\n    },\n    name: 'revenue'\n  }]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/bar-charts/#colored-and-styled-bar-chart","title":"colored-and-styled-bar-chart","text":"<pre><code>var trace1 = {\n  x: [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],\n  y: [219, 146, 112, 127, 124, 180, 236, 207, 236, 263, 350, 430, 474, 526, 488, 537, 500, 439],\n  name: 'Rest of world',\n  marker: {color: 'rgb(55, 83, 109)'},\n  type: 'bar'\n};\n\nvar trace2 = {\n  x: [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],\n  y: [16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270, 299, 340, 403, 549, 499],\n  name: 'China',\n  marker: {color: 'rgb(26, 118, 255)'},\n  type: 'bar'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: 'US Export of Plastic Scrap'\n  },\n  xaxis: {tickfont: {\n      size: 14,\n      color: 'rgb(107, 107, 107)'\n    }},\n  yaxis: {\n    title: {\n        text: 'USD (millions)',\n        font: {\n            size: 16,\n            color: 'rgb(107, 107, 107)'\n        }\n    },\n    tickfont: {\n      size: 14,\n      color: 'rgb(107, 107, 107)'\n    }\n  },\n  legend: {\n    x: 0,\n    y: 1.0,\n    bgcolor: 'rgba(255, 255, 255, 0)',\n    bordercolor: 'rgba(255, 255, 255, 0)'\n  },\n  barmode: 'group',\n  bargap: 0.15,\n  bargroupgap: 0.1\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#rounded-corners-on-bars","title":"rounded-corners-on-bars","text":"<p>To create rounded corners on bars, set <code>barcornerradius</code> on the layout to a number of pixels, or a string with a percentage of the bar width, for example, 25%. You can also configure traces individually with <code>marker.cornerradius</code> on the trace.</p> <pre><code>var trace1 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [24, 10, 9],\n  name: 'Gold',\n  type: 'bar',\n};\n\nvar trace2 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [13, 15, 12],\n  name: 'Silver',\n  type: 'bar',\n};\n\nvar trace3 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [11, 8, 12],\n  name: 'Bronze',\n  type: 'bar',\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  scattermode: 'group',\n  title: {\n    text: 'Grouped by Country'\n  },\n  xaxis: {\n    title: {\n      text: 'Country'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'Medals'\n    }\n  },\n  barcornerradius: 15,\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#waterfall-bar-chart","title":"waterfall-bar-chart","text":"<pre><code>// Base\n\nvar xData = ['Product&lt;br&gt;Revenue', 'Services&lt;br&gt;Revenue',\n  'Total&lt;br&gt;Revenue', 'Fixed&lt;br&gt;Costs',\n  'Variable&lt;br&gt;Costs', 'Total&lt;br&gt;Costs', 'Total'\n];\n\nvar yData = [400, 660, 660, 590, 400, 400, 340];\n\nvar textList = ['$430K', '$260K', '$690K', '$-120K', '$-200K', '$-320K', '$370K'];\n\n//Base\n\nvar trace1 = {\n  x: xData,\n  y: [0, 430, 0, 570, 370, 370, 0],\n  marker: {\n    color: 'rgba(1,1,1,0.0)'\n  },\n  type: 'bar'\n};\n\n//Revenue\n\nvar trace2 = {\n  x: xData,\n  y: [430, 260, 690, 0, 0, 0, 0],\n  type: 'bar',\n  marker: {\n    color: 'rgba(55,128,191,0.7)',\n    line: {\n      color: 'rgba(55,128,191,1.0)',\n      width: 2\n    }\n  }\n};\n\n//Cost\n\nvar trace3 = {\n  x: xData,\n  y: [0, 0, 0, 120, 200, 320, 0],\n  type: 'bar',\n  marker: {\n    color: 'rgba(219, 64, 82, 0.7)',\n    line: {\n      color: 'rgba(219, 64, 82, 1.0)',\n      width: 2\n    }\n  }\n};\n\n//Profit\n\nvar trace4 = {\n  x: xData,\n  y: [0, 0, 0, 0, 0, 0, 370],\n  type: 'bar',\n  marker: {\n    color: 'rgba(50,171, 96, 0.7)',\n    line: {\n      color: 'rgba(50,171,96,1.0)',\n      width: 2\n    }\n  }\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {\n    text: 'Annual Profit 2015'\n  },\n  barmode: 'stack',\n  paper_bgcolor: 'rgba(245,246,249,1)',\n  plot_bgcolor: 'rgba(245,246,249,1)',\n  width: 600,\n  height: 600,\n  showlegend: false,\n  annotations: []\n};\n\nfor ( var i = 0 ; i &lt; 7 ; i++ ) {\n  var result = {\n    x: xData[i],\n    y: yData[i],\n    text: textList[i],\n    font: {\n      family: 'Arial',\n      size: 14,\n      color: 'rgba(245,246,249,1)'\n    },\n    showarrow: false\n  };\n  layout.annotations.push(result);\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bar-charts/#bar-chart-with-relative-barmode","title":"bar-chart-with-relative-barmode","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [1, 4, 9, 16],\n  name: 'Trace1',\n  type: 'bar'\n};\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [6, -8, -4.5, 8],\n  name: 'Trace2',\n  type: 'bar'\n};\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [-15, -3, 4.5, -8],\n  name: 'Trace3',\n  type: 'bar'\n }\n\n var trace4 = {\n  x: [1, 2, 3, 4],\n  y: [-1, 3, -3, -4],\n  name: 'Trace4',\n  type: 'bar'\n }\n\nvar data = [trace1, trace2, trace3, trace4];\nvar layout = {\n  xaxis: {\n    title: {\n      text: 'X axis'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'Y axis'\n    }\n  },\n  barmode: 'relative',\n  title: {\n    text: 'Relative Barmode'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/","title":"box-plots","text":""},{"location":"examples/box-plots/#basic-box-plot","title":"basic-box-plot","text":"<pre><code>var y0 = [];\nvar y1 = [];\nfor (var i = 0; i &lt; 50; i ++) {\n    y0[i] = Math.random();\n    y1[i] = Math.random() + 1;\n}\n\nvar trace1 = {\n  y: y0,\n  type: 'box'\n};\n\nvar trace2 = {\n  y: y1,\n  type: 'box'\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/box-plots/#box-plot-that-displays-the-underlying-data","title":"box-plot-that-displays-the-underlying-data","text":"<pre><code>var data = [\n  {\n    y: [0, 1, 1, 2, 3, 5, 8, 13, 21],\n    boxpoints: 'all',\n    jitter: 0.3,\n    pointpos: -1.8,\n    type: 'box'\n  }\n];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/box-plots/#horizontal-box-plot","title":"horizontal-box-plot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4, 4, 4, 8, 9, 10],\n  type: 'box',\n  name: 'Set 1'\n};\n\nvar trace2 = {\n  x: [2, 3, 3, 3, 3, 5, 6, 6, 7],\n  type: 'box',\n  name: 'Set 2'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: 'Horizontal Box Plot'\n  },\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/#grouped-box-plot","title":"grouped-box-plot","text":"<pre><code>var x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n         'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\n\nvar trace1 = {\n  y: [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n  x: x,\n  name: 'kale',\n  marker: {color: '#3D9970'},\n  type: 'box'\n};\n\nvar trace2 = {\n  y: [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n  x: x,\n  name: 'radishes',\n  marker: {color: '#FF4136'},\n  type: 'box'\n};\n\nvar trace3 = {\n  y: [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n  x: x,\n  name: 'carrots',\n  marker: {color: '#FF851B'},\n  type: 'box'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  yaxis: {\n    title: {\n      text: 'normalized moisture'\n    },\n    zeroline: false\n  },\n  boxmode: 'group'\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/#box-plot-styling-outliers","title":"box-plot-styling-outliers","text":"<pre><code>var trace1 = {\n  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n  type: 'box',\n  name: 'All Points',\n  jitter: 0.3,\n  pointpos: -1.8,\n  marker: {\n    color: 'rgb(7,40,89)'\n  },\n  boxpoints: 'all'\n};\n\nvar trace2 = {\n  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n  type: 'box',\n  name: 'Only Wiskers',\n  marker: {\n    color: 'rgb(9,56,125)'\n  },\n  boxpoints: false\n};\n\nvar trace3 = {\n  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n  type: 'box',\n  name: 'Suspected Outlier',\n  marker: {\n    color: 'rgb(8,81,156)',\n    outliercolor: 'rgba(219, 64, 82, 0.6)',\n    line: {\n      outliercolor: 'rgba(219, 64, 82, 1.0)',\n      outlierwidth: 2\n    }\n  },\n  boxpoints: 'suspectedoutliers'\n};\n\nvar trace4 = {\n  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],\n  type: 'box',\n  name: 'Wiskers and Outliers',\n  marker: {\n    color: 'rgb(107,174,214)'\n  },\n  boxpoints: 'Outliers'\n};\n\n\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {\n    text: 'Box Plot Styling Outliers'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/#box-plot-styling-mean-and-standard-deviation","title":"box-plot-styling-mean-and-standard-deviation","text":"<pre><code>var trace1 = {\n  y: [2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],\n  type: 'box',\n  name: 'Only Mean',\n  marker: {\n    color: 'rgb(8,81,156)'\n  },\n  boxmean: true\n};\n\nvar trace2 = {\n  y: [2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],\n  type: 'box',\n  name: 'Mean and Standard Deviation',\n  marker: {\n    color: 'rgb(10,140,208)'\n  },\n  boxmean: 'sd'\n};\n\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: 'Box Plot Styling Mean and Standard Deviation'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/#grouped-horizontal-box-plot","title":"grouped-horizontal-box-plot","text":"<pre><code>var y = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n         'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\n\nvar trace1 = {\n  x: [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n  y: y,\n  name: 'kale',\n  marker: {color: '#3D9970'},\n  type: 'box',\n  boxmean: false,\n  orientation: 'h'\n};\n\nvar trace2 = {\n  x: [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n  y: y,\n  name: 'radishes',\n  marker: {color: '#FF4136'},\n  type: 'box',\n  boxmean: false,\n  orientation: 'h'\n};\n\nvar trace3 = {\n  x: [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n  y: y,\n  name: 'carrots',\n  marker: {color: '#FF851B'},\n  type: 'box',\n  boxmean: false,\n  orientation: 'h'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  title: {\n    text: 'Grouped Horizontal Box Plot'\n  },\n  xaxis: {\n    title: {\n      text: 'normalized moisture'\n    },\n    zeroline: false\n  },\n  boxmode: 'group'\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/#colored-box-plot","title":"colored-box-plot","text":"<pre><code>var trace1 = {\n  y: [1, 2, 3, 4, 4, 4, 8, 9, 10],\n  type: 'box',\n  name: 'Sample A',\n  marker:{\n    color: 'rgb(214,12,140)'\n  }\n};\n\nvar trace2 = {\n  y: [2, 3, 3, 3, 3, 5, 6, 6, 7],\n  type: 'box',\n  name: 'Sample B',\n  marker:{\n    color: 'rgb(0,128,128)'\n  }\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: 'Colored Box Plot'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/#fully-styled-box-plot","title":"fully-styled-box-plot","text":"<pre><code>var xData = ['Carmelo&lt;br&gt;Anthony', 'Dwyane&lt;br&gt;Wade',\n      'Deron&lt;br&gt;Williams', 'Brook&lt;br&gt;Lopez',\n      'Damian&lt;br&gt;Lillard', 'David&lt;br&gt;West',\n      'Blake&lt;br&gt;Griffin', 'David&lt;br&gt;Lee',\n      'Demar&lt;br&gt;Derozan'];\n\nfunction getrandom(num , mul) {\n    var value = [ ];\n    for ( i = 0; i &lt;= num; i++ ) {\n        var rand = Math.random() * mul;\n        value.push(rand);\n    }\n    return value;\n}\n\nvar yData = [\n        getrandom(30 ,10),\n        getrandom(30, 20),\n        getrandom(30, 25),\n        getrandom(30, 40),\n        getrandom(30, 45),\n        getrandom(30, 30),\n        getrandom(30, 20),\n        getrandom(30, 15),\n        getrandom(30, 43),\n    ];\nvar colors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)', 'rgba(255, 140, 184, 0.5)', 'rgba(79, 90, 117, 0.5)', 'rgba(222, 223, 0, 0.5)'];\n\nvar data = [];\n\nfor ( var i = 0; i &lt; xData.length; i ++ ) {\n    var result = {\n        type: 'box',\n        y: yData[i],\n        name: xData[i],\n        boxpoints: 'all',\n        jitter: 0.5,\n        whiskerwidth: 0.2,\n        fillcolor: 'cls',\n        marker: {\n            size: 2\n        },\n        line: {\n            width: 1\n        }\n    };\n    data.push(result);\n};\n\nlayout = {\n    title: {\n        text: 'Points Scored by the Top 9 Scoring NBA Players in 2012'\n    },\n    yaxis: {\n        autorange: true,\n        showgrid: true,\n        zeroline: true,\n        dtick: 5,\n        gridcolor: 'rgb(255, 255, 255)',\n        gridwidth: 1,\n        zerolinecolor: 'rgb(255, 255, 255)',\n        zerolinewidth: 2\n    },\n    margin: {\n        l: 40,\n        r: 30,\n        b: 80,\n        t: 100\n    },\n    paper_bgcolor: 'rgb(243, 243, 243)',\n    plot_bgcolor: 'rgb(243, 243, 243)',\n    showlegend: false\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/box-plots/#rainbow-box-plot","title":"rainbow-box-plot","text":"<pre><code>function linspace(a,b,n) {\n  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});\n}\nvar boxNumber = 30;\nvar boxColor = [];\nvar allColors = linspace(0, 360, boxNumber);\nvar data = [];\nvar yValues = [];\n\n//Colors\n\nfor( var i = 0; i &lt; boxNumber;  i++ ){\n  var result = 'hsl('+ allColors[i] +',50%'+',50%)';\n  boxColor.push(result);\n}\n\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n};\n\n//Create Y Values\n\nfor( var i = 0; i &lt; boxNumber;  i++ ){\n  var ySingleArray = [];\n    for( var j = 0; j &lt; 10;  j++ ){\n      var randomNum = getRandomArbitrary(0, 1);\n      var yIndValue = 3.5*Math.sin(Math.PI * i/boxNumber) + i/boxNumber+(1.5+0.5*Math.cos(Math.PI*i/boxNumber))*randomNum;\n      ySingleArray.push(yIndValue);\n    }\n  yValues.push(ySingleArray);\n}\n\n//Create Traces\n\nfor( var i = 0; i &lt; boxNumber;  i++ ){\n  var result = {\n    y: yValues[i],\n    type:'box',\n    marker:{\n      color: boxColor[i]\n    }\n  };\n  data.push(result);\n};\n\n//Format the layout\n\nvar layout = {\n  xaxis: {\n    showgrid: false,\n    zeroline: false,\n    tickangle: 60,\n    showticklabels: false\n  },\n  yaxis: {\n    zeroline: false,\n    gridcolor: 'white'\n  },\n  paper_bgcolor: 'rgb(233,233,233)',\n  plot_bgcolor: 'rgb(233,233,233)',\n  showlegend:false\n};\n\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bubble-charts/","title":"bubble-charts","text":""},{"location":"examples/bubble-charts/#marker-size-on-bubble-charts","title":"marker-size-on-bubble-charts","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 11, 12, 13],\n  mode: 'markers',\n  marker: {\n    size: [40, 60, 80, 100]\n  }\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'Marker Size'\n  },\n  showlegend: false,\n  height: 600,\n  width: 600\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bubble-charts/#hover-text-on-bubble-charts","title":"hover-text-on-bubble-charts","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 11, 12, 13],\n  text: ['A&lt;br&gt;size: 40', 'B&lt;br&gt;size: 60', 'C&lt;br&gt;size: 80', 'D&lt;br&gt;size: 100'],\n  mode: 'markers',\n  marker: {\n    color: ['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n    size: [40, 60, 80, 100]\n  }\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'Bubble Chart Hover Text'\n  },\n  showlegend: false,\n  height: 600,\n  width: 600\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bubble-charts/#marker-size-and-color-on-bubble-charts","title":"marker-size-and-color-on-bubble-charts","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 11, 12, 13],\n  mode: 'markers',\n  marker: {\n    color: ['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n    opacity: [1, 0.8, 0.6, 0.4],\n    size: [40, 60, 80, 100]\n  }\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'Marker Size and Color'\n  },\n  showlegend: false,\n  height: 600,\n  width: 600\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bubble-charts/#bubble-size-scaling-on-charts","title":"bubble-size-scaling-on-charts","text":"<pre><code>// To scale the bubble size, use the attribute sizeref. We recommend using the following formula to calculate a sizeref value:\n// sizeref = 2.0 * Math.max(...size) / (desired_maximum_marker_size**2)\n// Note that setting 'sizeref' to a value greater than 1, decreases the rendered marker sizes, while setting 'sizeref' to less than 1, increases the rendered marker sizes. See https://plotly.com/python/reference/scatter/#scatter-marker-sizeref for more information. Additionally, we recommend setting the sizemode attribute: https://plotly.com/python/reference/scatter/#scatter-marker-sizemode to area.\n\nvar trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 11, 12, 13],\n  text: ['A&lt;br&gt;size: 40', 'B&lt;br&gt;size: 60', 'C&lt;br&gt;size: 80', 'D&lt;br&gt;size: 100'],\n  mode: 'markers',\n  marker: {\n    size: [400, 600, 800, 1000],\n    sizemode: 'area'\n  }\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [14, 15, 16, 17],\n  text: ['A&lt;/br&gt;size: 40&lt;/br&gt;sixeref: 0.2', 'B&lt;/br&gt;size: 60&lt;/br&gt;sixeref: 0.2', 'C&lt;/br&gt;size: 80&lt;/br&gt;sixeref: 0.2', 'D&lt;/br&gt;size: 100&lt;/br&gt;sixeref: 0.2'],\n  mode: 'markers',\n  marker: {\n    size: [400, 600, 800, 1000],\n    //setting 'sizeref' to lower than 1 decreases the rendered size\n    sizeref: 2,\n    sizemode: 'area'\n  }\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [20, 21, 22, 23],\n  text: ['A&lt;/br&gt;size: 40&lt;/br&gt;sixeref: 2', 'B&lt;/br&gt;size: 60&lt;/br&gt;sixeref: 2', 'C&lt;/br&gt;size: 80&lt;/br&gt;sixeref: 2', 'D&lt;/br&gt;size: 100&lt;/br&gt;sixeref: 2'],\n  mode: 'markers',\n  marker: {\n    size: [400, 600, 800, 1000],\n    //setting 'sizeref' to less than 1, increases the rendered marker sizes\n    sizeref: 0.2,\n    sizemode: 'area'\n  }\n};\n\n// sizeref using above formula\nvar desired_maximum_marker_size = 40;\nvar size = [400, 600, 800, 1000];\nvar trace4 = {\n  x: [1, 2, 3, 4],\n  y: [26, 27, 28, 29],\n  text: ['A&lt;/br&gt;size: 40&lt;/br&gt;sixeref: 1.25', 'B&lt;/br&gt;size: 60&lt;/br&gt;sixeref: 1.25', 'C&lt;/br&gt;size: 80&lt;/br&gt;sixeref: 1.25', 'D&lt;/br&gt;size: 100&lt;/br&gt;sixeref: 1.25'],\n  mode: 'markers',\n  marker: {\n    size: size,\n    //set 'sizeref' to an 'ideal' size given by the formula sizeref = 2. * max(array_of_size_values) / (desired_maximum_marker_size ** 2)\n    sizeref: 2.0 * Math.max(...size) / (desired_maximum_marker_size**2),\n    sizemode: 'area'\n  }\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {\n    text: 'Size Scaling in Bubble Charts'\n  },\n  showlegend: false,\n  height: 600,\n  width: 600\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bubble-charts/#marker-size-color-and-symbol-as-an-array","title":"marker-size-color-and-symbol-as-an-array","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 11, 12, 13],\n  mode: 'markers',\n  marker: {\n    color: ['hsl(0,100,40)', 'hsl(33,100,40)', 'hsl(66,100,40)', 'hsl(99,100,40)'],\n    size: [12, 22, 32, 42],\n    opacity: [0.6, 0.7, 0.8, 0.9]\n  },\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [11, 12, 13, 14],\n  mode: 'markers',\n  marker: {\n    color: 'rgb(31, 119, 180)',\n    size: 18,\n    symbol: ['circle', 'square', 'diamond', 'cross']\n  },\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [12, 13, 14, 15],\n  mode: 'markers',\n  marker: {\n    size: 18,\n    line: {\n      color: ['rgb(120,120,120)', 'rgb(120,120,120)', 'red', 'rgb(120,120,120)'],\n      width: [2, 2, 6, 2]\n    }\n  },\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {showlegend: false};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bubble-maps/","title":"bubble-maps","text":""},{"location":"examples/bubble-maps/#europe-bubble-map","title":"europe-bubble-map","text":"<pre><code>var data = [{\n    type: 'scattergeo',\n    mode: 'markers',\n    locations: ['FRA', 'DEU', 'RUS', 'ESP'],\n    marker: {\n        size: [20, 30, 15, 10],\n        color: [10, 20, 40, 50],\n        cmin: 0,\n        cmax: 50,\n        colorscale: 'Greens',\n        colorbar: {\n            title: {text: 'Some rate'},\n            ticksuffix: '%',\n            showticksuffix: 'last'\n        },\n        line: {\n            color: 'black'\n        }\n    },\n    name: 'europe data'\n}];\n\nvar layout = {\n    'geo': {\n        'scope': 'europe',\n        'resolution': 50\n    }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bubble-maps/#usa-bubble-map","title":"usa-bubble-map","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_us_cities.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    var cityName = unpack(rows, 'name'),\n        cityPop = unpack(rows, 'pop'),\n        cityLat = unpack(rows, 'lat'),\n        cityLon = unpack(rows, 'lon'),\n        color = [,\"rgb(255,65,54)\",\"rgb(133,20,75)\",\"rgb(255,133,27)\",\"lightgrey\"],\n        citySize = [],\n        hoverText = [],\n        scale = 50000;\n\n    for ( var i = 0 ; i &lt; cityPop.length; i++) {\n        var currentSize = cityPop[i] / scale;\n        var currentText = cityName[i] + \" pop: \" + cityPop[i];\n        citySize.push(currentSize);\n        hoverText.push(currentText);\n    }\n\n    var data = [{\n        type: 'scattergeo',\n        locationmode: 'USA-states',\n        lat: cityLat,\n        lon: cityLon,\n        hoverinfo: 'text',\n        text: hoverText,\n        marker: {\n            size: citySize,\n            line: {\n                color: 'black',\n                width: 2\n            },\n        }\n    }];\n\n    var layout = {\n        title: {text: '2014 US City Populations'},\n        showlegend: false,\n        geo: {\n            scope: 'usa',\n            projection: {\n                type: 'albers usa'\n            },\n            showland: true,\n            landcolor: 'rgb(217, 217, 217)',\n            subunitwidth: 1,\n            countrywidth: 1,\n            subunitcolor: 'rgb(255,255,255)',\n            countrycolor: 'rgb(255,255,255)'\n        },\n    };\n\n    Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n\n});</code></pre>"},{"location":"examples/bullet-charts/","title":"bullet-charts","text":""},{"location":"examples/bullet-charts/#basic-bullet-charts","title":"basic-bullet-charts","text":"<p>Stephen Few's Bullet Chart was invented to replace dashboard gauges and meters, combining both types of charts into simple bar charts with qualitative bars (steps), quantitative bar (bar) and performance line (threshold); all into one simple layout. Steps typically are broken into several values, which are defined with an array. The bar represent the actual value that a particular variable reached, and the threshold usually indicate a goal point relative to the value achieved by the bar. See indicator page for more detail.</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+gauge+delta\",\n    gauge: { shape: \"bullet\" },\n    delta: { reference: 300 },\n    value: 220,\n    domain: { x: [0, 1], y: [0, 1] },\n    title: { text: \"Profit\" }\n  }\n];\n\nvar layout = { width: 600, height: 250 };\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/bullet-charts/#add-steps-and-threshold","title":"add-steps-and-threshold","text":"<p>Below is the same example using \"steps\" attribute, which is shown as shading, and \"threshold\" to determine boundaries that visually alert you if the value cross a defined threshold.</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+gauge+delta\",\n    value: 220,\n    domain: { x: [0, 1], y: [0, 1] },\n    title: {\n      text: \"&lt;b&gt;Profit&lt;/b&gt;\"\n    },\n    delta: { reference: 200 },\n    gauge: {\n      shape: \"bullet\",\n      axis: { range: [null, 300] },\n      threshold: {\n        line: { color: \"red\", width: 2 },\n        thickness: 0.75,\n        value: 280\n      },\n      steps: [\n        { range: [0, 150], color: \"lightgray\" },\n        { range: [150, 250], color: \"gray\" }\n      ]\n    }\n  }\n];\n\nvar layout = { width: 600, height: 250 };\nvar config = { responsive: true };\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/bullet-charts/#custom-bullet-chart","title":"custom-bullet-chart","text":"<p>The following example shows how to customize your charts. For more information about all possible options check our reference page.</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+gauge+delta\",\n    value: 220,\n    domain: { x: [0, 1], y: [0, 1] },\n    delta: { reference: 280, position: \"top\" },\n    title: {\n      text:\n        \"&lt;b&gt;Profit&lt;/b&gt;&lt;br&gt;&lt;span style='color: gray; font-size:0.8em'&gt;U.S. $&lt;/span&gt;\",\n      font: { size: 14 }\n    },\n    gauge: {\n      shape: \"bullet\",\n      axis: { range: [null, 300] },\n      threshold: {\n        line: { color: \"red\", width: 2, gradient: { yanchor: \"vertical\" } },\n        thickness: 0.75,\n        value: 270\n      },\n      bgcolor: \"white\",\n      steps: [{ range: [0, 150], color: \"cyan\" }],\n      bar: { color: \"darkblue\" }\n    }\n  }\n];\n\nvar layout = { width: 400, height: 230 };\nvar config = { responsive: true };\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/bullet-charts/#multi-bullet","title":"multi-bullet","text":"<p>Bullet charts can be stacked for comparing several values at once as illustrated below:</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+gauge+delta\",\n    value: 180,\n    delta: { reference: 200 },\n    domain: { x: [0.25, 1], y: [0.08, 0.25] },\n    title: { text: \"Revenue\" },\n    gauge: {\n      shape: \"bullet\",\n      axis: { range: [null, 300] },\n      threshold: {\n        line: { color: \"black\", width: 2 },\n        thickness: 0.75,\n        value: 170\n      },\n      steps: [\n        { range: [0, 150], color: \"gray\" },\n        {\n          range: [150, 250],\n          color: \"lightgray\"\n        }\n      ],\n      bar: { color: \"black\" }\n    }\n  },\n  {\n    type: \"indicator\",\n    mode: \"number+gauge+delta\",\n    value: 35,\n    delta: { reference: 200 },\n    domain: { x: [0.25, 1], y: [0.4, 0.6] },\n    title: { text: \"Profit\" },\n    gauge: {\n      shape: \"bullet\",\n      axis: { range: [null, 100] },\n      threshold: {\n        line: { color: \"black\", width: 2 },\n        thickness: 0.75,\n        value: 50\n      },\n      steps: [\n        { range: [0, 25], color: \"gray\" },\n        { range: [25, 75], color: \"lightgray\" }\n      ],\n      bar: { color: \"black\" }\n    }\n  },\n  {\n    type: \"indicator\",\n    mode: \"number+gauge+delta\",\n    value: 220,\n    delta: { reference: 200 },\n    domain: { x: [0.25, 1], y: [0.7, 0.9] },\n    title: { text: \"Satisfaction\" },\n    gauge: {\n      shape: \"bullet\",\n      axis: { range: [null, 300] },\n      threshold: {\n        line: { color: \"black\", width: 2 },\n        thickness: 0.75,\n        value: 210\n      },\n      steps: [\n        { range: [0, 150], color: \"gray\" },\n        { range: [150, 250], color: \"lightgray\" }\n      ],\n      bar: { color: \"black\" }\n    }\n  }\n];\n\nvar layout = {\n  width: 600, height: 250,\n  margin: { t: 10, r: 25, l: 25, b: 10 }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/candlestick-charts/","title":"candlestick-charts","text":""},{"location":"examples/candlestick-charts/#simple-candlestick-chart","title":"simple-candlestick-chart","text":"<pre><code>var trace1 = {\n\n  x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-13', '2017-02-14', '2017-02-15'],\n\n  close: [116.019997, 116.610001, 117.910004, 118.989998, 119.110001, 119.75, 119.25, 119.040001, 120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995, 133.289993, 135.020004, 135.509995],\n\n  decreasing: {line: {color: '#7F7F7F'}},\n\n  high: [116.510002, 116.860001, 118.160004, 119.43, 119.379997, 119.93, 119.300003, 119.620003, 120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002, 133.820007, 135.089996, 136.270004],\n\n  increasing: {line: {color: '#17BECF'}},\n\n  line: {color: 'rgba(31,119,180,1)'},\n\n  low: [115.75, 115.809998, 116.470001, 117.940002, 118.300003, 118.599998, 118.209999, 118.809998, 118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003, 132.75, 133.25, 134.619995],\n\n  open: [115.849998, 115.919998, 116.779999, 117.949997, 118.769997, 118.739998, 118.900002, 119.110001, 118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007, 133.080002, 133.470001, 135.520004],\n\n  type: 'candlestick',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  dragmode: 'zoom',\n  margin: {\n    r: 10,\n    t: 25,\n    b: 40,\n    l: 60\n  },\n  showlegend: false,\n  xaxis: {\n    autorange: true,\n    domain: [0, 1],\n    range: ['2017-01-03 12:00', '2017-02-15 12:00'],\n    rangeslider: {range: ['2017-01-03 12:00', '2017-02-15 12:00']},\n    title: {\n      text: 'Date'\n    },\n    type: 'date'\n  },\n  yaxis: {\n    autorange: true,\n    domain: [0, 1],\n    range: [114.609999778, 137.410004222],\n    type: 'linear'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/candlestick-charts/#candlestick-chart-without-rangeslider","title":"candlestick-chart-without-rangeslider","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar trace = {\n  x: unpack(rows, 'Date'),\n  close: unpack(rows, 'AAPL.Close'),\n  high: unpack(rows, 'AAPL.High'),\n  low: unpack(rows, 'AAPL.Low'),\n  open: unpack(rows, 'AAPL.Open'),\n\n  // cutomise colors\n  increasing: {line: {color: 'black'}},\n  decreasing: {line: {color: 'red'}},\n\n  type: 'candlestick',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace];\n\nvar layout = {\n  dragmode: 'zoom',\n  showlegend: false,\n  xaxis: {\n    rangeslider: {\n         visible: false\n     }\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/candlestick-charts/#customise-candlestick-chart-with-shapes-and-annotations","title":"customise-candlestick-chart-with-shapes-and-annotations","text":"<pre><code>var trace1 = {\n\n  x: ['2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10'],\n\n  close: [120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995],\n\n  decreasing: {line: {color: '#7F7F7F'}},\n\n  high: [120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002],\n\n  increasing: {line: {color: '#17BECF'}},\n\n  line: {color: 'rgba(31,119,180,1)'},\n\n  low: [118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003],\n\n  open: [118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007],\n\n  type: 'candlestick',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  dragmode: 'zoom',\n  margin: {\n    r: 10,\n    t: 25,\n    b: 40,\n    l: 60\n  },\n  showlegend: false,\n  xaxis: {\n    autorange: true,\n    rangeslider: {range: ['2017-01-17 12:00', '2017-02-10 12:00']},\n    title: {\n      text: 'Date'\n    },\n    type: 'date'\n  },\n  yaxis: {\n    autorange: true,\n    type: 'linear'\n  },\n\n  annotations: [\n    {\n      x: '2017-01-31',\n      y: 0.9,\n      xref: 'x',\n      yref: 'paper',\n      text: 'largest movement',\n      font: {color: 'magenta'},\n      showarrow: true,\n      xanchor: 'right',\n      ax: -20,\n      ay: 0\n    }\n  ],\n\n  shapes: [\n      {\n          type: 'rect',\n          xref: 'x',\n          yref: 'paper',\n          x0: '2017-01-31',\n          y0: 0,\n          x1: '2017-02-01',\n          y1: 1,\n          fillcolor: '#d3d3d3',\n          opacity: 0.2,\n          line: {\n              width: 0\n          }\n      }\n    ]\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/candlestick-charts/#customizing-candlestick-chart-colors","title":"customizing-candlestick-chart-colors","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar trace = {\n  x: unpack(rows, 'Date'),\n  close: unpack(rows, 'AAPL.Close'),\n  high: unpack(rows, 'AAPL.High'),\n  low: unpack(rows, 'AAPL.Low'),\n  open: unpack(rows, 'AAPL.Open'),\n\n  // cutomise colors\n  increasing: {line: {color: 'black'}},\n  decreasing: {line: {color: 'red'}},\n\n  type: 'candlestick',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace];\n\nvar layout = {\n  dragmode: 'zoom',\n  showlegend: false,\n  xaxis: {\n    title: {\n      text: 'Date'\n    },\n    range: ['2016-06-01 12:00', '2017-01-01 12:00']\n  },\n  yaxis: {\n    autorange: true,\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/candlestick-charts/#add-rangeselector","title":"add-rangeselector","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar trace = {\n  x: unpack(rows, 'Date'),\n  close: unpack(rows, 'AAPL.Close'),\n  high: unpack(rows, 'AAPL.High'),\n  low: unpack(rows, 'AAPL.Low'),\n  open: unpack(rows, 'AAPL.Open'),\n\n  // cutomise colors\n  increasing: {line: {color: 'black'}},\n  decreasing: {line: {color: 'red'}},\n\n  type: 'candlestick',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace];\n\nvar layout = {\n  dragmode: 'zoom',\n  showlegend: false,\n  xaxis: {\n    autorange: true,\n    title: {\n      text: 'Date'\n    },\n      rangeselector: {\n        x: 0,\n        y: 1.2,\n        xanchor: 'left',\n        font: {size:8},\n        buttons: [{\n            step: 'month',\n            stepmode: 'backward',\n            count: 1,\n            label: '1 month'\n        }, {\n            step: 'month',\n            stepmode: 'backward',\n            count: 6,\n            label: '6 months'\n        }, {\n            step: 'all',\n            label: 'All dates'\n        }]\n      }\n  },\n  yaxis: {\n    autorange: true,\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/carpet-contour/","title":"carpet-contour","text":""},{"location":"examples/carpet-contour/#basic-carpet-plot","title":"basic-carpet-plot","text":"<pre><code>var trace1  = {\n    type: 'carpet',\n    a: [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b: [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    x: [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],\n    y: [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],\n    aaxis: {\n      tickprefix: \"a = \",\n      smoothing: 0,\n      minorgridcount: 9,\n      type: 'linear'\n},\n    baxis: {\n      tickprefix: \"b = \",\n      smoothing: 0,\n      minorgridcount: 9,\n      type: 'linear'\n    }\n}\n\nvar layout = {\n    title: {\n      text: \"Cheater plot with 1d input\"\n    },\n    margin: {\n      t: 40, r: 30, b: 30, l: 30\n    },\n    yaxis: {\n      range: [0.388,4.361]\n    },\n    xaxis: {\n      range: [0.667,5.932]\n    }\n}\n\nvar data = [trace1]\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/carpet-contour/#add-contours","title":"add-contours","text":"<pre><code>var trace1 = {\n    type: 'contourcarpet',\n    a: [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b: [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    z: [1, 1.96, 2.56, 3.0625, 4, 5.0625, 1, 7.5625, 9, 12.25, 15.21, 14.0625],\n    autocontour: false,\n    contours: {\n      start: 1,\n      end: 14,\n      size: 1\n    },\n    line: {\n      width: 2,\n      smoothing: 0\n    },\n    colorbar: {\n      len: 0.4,\n      y: 0.25\n    }\n}\n\nvar trace2  = {\n    type: 'carpet',\n    a: [0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3],\n    b: [4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6],\n    x: [2, 3, 4, 5, 2.2, 3.1, 4.1, 5.1, 1.5, 2.5, 3.5, 4.5],\n    y: [1, 1.4, 1.6, 1.75, 2, 2.5, 2.7, 2.75, 3, 3.5, 3.7, 3.75],\n    aaxis: {\n      tickprefix: \"a = \",\n      smoothing: 0,\n      minorgridcount: 9,\n      type: 'linear'\n},\n    baxis: {\n      tickprefix: \"b = \",\n      smoothing: 0,\n      minorgridcount: 9,\n      type: 'linear'\n    }\n}\n\nvar layout = {\n    title: {\n      text: \"Cheater plot with 1d input\"\n    },\n    margin: {\n      t: 40, r: 30, b: 30, l: 30\n    },\n    yaxis: {\n      range: [0.388,4.361]\n    },\n    xaxis: {\n      range: [0.667,5.932]\n    }\n}\n\nvar data = [trace1,trace2]\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/carpet-contour/#add-multiple-traces","title":"add-multiple-traces","text":"<pre><code>function Get(url){\n    var Httpreq = new XMLHttpRequest();\n    Httpreq.open(\"GET\",url,false);\n    Httpreq.send(null);\n    return Httpreq.responseText;\n}\n\nvar json_obj = JSON.parse(Get(\"https://raw.githubusercontent.com/bcdunbar/datasets/master/airfoil_data.json\"));\n\nvar trace1 = {\n      a: json_obj[0].a,\n      b: json_obj[0].b,\n      baxis: {\n        startline: false,\n        endline: false,\n        showticklabels: \"none\",\n        smoothing: 0,\n        showgrid: false\n      },\n      x: json_obj[0].x,\n      y: json_obj[0].y,\n      type: \"carpet\",\n      aaxis:{\n        startlinewidth: 2,\n        startline: true,\n        showticklabels: \"none\",\n        endline: true,\n        showgrid: false,\n        endlinewidth: 2,\n        smoothing: 0\n      }\n    }\n\n var trace2 = {\n      autocolorscale: false,\n      zmax: 1,\n      name: \"Pressure\",\n      colorscale: \"Viridis\",\n      zmin: -8,\n      colorbar: {\n        y: 0,\n        yanchor: \"bottom\",\n        title: {side:\n          'right'\n        },\n        len: 0.75,\n        title: {\n          text: \"Pressure coefficient, c&lt;sub&gt;p&lt;/sub&gt;\"\n        },\n      },\n      contours: {\n        start: -1,\n        size: 0.025,\n        end: 1.000,\n        showlines: false\n      },\n      line: {\n        smoothing: 0\n      },\n      z: json_obj[1].z,\n      type: \"contourcarpet\",\n      autocontour: false,\n      zauto: false\n    }\n\n var trace3 = {\n      opacity: 0.300,\n      showlegend: true,\n      name: \"Streamlines\",\n      autocontour: true,\n      ncontours: 50,\n      contours: {\n        coloring: \"none\"\n      },\n      line: {\n        color: \"white\",\n        width: 1\n      },\n      z: json_obj[2].z,\n      type: \"contourcarpet\"\n    }\n\n var trace4 = {\n      showlegend: true,\n      name: \"Pressure&lt;br&gt;contours\",\n      autocontour: false,\n      z: json_obj[3].z,\n      type: \"contourcarpet\",\n      line: {\n        color: \"rgba(0, 0, 0, 0.5)\",\n        smoothing: 1\n      },\n      contours: {\n        size: 0.250,\n        start: -4,\n        coloring: \"none\",\n        end: 1.000,\n        showlines: true\n      }\n    }\n\n var trace5 = {\n      legendgroup: \"g1\",\n      name: \"Surface&lt;br&gt;pressure\",\n      mode: \"lines\",\n      hoverinfo: \"skip\",\n      x: json_obj[4].x,\n      y: json_obj[4].y,\n      line: {\n        color: \"rgba(255, 0, 0, 0.5)\",\n        width: 1,\n        shape: \"spline\",\n        smoothing: 1\n      },\n      fill: \"toself\",\n      type: \"scatter\",\n      fillcolor: \"rgba(255, 0, 0, 0.2)\"\n    }\n\n var trace6 = {\n      showlegend: false,\n      legendgroup: \"g1\",\n      mode: \"lines\",\n      hoverinfo: \"skip\",\n      x: json_obj[5].x,\n      y: json_obj[5].y,\n      line: {\n        color: \"rgba(255, 0, 0, 0.3)\",\n        width: 1\n      },\n      type: \"scatter\"\n    }\n\n var trace7 = {\n      showlegend: false,\n      legendgroup: \"g1\",\n      name: \"cp\",\n      text: json_obj[6].text,\n      mode: \"lines\",\n      hoverinfo: \"text\",\n      x: json_obj[6].x,\n      y: json_obj[6].y,\n      line: {\n        color: \"rgba(255, 0, 0, 0.2)\",\n        width: 0\n      },\n      type: \"scatter\"\n    }\n\ndata = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]\n\nvar layout = {\n    yaxis: {\n      zeroline: false,\n      range: [-1.800,1.800],\n      showgrid: false\n    },\n    dragmode: \"pan\",\n    height: 700,\n    xaxis: {\n      zeroline: false,\n      scaleratio: 1,\n      scaleanchor: \"y\",\n      range: [-3.800,3.800],\n      showgrid: false\n    },\n    title: {\n      text: \"Flow over a Karman-Trefftz airfoil\"\n    },\n    hovermode: \"closest\",\n    margin: {\n      r: 60,\n      b: 40,\n      l: 40,\n      t: 80\n    },\n    width: 900\n  }\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/carpet-plot/","title":"carpet-plot","text":""},{"location":"examples/carpet-plot/#set-x-and-y-coordinates","title":"set-x-and-y-coordinates","text":"<pre><code>var data = {\n    type: 'carpet',\n    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]\n}\n\nvar data = [data]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/carpet-plot/#add-parameter-values","title":"add-parameter-values","text":"<pre><code>var data = {\n    type: 'carpet',\n    a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10]\n}\n\nvar data = [data]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/carpet-plot/#add-a-and-b-axis","title":"add-a-and-b-axis","text":"<pre><code>var data = {\n    type: 'carpet',\n    a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis: {\n      tickprefix: 'a = ',\n      ticksuffix: 'm',\n      smoothing: 1,\n      minorgridcount: 9\n    },\n    baxis: {\n      tickprefix: 'b = ',\n      ticksuffix: 'Pa',\n      smoothing: 1,\n      minorgridcount: 9\n    }\n}\n\nvar data = [data]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/carpet-plot/#style-a-and-b-axis","title":"style-a-and-b-axis","text":"<pre><code>var trace1 = {\n    type: \"carpet\",\n    a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6],\n    b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3],\n    y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n    aaxis: {\n        tickprefix: 'a = ',\n        ticksuffix: 'm',\n        smoothing: 1,\n        minorgridcount: 9,\n        minorgridcolor: 'white',\n        gridcolor: 'white',\n        color: 'white'\n    },\n    baxis: {\n        tickprefix: 'b = ',\n        ticksuffix: 'pa',\n        smoothing: 1,\n        minorgridcount: 9,\n        minorgridcolor: 'white',\n        gridcolor: 'white',\n        color: 'white'\n    }\n}\n\nvar layout = {\n  plot_bgcolor: 'black',\n  paper_bgcolor: 'black'\n}\n\nPlotly.newPlot('myDiv', [trace1], layout)</code></pre>"},{"location":"examples/carpet-plot/#add-points-and-contours","title":"add-points-and-contours","text":"To add points and lines see Carpet Scatter Plots or to add contours see Carpet Contour Plots"},{"location":"examples/carpet-scatter/","title":"carpet-scatter","text":""},{"location":"examples/carpet-scatter/#basic-carpet-plot","title":"basic-carpet-plot","text":"<pre><code>var trace1 = {\n  type: 'carpet',\n  a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6].map(a =&gt; a * 1e-6),\n  b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3].map(b =&gt; b * 1e6),\n  y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n  aaxis: {\n    tickprefix: 'a = ',\n    ticksuffix: 'm',\n    smoothing: 1,\n    minorgridcount: 9,\n  },\n  baxis: {\n    tickprefix: 'b = ',\n    ticksuffix: 'Pa',\n    smoothing: 1,\n    minorgridcount: 9,\n  }\n}\n\nvar data = [trace1]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/carpet-scatter/#add-carpet-scatter-trace","title":"add-carpet-scatter-trace","text":"<pre><code>var trace1 = {\n  type: 'carpet',\n  a: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 6, 6, 6].map(a =&gt; a * 1e-6),\n  b: [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3].map(b =&gt; b * 1e6),\n  y: [2, 3.5, 4, 3, 4.5, 5, 5.5, 6.5, 7.5, 8, 8.5, 10],\n  aaxis: {\n    tickprefix: 'a = ',\n    ticksuffix: 'm',\n    smoothing: 1,\n    minorgridcount: 9,\n  },\n  baxis: {\n    tickprefix: 'b = ',\n    ticksuffix: 'Pa',\n    smoothing: 1,\n    minorgridcount: 9,\n  }\n}\n\nvar trace2 = {\n  type: 'scattercarpet',\n  a: [4, 4.5, 5, 6].map(a =&gt; a * 1e-6),\n  b: [1.5, 2.5, 1.5, 2.5].map(b =&gt; b * 1e6),\n  line: {shape: 'spline', smoothing: 1}\n}\n\nvar data = [trace1,trace2]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/carpet-scatter/#add-multiple-carpet-scatter-traces","title":"add-multiple-carpet-scatter-traces","text":"<pre><code>var trace1 = {\n      type: \"carpet\",\n      a: [0.1, 0.2, 0.3],\n      b: [1, 2, 3],\n      y: [\n        [1, 2.2, 3],\n        [1.5, 2.7, 3.5],\n        [1.7, 2.9, 3.7]\n      ],\n      cheaterslope: 1,\n      aaxis: {\n        title: {\n          text: \"a\"\n        },\n        tickmode: \"linear\",\n        dtick: 0.05,\n        minorgridcount: 9\n      },\n      baxis: {\n        title: {\n          text: \"b\"\n        },\n        tickmode: \"linear\",\n        dtick: 0.5,\n        minorgridcount: 9\n      }\n}\n\nvar trace2 = {\n  type: \"scattercarpet\",\n  name: \"b = 1.5\",\n  a: [0.05, 0.15, 0.25, 0.35],\n  b: [1.5, 1.5, 1.5, 1.5]\n}\n\nvar trace3 = {\n  type: \"scattercarpet\",\n  name: \"b = 2\",\n  a: [0.05, 0.15, 0.25, 0.35],\n  b: [2, 2, 2, 2]\n}\n\nvar trace4 = {\n  type: \"scattercarpet\",\n  name: \"b = 2.5\",\n  a: [0.05, 0.15, 0.25, 0.35],\n  b: [2.5, 2.5, 2.5, 2.5]\n}\n\nvar trace5 = {\n  type: \"scattercarpet\",\n  name: \"a = 0.15\",\n  a: [0.15, 0.15, 0.15, 0.15],\n  b: [0.5, 1.5, 2.5, 3.5],\n  line: {\n        smoothing: 1,\n        shape: \"spline\"\n  }\n}\n\nvar trace6 = {\n  type: \"scattercarpet\",\n  name: \"a = 0.2\",\n  a: [0.2, 0.2, 0.2, 0.2],\n  b: [0.5, 1.5, 2.5, 3.5],\n  line: {\n        smoothing: 1,\n        shape: \"spline\"\n  },\n  marker: {\n        size: [10, 20, 30, 40],\n        color: [\"#000\", \"#f00\", \"#ff0\", \"#fff\"]\n  }\n}\n\nvar trace7 = {\n  type: \"scattercarpet\",\n  name: \"a = 0.25\",\n  a: [0.25, 0.25, 0.25, 0.25],\n  b: [0.5, 1.5, 2.5, 3.5],\n  line: {\n        smoothing: 1,\n        shape: \"spline\"\n  }\n}\n\nvar data = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]\n\nvar layout = {\n  title: {\n    text: \"scattercarpet extrapolation, clipping, and smoothing\"\n  },\n  hovermode: \"closest\"\n}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/choropleth-maps/","title":"choropleth-maps","text":""},{"location":"examples/choropleth-maps/#world-choropleth-map-(robinson-projection)","title":"world-choropleth-map-(robinson-projection)","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2010_alcohol_consumption_by_country.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\n    var data = [{\n        type: 'choropleth',\n        locationmode: 'country names',\n        locations: unpack(rows, 'location'),\n        z: unpack(rows, 'alcohol'),\n        text: unpack(rows, 'location'),\n        autocolorscale: true\n    }];\n\n    var layout = {\n      title: {text: 'Pure alcohol consumption&lt;br&gt;among adults (age 15+) in 2010'},\n      geo: {\n          projection: {\n              type: 'robinson'\n          }\n      }\n    };\n\n    Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n\n});</code></pre>"},{"location":"examples/choropleth-maps/#usa-choropleth-map","title":"usa-choropleth-map","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\n      var data = [{\n          type: 'choropleth',\n          locationmode: 'USA-states',\n          locations: unpack(rows, 'code'),\n          z: unpack(rows, 'total exports'),\n          text: unpack(rows, 'state'),\n          zmin: 0,\n          zmax: 17000,\n          colorscale: [\n              [0, 'rgb(242,240,247)'], [0.2, 'rgb(218,218,235)'],\n              [0.4, 'rgb(188,189,220)'], [0.6, 'rgb(158,154,200)'],\n              [0.8, 'rgb(117,107,177)'], [1, 'rgb(84,39,143)']\n          ],\n          colorbar: {\n              title: {text: 'Millions USD'},\n              thickness: 0.2\n          },\n          marker: {\n              line:{\n                  color: 'rgb(255,255,255)',\n                  width: 2\n              }\n          }\n      }];\n\n\n      var layout = {\n          title: {text: '2011 US Agriculture Exports by State'},\n          geo:{\n              scope: 'usa',\n              showlakes: true,\n              lakecolor: 'rgb(255,255,255)'\n          }\n      };\n\n      Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n});</code></pre>"},{"location":"examples/choropleth-maps/#country-gdp-choropleth-map","title":"country-gdp-choropleth-map","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\n       var data = [{\n            type: 'choropleth',\n            locations: unpack(rows, 'CODE'),\n            z: unpack(rows, 'GDP (BILLIONS)'),\n            text: unpack(rows, 'COUNTRY'),\n            colorscale: [\n                [0,'rgb(5, 10, 172)'],[0.35,'rgb(40, 60, 190)'],\n                [0.5,'rgb(70, 100, 245)'], [0.6,'rgb(90, 120, 245)'],\n                [0.7,'rgb(106, 137, 247)'],[1,'rgb(220, 220, 220)']],\n            autocolorscale: false,\n            reversescale: true,\n            marker: {\n                line: {\n                    color: 'rgb(180,180,180)',\n                    width: 0.5\n                }\n            },\n            tick0: 0,\n            zmin: 0,\n            dtick: 1000,\n            colorbar: {\n                autotic: false,\n                tickprefix: '$',\n                title: {text: 'GDP&lt;br&gt;Billions US$'}\n            }\n      }];\n\n      var layout = {\n          title: {text: '2014 Global GDP&lt;br&gt;Source: &lt;a href=\"https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html\"&gt; CIA World Factbook&lt;/a&gt;'},\n          geo:{\n              showframe: false,\n              showcoastlines: false,\n              projection:{\n                  type: 'mercator'\n              }\n          }\n      };\n      Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n});</code></pre>"},{"location":"examples/choropleth-maps/#choropleth-map-of-2014-us-population-by-state","title":"choropleth-map-of-2014-us-population-by-state","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv', function(err, rows){\n                function unpack(rows, key) {\nreturn rows.map(function(row) { return row[key]; });\n}\nvar data = [{\n    type: 'choropleth',\n    locationmode: 'USA-states',\n    locations: unpack(rows, 'Postal'),\n    z: unpack(rows, 'Population'),\n    text: unpack(rows, 'State'),\n    autocolorscale: true\n}];\n\nvar layout = {\ntitle: {text: '2014 US Popultaion by State'},\n    geo:{\n        scope: 'usa',\n        countrycolor: 'rgb(255, 255, 255)',\n        showland: true,\n        landcolor: 'rgb(217, 217, 217)',\n        showlakes: true,\n        lakecolor: 'rgb(255, 255, 255)',\n        subunitcolor: 'rgb(255, 255, 255)',\n        lonaxis: {},\n        lataxis: {}\n    }\n};\nPlotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n});</code></pre>"},{"location":"examples/choropleth-maps/#choropleth-map-of-florida-counties-colored-by-political-party","title":"choropleth-map-of-florida-counties-colored-by-political-party","text":"<pre><code>d3.json('https://raw.githubusercontent.com/plotly/datasets/master/florida-red-data.json', function(redjson) {\n\n  d3.json('https://raw.githubusercontent.com/plotly/datasets/master/florida-blue-data.json', function(bluejson) {\n\n    Plotly.newPlot('myDiv', [{\n      type: 'scattermap',\n      lat: [46],\n      lon: [-74]\n    }], {\n      title: {text: \"Florida Counties\"},\n      height: 600,\n      width: 600,\n      map: {\n        center: {\n          lat: 28,\n          lon: -84\n        },\n        style: 'light',\n        zoom: 4.8,\n        layers: [\n          {\n            sourcetype: 'geojson',\n            source: redjson,\n            type: 'fill',\n            color: 'rgba(163,22,19,0.8)'\n          },\n          {\n            sourcetype: 'geojson',\n            source: bluejson,\n            type: 'fill',\n            color: 'rgba(40,0,113,0.8)'\n          },\n        ]\n      }\n    });\n\n\n});\n\n});</code></pre>"},{"location":"examples/click-events/","title":"click-events","text":""},{"location":"examples/click-events/#click-event-data","title":"click-event-data","text":"<pre><code>{\n  points: [{\n    curveNumber: 2,  // index in data of the trace associated with the selected point\n    pointNumber: 2,  // index of the selected point\n    x: 5,        // x value\n    y: 600,      // y value\n    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point\n    fullData: {/* */},   // ref to the trace including all the defaults\n   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point\n   yaxis: {/* */}    // ref to y-axis object \" \"\n  }, {\n    /* similarly for other selected points */\n  }]\n}</code></pre>"},{"location":"examples/click-events/#binding-to-click-events","title":"binding-to-click-events","text":"<pre><code>var myPlot = document.getElementById('myDiv'),\n    N = 16,\n    x = d3.range(N),\n    y = d3.range(N).map( d3.random.normal() ),\n    data = [ { x:x, y:y, type:'scatter',\n            mode:'markers', marker:{size:16} } ],\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Click on Points'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_click', function(data){\n    var pts = '';\n    for(var i=0; i &lt; data.points.length; i++){\n        pts = 'x = '+data.points[i].x +'\\ny = '+\n            data.points[i].y.toPrecision(4) + '\\n\\n';\n    }\n    alert('Closest point clicked:\\n\\n'+pts);\n});</code></pre>"},{"location":"examples/click-events/#create-annotation-on-click-event","title":"create-annotation-on-click-event","text":"<pre><code>var myPlot = document.getElementById('myDiv'),\n    N = 100,\n    x = d3.range(N),\n    y1 = d3.range(N).map( d3.random.normal() ),\n    y2 = d3.range(N).map( d3.random.normal(-2) ),\n    y3 = d3.range(N).map( d3.random.normal(2) ),\n    trace1 = { x:x, y:y1, type:'scatter', mode:'lines', name:'Jeff' },\n    trace2 = { x:x, y:y2, type:'scatter', mode:'lines', name:'Terren' },\n    trace3 = { x:x, y:y3, type:'scatter', mode:'lines', name:'Arthur' },\n    data = [ trace1, trace2, trace3 ],\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Click on Points to add an Annotation on it'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_click', function(data){\n    var pts = '';\n    for(var i=0; i &lt; data.points.length; i++){\n        annotate_text = 'x = '+data.points[i].x +\n                      'y = '+data.points[i].y.toPrecision(4);\n\n        annotation = {\n          text: annotate_text,\n          x: data.points[i].x,\n          y: parseFloat(data.points[i].y.toPrecision(4))\n        }\n\n        annotations = self.layout.annotations || [];\n        annotations.push(annotation);\n        Plotly.relayout('myDiv',{annotations: annotations})\n    }\n});</code></pre>"},{"location":"examples/colorway/","title":"colorway","text":""},{"location":"examples/colorway/#set-default-trace-colors-with-colorway","title":"set-default-trace-colors-with-colorway","text":"<pre><code>function linspace(a,b,n) {\n  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});\n}\n\nconst parabolaGen = (a, b) =&gt;\n  x =&gt; x*x*a + b;\n\nvar as = linspace(1, 3, 7);\nvar bs = linspace(2, 14, 7);\nvar x = linspace(-1, 3, 50);\nvar data = [];\n\nfor (i=0; i&lt; as.length; i++ ){\n  data.push({\n    type: \"scatter\",\n    mode: \"lines\",\n    x: x,\n    y: x.map(parabolaGen(as[i],bs[i]))\n  })\n}\n\nvar layout = {\n  colorway : ['#f3cec9', '#e7a4b6', '#cd7eaf', '#a262a9', '#6f4d96', '#3d3b72', '#182844']\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/cone-plot/","title":"cone-plot","text":""},{"location":"examples/cone-plot/#basic-3d-cone","title":"basic-3d-cone","text":"<pre><code>var data = [{\n  type: \"cone\",\n  x: [1], y: [1], z: [1],\n  u: [1], v: [1], w: [0]\n}]\n\nvar layout = {\n  \"scene\": {\n    \"camera\": {\n      \"eye\": {x: -0.76, y: 1.8, z: 0.92}\n    }\n  }\n}\n\nPlotly.newPlot('myDiv',data,layout)</code></pre>"},{"location":"examples/cone-plot/#multiple-3d-cone","title":"multiple-3d-cone","text":"<pre><code>var data = [{\n      type: \"cone\",\n      x: [1, 2, 3],\n      y: [1, 2, 3],\n      z: [1, 2, 3],\n      u: [1, 0, 0],\n      v: [0, 3, 0],\n      w: [0, 0, 2],\n      sizemode: \"absolute\",\n      sizeref: 2,\n      anchor: \"tip\",\n      colorbar: {\n        x: 0,\n        xanchor: \"right\",\n        side: \"left\"\n      }\n}]\n\nvar layout = {\n    scene: {\n      domain: {x: [0, 1]},\n      camera: {\n        eye: {x: -1.57, y: 1.36, z: 0.58}\n      }\n    },\n    width: 800\n}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/cone-plot/#3d-cone-lighting","title":"3d-cone-lighting","text":"<pre><code>var data = [{\n    type: \"cone\",\n    name: \"base\",\n    x: [1, 1, 1],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false\n  },\n  {\n    type: \"cone\",\n    name: \"opacity:0.3\",\n    x: [2, 2, 2],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false,\n    opacity: 0.3\n  },\n  {\n    type: \"cone\",\n    name: \"lighting.ambient:0.3\",\n    x: [3, 3, 3],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false,\n    lighting: {ambient: 0.3}\n  },\n  {\n    type: \"cone\",\n    name: \"lighting.diffuse:0.3\",\n    x: [4, 4, 4],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false,\n    lighting: {diffuse: 0.3}\n  },\n  {\n    type: \"cone\",\n    name: \"lighting.specular:2\",\n    x: [5, 5, 5],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false,\n    lighting: {specular: 2}\n  },\n  {\n    type: \"cone\",\n    name: \"lighting.roughness:1\",\n    x: [6, 6, 6],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false,\n    lighting: {roughness: 1}\n  },\n  {\n    type: \"cone\",\n    name: \"lighting.fresnel:2\",\n    x: [7, 7, 7],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false,\n    lighting: {fresnel: 2}\n  },\n  {\n    type: \"cone\",\n    name: \"lighting.position x:0,y:0,z:1e5\",\n    x: [8, 8, 8],\n    y: [1, 2, 3],\n    z: [1, 1, 1],\n    u: [1, 2, 3],\n    v: [1, 1, 2],\n    w: [4, 4, 1],\n    hoverinfo: \"u+v+w+name\",\n    showscale: false,\n    lightposition: {x: 0, y: 0, z: 1e5}\n}]\n\nvar layout = {\n  scene: {\n    aspectmode: \"data\",\n    camera: {\n      eye: {x: 0.05, y: -2.6, z: 2}\n    }\n  },\n  width: 500,\n  height: 500,\n  margin: {t: 0, b: 0, l: 0, r: 0}\n}\n\nPlotly.newPlot('myDiv',data,layout)</code></pre>"},{"location":"examples/configuration-options/","title":"configuration-options","text":""},{"location":"examples/configuration-options/#scroll-and-zoom","title":"scroll-and-zoom","text":"<pre><code>// mousewheel or two-finger scroll zooms the plot\n\nvar trace1 = {\n    x:['2020-10-04', '2021-11-04', '2023-12-04'],\n    y: [90, 40, 60],\n    type: 'scatter'\n};\n\nvar data = [trace1];\n\nvar layout = {\n    title: {\n        text: 'Scroll and Zoom'\n    },\n    showlegend: false\n};\n\nPlotly.newPlot('myDiv', data, layout, {scrollZoom: true});</code></pre>"},{"location":"examples/configuration-options/#editable-mode","title":"editable-mode","text":"<p>In editable mode, users can edit the chart title, axis labels and trace names in the legend.</p> <pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4],\n  y: [1, 5, 3, 7, 5],\n  mode: 'lines+markers',\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4, 5],\n  y: [4, 0, 4, 6, 8],\n  mode: 'lines+markers',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\nvar layout = {\n  title: {\n      text: 'Click Here&lt;br&gt;to Edit Chart Title'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout, {editable: true});</code></pre>"},{"location":"examples/configuration-options/#making-a-static-chart","title":"making-a-static-chart","text":"<pre><code>var trace1 = {\n    x: [0, 1, 2, 3, 4, 5, 6],\n    y: [1, 9, 4, 7, 5, 2, 4],\n    mode: 'markers',\n    marker: {\n        size: [20, 40, 25, 10, 60, 90, 30],\n    }\n};\n\nvar data = [trace1];\n\nvar layout = {\n    title: {\n        text: 'Create a Static Chart'\n    },\n    showlegend: false\n};\n\nPlotly.newPlot('myDiv', data, layout, {staticPlot: true});</code></pre>"},{"location":"examples/configuration-options/#customize-download-plot-options","title":"customize-download-plot-options","text":"<pre><code>var trace1 = {\n    x: [0, 1, 2, 3, 4, 5, 6],\n    y: [1, 9, 4, 7, 5, 2, 4],\n    mode: 'markers',\n    marker: {\n        size: [20, 40, 25, 10, 60, 90, 30],\n    }\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n      text: 'Download Chart as SVG instead of PNG'\n  },\n  showlegend: false\n};\n\nvar config = {\n  toImageButtonOptions: {\n    format: 'svg', // one of png, svg, jpeg, webp\n    filename: 'custom_image',\n    height: 500,\n    width: 700,\n    scale: 1 // Multiply title/legend/axis/canvas sizes by this factor\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/configuration-options/#force-the-modebar-to-always-be-visible","title":"force-the-modebar-to-always-be-visible","text":"<p>When users hover over a figure generated with <code>plotly.js</code>, a <code>modebar</code> appears in the top-right of the figure. This presents users with several options for interacting with the figure.</p> <p>By default, the <code>modebar</code> is only visible while the user is hovering over the chart. If you would like the <code>modebar</code> to always be visible regardless of whether or not the user is currently hovering over the figure, set the <code>displayModeBar</code> attribute in the <code>config</code> of your figure to <code>true</code>.</p> <pre><code>var data = [{\n    y:['Marc', 'Henrietta', 'Jean', 'Claude', 'Jeffrey', 'Jonathan', 'Jennifer', 'Zacharias'],\n      x: [90, 40, 60, 80, 75, 92, 87, 73],\n      type: 'bar',\n      orientation: 'h'}]\n\nvar layout = {\n    title: {\n        text: 'Always Display the Modebar'\n    },\n    showlegend: false\n}\n\nPlotly.newPlot('myDiv', data, layout, {displayModeBar: true})</code></pre>"},{"location":"examples/configuration-options/#never-display-the-modebar","title":"never-display-the-modebar","text":"<p>When users hover over a figure generated with <code>plotly.js</code>, a <code>modebar</code> appears in the top-right of the figure. This presents users with several options for interacting with the figure.</p> <p>By default, the <code>modebar</code> is only visible while the user is hovering over the chart. If you would like the <code>modebar</code> to never be visible, then set the <code>displayModeBar</code> attribute in the <code>config</code> of your figure to <code>false</code>.</p> <pre><code>var trace1 = {\n    x:['Zebras', 'Lions', 'Pelicans'],\n    y: [90, 40, 60],\n    type: 'bar',\n    name: 'New York Zoo'\n};\n\nvar trace2 = {\n    x:['Zebras', 'Lions', 'Pelicans'],\n    y: [10, 80, 45],\n    type: 'bar',\n    name: 'San Francisco Zoo'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n    title: {\n        text: 'Hide the Modebar'\n    },\n    showlegend: true\n};\n\nPlotly.newPlot('myDiv', data, layout, {displayModeBar: false});</code></pre>"},{"location":"examples/configuration-options/#remove-modebar-buttons","title":"remove-modebar-buttons","text":"<p>To delete buttons from the modebar, pass an array of strings containing the names of the buttons you want to remove to the <code>modeBarButtonsToRemove</code> attribute in the figure's configuration object. Note that different chart types have different default modebars. The following is a list of all the modebar buttons and the chart types they are associated with:  <ul> <li> -'2D', `zoom2d`, `pan2d`, `select2d`, `lasso2d`, `zoomIn2d`, `zoomOut2d`, `autoScale2d`, `resetScale2d` </li> <li> -'3D', `zoom3d`, `pan3d`, `orbitRotation`, `tableRotation`, `handleDrag3d`, `resetCameraDefault3d`, `resetCameraLastSave3d`, `hoverClosest3d` </li> <li> -'Cartesian', `hoverClosestCartesian`, `hoverCompareCartesian` </li> <li> -'Geo', `zoomInGeo`, `zoomOutGeo`, `resetGeo`, `hoverClosestGeo` </li> <li> -'Other', `hoverClosestGl2d`, `hoverClosestPie`, `toggleHover`, `resetViews`, `toImage`, `sendDataToCloud`, `toggleSpikelines`, `resetViewMapbox` </li> </ul> </p> <pre><code>var data = [{\n    x:['trees', 'flowers', 'hedges'],\n    y: [90, 130, 40],\n    type: 'bar'}]\n\nvar layout = {\n    title: {\n        text: 'Remove Modebar Buttons'\n    },\n    showlegend: false\n}\n\nPlotly.newPlot('myDiv', data, layout, {modeBarButtonsToRemove: ['toImage']})</code></pre>"},{"location":"examples/configuration-options/#add-buttons-to-modebar","title":"add-buttons-to-modebar","text":"<p>The following example shows how to add a button to your modebar, either by using one of the Plotly icons or an arbitrary icon with a custom behaviour.</p> <pre><code>var icon1 = {\n  'width': 500,\n  'height': 600,\n  'path': 'M224 512c35.32 0 63.97-28.65 63.97-64H160.03c0 35.35 28.65 64 63.97 64zm215.39-149.71c-19.32-20.76-55.47-51.99-55.47-154.29 0-77.7-54.48-139.9-127.94-155.16V32c0-17.67-14.32-32-31.98-32s-31.98 14.33-31.98 32v20.84C118.56 68.1 64.08 130.3 64.08 208c0 102.3-36.15 133.53-55.47 154.29-6 6.45-8.66 14.16-8.61 21.71.11 16.4 12.98 32 32.1 32h383.8c19.12 0 32-15.6 32.1-32 .05-7.55-2.61-15.27-8.61-21.71z'\n}\n\nvar colors = ['green', 'red', 'blue']\nvar data = [{\n  mode: 'lines',\n  y: [2, 1, 2],\n  line: {color: colors[0], width: 3, shape: 'spline'}\n}]\n\nvar layout = {\n  title: {\n    text: 'add mode bar button with custom icon'\n  }\n}\n\nvar config = {\n  displayModeBar: true,\n  modeBarButtonsToAdd: [\n    {\n      name: 'color toggler',\n      icon: icon1,\n      click: function(gd) {\n        var newColor = colors[Math.floor(3 * Math.random())]\n        Plotly.restyle(gd, 'line.color', newColor)\n      }},\n    {\n      name: 'button1',\n      icon: Plotly.Icons.pencil,\n      direction: 'up',\n      click: function(gd) {alert('button1')\n    }}],\n  modeBarButtonsToRemove: ['pan2d','select2d','lasso2d','resetScale2d','zoomOut2d']}\n\nPlotly.newPlot('myDiv', data, layout, config)</code></pre>"},{"location":"examples/configuration-options/#disabling-buttons-for-specific-axes","title":"disabling-buttons-for-specific-axes","text":"<p>New in 3.1</p> <p>Disabling the zoom in, zoom out, and autoscale buttons for specific axes is supported on cartesian axes using the <code>modebardisable</code> attribute. In the following example, the zoom in and zoom out buttons are disabled on the <code>xaxis</code>, meaning these buttons only zoom in and out on the <code>yaxis</code>. Disable the autoscale button using <code>modebardisable='autoscale'</code>. You can also disable both autoscaling and zoom buttons using <code>modebardisable='zoominout+autoscale'</code>.</p> <pre><code>var data = [{\n  type: \"scatter\",\n  mode: \"lines+markers\",\n  x: [\"2023-01-01\", \"2023-02-01\", \"2023-03-01\", \"2023-04-01\", \"2023-05-01\", \"2023-06-01\"],\n  y: [150, 160, 155, 170, 165, 180],\n  name: \"Google Stock Price\"\n}];\n\nvar layout = {\n  title: \"Google Stock Price Over Time with Mode Bar Disabled\",\n  xaxis: {\n    title: \"Date\",\n    type: \"date\",\n    // Try zooming in or out using the modebar buttons. These only apply to the yaxis in this example.\n    modebardisable: \"zoominout\"\n  },\n  yaxis: {\n    title: \"Stock Price (USD)\"\n  }\n};\n\nPlotly.newPlot(\"myDiv\", data, layout);</code></pre>"},{"location":"examples/configuration-options/#display-the-`edit-chart`-link","title":"display-the-`edit-chart`-link","text":"<p>Note: <code>showLink</code> now defaults to false.</p> <pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6],\n  y: [1, 9, 4, 7, 5, 2, 4],\n  mode: 'lines+markers',\n  type: 'scatter'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n      text: 'Display the Edit Chart Link'\n  }\n};\n\nvar config = {\n  showLink: true,\n  plotlyServerURL: \"https://chart-studio.plotly.com\"\n};\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/configuration-options/#customize-the-`edit-chart`-link-text","title":"customize-the-`edit-chart`-link-text","text":"<pre><code>var data = [{\n  z: [[0, 1, 2, 3, 4, 5, 6],\n      [1, 9, 4, 7, 5, 2, 4],\n      [2, 4, 2, 1, 6, 9, 3]],\n  type: 'heatmap'}]\n\nvar layout = {\n  title: {\n      text: 'Customize The Edit Chart Link Text'\n  }\n};\n\nvar config = {\n  showLink: true,\n  plotlyServerURL: \"https://chart-studio.plotly.com\",\n  linkText: 'This text is custom!'\n};\n\nPlotly.newPlot('myDiv', data, layout, config)</code></pre>"},{"location":"examples/configuration-options/#display-edit-in-chart-studio-modebar-button","title":"display-edit-in-chart-studio-modebar-button","text":"<pre><code>var data = [{\n  values: [19, 26, 55],\n  labels: ['Residential', 'Non-Residential', 'Utility'],\n  type: 'pie'\n}];\n\nvar layout = {\n  title: {\n      text: 'Show Edit in Chart Studio Modebar Button'\n  }\n};\n\nvar config = {\n  showEditInChartStudio: true,\n  plotlyServerURL: \"https://chart-studio.plotly.com\"\n};\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/configuration-options/#change-the-default-locale","title":"change-the-default-locale","text":"<p>Load and register a non-default locale by adding <code>&lt;script src=\"https://cdn.plot.ly/plotly-locale-YOUR-LOCALE-latest.js\"&gt;&lt;/script&gt;</code> to your HTML after the plotly.js tag and then reference the locale in the <code>config</code>. For Example, the codepen example below has <code>&lt;script src=\"https://cdn.plot.ly/plotly-locale-fr-latest.js\"&gt;&lt;/script&gt;</code> in its HTML.  For more information and a list of available locales, see https://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization</p> <pre><code>var trace1 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  x: ['2018-01-01', '2018-08-31'],\n  y: [10, 5],\n  line: {color: '#17BECF'}\n};\n\nvar trace2 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  x: ['2018-01-01', '2018-08-31'],\n  y: [3,7],\n  line: {color: '#7F7F7F'}\n};\n\nvar data = [trace1,trace2];\n\nvar layout = {\n  title: {\n    text: 'Custom Locale'\n  }\n};\n\nvar config = {locale: 'fr'};\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/configuration-options/#hide-the-plotly-logo-on-the-modebar","title":"hide-the-plotly-logo-on-the-modebar","text":"<pre><code>var trace1 = {\n    x:['trees', 'flowers', 'hedges'],\n    y: [90, 130, 40],\n    type: 'bar'\n};\n\nvar data = [trace1];\n\nvar layout = {\n    title: {\n        text: 'Hide the Plotly Logo on the Modebar'\n    },\n    showlegend: false\n};\n\nPlotly.newPlot('myDiv', data, layout, {displaylogo: false});</code></pre>"},{"location":"examples/configuration-options/#making-a-responsive-chart","title":"making-a-responsive-chart","text":"<pre><code>var trace1 = {\n    type: 'bar',\n    x: [1, 2, 3, 4],\n    y: [5, 10, 2, 8],\n    marker: {\n        color: '#C8A2C8',\n        line: {\n            width: 2.5\n        }\n    }\n};\n\nvar data = [ trace1 ];\n\nvar layout = {\n    title: {\n      text: 'Responsive to window size!'\n    },\n    font: {size: 18}\n};\n\nPlotly.newPlot('myDiv', data, layout, {responsive: true});</code></pre>"},{"location":"examples/configuration-options/#double-click-delay","title":"double-click-delay","text":"<p>Sets the maximum delay between two consecutive clicks to be interpreted as a double-click in ms. This is the time interval between first mousedown, and' second mouseup. The default timing is 300 ms (less than half a second). This setting propagates to all on-subplot double clicks, (except for geo, map, and mapbox).</p> <pre><code>var data = [{\n  type: \"bar\",\n  y: [3, 5, 3, 2],\n  x: [\"2019-09-02\", \"2019-10-10\", \"2019-11-12\", \"2019-12-22\"]\n}];\n\nvar layout = {xaxis: {type: 'date'}};\n\nvar config = {doubleClickDelay: 1000}\n\nPlotly.newPlot(\"myDiv\", data, layout, config)</code></pre>"},{"location":"examples/continuous-error-bars/","title":"continuous-error-bars","text":""},{"location":"examples/continuous-error-bars/#filled-lines","title":"filled-lines","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], \n  y: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], \n  fill: \"tozerox\", \n  fillcolor: \"rgba(0,100,80,0.2)\", \n  line: {color: \"transparent\"}, \n  name: \"Fair\", \n  showlegend: false, \n  type: \"scatter\"\n};\nvar trace2 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], \n  y: [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5, 4.75, 5, 4, 7, 2, 4, 7, 4.4, 2, 4.5], \n  fill: \"tozerox\", \n  fillcolor: \"rgba(0,176,246,0.2)\", \n  line: {color: \"transparent\"}, \n  name: \"Premium\", \n  showlegend: false, \n  type: \"scatter\"\n};\nvar trace3 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], \n  y: [11, 9, 7, 5, 3, 1, 3, 5, 3, 1, -1, 1, 3, 1, -0.5, 1, 3, 5, 7, 9], \n  fill: \"tozerox\", \n  fillcolor: \"rgba(231,107,243,0.2)\", \n  line: {color: \"transparent\"}, \n  name: \"Ideal\", \n  showlegend: false, \n  type: \"scatter\"\n};\nvar trace4 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n  y: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n  line: {color: \"rgb(0,100,80)\"}, \n  mode: \"lines\", \n  name: \"Fair\", \n  type: \"scatter\"\n};\nvar trace5 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n  y: [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5], \n  line: {color: \"rgb(0,176,246)\"}, \n  mode: \"lines\", \n  name: \"Premium\", \n  type: \"scatter\"\n};\nvar trace6 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \n  y: [10, 8, 6, 4, 2, 0, 2, 4, 2, 0], \n  line: {color: \"rgb(231,107,243)\"}, \n  mode: \"lines\", \n  name: \"Ideal\", \n  type: \"scatter\"\n};\nvar data = [trace1, trace2, trace3, trace4, trace5, trace6];\nvar layout = {\n  paper_bgcolor: \"rgb(255,255,255)\", \n  plot_bgcolor: \"rgb(229,229,229)\", \n  xaxis: {\n    gridcolor: \"rgb(255,255,255)\", \n    range: [1, 10], \n    showgrid: true, \n    showline: false, \n    showticklabels: true, \n    tickcolor: \"rgb(127,127,127)\", \n    ticks: \"outside\", \n    zeroline: false\n  }, \n  yaxis: {\n    gridcolor: \"rgb(255,255,255)\", \n    showgrid: true, \n    showline: false, \n    showticklabels: true, \n    tickcolor: \"rgb(127,127,127)\", \n    ticks: \"outside\", \n    zeroline: false\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/continuous-error-bars/#asymmetric-error-bars-with-a-constant-offset","title":"asymmetric-error-bars-with-a-constant-offset","text":"<pre><code>function random_date(start, end, mul)\n  {\n    return new Date(start.getTime() + mul * (end.getTime() - start.getTime()));\n  }\n\nfunction date_list(y1,m1,d1,y2,m2,d2,count)\n  {\n    var a =[];\n    for(i=0;i&lt;count;i++)\n    {\n      a.push(random_date(new Date(y1, m1, d1), new Date(y2,m2,d2),i));\n    }\n      return a;\n  }\n\nfunction random_number(num , mul)\n  {\n     var value = [ ];\n     for(i=0;i&lt;=num;i++)\n      {\n        var rand = Math.random() * mul;\n        value.push(rand);\n      }\n     return value;\n  }\n\nvar trace1 = {\n  x: date_list(2001,01,01,2001,02,01,50),\n  y: random_number(50,20),\n  line: {width: 0},\n  marker: {color: \"444\"},\n  mode: \"lines\",\n  name: \"Lower Bound\",\n  type: \"scatter\"\n};\n\nvar trace2 = {\n  x: date_list(2001,01,01,2001,02,01,50),\n  y: random_number(50,21),\n  fill: \"tonexty\",\n  fillcolor: \"rgba(68, 68, 68, 0.3)\",\n  line: {color: \"rgb(31, 119, 180)\"},\n  mode: \"lines\",\n  name: \"Measurement\",\n  type: \"scatter\"\n};\n\nvar trace3 = {\n  x: date_list(2001,01,01,2001,02,01,50),\n  y: random_number(50,22),\n  fill: \"tonexty\",\n  fillcolor: \"rgba(68, 68, 68, 0.3)\",\n  line: {width: 0},\n  marker: {color: \"444\"},\n  mode: \"lines\",\n  name: \"Upper Bound\",\n  type: \"scatter\"\n}\n\nvar data = [trace1, trace2, trace3];\nvar layout = {\n  showlegend: false,\n  title: {\n    text: \"Continuous, variable value error bars&lt;br&gt;Notice the hover text!\"\n  },\n  yaxis: {\n    title: {\n      text: \"Wind speed (m/s)\"\n    }\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/","title":"contour-plots","text":""},{"location":"examples/contour-plots/#simple-contour-plot","title":"simple-contour-plot","text":"<pre><code>var size = 100, x = new Array(size), y = new Array(size), z = new Array(size), i, j;\n\nfor(var i = 0; i &lt; size; i++) {\n    x[i] = y[i] = -2 * Math.PI + 4 * Math.PI * i / size;\n    z[i] = new Array(size);\n}\n\nfor(var i = 0; i &lt; size; i++) {\n    for(j = 0; j &lt; size; j++) {\n        var r2 = x[i]*x[i] + y[j]*y[j];\n        z[i][j] = Math.sin(x[i]) * Math.cos(y[j]) * Math.sin(r2) / Math.log(r2+1);\n    }\n}\n\nvar data = [ {\n        z: z,\n        x: x,\n        y: y,\n        type: 'contour'\n    }\n];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/contour-plots/#basic-contour-plot","title":"basic-contour-plot","text":"<pre><code>var data = [ {\n        z: [[10, 10.625, 12.5, 15.625, 20],\n    [5.625, 6.25, 8.125, 11.25, 15.625],\n    [2.5, 3.125, 5.0, 8.125, 12.5],\n    [0.625, 1.25, 3.125, 6.25, 10.625],\n    [0, 0.625, 2.5, 5.625, 10]],\n        type: 'contour'\n    }\n];\n\nvar layout = {\n  title: {\n    text: 'Basic Contour Plot'\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#setting-x-and-y-coordinates-in-a-contour-plot","title":"setting-x-and-y-coordinates-in-a-contour-plot","text":"<pre><code>var data = [{\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  x: [-9, -6, -5 , -3, -1],\n  y: [0, 1, 4, 5, 7],\n  type: 'contour'\n}];\n\nvar layout = {\n  title: {\n    text: 'Setting the X and Y Coordinates in a Contour Plot'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#colorscale-for-contour-plot","title":"colorscale-for-contour-plot","text":"<pre><code>var data = [{\n  z: [[10, 10.625, 12.5, 15.625, 20],\n     [5.625, 6.25, 8.125, 11.25, 15.625],\n     [2.5, 3.125, 5., 8.125, 12.5],\n     [0.625, 1.25, 3.125, 6.25, 10.625],\n     [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorscale: 'Jet',\n}];\n\nvar layout = {\n  title: {\n    text: 'Colorscale for Contour Plot'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#customizing-size-and-range-of-a-contour-plot's-contours","title":"customizing-size-and-range-of-a-contour-plot's-contours","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorscale: 'Jet',\n  autocontour: false,\n  contours: {\n    start: 0,\n    end: 8,\n    size: 2\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Customizing Size and Range of Contours'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#customizing-spacing-between-x-and-y-ticks","title":"customizing-spacing-between-x-and-y-ticks","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorscale: 'Jet',\n  dx: 10,\n  x0: 5,\n  dy: 10,\n  y0: 10\n}];\n\nvar layout = {\n  title: {\n    text: 'Customizing Spacing Between X and Y Axis Ticks'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#connect-the-gaps-between-null-values-in-the-z-matrix","title":"connect-the-gaps-between-null-values-in-the-z-matrix","text":"<pre><code>var trace1 = {\n  z: [[null, null, null, 12, 13, 14, 15, 16],\n      [null, 1, null, 11, null, null, null, 17],\n      [null, 2, 6, 7, null, null, null, 18],\n      [null, 3, null, 8, null, null, null, 19],\n      [5, 4, 10, 9, null, null, null, 20],\n      [null, null, null, 27, null, null, null, 21],\n      [null, null, null, 26, 25, 24, 23, 22]],\n  type: 'contour',\n  showscale: false,\n  xaxis: 'x1',\n  yaxis: 'y1'\n};\n\nvar trace2 = {\n  z: [[null, null, null, 12, 13, 14, 15, 16],\n      [null, 1, null, 11, null, null, null, 17],\n      [null, 2, 6, 7, null, null, null, 18],\n      [null, 3, null, 8, null, null, null, 19],\n      [5, 4, 10, 9, null, null, null, 20],\n      [null, null, null, 27, null, null, null, 21],\n      [null, null, null, 26, 25, 24, 23, 22]],\n  connectgaps: true,\n  type: 'contour',\n  showscale: false,\n  xaxis: 'x2',\n  yaxis: 'y2'\n};\n\nvar trace3 = {\n  z: [[null, null, null, 12, 13, 14, 15, 16],\n      [null, 1, null, 11, null, null, null, 17],\n      [null, 2, 6, 7, null, null, null, 18],\n      [null, 3, null, 8, null, null, null, 19],\n      [5, 4, 10, 9, null, null, null, 20],\n      [null, null, null, 27, null, null, null, 21],\n      [null, null, null, 26, 25, 24, 23, 22]],\n  zsmooth: 'best',\n  type: 'heatmap',\n  showscale: false,\n  xaxis: 'x3',\n  yaxis: 'y3'\n};\n\nvar trace4 = {\n  z: [[null, null, null, 12, 13, 14, 15, 16],\n      [null, 1, null, 11, null, null, null, 17],\n      [null, 2, 6, 7, null, null, null, 18],\n      [null, 3, null, 8, null, null, null, 19],\n      [5, 4, 10, 9, null, null, null, 20],\n      [null, null, null, 27, null, null, null, 21],\n      [null, null, null, 26, 25, 24, 23, 22]],\n  zsmooth: 'best',\n  type: 'heatmap',\n  showscale: false,\n  connectgaps: true,\n  xaxis: 'x4',\n  yaxis: 'y4'\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {\n    text: 'Connect the Gaps Between Null Values in the Z Matrix'\n  },\n  xaxis: {domain: [0, 0.45],\n    anchor: 'y1'},\n  yaxis: {domain: [0.55, 1],\n    anchor: 'x1'},\n  xaxis2: {domain: [0.55, 1],\n    anchor: 'y2'},\n  yaxis2: {domain: [0.55, 1],\n    anchor: 'x2'},\n  xaxis3: {domain: [0, 0.45],\n    anchor: 'y3'},\n  yaxis3: {domain: [0, 0.45],\n    anchor: 'x3'},\n  xaxis4: {domain: [0.55, 1],\n    anchor: 'y4'},\n  yaxis4: {domain: [0, 0.45],\n    anchor: 'x4'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#smoothing-contour-lines","title":"smoothing-contour-lines","text":"<pre><code>var data = [ {\n  z: [[2, 4, 7, 12, 13, 14, 15, 16],\n   [3, 1, 6, 11, 12, 13, 16, 17],\n   [4, 2, 7, 7, 11, 14, 17, 18],\n   [5, 3, 8, 8, 13, 15, 18, 19],\n   [7, 4, 10, 9, 16, 18, 20, 19],\n   [9, 10, 5, 27, 23, 21, 21, 21],\n   [11, 14, 17, 26, 25, 24, 23, 22]],\n  type: 'contour',\n  line:{\n    smoothing: 0\n  },\n  xaxis: 'x1',\n  yaxis: 'y1'\n},\n{\n  z: [[2, 4, 7, 12, 13, 14, 15, 16],\n   [3, 1, 6, 11, 12, 13, 16, 17],\n   [4, 2, 7, 7, 11, 14, 17, 18],\n   [5, 3, 8, 8, 13, 15, 18, 19],\n   [7, 4, 10, 9, 16, 18, 20, 19],\n   [9, 10, 5, 27, 23, 21, 21, 21],\n   [11, 14, 17, 26, 25, 24, 23, 22]],\n  type: 'contour',\n  line:{\n    smoothing: 0.85\n  },\n  xaxis: 'x2',\n  yaxis: 'y2'\n}];\n\nvar layout = {\n  title: {\n    text: 'Smoothing Contour Lines'\n  },\n  xaxis: {domain: [0, 0.45],\n     anchor: 'y1'},\n  yaxis: {domain: [0, 1],\n         anchor: 'x1'},\n  xaxis2: {domain: [0.55, 1],\n         anchor: 'y2'},\n  yaxis2: {domain: [0, 1],\n         anchor: 'x2'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#contour-lines","title":"contour-lines","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorscale: 'Jet',\n  contours:{\n    coloring: 'lines'\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Contour Lines'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#smooth-contour-coloring","title":"smooth-contour-coloring","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  contours: {\n    coloring: 'heatmap'\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Smooth Contour Coloring'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#contour-line-labels","title":"contour-line-labels","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n      [5.625, 6.25, 8.125, 11.25, 15.625],\n      [2.5, 3.125, 5.0, 8.125, 12.5],\n      [0.625, 1.25, 3.125, 6.25, 10.625],\n      [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  contours: {\n    coloring: 'heatmap',\n    showlabels: true,\n    labelfont: {\n      family: 'Raleway',\n      size: 12,\n      color: 'white',\n    }\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Contour with Labels'\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#custom-colorscale-for-contour-plot","title":"custom-colorscale-for-contour-plot","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorscale: [[0, 'rgb(166,206,227)'], [0.25, 'rgb(31,120,180)'], [0.45, 'rgb(178,223,138)'], [0.65, 'rgb(51,160,44)'], [0.85, 'rgb(251,154,153)'], [1, 'rgb(227,26,28)']]\n}\n];\n\nvar layout = {\n  title: {\n    text: 'Custom Contour Plot Colorscale'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#color-bar-title","title":"color-bar-title","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorbar:{\n    title: {\n      text: 'Color Bar Title',\n      side: 'right',\n      font: {\n        size: 14,\n        family: 'Arial, sans-serif'\n      }\n    }\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Colorbar with a Title'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#color-bar-size","title":"color-bar-size","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorbar:{\n    thickness: 75,\n    thicknessmode: 'pixels',\n    len: 0.9,\n    lenmode: 'fraction',\n    outlinewidth: 0\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Colorbar Size for Contour Plots'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/contour-plots/#styling-color-bar-ticks-for-contour-plots","title":"styling-color-bar-ticks-for-contour-plots","text":"<pre><code>var data = [ {\n  z: [[10, 10.625, 12.5, 15.625, 20],\n       [5.625, 6.25, 8.125, 11.25, 15.625],\n       [2.5, 3.125, 5., 8.125, 12.5],\n       [0.625, 1.25, 3.125, 6.25, 10.625],\n       [0, 0.625, 2.5, 5.625, 10]],\n  type: 'contour',\n  colorbar:{\n    ticks: 'outside',\n    dtick: 1,\n    tickwidth: 2,\n    ticklen: 10,\n    tickcolor: 'grey',\n    showticklabels: true,\n    tickfont: {\n      size: 15\n    },\n    xpad: 50\n  }\n}];\n\nvar layout = {\n  title: {\n    text: 'Styling Color Bar Ticks for Contour Plots'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/custom-buttons/","title":"custom-buttons","text":""},{"location":"examples/custom-buttons/#restyle-button-single-attribute","title":"restyle-button-single-attribute","text":"<p>The <code>restyle</code> method should be used when modifying the data and data attributes of the graph This example demonstrates how to update a single data attribute: chart type with the <code>restyle</code> method.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\nvar z_data=[ ]\nfor(i=0;i&lt;24;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n        z: z_data,\n        type:'surface',\n        colorscale:'Viridis'\n}]\n\nvar updatemenus=[\n    {\n        buttons: [\n            {\n                args: ['type', 'surface'],\n                label: '3D Surface',\n                method: 'restyle'\n            },\n            {\n                args: ['type', 'heatmap'],\n                label:'Heatmap',\n                method:'restyle'\n            }\n        ],\n        direction: 'left',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'buttons',\n        x: 0.1,\n        xanchor: 'left',\n        y: 1.1,\n        yanchor: 'top'\n    }\n]\n\nvar annotations = [\n    {\n      text: 'Trace type:',\n      x: 0,\n      y: 1.085,\n      yref: 'paper',\n      align: 'left',\n      showarrow: false\n    }\n]\n\nvar layout = {\n    width: 800,\n    height: 900,\n    autosize: false,\n    margin: {t: 0, b: 0, l: 0, r: 0},\n    updatemenus: updatemenus,\n    annotations: annotations,\n    scene: {\n        xaxis:{\n            gridcolor: 'rgb(255, 255, 255)',\n            zerolinecolor: 'rgb(255, 255, 255)',\n            showbackground: true,\n            backgroundcolor:'rgb(230, 230,230)'\n        },\n        yaxis: {\n            gridcolor: 'rgb(255, 255, 255)',\n            zerolinecolor: 'rgb(255, 255, 255)',\n            showbackground: true,\n            backgroundcolor: 'rgb(230, 230, 230)'\n        },\n        zaxis: {\n            gridcolor: 'rgb(255, 255, 255)',\n            zerolinecolor: 'rgb(255, 255, 255)',\n            showbackground: true,\n            backgroundcolor: 'rgb(230, 230,230)'\n        },\n        aspectratio: {x: 1, y: 1, z: 0.7},\n        aspectmode: 'manual'\n  }\n}\n\n\nPlotly.newPlot(\"myDiv\", data, layout);\n\n});</code></pre>"},{"location":"examples/custom-buttons/#restyle-button-multiple-attributes","title":"restyle-button-multiple-attributes","text":"<p>This example demonstrates how to use a restyle button to update single attributes by passing a two element array to a button's <code>args</code> attribute or update multiple attributes at the same time by passing an array containing an object.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar button_layer_1_height = 1.12\nvar button_layer_2_height = 1.0\nvar annotation_offset = 0.04\n\nvar z_data=[ ]\nfor(i=0;i&lt;24;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n        z: z_data,\n        type:'surface',\n        colorscale:'Viridis'\n}]\n\nvar updatemenus=[\n    {\n        buttons: [\n            {\n                args: ['type', 'surface'],\n                label: '3D Surface',\n                method: 'restyle'\n            },\n            {\n                args: ['type', 'heatmap'],\n                label:'Heatmap',\n                method:'restyle'\n            },\n            {\n                args: ['type', 'contour'],\n                label:'Contour',\n                method:'restyle'\n            }\n        ],\n        direction: 'left',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'buttons',\n        x: 0.15,\n        xanchor: 'left',\n        y: button_layer_2_height,\n        yanchor: 'top'\n    },\n    {\n        buttons: [\n            {\n                args: ['reversescale', true],\n                label: 'Reverse',\n                method: 'restyle'\n            },\n            {\n                args: ['reversescale', false],\n                label:'Undo Reverse',\n                method:'restyle'\n            }\n        ],\n        direction: 'down',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'dropdown',\n        x: 0.56,\n        xanchor: 'left',\n        y: button_layer_2_height,\n        yanchor: 'top'\n    },\n    {\n        buttons: [\n            {\n                args: [{'contours.showlines':false, 'type':'contour'}],\n                label: 'Hide lines',\n                method: 'restyle'\n            },\n            {\n                args: [{'contours.showlines':true, 'type':'contour'}],\n                label:'Show lines',\n                method:'restyle'\n            }\n        ],\n        direction: 'down',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'dropdown',\n        x: 0.78,\n        xanchor: 'left',\n        y: button_layer_2_height,\n        yanchor: 'top'\n    },\n    {\n        buttons: [\n            {\n                args: ['colorscale', 'Viridis'],\n                label: 'Viridis',\n                method: 'restyle'\n            },\n            {\n                args: ['colorscale', 'Electric'],\n                label:'Electric',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Earth'],\n                label:'Earth',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Hot'],\n                label:'Hot',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Jet'],\n                label:'Jet',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Portland'],\n                label:'Portland',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Rainbow'],\n                label:'Rainbow',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Blackbody'],\n                label:'Blackbody',\n                method:'restyle'\n            },\n\n            {\n                args: ['colorscale', 'Cividis'],\n                label:'Cividis',\n                method:'restyle'\n            }\n        ],\n        direction: 'left',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'buttons',\n        x: 0.15,\n        xanchor: 'left',\n        y: button_layer_1_height,\n        yanchor: 'top'\n    },\n]\n\nvar annotations = [\n    {\n      text: 'Trace type:',\n      x: 0,\n      y: button_layer_2_height - annotation_offset,\n      yref: 'paper',\n      align: 'left',\n      showarrow: false\n    },\n    {\n      text: 'Colorscale:',\n      x: 0,\n      y: button_layer_1_height - annotation_offset,\n      yref: 'paper',\n      align: 'left',\n      showarrow: false\n    },\n]\n\nvar layout = {\n    margin: {t: 0, b: 0, l: 0, r: 0},\n    updatemenus: updatemenus,\n    annotations: annotations,\n    scene: {\n        xaxis:{\n            gridcolor: 'rgb(255, 255, 255)',\n            zerolinecolor: 'rgb(255, 255, 255)',\n            showbackground: true,\n            backgroundcolor:'rgb(230, 230,230)'\n        },\n        yaxis: {\n            gridcolor: 'rgb(255, 255, 255)',\n            zerolinecolor: 'rgb(255, 255, 255)',\n            showbackground: true,\n            backgroundcolor: 'rgb(230, 230, 230)'\n        },\n        zaxis: {\n            gridcolor: 'rgb(255, 255, 255)',\n            zerolinecolor: 'rgb(255, 255, 255)',\n            showbackground: true,\n            backgroundcolor: 'rgb(230, 230,230)'\n        },\n        aspectratio: {x: 1, y: 1, z: 0.7},\n        aspectmode: 'manual'\n  }\n}\n\n\nPlotly.newPlot(\"myDiv\", data, layout);\n\n});</code></pre>"},{"location":"examples/custom-buttons/#relayout-button","title":"relayout-button","text":"<p>The <code>relayout</code> method should be used when modifying the layout attributes of the graph. Update One Layout Attribute This example demonstrates how to update a layout attribute: chart type with the <code>relayout</code> method.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/normal-clusters.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return parseFloat(row[key]); });\n}\n\nvar button_layer_height = 1.2\nvar x0 = unpack(rows,'x0')\nvar x1 = unpack(rows,'x1')\nvar x2 = unpack(rows,'x2')\nvar y0 = unpack(rows,'y0')\nvar y1 = unpack(rows,'y1')\nvar y2 = unpack(rows,'y2')\n\nvar data = [{\n    x: x0,\n    y: y0,\n    mode: 'markers',\n    marker: {color: '#835AF1'}\n  },\n  {\n    x: x1,\n    y: y1,\n    mode: 'markers',\n    marker: {color: '#7FA6EE'}\n  },\n  {\n    x: x2,\n    y: y2,\n    mode: 'markers',\n    marker: {color: '#B8F7D4'}\n  },\n\n]\n\nvar cluster0 = {type: 'circle',\n                 xref: 'x', yref: 'y',\n                 x0: Math.min(...x0), y0: Math.min(...y0),\n                 x1: Math.max(...x0), y1: Math.max(...y0),\n                 opacity: 0.25,\n                 line: {color: '#835AF1'},\n                 fillcolor: '#835AF1'}\n\nvar cluster1 = {type: 'circle',\n                 xref: 'x', yref: 'y',\n                 x0: Math.min(...x1), y0: Math.min(...y1),\n                 x1: Math.max(...x1), y1: Math.max(...y1),\n                 opacity: 0.25,\n                 line: {color: '#7FA6EE'},\n                 fillcolor: '#7FA6EE'}\n\nvar cluster2 = {type: 'circle',\n                 xref: 'x', yref: 'y',\n                 x0: Math.min(...x2), y0: Math.min(...y2),\n                 x1: Math.max(...x2), y1: Math.max(...y2),\n                 opacity: 0.25,\n                 line: {color: '#B8F7D4'},\n                 fillcolor: '#B8F7D4'}\n\nvar updatemenus=[\n    {\n        buttons: [\n            {\n                args: ['shapes', []],\n                label: 'None',\n                method: 'relayout'\n            },\n            {\n                args: ['shapes', [cluster0]],\n                label: 'Cluster 0',\n                method: 'relayout'\n            },\n            {\n                args: ['shapes', [cluster1]],\n                label: 'Cluster 1',\n                method: 'relayout'\n            },\n            {\n                args: ['shapes', [cluster2]],\n                label: 'Cluster 2',\n                method: 'relayout'\n            },\n            {\n                args: ['shapes', [cluster0, cluster1, cluster2]],\n                label: 'All',\n                method: 'relayout'\n            },\n        ],\n        direction: 'left',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'buttons',\n        x: 0.1,\n        xanchor: 'left',\n        y: button_layer_height,\n        yanchor: 'top'\n    },\n\n]\n\nvar layout = {\n    updatemenus: updatemenus,\n    showlegend: false\n}\n\n\nPlotly.newPlot(\"myDiv\", data, layout);\n\n});</code></pre>"},{"location":"examples/custom-buttons/#update-button","title":"update-button","text":"<p>The <code>update</code> method should be used when modifying the data and layout sections of the graph. This example demonstrates how to update which traces are displayed while simulaneously updating layout attributes such as the chart title and annotations.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nconst arrAvg = arr =&gt; arr.reduce((a,b) =&gt; a + b, 0) / arr.length\n\nvar button_layer_2_height = 1.2\nvar high = unpack(rows, 'AAPL.High').map(x =&gt; parseFloat(x))\nvar low = unpack(rows, 'AAPL.Low').map(x =&gt; parseFloat(x))\nvar date = unpack(rows, 'Date')\n\n\nvar high_ave = arrAvg(high)\nvar high_max = Math.max(...high)\nvar low_ave = arrAvg(low)\nvar low_min = Math.min(...low)\n\nvar data = [{\n    x: date,\n    y: high,\n    mode: 'lines',\n    name: 'High',\n    marker: {color: '#33CFA5'}\n  },\n  {\n    x: date,\n    y: date.map(a =&gt; high_ave),\n    mode: 'lines',\n    name: 'Low Average',\n    line: {color: '#33CFA5', dash: 'dash'},\n    visible: false\n  },\n  {\n    x: date,\n    y: low,\n    name: 'Low',\n    mode: 'lines',\n    marker: {color: '#F06A6A'}\n  },\n  {\n    x: date,\n    y: date.map(a =&gt; low_ave),\n    mode: 'lines',\n    name: 'High Average',\n    visible: false,\n    line: {color: '#F06A6A', dash: 'dash'}\n  },\n\n]\n\nvar high_annotations = [\n    {\n      text: 'High Average:&lt;br&gt;' + high_ave.toFixed(2),\n      x: '2016-03-01',\n      y: high_ave,\n      yref: 'y', xref: 'x',\n      ay: -40, ax: 0\n    },\n    {\n      text: 'High Max:&lt;br&gt;' + high_max.toFixed(2),\n      x: date[high.indexOf(high_max)],\n      y: high_max,\n      yref: 'y', xref: 'x',\n      ay: -40, ax: 0\n    },\n]\n\nvar low_annotations = [{\n      text: 'Low Average:&lt;br&gt;' + low_ave.toFixed(2),\n      x: '2015-05-01',\n      y: low_ave,\n      yref: 'y', xref: 'x',\n      ay: 40, ax: 0\n    },\n    {\n      text: 'Low Min:&lt;br&gt;' + low_min.toFixed(2),\n      x: date[low.indexOf(low_min)],\n      y: low_min,\n      yref: 'y', xref: 'x',\n      ay: 40, ax: 0\n    }\n ]\n\nvar updatemenus=[\n    {\n        buttons: [\n            {\n                args: [{'visible': [true, true, false, false]},\n                       {'title': 'Yahoo High',\n                        'annotations': high_annotations}],\n                label: 'High',\n                method: 'update'\n            },\n            {\n                args: [{'visible': [false, false, true, true,]},\n                       {'title': 'Yahoo Low',\n                        'annotations': low_annotations}],\n                label: 'Low',\n                method: 'update'\n            },\n            {\n                args: [{'visible': [true, true, true, true,]},\n                       {'title': 'Yahoo',\n                        'annotations': [...low_annotations, ...high_annotations]}],\n                label: 'Both',\n                method: 'update'\n            },\n            {\n                args: [{'visible': [true, false, true, false,]},\n                       {'title': 'Yahoo',\n                        'annotations': []}],\n                label: 'Reset',\n                method: 'update'\n            },\n\n        ],\n        direction: 'left',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'buttons',\n        x: 0.1,\n        xanchor: 'left',\n        y: button_layer_2_height,\n        yanchor: 'top'\n    },\n\n]\n\nvar layout = {\n  title: {\n      text: 'Yahoo'\n  },\n  updatemenus: updatemenus,\n  showlegend: false\n}\n\n\nPlotly.newPlot(\"myDiv\", data, layout);\n\n});</code></pre>"},{"location":"examples/custom-buttons/#animate-button","title":"animate-button","text":"<p>Refer to our animation docs: https://plotly.com/javascript/#animations for examples on how to use the animate method with Plotly buttons.</p>"},{"location":"examples/custom-buttons/#style-the-buttons","title":"style-the-buttons","text":"<p>When adding buttons to Plotly charts, users have the option of styling the color, font, padding, and position of the buttons. The example below demonstrates how to apply different styling options. See all updatemenus styling attributes here: https://plotly.com/javascript/reference/layout/#layout-updatemenus.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){\nfunction unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar button_layer_1_height = 1.12\nvar button_layer_2_height = 1.0\nvar annotation_offset = 0.04\n\nvar z_data=[ ]\nfor(i=0;i&lt;24;i++)\n{\n  z_data.push(unpack(rows,i));\n}\n\nvar data = [{\n        z: z_data,\n        type:'surface',\n        colorscale:'Viridis'\n}]\n\nvar updatemenus=[\n    {\n        buttons: [\n            {\n                args: ['type', 'surface'],\n                label: '3D Surface',\n                method: 'restyle'\n            },\n            {\n                args: ['type', 'heatmap'],\n                label:'Heatmap',\n                method:'restyle'\n            },\n            {\n                args: ['type', 'contour'],\n                label:'Contour',\n                method:'restyle'\n            }\n        ],\n        direction: 'left',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'buttons',\n        x: 0.15,\n        xanchor: 'left',\n        y: button_layer_2_height,\n        yanchor: 'top',\n        font: {color: '#5072a8'}\n    },\n    {\n        buttons: [\n            {\n                args: ['reversescale', true],\n                label: 'Reverse',\n                method: 'restyle'\n            },\n            {\n                args: ['reversescale', false],\n                label:'Undo Reverse',\n                method:'restyle'\n            }\n        ],\n        direction: 'down',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'dropdown',\n        x: 0.56,\n        xanchor: 'left',\n        y: button_layer_2_height,\n        yanchor: 'top',\n        active: 1,\n        font: {color: '#5072a8'}\n    },\n    {\n        buttons: [\n            {\n                args: [{'contours.showlines':false, 'type':'contour'}],\n                label: 'Hide lines',\n                method: 'restyle'\n            },\n            {\n                args: [{'contours.showlines':true, 'type':'contour'}],\n                label:'Show lines',\n                method:'restyle'\n            }\n        ],\n        direction: 'down',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'dropdown',\n        x: 0.78,\n        xanchor: 'left',\n        y: button_layer_2_height,\n        yanchor: 'top',\n        font: {color: '#5072a8'}\n    },\n    {\n        buttons: [\n            {\n                args: ['colorscale', 'Viridis'],\n                label: 'Viridis',\n                method: 'restyle'\n            },\n            {\n                args: ['colorscale', 'Electric'],\n                label:'Electric',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Earth'],\n                label:'Earth',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Hot'],\n                label:'Hot',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Jet'],\n                label:'Jet',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Portland'],\n                label:'Portland',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Rainbow'],\n                label:'Rainbow',\n                method:'restyle'\n            },\n            {\n                args: ['colorscale', 'Blackbody'],\n                label:'Blackbody',\n                method:'restyle'\n            },\n\n            {\n                args: ['colorscale', 'Cividis'],\n                label:'Cividis',\n                method:'restyle'\n            }\n        ],\n        direction: 'left',\n        pad: {'r': 10, 't': 10},\n        showactive: true,\n        type: 'buttons',\n        x: 0.15,\n        xanchor: 'left',\n        y: button_layer_1_height,\n        yanchor: 'top',\n        active: 1,\n        bgcolor: '#aaaaaa',\n        bordercolor: '#FFFFFF'\n    },\n]\n\nvar annotations = [\n    {\n      text: 'Trace type:',\n      x: 0,\n      y: button_layer_2_height - annotation_offset,\n      yref: 'paper',\n      align: 'left',\n      showarrow: false\n    },\n    {\n      text: 'Colorscale:',\n      x: 0,\n      y: button_layer_1_height - annotation_offset,\n      yref: 'paper',\n      align: 'left',\n      showarrow: false\n    },\n]\n\nvar layout = {\n    paper_bgcolor: 'black',\n    margin: {t: 0, b: 0, l: 0, r: 0},\n    updatemenus: updatemenus,\n    annotations: annotations,\n    scene: {\n        bgcolor: 'black',\n        aspectratio: {x: 1, y: 1, z: 0.7},\n        aspectmode: 'manual'\n  }\n}\n\n\nPlotly.newPlot(\"myDiv\", data, layout);\n\n});</code></pre>"},{"location":"examples/disable-zoom/","title":"disable-zoom","text":""},{"location":"examples/disable-zoom/#disabling-zoom-events-for-x-axis","title":"disabling-zoom-events-for-x-axis","text":"<pre><code>function makeplot() {\n    d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv\", function(data){ processData(data) } );\n\n};\n\nfunction processData(allRows) {\n\n    console.log(allRows);\n    var x = [], y = [], standard_deviation = [];\n\n    for (var i=0; i &lt; allRows.length; i++) {\n        row = allRows[i];\n        x.push( row['AAPL_x'] );\n        y.push( row['AAPL_y'] );\n    }\n    console.log( 'X',x, 'Y',y, 'SD',standard_deviation );\n    makePlotly( x, y, standard_deviation );\n}\n\nfunction makePlotly( x, y, standard_deviation ){\n    var plotDiv = document.getElementById(\"myDiv\");\n    var traces = [{\n        x: x,\n        y: y\n    }];\n\n    var layout = {\n        title: {\n            text: 'Plotting CSV data from AJAX call'\n        },\n        xaxis: {\n            fixedrange: true\n        }\n    };\n\n    Plotly.newPlot('myDiv', traces, layout);\n};\n  makeplot();</code></pre>"},{"location":"examples/disable-zoom/#disabling-zoom-events-for-x-and-y-axis","title":"disabling-zoom-events-for-x-and-y-axis","text":"<pre><code>function makeplot() {\n    d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv\", function(data){ processData(data) } );\n\n};\n\nfunction processData(allRows) {\n\n    var x = [], y = [], standard_deviation = [];\n\n    for (var i=0; i &lt; allRows.length; i++) {\n        row = allRows[i];\n        x.push( row['AAPL_x'] );\n        y.push( row['AAPL_y'] );\n    }\n    makePlotly( x, y, standard_deviation );\n}\n\nfunction makePlotly( x, y, standard_deviation ){\n    var plotDiv = document.getElementById(\"myDiv\");\n    var traces = [{\n        x: x,\n        y: y\n    }];\n\n    var layout = {\n        title: {\n            text: 'Plotting CSV data from AJAX call'\n        },\n        yaxis: {fixedrange: true},\n        xaxis: {fixedrange: true}\n    };\n\n    Plotly.newPlot('myDiv', traces, layout);\n};\n  makeplot();</code></pre>"},{"location":"examples/dot-plots/","title":"dot-plots","text":""},{"location":"examples/dot-plots/#categorical-dot-plot","title":"categorical-dot-plot","text":"<pre><code>var country = ['Switzerland (2011)', 'Chile (2013)', 'Japan (2014)', 'United States (2012)', 'Slovenia (2014)', 'Canada (2011)', 'Poland (2010)', 'Estonia (2015)', 'Luxembourg (2013)', 'Portugal (2011)'];\n\nvar votingPop = [40, 45.7, 52, 53.6, 54.1, 54.2, 54.5, 54.7, 55.1, 56.6];\n\nvar regVoters = [49.1, 42, 52.7, 84.3, 51.7, 61.1, 55.3, 64.2, 91.1, 58.9];\n\nvar trace1 = {\n  type: 'scatter',\n  x: votingPop,\n  y: country,\n  mode: 'markers',\n  name: 'Percent of estimated voting age population',\n  marker: {\n    color: 'rgba(156, 165, 196, 0.95)',\n    line: {\n      color: 'rgba(156, 165, 196, 1.0)',\n      width: 1,\n    },\n    symbol: 'circle',\n    size: 16\n  }\n};\n\nvar trace2 = {\n  x: regVoters,\n  y: country,\n  mode: 'markers',\n  name: 'Percent of estimated registered voters',\n  marker: {\n    color: 'rgba(204, 204, 204, 0.95)',\n    line: {\n      color: 'rgba(217, 217, 217, 1.0)',\n      width: 1,\n    },\n    symbol: 'circle',\n    size: 16\n  }\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n      text: 'Votes cast for ten lowest voting age population in OECD countries',\n      font: {\n          color: 'rgb(204, 204, 204)'\n      }\n  },\n  xaxis: {\n    showgrid: false,\n    showline: true,\n    linecolor: 'rgb(102, 102, 102)',\n    tickfont: {\n      font: {\n        color: 'rgb(102, 102, 102)'\n      }\n    },\n    tickmode: 'linear',\n    dtick: 10,\n    ticks: 'outside',\n    tickcolor: 'rgb(102, 102, 102)'\n  },\n  margin: {\n    l: 140,\n    r: 40,\n    b: 50,\n    t: 80\n  },\n  legend: {\n    font: {\n      size: 10,\n    },\n    yanchor: 'middle',\n    xanchor: 'right'\n  },\n  width: 600,\n  height: 600,\n  paper_bgcolor: 'rgb(254, 247, 234)',\n  plot_bgcolor: 'rgb(254, 247, 234)',\n  hovermode: 'closest'\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/dropdowns/","title":"dropdowns","text":""},{"location":"examples/dropdowns/#add-two-dropdown-menus-to-a-chart-with-plotly.js","title":"add-two-dropdown-menus-to-a-chart-with-plotly.js","text":"<pre><code>function makeTrace(i) {\n    return {\n        y: Array.apply(null, Array(10)).map(() =&gt; Math.random()),\n        line: {\n            shape: 'spline' ,\n            color: 'red'\n        },\n        visible: i === 0,\n        name: 'Data set ' + i,\n    };\n}\n\nPlotly.newPlot('myDiv', [0, 1, 2, 3].map(makeTrace), {\n    updatemenus: [{\n        y: 0.8,\n        yanchor: 'top',\n        buttons: [{\n            method: 'restyle',\n            args: ['line.color', 'red'],\n            label: 'red'\n        }, {\n            method: 'restyle',\n            args: ['line.color', 'blue'],\n            label: 'blue'\n        }, {\n            method: 'restyle',\n            args: ['line.color', 'green'],\n            label: 'green'\n        }]\n    }, {\n        y: 1,\n        yanchor: 'top',\n        buttons: [{\n            method: 'restyle',\n            args: ['visible', [true, false, false, false]],\n            label: 'Data set 0'\n        }, {\n            method: 'restyle',\n            args: ['visible', [false, true, false, false]],\n            label: 'Data set 1'\n        }, {\n            method: 'restyle',\n            args: ['visible', [false, false, true, false]],\n            label: 'Data set 2'\n        }, {\n            method: 'restyle',\n            args: ['visible', [false, false, false, true]],\n            label: 'Data set 3'\n        }]\n    }],\n});</code></pre>"},{"location":"examples/dropdowns/#bind-dropdown-events-to-plotly.js-charts","title":"bind-dropdown-events-to-plotly.js-charts","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    var allCountryNames = unpack(rows, 'country'),\n        allYear = unpack(rows, 'year'),\n        allGdp = unpack(rows, 'gdpPercap'),\n        listofCountries = [],\n        currentCountry,\n        currentGdp = [],\n        currentYear = [];\n\n    for (var i = 0; i &lt; allCountryNames.length; i++ ){\n        if (listofCountries.indexOf(allCountryNames[i]) === -1 ){\n            listofCountries.push(allCountryNames[i]);\n        }\n    }\n\n    function getCountryData(chosenCountry) {\n        currentGdp = [];\n        currentYear = [];\n        for (var i = 0 ; i &lt; allCountryNames.length ; i++){\n            if ( allCountryNames[i] === chosenCountry ) {\n                currentGdp.push(allGdp[i]);\n                currentYear.push(allYear[i]);\n            }\n        }\n    };\n\n    // Default Country Data\n    setBubblePlot('Afghanistan');\n\n    function setBubblePlot(chosenCountry) {\n        getCountryData(chosenCountry);\n\n        var trace1 = {\n            x: currentYear,\n            y: currentGdp,\n            mode: 'lines+markers',\n            marker: {\n                size: 12,\n                opacity: 0.5\n            }\n        };\n\n        var data = [trace1];\n\n        var layout = {\n            title: {text: 'Line and Scatter Plot'},\n            height: 400,\n            width: 480\n        };\n\n        Plotly.newPlot('myDiv', data, layout);\n    };\n\n    var innerContainer = document.querySelector('[data-num=\"0\"'),\n        plotEl = innerContainer.querySelector('.plot'),\n        countrySelector = innerContainer.querySelector('.countrydata');\n\n    function assignOptions(textArray, selector) {\n        for (var i = 0; i &lt; textArray.length;  i++) {\n            var currentOption = document.createElement('option');\n            currentOption.text = textArray[i];\n            selector.appendChild(currentOption);\n        }\n    }\n\n    assignOptions(listofCountries, countrySelector);\n\n    function updateCountry(){\n        setBubblePlot(countrySelector.value);\n    }\n\n    countrySelector.addEventListener('change', updateCountry, false);\n});</code></pre>"},{"location":"examples/error-bars/","title":"error-bars","text":""},{"location":"examples/error-bars/#basic-symmetric-error-bars","title":"basic-symmetric-error-bars","text":"<pre><code>var data = [\n  {\n    x: [0, 1, 2],\n    y: [6, 10, 2],\n    error_y: {\n      type: 'data',\n      array: [1, 2, 3],\n      visible: true\n    },\n    type: 'scatter'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/error-bars/#bar-chart-with-error-bars","title":"bar-chart-with-error-bars","text":"<pre><code>var trace1 = {\n  x: ['Trial 1', 'Trial 2', 'Trial 3'],\n  y: [3, 6, 4],\n  name: 'Control',\n  error_y: {\n    type: 'data',\n    array: [1, 0.5, 1.5],\n    visible: true\n  },\n  type: 'bar'\n};\nvar trace2 = {\n  x: ['Trial 1', 'Trial 2', 'Trial 3'],\n  y: [4, 7, 3],\n  name: 'Experimental',\n  error_y: {\n    type: 'data',\n    array: [0.5, 1, 2],\n    visible: true\n  },\n  type: 'bar'\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: 'group'};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/error-bars/#horizontal-error-bars","title":"horizontal-error-bars","text":"<pre><code>var data = [\n  {\n    x: [1, 2, 3, 4],\n    y: [2, 1, 3, 4],\n    error_x: {\n      type: 'percent',\n      value: 10\n    },\n    type: 'scatter'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/error-bars/#asymmetric-error-bars","title":"asymmetric-error-bars","text":"<pre><code>var data = [\n  {\n    x: [1, 2, 3, 4],\n    y: [2, 1, 3, 4],\n    error_y: {\n      type: 'data',\n      symmetric: false,\n      array: [0.1, 0.2, 0.1, 0.1],\n      arrayminus: [0.2, 0.4, 1, 0.2]\n    },\n    type: 'scatter'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/error-bars/#colored-and-styled-error-bars","title":"colored-and-styled-error-bars","text":"<pre><code>function linspace(a,b,n) {\n  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});\n}\nx_theo = linspace(-4, 4, 100)\nsincx = Math.sin(x_theo) / x_theo\nvar x = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]\nvar y = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]\n\nvar trace1 = {\n  x: x_theo,\n  y: sincx,\n  name: 'sinc(x)',\n  type: 'scatter'\n};\nvar trace2 = {\n  x: x,\n  y: y,\n  mode: 'markers',\n  name: 'measured',\n  error_y: {\n    type: 'constant',\n    value: 0.1,\n    color: '#85144B',\n    thickness: 1.5,\n    width: 3,\n  },\n  error_x: {\n    type: 'constant',\n    value: 0.2,\n    color: '#85144B',\n    thickness: 1.5,\n    width: 3,\n  },\n  marker: {\n    color: '#85144B',\n    size: 8\n  },\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nPlotly.newPlot('myDiv', data, {}, {showSendToCloud: true});</code></pre>"},{"location":"examples/error-bars/#error-bars-as-a-percentage-of-the-y-value","title":"error-bars-as-a-percentage-of-the-y-value","text":"<pre><code>var data = [\n  {\n    x: [0, 1, 2],\n    y: [6, 10, 2],\n    error_y: {\n      type: 'percent',\n      value: 50,\n      visible: true\n    },\n    type: 'scatter'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/error-bars/#asymmetric-error-bars-with-a-constant-offset","title":"asymmetric-error-bars-with-a-constant-offset","text":"<pre><code>var data = [\n  {\n    x: [1, 2, 3, 4],\n    y: [2, 1, 3, 4],\n    error_y: {\n      type: 'percent',\n      symmetric: false,\n      value: 15,\n      valueminus: 25\n    },\n    type: 'scatter'\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/figure-labels/","title":"figure-labels","text":""},{"location":"examples/figure-labels/#styling-names","title":"styling-names","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  name: 'Name of Trace 1',\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [1, 0, 3, 2, 5, 4, 7, 6, 8],\n  name: 'Name of Trace 2',\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: {\n    text:'Plot Title',\n    font: {\n      family: 'Courier New, monospace',\n      size: 24\n    },\n    xref: 'paper',\n    x: 0.05,\n  },\n  xaxis: {\n    title: {\n      text: 'x Axis',\n      font: {\n        family: 'Courier New, monospace',\n        size: 18,\n        color: '#7f7f7f'\n      }\n    },\n  },\n  yaxis: {\n    title: {\n      text: 'y Axis',\n      font: {\n        family: 'Courier New, monospace',\n        size: 18,\n        color: '#7f7f7f'\n      }\n    }\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/figure-labels/#setting-title-automargin","title":"setting-title-automargin","text":"<p>Set <code>automargin</code> to <code>true</code> to allow the title to push the figure margins. With <code>yref</code> set to <code>paper</code>, <code>automargin</code> expands the margins to make the title visible, but doesn't push outside the container. With <code>yref</code> set to <code>container</code>, <code>automargin</code> expands the margins, but doesn't overlap with the plot area, tick labels, and axis titles.</p> <pre><code>var trace1 = {\n  x: [1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, 2002, 2007],\n  y: [69.39,\n      70.26,\n      71.24,\n      71.52,\n      71.89,\n      72.22,\n      73.84,\n      74.32,\n      76.33,\n      77.55,\n      79.11,\n      80.204\n  ],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, 2002, 2007],\n  y: [69.12,\n      70.33,\n      70.93,\n      71.1,\n      71.93,\n      73.49,\n      74.74,\n      76.32,\n      77.56,\n      78.83,\n      80.37,\n      81.235\n  ],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  title: {\n      text: 'Population',\n      font: {\n          family: 'Courier New, monospace',\n          size: 70\n      },\n      yref: 'paper',\n      automargin: true,\n  },\n  showlegend: false\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/filled-area-animation/","title":"filled-area-animation","text":""},{"location":"examples/filled-area-animation/#filled-area-animation","title":"filled-area-animation","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\n  var frames = []\n  var x = unpack(rows, 'AAPL_x')\n  var y = unpack(rows, 'AAPL_y')\n\n  var n = 100;\n  for (var i = 0; i &lt; n; i++) {\n    frames[i] = {data: [{x: [], y: []}]}\n    frames[i].data[0].x = x.slice(0, i+1);\n    frames[i].data[0].y = y.slice(0, i+1);\n  }\n\n  Plotly.newPlot('myDiv', [{\n    x: frames[1].data[0].x,\n    y: frames[1].data[0].y,\n    fill: 'tozeroy',\n    type: 'scatter',\n    mode: 'lines',\n    line: {color: 'green'}\n  }], {\n    title: {\n      text: \"Filled-Area Animation\"\n    },\n    xaxis: {\n      type: 'date',\n      range: [\n        frames[99].data[0].x[0],\n        frames[99].data[0].x[99]\n      ]\n    },\n    yaxis: {\n      range: [\n        0,\n        90\n      ]\n    },\n    updatemenus: [{\n      x: 0.1,\n      y: 0,\n      yanchor: \"top\",\n      xanchor: \"right\",\n      showactive: false,\n      direction: \"left\",\n      type: \"buttons\",\n      pad: {\"t\": 87, \"r\": 10},\n      buttons: [{\n        method: \"animate\",\n        args: [null, {\n          fromcurrent: true,\n          transition: {\n            duration: 0,\n          },\n          frame: {\n            duration: 40,\n            redraw: false\n          }\n        }],\n        label: \"Play\"\n      }, {\n        method: \"animate\",\n        args: [\n          [null],\n          {\n            mode: \"immediate\",\n            transition: {\n              duration: 0\n            },\n            frame: {\n              duration: 0,\n              redraw: false\n            }\n          }\n        ],\n        label: \"Pause\"\n      }]\n    }]\n  }).then(function() {\n    Plotly.addFrames('myDiv', frames);\n  });\n\n})</code></pre>"},{"location":"examples/filled-area-animation/#multiple-trace-filled-area","title":"multiple-trace-filled-area","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\n  var frames = []\n  var x = unpack(rows, 'Date')\n  var y = unpack(rows, 'AAPL.High')\n  var x2 = unpack(rows, 'Date')\n  var y2 = unpack(rows, 'AAPL.Low')\n\n  var n = 100;\n  for (var i = 0; i &lt; n; i++) {\n    frames[i] = {data: [{x: [], y: []}, {x: [], y: []}]}\n    frames[i].data[1].x = x.slice(0, i+1);\n    frames[i].data[1].y = y.slice(0, i+1);\n    frames[i].data[0].x = x2.slice(0, i+1);\n    frames[i].data[0].y = y2.slice(0, i+1);\n  }\n\n  var trace2 = {\n    type: \"scatter\",\n    mode: \"lines\",\n    name: 'AAPL High',\n    fill: 'tonexty',\n    x: frames[5].data[1].x,\n    y: frames[5].data[1].y,\n    line: {color: 'grey'}\n  }\n\n  var trace1 = {\n    type: \"scatter\",\n    mode: \"lines\",\n    name: 'AAPL Low',\n    x: frames[5].data[0].x,\n    y: frames[5].data[0].y,\n    line: {color: 'lightgrey'}\n  }\n\n  var data = [trace1,trace2];\n\n  var layout = {\n    title: {\n      text: 'Multiple Trace Filled-Area Animation'\n    },\n    xaxis: {\n      range: [frames[99].data[0].x[0], frames[99].data[0].x[99]],\n      showgrid: false\n    },\n    yaxis: {\n      range: [120, 140],\n      showgrid: false\n    },\n    legend: {\n      orientation: 'h',\n      x: 0.5,\n      y: 1.2,\n      xanchor: 'center'\n    },\n    updatemenus: [{\n      x: 0.5,\n      y: 0,\n      yanchor: \"top\",\n      xanchor: \"center\",\n      showactive: false,\n      direction: \"left\",\n      type: \"buttons\",\n      pad: {\"t\": 87, \"r\": 10},\n      buttons: [{\n        method: \"animate\",\n        args: [null, {\n          fromcurrent: true,\n          transition: {\n            duration: 0,\n          },\n          frame: {\n            duration: 40,\n            redraw: false\n          }\n        }],\n        label: \"Play\"\n      }, {\n        method: \"animate\",\n        args: [\n          [null],\n          {\n            mode: \"immediate\",\n            transition: {\n              duration: 0\n            },\n            frame: {\n              duration: 0,\n              redraw: false\n            }\n          }\n        ],\n        label: \"Pause\"\n      }]\n    }]\n  };\n\n  Plotly.newPlot('myDiv', data, layout).then(function() {\n    Plotly.addFrames('myDiv', frames);\n  });\n})</code></pre>"},{"location":"examples/filled-area-on-map/","title":"filled-area-on-map","text":""},{"location":"examples/filled-area-on-map/#overview","title":"overview","text":"<p>There are three different ways to show a filled area in a tile-based map.</p> <ol> <li> Use a [scattermap](https://plotly.com/javascript/reference/scattermap/) trace and set `fill` attribute to 'toself' </li> <li> Use a map layout (i.e. by minimally using an empty Scattermap trace) and add a GeoJSON layer </li> <li> Use the [Choroplethmap](https://plotly.com/javascript/map-county-choropleth/) trace type </li> </ol>  Filled `Scattermap` Trace  <p>The following example uses <code>Scattermap</code> and sets <code>fill = 'toself'</code>.</p> <pre><code>var data = [\n    {\n        type: \"scattermap\",\n        fill: \"toself\",\n        lon: [-74, -70, -70, -74],\n        lat: [47, 47, 45, 45],\n        marker: { size: 10, color: \"orange\" }\n    }\n];\n\nvar layout = {\n    map: {\n        style: \"stamen-terrain\",\n        center: { lon: -73, lat: 46 },\n        zoom: 5\n    },\n    showlegend: false,\n    height: 450,\n    width: 600\n};\n\nPlotly.newPlot(\"myDiv\", data, layout);</code></pre>"},{"location":"examples/filled-area-on-map/#multiple-filled-areas-with-a-scattermap-trace","title":"multiple-filled-areas-with-a-scattermap-trace","text":"<p>The following example shows how to use <code>null</code> in your data to draw multiple filled areas. Such gaps in trace data are unconnected by default, but this can be controlled via the connectgaps attribute.</p> <pre><code>var data = [{\n        type: \"scattermap\",\n        mode: \"lines\",\n        fill: \"toself\",\n        lon: [-10, -10, 8, 8, -10, null, 30, 30, 50, 50, 30, null, 100, 100, 80, 80, 100],\n        lat: [30, 6, 6, 30, 30,    null, 20, 30, 30, 20, 20, null, 40, 50, 50, 40, 40]\n        }]\n\nvar layout = {\n    map: {style: \"stamen-terrain\", center: {lon: 40, lat: 20}, 'zoom': 1.5},\n    showlegend: false,\n    width:700, height: 700}\n\nPlotly.newPlot(\"myDiv\", data, layout)</code></pre>"},{"location":"examples/filled-area-on-map/#geojson-layers","title":"geojson-layers","text":"<p>This example shows an area below water layer, and sets geojson object of type feature and geometries of type MultiPolygon.</p> <pre><code>var data = [{\n    type: \"scattermap\", mode: \"markers\",\n    lon: [-73.605], lat: [45.51],\n    marker: { size: 20, color: [\"cyan\"] }\n  }];\n\nvar layout = {\n  map: {\n    style: \"dark\",\n    center: { lon: -73.6, lat: 45.515},\n    zoom: 12, layers: [{\n        source: {\n          type: \"FeatureCollection\",\n          features: [{\n              type: \"Feature\",\n              geometry: {\n                type: \"MultiPolygon\",\n                coordinates: [[[\n                      [-73.606352888, 45.507489991], [-73.606133883, 45.50687600],\n                      [-73.605905904, 45.506773980], [-73.603533905, 45.505698946],\n                      [-73.602475870, 45.506856969], [-73.600031904, 45.505696003],\n                      [-73.599379992, 45.505389066], [-73.599119902, 45.505632008],\n                      [-73.598896977, 45.505514039], [-73.598783894, 45.505617001],\n                      [-73.591308727, 45.516246185], [-73.591380782, 45.516280145],\n                      [-73.596778656, 45.518690062], [-73.602796770, 45.521348046],\n                      [-73.612239983, 45.525564037], [-73.612422919, 45.525642061],\n                      [-73.617229085, 45.527751983], [-73.617279234, 45.527774160],\n                      [-73.617304713, 45.527741334], [-73.617492052, 45.527498362],\n                      [-73.617533258, 45.527512253], [-73.618074188, 45.526759105],\n                      [-73.618271651, 45.526500673], [-73.618446320, 45.526287943],\n                      [-73.618968507, 45.525698560], [-73.619388002, 45.525216750],\n                      [-73.619532966, 45.525064183], [-73.619686662, 45.524889290],\n                      [-73.619787038, 45.524770086], [-73.619925742, 45.524584939],\n                      [-73.619954486, 45.524557690], [-73.620122362, 45.524377961],\n                      [-73.620201713, 45.524298907], [-73.620775593, 45.523650879]\n                    ]]]\n              }\n            }]\n        },\n        type: \"fill\", below: \"water\", color: \"teal\"\n      }]\n  },\n  height: 450, width: 700\n};\n\nPlotly.newPlot(\"myDiv\", data, layout);</code></pre>"},{"location":"examples/filled-area-plots/","title":"filled-area-plots","text":""},{"location":"examples/filled-area-plots/#basic-overlaid-area-chart","title":"basic-overlaid-area-chart","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [0, 2, 3, 5],\n  fill: 'tozeroy',\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [3, 5, 1, 7],\n  fill: 'tonexty',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/filled-area-plots/#overlaid-area-chart-without-boundary-lines","title":"overlaid-area-chart-without-boundary-lines","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [0, 2, 3, 5],\n  fill: 'tozeroy',\n  type: 'scatter',\n  mode: 'none'\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [3, 5, 1, 7],\n  fill: 'tonexty',\n  type: 'scatter',\n  mode: 'none'\n};\n\nvar layout = {\n  title: {\n    text: 'Overlaid Chart Without Boundary Lines'\n  }\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/filled-area-plots/#stacked-area-chart","title":"stacked-area-chart","text":"<pre><code>var plotDiv = document.getElementById('plot');\nvar traces = [\n    {x: [1,2,3], y: [2,1,4], stackgroup: 'one'},\n    {x: [1,2,3], y: [1,1,2], stackgroup: 'one'},\n    {x: [1,2,3], y: [3,0,2], stackgroup: 'one'}\n];\n\nPlotly.newPlot('myDiv', traces, {title: {text: 'stacked and filled line chart'}});</code></pre>"},{"location":"examples/filled-area-plots/#normalized-stacked-area-chart","title":"normalized-stacked-area-chart","text":"<pre><code>var plotDiv = document.getElementById('plot');\nvar traces = [\n    {x: [1,2,3], y: [2,1,4], stackgroup: 'one', groupnorm:'percent'},\n    {x: [1,2,3], y: [1,1,2], stackgroup: 'one'},\n    {x: [1,2,3], y: [3,0,2], stackgroup: 'one'}\n];\n\nPlotly.newPlot('myDiv', traces, {title: {text: 'Normalized stacked and filled line chart'}});</code></pre>"},{"location":"examples/filled-area-plots/#select-hover-points","title":"select-hover-points","text":"<pre><code>var data = [\n  {\n    x: [0,0.5,1,1.5,2],\n    y: [0,1,2,1,0],\n    fill: 'toself',\n    fillcolor: '#ab63fa',\n    hoveron: 'points+fills',\n    line: {\n      color: '#ab63fa'\n    },\n    text: \"Points + Fills\",\n    hoverinfo: 'text'\n  },\n  {\n    x: [3,3.5,4,4.5,5],\n    y: [0,1,2,1,0],\n    fill: 'toself',\n    fillcolor: '#e763fa',\n    hoveron: 'points',\n    line: {\n      color: '#e763fa'\n    },\n    text: \"Points only\",\n    hoverinfo: 'text'\n  }]\n\nvar layout = {\n  title: {\n    text: 'Hover on &lt;i&gt;points&lt;/i&gt; or &lt;i&gt;fill&lt;/i&gt;'\n  },\n  xaxis: {\n    range: [0,5]\n  },\n  yaxis: {\n    range: [0,3]\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/font/","title":"font","text":""},{"location":"examples/font/#global-font-properties","title":"global-font-properties","text":"<pre><code>var data = [\n  {\n    x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    type: 'scatter'\n  }\n];\nvar layout = {\n  title: {\n    text: 'Global Font'\n  },\n  font: {\n    family: 'Courier New, monospace',\n    size: 18,\n    color: '#7f7f7f'\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/funnel-charts/","title":"funnel-charts","text":""},{"location":"examples/funnel-charts/#basic-funnel-plot","title":"basic-funnel-plot","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar data = [{type: 'funnel', y: [\"Website visit\", \"Downloads\", \"Potential customers\", \"Invoice sent\", \"Closed delas\"], x: [13873, 10533, 5443, 2703, 908], hoverinfo: 'x+percent previous+percent initial'}];\n\nvar layout = {margin: {l: 150}, width:600, height: 500}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/funnel-charts/#setting-marker-size-and-color","title":"setting-marker-size-and-color","text":"<pre><code>var gd = document.getElementById('myDiv');\n\nvar data = [{type: 'funnel',\n             y: [\"Sales person A\", \"Sales person B\", \"Sales person C\", \"Sales person D\", \"Sales person E\"],\n             x: [1200, 909.4, 600.6, 300, 80], textposition: \"inside\", textinfo: \"value+percent initial\",\n             hoverinfo: 'percent total+x', opacity: 0.65, marker: {color: [\"59D4E8\", \"DDB6C6\", \"A696C8\", \"67EACA\", \"94D2E6\"],\n             line: {\"width\": [4, 2, 2, 3, 1, 1], color: [\"3E4E88\", \"606470\", \"3E4E88\", \"606470\", \"3E4E88\"]}},\n             connector: {line: {color: \"royalblue\", dash: \"dot\", width: 3}}}];\n\nvar layout = {margin: {l: 100}, width: 600, height: 500}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/funnel-charts/#stacked-funnel","title":"stacked-funnel","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar data = [{type: 'funnel', name: 'Montreal',\n  y: [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\"],\n  x: [120, 60, 30, 20],\n  textinfo: \"value+percent initial\"},\n  {\n     type: 'funnel',name: 'Toronto',\n    y: [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\"],\n    x: [100, 60, 40, 30, 20], textposition: \"inside\", textinfo: \"value+percent previous\"},\n  {\n    type: 'funnel',name: 'Vancouver',\n    y: [\"Website visit\", \"Downloads\", \"Potential customers\", \"Requested price\", \"invoice sent\", \"closed deals\"],\n    x: [90, 70, 50, 30, 10, 5], textposition: \"outside\", textinfo: \"value+percent total\"}];\n\nvar layout = {margin: {l: 130, r: 0}, width: 600, funnelmode: \"stack\", showlegend: 'true'}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/funnel-charts/#funnelarea-plot","title":"funnelarea-plot","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar data = [{type: 'funnelarea', values: [5, 4, 3, 2, 1], text: [\"The 1st\", \"The 2nd\", \"The 3rd\", \"The 4th\", \"The 5th\"],\n      marker: {colors: [\"59D4E8\", \"DDB6C6\", \"A696C8\", \"67EACA\", \"94D2E6\"],\n                line: {color: [\"3E4E88\", \"606470\", \"3E4E88\", \"606470\", \"3E4E88\"], width: [2, 1, 5, 0, 3]}},\n      textfont: {family: \"Old Standard TT\", size: 13, color: \"black\"}, opacity: 0.65}];\n\nvar layout = {margin: {l: 200 , r: 200}, funnelmode: \"stack\", showlegend: 'True'}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/funnel-charts/#multi-funnelarea","title":"multi-funnelarea","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar data = [{type: 'funnelarea', scalegroup: \"first\", values: [500, 450, 340, 230, 220, 110],\n    textinfo: \"value\", title: {position: \"top center\", text: \"Sales for Sale Person A in U.S.\"},\n    domain: {x: [0, 0.5], y: [0, 0.5]}},\n{\n    type: 'funnelarea', scalegroup: \"first\", values: [600, 500, 400, 300, 200, 100], textinfo: \"value\",\n    title: {position: \"top center\", text: \"Sales of Sale Person B in Canada\"},\n    domain: {x: [0, 0.5], y: [0.55, 1]}},\n{\n    type:'funnelarea', scalegroup: \"second\", values: [510, 480, 440, 330, 220, 100], textinfo: \"value\",\n    title: {position: \"top left\", text: \"Sales of Sale Person A in Canada\"},\n    domain: {x: [0.55, 1], y: [0, 0.5]}},\n{\n  type: 'funnelarea', scalegroup: \"second\", values: [360, 250, 240, 130, 120, 60],\n  textinfo: \"value\", title: {position: \"top left\", text: \"Sales of Sale Person B in U.S.\"},\n  domain: {x: [0.55, 1], y: [0.55, 1]}}];\n\nvar layout = {width: 600,shapes: [\n            {x0: 0, x1: 0.5, y0: 0, y1: 0.5},\n            {x0: 0, x1: 0.5, y0: 0.55, y1: 1},\n            {x0: 0.55, x1: 1, y0: 0, y1: 0.5},\n            {x0: 0.55, x1: 1, y0: 0.55, y1: 1}]}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/gapminder-example/","title":"gapminder-example","text":""},{"location":"examples/gapminder-example/#animating-with-a-slider","title":"animating-with-a-slider","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv', function (err, data) {\n  // Create a lookup table to sort and regroup the columns of data,\n  // first by year, then by continent:\n  var lookup = {};\n  function getData(year, continent) {\n    var byYear, trace;\n    if (!(byYear = lookup[year])) {;\n      byYear = lookup[year] = {};\n    }\n     // If a container for this year + continent doesn't exist yet,\n     // then create one:\n    if (!(trace = byYear[continent])) {\n      trace = byYear[continent] = {\n        x: [],\n        y: [],\n        id: [],\n        text: [],\n        marker: {size: []}\n      };\n    }\n    return trace;\n  }\n\n  // Go through each row, get the right trace, and append the data:\n  for (var i = 0; i &lt; data.length; i++) {\n    var datum = data[i];\n    var trace = getData(datum.year, datum.continent);\n    trace.text.push(datum.country);\n    trace.id.push(datum.country);\n    trace.x.push(datum.lifeExp);\n    trace.y.push(datum.gdpPercap);\n    trace.marker.size.push(datum.pop);\n  }\n\n  // Get the group names:\n  var years = Object.keys(lookup);\n  // In this case, every year includes every continent, so we\n  // can just infer the continents from the *first* year:\n  var firstYear = lookup[years[0]];\n  var continents = Object.keys(firstYear);\n\n  // Create the main traces, one for each continent:\n  var traces = [];\n  for (i = 0; i &lt; continents.length; i++) {\n    var data = firstYear[continents[i]];\n     // One small note. We're creating a single trace here, to which\n     // the frames will pass data for the different years. It's\n     // subtle, but to avoid data reference problems, we'll slice\n     // the arrays to ensure we never write any new data into our\n     // lookup table:\n    traces.push({\n      name: continents[i],\n      x: data.x.slice(),\n      y: data.y.slice(),\n      id: data.id.slice(),\n      text: data.text.slice(),\n      mode: 'markers',\n      marker: {\n        size: data.marker.size.slice(),\n        sizemode: 'area',\n        sizeref: 200000\n      }\n    });\n  }\n\n  // Create a frame for each year. Frames are effectively just\n  // traces, except they don't need to contain the *full* trace\n  // definition (for example, appearance). The frames just need\n  // the parts the traces that change (here, the data).\n  var frames = [];\n  for (i = 0; i &lt; years.length; i++) {\n    frames.push({\n      name: years[i],\n      data: continents.map(function (continent) {\n        return getData(years[i], continent);\n      })\n    })\n  }\n\n  // Now create slider steps, one for each frame. The slider\n  // executes a plotly.js API command (here, Plotly.animate).\n  // In this example, we'll animate to one of the named frames\n  // created in the above loop.\n  var sliderSteps = [];\n  for (i = 0; i &lt; years.length; i++) {\n    sliderSteps.push({\n      method: 'animate',\n      label: years[i],\n      args: [[years[i]], {\n        mode: 'immediate',\n        transition: {duration: 300},\n        frame: {duration: 300, redraw: false},\n      }]\n    });\n  }\n\n  var layout = {\n    xaxis: {\n      title: {text: 'Life Expectancy'},\n      range: [30, 85]\n    },\n    yaxis: {\n      title: {text: 'GDP per Capita'},\n      type: 'log'\n    },\n    hovermode: 'closest',\n     // We'll use updatemenus (whose functionality includes menus as\n     // well as buttons) to create a play button and a pause button.\n     // The play button works by passing `null`, which indicates that\n     // Plotly should animate all frames. The pause button works by\n     // passing `[null]`, which indicates we'd like to interrupt any\n     // currently running animations with a new list of frames. Here\n     // The new list of frames is empty, so it halts the animation.\n    updatemenus: [{\n      x: 0,\n      y: 0,\n      yanchor: 'top',\n      xanchor: 'left',\n      showactive: false,\n      direction: 'left',\n      type: 'buttons',\n      pad: {t: 87, r: 10},\n      buttons: [{\n        method: 'animate',\n        args: [null, {\n          mode: 'immediate',\n          fromcurrent: true,\n          transition: {duration: 300},\n          frame: {duration: 500, redraw: false}\n        }],\n        label: 'Play'\n      }, {\n        method: 'animate',\n        args: [[null], {\n          mode: 'immediate',\n          transition: {duration: 0},\n          frame: {duration: 0, redraw: false}\n        }],\n        label: 'Pause'\n      }]\n    }],\n     // Finally, add the slider and use `pad` to position it\n     // nicely next to the buttons.\n    sliders: [{\n      pad: {l: 130, t: 55},\n      currentvalue: {\n        visible: true,\n        prefix: 'Year:',\n        xanchor: 'right',\n        font: {size: 20, color: '#666'}\n      },\n      steps: sliderSteps\n    }]\n  };\n\n  // Create the plot:\n  Plotly.newPlot('myDiv', {\n    data: traces,\n    layout: layout,\n    frames: frames,\n  });\n});</code></pre>"},{"location":"examples/gauge-charts/","title":"gauge-charts","text":""},{"location":"examples/gauge-charts/#basic-gauge","title":"basic-gauge","text":"<p>A radial gauge chart has a circular arc, which displays a single value to estimate progress toward a goal. The bar shows the target value, and the shading represents the progress toward that goal. Gauge charts, known as speedometer charts as well. This chart type is usually used to illustrate key business indicators.</p> <p>The example below displays a basic gauge chart with default attributes. For more information about different added attributes check indicator tutorial.</p> <pre><code>var data = [\n    {\n        domain: { x: [0, 1], y: [0, 1] },\n        value: 270,\n        title: { text: \"Speed\" },\n        type: \"indicator\",\n        mode: \"gauge+number\"\n    }\n];\n\nvar layout = { width: 600, height: 500, margin: { t: 0, b: 0 } };\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/gauge-charts/#add-steps-threshold-and-delta","title":"add-steps-threshold-and-delta","text":"<p>The following examples include \"steps\" attribute shown as shading inside the radial arc, \"delta\" which is the difference of the value and goal (reference - value), and \"threshold\" to determine boundaries that visually alert you if the value cross a defined threshold.</p> <pre><code>var data = [\n  {\n    domain: { x: [0, 1], y: [0, 1] },\n    value: 450,\n    title: { text: \"Speed\" },\n    type: \"indicator\",\n    mode: \"gauge+number+delta\",\n    delta: { reference: 380 },\n    gauge: {\n      axis: { range: [null, 500] },\n      steps: [\n        { range: [0, 250], color: \"lightgray\" },\n        { range: [250, 400], color: \"gray\" }\n      ],\n      threshold: {\n        line: { color: \"red\", width: 4 },\n        thickness: 0.75,\n        value: 490\n      }\n    }\n  }\n];\n\nvar layout = { width: 600, height: 450, margin: { t: 0, b: 0 } };\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/gauge-charts/#custom-gauge-chart","title":"custom-gauge-chart","text":"<p>The following example shows how to style your gauge charts. For more information about all possible options check our reference page.</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"gauge+number+delta\",\n    value: 420,\n    title: { text: \"Speed\", font: { size: 24 } },\n    delta: { reference: 400, increasing: { color: \"RebeccaPurple\" } },\n    gauge: {\n      axis: { range: [null, 500], tickwidth: 1, tickcolor: \"darkblue\" },\n      bar: { color: \"darkblue\" },\n      bgcolor: \"white\",\n      borderwidth: 2,\n      bordercolor: \"gray\",\n      steps: [\n        { range: [0, 250], color: \"cyan\" },\n        { range: [250, 400], color: \"royalblue\" }\n      ],\n      threshold: {\n        line: { color: \"red\", width: 4 },\n        thickness: 0.75,\n        value: 490\n      }\n    }\n  }\n];\n\nvar layout = {\n  width: 500,\n  height: 400,\n  margin: { t: 25, r: 25, l: 25, b: 25 },\n  paper_bgcolor: \"lavender\",\n  font: { color: \"darkblue\", family: \"Arial\" }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/graphing-multiple-chart-types/","title":"graphing-multiple-chart-types","text":""},{"location":"examples/graphing-multiple-chart-types/#line-chart-and-a-bar-chart","title":"line-chart-and-a-bar-chart","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5],\n  y: [1.5, 1, 1.3, 0.7, 0.8, 0.9],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5],\n  y: [1, 0.5, 0.7, -1.2, 0.3, 0.4],\n  type: 'bar'\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/graphing-multiple-chart-types/#a-contour-and-scatter-plot-of-the-method-of-steepest-descent","title":"a-contour-and-scatter-plot-of-the-method-of-steepest-descent","text":"<pre><code>var trace1 = {\n  z: [[1.5, 1.23469387755, 1.01020408163, 0.826530612245, 0.683673469388, 0.581632653061, 0.520408163265, 0.5, 0.520408163265, 0.581632653061, 0.683673469388, 0.826530612245, 1.01020408163, 1.23469387755, 1.5], [1.36734693878, 1.10204081633, 0.877551020408, 0.69387755102, 0.551020408163, 0.448979591837, 0.387755102041, 0.367346938776, 0.387755102041, 0.448979591837, 0.551020408163, 0.69387755102, 0.877551020408, 1.10204081633, 1.36734693878], [1.25510204082, 0.989795918367, 0.765306122449, 0.581632653061, 0.438775510204, 0.336734693878, 0.275510204082, 0.255102040816, 0.275510204082, 0.336734693878, 0.438775510204, 0.581632653061, 0.765306122449, 0.989795918367, 1.25510204082], [1.16326530612, 0.897959183673, 0.673469387755, 0.489795918367, 0.34693877551, 0.244897959184, 0.183673469388, 0.163265306122, 0.183673469388, 0.244897959184, 0.34693877551, 0.489795918367, 0.673469387755, 0.897959183673, 1.16326530612], [1.09183673469, 0.826530612245, 0.602040816327, 0.418367346939, 0.275510204082, 0.173469387755, 0.112244897959, 0.0918367346939, 0.112244897959, 0.173469387755, 0.275510204082, 0.418367346939, 0.602040816327, 0.826530612245, 1.09183673469], [1.04081632653, 0.775510204082, 0.551020408163, 0.367346938776, 0.224489795918, 0.122448979592, 0.0612244897959, 0.0408163265306, 0.0612244897959, 0.122448979592, 0.224489795918, 0.367346938776, 0.551020408163, 0.775510204082, 1.04081632653], [1.01020408163, 0.744897959184, 0.520408163265, 0.336734693878, 0.19387755102, 0.0918367346939, 0.030612244898, 0.0102040816327, 0.030612244898, 0.0918367346939, 0.19387755102, 0.336734693878, 0.520408163265, 0.744897959184, 1.01020408163], [1.0, 0.734693877551, 0.510204081633, 0.326530612245, 0.183673469388, 0.0816326530612, 0.0204081632653, 0.0, 0.0204081632653, 0.0816326530612, 0.183673469388, 0.326530612245, 0.510204081633, 0.734693877551, 1.0], [1.01020408163, 0.744897959184, 0.520408163265, 0.336734693878, 0.19387755102, 0.0918367346939, 0.030612244898, 0.0102040816327, 0.030612244898, 0.0918367346939, 0.19387755102, 0.336734693878, 0.520408163265, 0.744897959184, 1.01020408163], [1.04081632653, 0.775510204082, 0.551020408163, 0.367346938776, 0.224489795918, 0.122448979592, 0.0612244897959, 0.0408163265306, 0.0612244897959, 0.122448979592, 0.224489795918, 0.367346938776, 0.551020408163, 0.775510204082, 1.04081632653], [1.09183673469, 0.826530612245, 0.602040816327, 0.418367346939, 0.275510204082, 0.173469387755, 0.112244897959, 0.0918367346939, 0.112244897959, 0.173469387755, 0.275510204082, 0.418367346939, 0.602040816327, 0.826530612245, 1.09183673469], [1.16326530612, 0.897959183673, 0.673469387755, 0.489795918367, 0.34693877551, 0.244897959184, 0.183673469388, 0.163265306122, 0.183673469388, 0.244897959184, 0.34693877551, 0.489795918367, 0.673469387755, 0.897959183673, 1.16326530612], [1.25510204082, 0.989795918367, 0.765306122449, 0.581632653061, 0.438775510204, 0.336734693878, 0.275510204082, 0.255102040816, 0.275510204082, 0.336734693878, 0.438775510204, 0.581632653061, 0.765306122449, 0.989795918367, 1.25510204082], [1.36734693878, 1.10204081633, 0.877551020408, 0.69387755102, 0.551020408163, 0.448979591837, 0.387755102041, 0.367346938776, 0.387755102041, 0.448979591837, 0.551020408163, 0.69387755102, 0.877551020408, 1.10204081633, 1.36734693878], [1.5, 1.23469387755, 1.01020408163, 0.826530612245, 0.683673469388, 0.581632653061, 0.520408163265, 0.5, 0.520408163265, 0.581632653061, 0.683673469388, 0.826530612245, 1.01020408163, 1.23469387755, 1.5]],\n  x: [-1.0, -0.857142857143, -0.714285714286, -0.571428571429, -0.428571428571, -0.285714285714, -0.142857142857, 0.0, 0.142857142857, 0.285714285714, 0.428571428571, 0.571428571429, 0.714285714286, 0.857142857143, 1.0],\n  y: [-1.0, -0.857142857143, -0.714285714286, -0.571428571429, -0.428571428571, -0.285714285714, -0.142857142857, 0.0, 0.142857142857, 0.285714285714, 0.428571428571, 0.571428571429, 0.714285714286, 0.857142857143, 1.0],\n  ncontours: 30,\n  showscale: false,\n  type: 'contour'\n};\n\nvar trace2 = {\n  x: [-0.8, -0.48, -0.288, -0.1728, -0.10368, -0.062208, -0.0373248, -0.02239488, -0.013436928, -0.0080621568, -0.00483729408, -0.002902376448, -0.0017414258688, -0.00104485552128, -0.000626913312768, -0.000376147987661],\n  y: [-0.9, -0.72, -0.576, -0.4608, -0.36864, -0.294912, -0.2359296, -0.18874368, -0.150994944, -0.1207959552, -0.09663676416, -0.077309411328, -0.0618475290624, -0.0494780232499, -0.0395824185999, -0.0316659348799],\n  mode: 'markers+lines',\n  name: 'steepest',\n  line: {color: 'black'},\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/heatmaps/","title":"heatmaps","text":""},{"location":"examples/heatmaps/#basic-heatmap","title":"basic-heatmap","text":"<pre><code>var data = [\n  {\n    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]],\n    type: 'heatmap'\n  }\n];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/heatmaps/#heatmap-with-categorical-axis-labels","title":"heatmap-with-categorical-axis-labels","text":"<p>In this example we also show how to ignore hovertext when we have missing values in the data by setting the hoverongaps to False.</p> <pre><code>var data = [\n  {\n    z: [[1, null, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],\n    x: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    y: ['Morning', 'Afternoon', 'Evening'],\n    type: 'heatmap',\n    hoverongaps: false\n  }\n];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/heatmaps/#annotated-heatmap","title":"annotated-heatmap","text":"<pre><code>var xValues = ['A', 'B', 'C', 'D', 'E'];\n\nvar yValues = ['W', 'X', 'Y', 'Z'];\n\nvar zValues = [\n  [0.00, 0.00, 0.75, 0.75, 0.00],\n  [0.00, 0.00, 0.75, 0.75, 0.00],\n  [0.75, 0.75, 0.75, 0.75, 0.75],\n  [0.00, 0.00, 0.00, 0.75, 0.00]\n];\n\nvar colorscaleValue = [\n  [0, '#3D9970'],\n  [1, '#001f3f']\n];\n\nvar data = [{\n  x: xValues,\n  y: yValues,\n  z: zValues,\n  type: 'heatmap',\n  colorscale: colorscaleValue,\n  showscale: false\n}];\n\nvar layout = {\n  title: {\n    text: 'Annotated Heatmap'\n  },\n  annotations: [],\n  xaxis: {\n    ticks: '',\n    side: 'top'\n  },\n  yaxis: {\n    ticks: '',\n    ticksuffix: ' ',\n    width: 700,\n    height: 700,\n    autosize: false\n  }\n};\n\nfor ( var i = 0; i &lt; yValues.length; i++ ) {\n  for ( var j = 0; j &lt; xValues.length; j++ ) {\n    var currentValue = zValues[i][j];\n    if (currentValue != 0.0) {\n      var textColor = 'white';\n    }else{\n      var textColor = 'black';\n    }\n    var result = {\n      xref: 'x1',\n      yref: 'y1',\n      x: xValues[j],\n      y: yValues[i],\n      text: zValues[i][j],\n      font: {\n        family: 'Arial',\n        size: 12,\n        color: 'rgb(50, 171, 96)'\n      },\n      showarrow: false,\n      font: {\n        color: textColor\n      }\n    };\n    layout.annotations.push(result);\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/heatmaps/#heatmap-with-unequal-block-sizes","title":"heatmap-with-unequal-block-sizes","text":"<pre><code>function linspace(a,b,n) {\n  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});\n}\n//number of spiral loops\n\nvar nspiral = 2;\n\n// angle\n\nvar th = linspace(((-Math.PI) / 13), (2 * Math.PI * nspiral), 1000);\n\n//Empty Value Containers\n\nvar xValues = [];\nvar yValues = [];\nvar yShift = [];\nvar finalX = [];\nvar finalY = [];\n\n//spiral\n\nfor(var i = 0; i &lt; th.length; i++){\n  var a = 1.120529;\n  var b = 0.306349;\n  var r = a * Math.exp((-b) * th[i]);\n  var xResult = (r * Math.cos(th[i]));\n  var yResult = (r * Math.sin(th[i]));\n  xValues.push(xResult);\n  yValues.push(yResult);\n}\n\nfunction getMaxOfArray(numArray) {\n  return Math.max.apply(null, numArray);\n};\n\nfunction getMinOfArray(numArray) {\n  return Math.min.apply(null, numArray);\n};\n\n//Shift spiral north so that it is centered\n\nvar yShift = (1.6 - (getMaxOfArray(yValues) - getMinOfArray(yValues))) / 2;\n\nvar spiralTrace = {\n  x: xValues.map(function(xi) { return -(xi) + xValues[0]; }),\n  y: yValues.map(function(yi) { return yi - yValues[0] + yShift; }),\n  type: 'scatter',\n  line: {\n    color: 'white',\n    width: 3\n  }\n};\n\n//Build the rectangles as a heatmap and specify the edges of the heatmap squares\n\nvar phi = (1 + Math.sqrt(5)) / 2;\nvar xe = [0, 1, (1 + (1 / Math.pow(phi,4))), 1 + (1 / Math.pow(phi,3)), phi];\nvar ye = [0, (1 / Math.pow(phi,3)), (1 / Math.pow(phi,3)) + (1 / Math.pow(phi,4)), (1 / Math.pow(phi,2)), 1];\n\nvar zValues = [\n  [13, 3, 3, 5],\n  [13, 2, 1, 5],\n  [13, 10, 11, 12],\n  [13, 8, 8, 8]\n];\n\nvar hm = {\n  x: xe,\n  y: ye.map(function(yi) { return yi + yShift; }),\n  z: zValues,\n  type: 'heatmap',\n  colorscale: 'Viridis'\n};\n\nvar axisTemplate = {\n  range: [0, 1.6],\n  autorange: false,\n  showgrid: false,\n  zeroline: false,\n  linecolor: 'black',\n  showticklabels: false,\n  ticks: ''\n};\n\nvar data = [spiralTrace, hm];\n\nvar layout = {\n  title: {\n    text: 'Heatmap with Unequal Block Sizes'\n  },\n  margin: {\n    t: 200,\n    r: 200,\n    b: 200,\n    l: 200\n  },\n  xaxis: axisTemplate,\n  yaxis: axisTemplate,\n  showlegend: false,\n  width: 700,\n  height: 700,\n  autosize: false\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/histograms/","title":"histograms","text":""},{"location":"examples/histograms/#basic-histogram","title":"basic-histogram","text":"<pre><code>var x = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n}\n\nvar trace = {\n    x: x,\n    type: 'histogram',\n  };\nvar data = [trace];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/histograms/#horizontal-histogram","title":"horizontal-histogram","text":"<pre><code>var y = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    y[i] = Math.random();\n}\n\nvar data = [\n  {\n    y: y,\n    type: 'histogram',\n    marker: {\n    color: 'pink',\n    },\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/histograms/#overlaid-histogram","title":"overlaid-histogram","text":"<pre><code>var x1 = [];\nvar x2 = [];\nfor (var i = 1; i &lt; 500; i++)\n{\n    k = Math.random();\n    x1.push(Math.random() + 1);\n    x2.push(Math.random() + 1.1);\n}\nvar trace1 = {\n  x: x1,\n  type: \"histogram\",\n  opacity: 0.5,\n  marker: {\n     color: 'green',\n  },\n};\nvar trace2 = {\n  x: x2,\n  type: \"histogram\",\n  opacity: 0.6,\n  marker: {\n     color: 'red',\n  },\n};\n\nvar data = [trace1, trace2];\nvar layout = {barmode: \"overlay\"};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/histograms/#stacked-histograms","title":"stacked-histograms","text":"<pre><code>var x1 = [];\nvar x2 = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x1[i] = Math.random();\n    x2[i] = Math.random();\n}\n\nvar trace1 = {\n  x: x1,\n  type: \"histogram\",\n};\nvar trace2 = {\n  x: x2,\n  type: \"histogram\",\n};\nvar data = [trace1, trace2];\nvar layout = {barmode: \"stack\"};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/histograms/#colored-and-styled-histograms","title":"colored-and-styled-histograms","text":"<pre><code>var x1 = [];\nvar x2 = [];\nvar y1 = [];\nvar y2 = [];\nfor (var i = 1; i &lt; 500; i++)\n{\n  k = Math.random();\n  x1.push(k*5);\n  x2.push(k*10);\n  y1.push(k);\n  y2.push(k*2);\n}\nvar trace1 = {\n  x: x1,\n  y: y1,\n  name: 'control',\n  autobinx: false,\n  histnorm: \"count\",\n  marker: {\n    color: \"rgba(255, 100, 102, 0.7)\",\n     line: {\n      color:  \"rgba(255, 100, 102, 1)\",\n      width: 1\n    }\n  },\n  opacity: 0.5,\n  type: \"histogram\",\n  xbins: {\n    end: 2.8,\n    size: 0.06,\n    start: .5\n  }\n};\nvar trace2 = {\n  x: x2,\n  y: y2,\n  autobinx: false,\n  marker: {\n          color: \"rgba(100, 200, 102, 0.7)\",\n           line: {\n            color:  \"rgba(100, 200, 102, 1)\",\n            width: 1\n    }\n       },\n  name: \"experimental\",\n  opacity: 0.75,\n  type: \"histogram\",\n  xbins: {\n    end: 4,\n    size: 0.06,\n    start: -3.2\n\n  }\n};\nvar data = [trace1, trace2];\nvar layout = {\n  bargap: 0.05,\n  bargroupgap: 0.2,\n  barmode: \"overlay\",\n  title: {\n    text: \"Sampled Results\"\n  },\n  xaxis: {\n      title: {\n          text: \"Value\"\n      }\n  },\n  yaxis: {\n      title: {\n          text: \"Count\"\n      }\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/histograms/#cumulative-histogram","title":"cumulative-histogram","text":"<pre><code>var x = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n}\n\nvar trace = {\n    x: x,\n    type: 'histogram',\n    cumulative: {enabled: true}\n  };\nvar data = [trace];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/histograms/#normalized-histogram","title":"normalized-histogram","text":"<pre><code>var x = [];\nfor (var i = 0; i &lt; 500; i ++) {\n    x[i] = Math.random();\n}\n\nvar data = [\n  {\n    x: x,\n    type: 'histogram',\n    histnorm: 'probability',\n    marker: {\n        color: 'rgb(255,255,100)',\n     },\n  }\n];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/histograms/#specify-binning-function","title":"specify-binning-function","text":"<pre><code>var x = [\"Apples\",\"Apples\",\"Apples\",\"Oranges\", \"Bananas\"]\nvar y = [\"5\",\"10\",\"3\",\"10\",\"5\"]\n\nvar data = [\n  {\n    histfunc: \"count\",\n    y: y,\n    x: x,\n    type: \"histogram\",\n    name: \"count\"\n  },\n  {\n    histfunc: \"sum\",\n    y: y,\n    x: x,\n    type: \"histogram\",\n    name: \"sum\"\n  }\n]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/horizontal-bar-charts/","title":"horizontal-bar-charts","text":""},{"location":"examples/horizontal-bar-charts/#basic-horizontal-bar-chart","title":"basic-horizontal-bar-chart","text":"<pre><code>var data = [{\n  type: 'bar',\n  x: [20, 14, 23],\n  y: ['giraffes', 'orangutans', 'monkeys'],\n  orientation: 'h'\n}];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/horizontal-bar-charts/#colored-bar-chart","title":"colored-bar-chart","text":"<pre><code>var trace1 = {\n  x: [20, 14, 23],\n  y: ['giraffes', 'orangutans', 'monkeys'],\n  name: 'SF Zoo',\n  orientation: 'h',\n  marker: {\n    color: 'rgba(55,128,191,0.6)',\n    width: 1\n  },\n  type: 'bar'\n};\n\nvar trace2 = {\n  x: [12, 18, 29],\n  y: ['giraffes', 'orangutans', 'monkeys'],\n  name: 'LA Zoo',\n  orientation: 'h',\n  type: 'bar',\n  marker: {\n    color: 'rgba(255,153,51,0.6)',\n    width: 1\n  }\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: 'Colored Bar Chart'\n  },\n  barmode: 'stack'\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/horizontal-bar-charts/#bar-chart-with-line-plot","title":"bar-chart-with-line-plot","text":"<pre><code>var xSavings = [1.3586, 2.2623000000000002, 4.9821999999999997, 6.5096999999999996,\n  7.4812000000000003, 7.5133000000000001, 15.2148, 17.520499999999998\n];\n\nvar xNetworth = [93453.919999999998, 81666.570000000007, 69889.619999999995, 78381.529999999999, 141395.29999999999, 92969.020000000004, 66090.179999999993, 122379.3];\n\nvar ySavings = ['Japan', 'United Kingdom', 'Canada', 'Netherlands', 'United States', 'Belgium', 'Sweden', 'Switzerland'];\n\nvar yNetworth = ['Japan', 'United Kingdom', 'Canada', 'Netherlands', 'United States', 'Belgium', 'Sweden', 'Switzerland'];\n\nvar trace1 = {\n  x: xSavings,\n  y: ySavings,\n  xaxis: 'x1',\n  yaxis: 'y1',\n  type: 'bar',\n  marker: {\n    color: 'rgba(50,171,96,0.6)',\n    line: {\n      color: 'rgba(50,171,96,1.0)',\n      width: 1\n    }\n  },\n  name: 'Household savings, percentage of household disposable income',\n  orientation: 'h'\n};\n\nvar trace2 = {\n  x: xNetworth,\n  y: yNetworth,\n  xaxis: 'x2',\n  yaxis: 'y1',\n  mode: 'lines+markers',\n  line: {\n    color: 'rgb(128,0,128)'\n  },\n  name: 'Household net worth, Million USD/capita'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: 'Household Savings &amp; Net Worth for Eight OECD Countries'\n  },\n  xaxis1: {\n    range: [0, 20],\n    domain: [0, 0.5],\n    zeroline: false,\n    showline: false,\n    showticklabels: true,\n    showgrid: true\n  },\n  xaxis2: {\n    range: [25000, 150000],\n    domain: [0.5, 1],\n    zeroline: false,\n    showline: false,\n    showticklabels: true,\n    showgrid: true,\n    side: 'top',\n    dtick: 25000\n  },\n  legend: {\n    x: 0.029,\n    y: 1.238,\n    font: {\n      size: 10\n    }\n  },\n  margin: {\n    l: 100,\n    r: 20,\n    t: 200,\n    b: 70\n  },\n  width: 600,\n  height: 600,\n  paper_bgcolor: 'rgb(248,248,255)',\n  plot_bgcolor: 'rgb(248,248,255)',\n  annotations: [\n    {\n      xref: 'paper',\n      yref: 'paper',\n      x: -0.2,\n      y: -0.109,\n      text: 'OECD ' + '(2015), Household savings (indicator), ' + 'Household net worth (indicator). doi: ' + '10.1787/cfc6f499-en (Accessed on 05 June 2015)',\n      showarrow: false,\n      font:{\n        family: 'Arial',\n        size: 10,\n        color: 'rgb(150,150,150)'\n      }\n    }\n  ]\n};\n\nfor ( var i = 0 ; i &lt; xSavings.length ; i++ ) {\n  var result = {\n    xref: 'x1',\n    yref: 'y1',\n    x: xSavings[i]+2.3,\n    y: ySavings[i],\n    text: xSavings[i] + '%',\n    font: {\n      family: 'Arial',\n      size: 12,\n      color: 'rgb(50, 171, 96)'\n    },\n     showarrow: false,\n  };\n  var result2 = {\n    xref: 'x2',\n    yref: 'y1',\n    x: xNetworth[i] - 20000,\n    y: yNetworth[i],\n    text: xNetworth[i] + ' M',\n    font: {\n      family: 'Arial',\n      size: 12,\n      color: 'rgb(128, 0, 128)'\n    },\n     showarrow: false\n  };\n  layout.annotations.push(result, result2);\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/horizontal-legend/","title":"horizontal-legend","text":""},{"location":"examples/horizontal-legend/#basic-example","title":"basic-example","text":"<pre><code>var trace1 = {\n        x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y: [0, 3, 6, 4, 5, 2, 3, 5, 4],\n        type: 'scatter',\n        name:'Plot 1'\n        };\nvar trace2 = {\n        x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y: [0, 4, 7, 8, 3, 6, 3, 3, 4],\n        type: 'scatter',\n        name:'Plot 2'\n        };\nvar trace3 = {\n        x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n        y: [0, 5, 3, 10, 5.33, 2.24, 4.4, 5.1, 7.2],\n        type: 'scatter',\n        name:'Plot 3'\n        };\n\nvar data = [trace1, trace2, trace3];\nvar layout = {\n        showlegend: true,\n        legend: {\"orientation\": \"h\"}\n        };\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/hover-events/","title":"hover-events","text":""},{"location":"examples/hover-events/#hover-event-data","title":"hover-event-data","text":"<pre><code>{\n  points: [{\n    curveNumber: 2,  // index in data of the trace associated with the selected point \n    pointNumber: 2,  // index of the selected point\n    x: 5,        // x value\n    y: 600,      // y value\n    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point\n    fullData: {/* */},   // ref to the trace including all the defaults\n   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point\n   yaxis: {/* */}    // ref to y-axis object \" \"\n  }, {\n    /* similarly for other selected points */\n  }]\n}</code></pre>"},{"location":"examples/hover-events/#capturing-hover-events:-data","title":"capturing-hover-events:-data","text":"<pre><code>var myPlot = document.getElementById('myDiv'),\n    hoverInfo = document.getElementById('hoverinfo'),\n    N = 16,\n    x = d3.range(N),\n    y1 = d3.range(N).map( d3.random.normal() ),\n    y2 = d3.range(N).map( d3.random.normal() ),\n    data = [ { x:x, y:y1, type:'scatter', name:'Trial 1',\n        mode:'markers', marker:{size:16} },\n        { x:x, y:y2, type:'scatter', name:'Trial 2',\n        mode:'markers', marker:{size:16} } ];\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Hover on Points'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_hover', function(data){\n    var infotext = data.points.map(function(d){\n      return (d.data.name+': x= '+d.x+', y= '+d.y.toPrecision(3));\n    });\n\n    hoverInfo.innerHTML = infotext.join('&lt;br/&gt;');\n})\n .on('plotly_unhover', function(data){\n    hoverInfo.innerHTML = '';\n});</code></pre>"},{"location":"examples/hover-events/#capturing-hover-events:-pixels","title":"capturing-hover-events:-pixels","text":"<pre><code>var myPlot = document.getElementById('myDiv'),\n    hoverInfo = document.getElementById('hoverinfo'),\n    N = 16,\n    x = d3.range(N),\n    y1 = d3.range(N).map(d3.random.normal()),\n    y2 = d3.range(N).map(d3.random.normal()),\n    data = [{x:x, y:y1, type:'scatter', name:'Trial 1',\n        mode:'markers', marker:{size:16}},\n        {x:x, y:y2, type:'scatter', name:'Trial 2',\n        mode:'markers', marker:{size:16}}],\n    layout = {hovermode:'closest',\n              title: {text: 'Hover on Points to see&lt;br&gt;Pixel Coordinates'}};\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_hover', function(data){\n    var xaxis = data.points[0].xaxis,\n        yaxis = data.points[0].yaxis;\n    var infotext = data.points.map(function(d){\n      return ('width: '+xaxis.l2p(d.x)+', height: '+yaxis.l2p(d.y));\n    });\n\n    hoverInfo.innerHTML = infotext.join('&lt;br/&gt;');\n})\n .on('plotly_unhover', function(data){\n    hoverInfo.innerHTML = '';\n});</code></pre>"},{"location":"examples/hover-events/#triggering-hover-events","title":"triggering-hover-events","text":"<pre><code>var myPlot = document.getElementById('myDiv'),\n    hoverButton = document.getElementById('hoverbutton'),\n    N = 16,\n    x = d3.range(N),\n    y1 = d3.range(N).map( d3.random.normal() ),\n    y2 = d3.range(N).map( d3.random.normal() ),\n    data = [ { x:x, y:y1, type:'scatter', name:'Trial 1',\n        mode:'markers', marker:{size:16} },\n        { x:x, y:y2, type:'scatter', name:'Trial 2',\n        mode:'markers', marker:{size:16} } ];\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Click \"Go\" button to trigger hover'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_beforehover',function(){\n    return false;\n});\n\nhoverButton.addEventListener('click', function(){\n    var curve1 = Math.floor(Math.random()*2),\n        curve2 = Math.floor(Math.random()*2),\n        point1 = Math.floor(Math.random()*14),\n        point2 = Math.floor(Math.random()*14);\n    Plotly.Fx.hover('myDiv',[\n        {curveNumber:curve1, pointNumber:point1},\n        {curveNumber:curve2, pointNumber:point2}\n    ]);\n});</code></pre>"},{"location":"examples/hover-events/#coupled-hover-events","title":"coupled-hover-events","text":"<pre><code>var myPlot = document.getElementById('myDiv'),\n    N = 12,\n    x1 = d3.range(N).map( d3.random.normal() ),\n    x2 = d3.range(N).map( d3.random.normal() ),\n    x3 = d3.range(N).map( d3.random.normal() ),\n    y1 = d3.range(N).map( d3.random.normal() ),\n    y2 = d3.range(N).map( d3.random.normal() ),\n    y3 = d3.range(N).map( d3.random.normal() ),\n    months = ['January', 'February', 'March', 'April',\n              'May', 'June', 'July', 'August',\n              'September', 'October', 'November', 'December']\n    data = [{ x: x1, y: y1, text: months, type: 'scatter', name: '2014', hoverinfo: 'text+x+y',\n              mode: 'markers', marker: {color: 'rgba(200, 50, 100, .7)', size: 16}\n            },\n            { x: x2, y: y2, text: months, type: 'scatter', name: '2015', hoverinfo: 'text+x+y',\n             mode: 'markers', marker: {color: 'rgba(120, 20, 130, .7)', size: 16}\n            },\n            { x: x3, y: y3, text: months, type: 'scatter', name: '2016', hoverinfo: 'text+x+y',\n             mode: 'markers', marker: {color: 'rgba(10, 180, 180, .8)', size: 16}\n            }];\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Display Hover Info for Related Points'},\n        xaxis:{zeroline:false, hoverformat: '.2r'},\n        yaxis:{zeroline:false, hoverformat: '.2r'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_hover', function (eventdata){\n    var points = eventdata.points[0],\n        pointNum = points.pointNumber;\n\n    Plotly.Fx.hover('myDiv',[\n        { curveNumber:0, pointNumber:pointNum },\n        { curveNumber:1, pointNumber:pointNum },\n        { curveNumber:2, pointNumber:pointNum },\n    ]);\n});</code></pre>"},{"location":"examples/hover-events/#combined-click-and-hover-events","title":"combined-click-and-hover-events","text":"<pre><code>This is a more complex example that uses both hover, and click events to display traces. Take a look in the codepen javascript!</code></pre>"},{"location":"examples/hover-text-and-formatting/","title":"hover-text-and-formatting","text":""},{"location":"examples/hover-text-and-formatting/#adding-hover-text-to-data-in-line-and-scatter-plots","title":"adding-hover-text-to-data-in-line-and-scatter-plots","text":"<pre><code>var data = [\n  {\n    x: [0, .5, 1, 1.5, 2],\n    y: [1, 3, 2, 4, 2],\n    mode: 'markers',\n    marker: {size:16},\n    text: ['Text A', 'Text B', 'Text C', 'Text D', 'Text E'],\n    type: 'scatter'\n  }\n];\nvar layout = {\n  title: {\n      text: 'Hover over the points to see the text'\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/hover-text-and-formatting/#rounding-x-and-y-hover-values","title":"rounding-x-and-y-hover-values","text":"<pre><code>// Round x and y hover values by setting hoverformat in layout.xaxis and/or layout.yaxis\n// using D3 number formatting ( https://github.com/mbostock/d3/wiki/Formatting )\n\nvar N = 40,\n    x = d3.range(N).map( d3.random.normal() ),\n    y1 = d3.range(N).map( d3.random.normal() ),\n    y2 = d3.range(N).map( d3.random.normal() ),\n    data = [{ x:x, y:y1, type:'scatter', mode:'markers',\n              marker:{color:'rgba(200, 50, 100, .7)', size:16},\n              hoverinfo:\"x+y\"\n             },\n            { x:x, y:y2, type:'scatter', mode:'markers',\n             marker:{color:'rgba(10, 180, 180, .8)', size:16},\n             hoverinfo:\"x+y\"}];\n    layout = {\n    hovermode: 'closest',\n    title: {\n        text: 'Formatting X &amp; Y Hover Values'\n    },\n    xaxis: {\n        zeroline: false,\n        hoverformat: '.2f',\n        title: {\n            text: 'Rounded: 2 values after the decimal point on hover'\n        }\n    },\n    yaxis: {\n        zeroline: false,\n        hoverformat: '.2r',\n        title: {\n            text: 'Rounded: 2 significant values on hover'\n        }\n    }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/hover-text-and-formatting/#hovertemplate","title":"hovertemplate","text":"<pre><code>var data = [\n    {\n        type: 'scatter',\n        mode: 'lines+markers',\n        x: [1,2,3,4,5],\n        y: [2.02825,1.63728,6.83839,4.8485,4.73463],\n        hovertemplate: '&lt;i&gt;Price&lt;/i&gt;: $%{y:.2f}' +\n                        '&lt;br&gt;&lt;b&gt;X&lt;/b&gt;: %{x}&lt;br&gt;' +\n                        '&lt;b&gt;%{text}&lt;/b&gt;',\n        text: [\"Text A\", \"Text B\", \"Text C\", \"Text D\", \"Text E\"],\n        showlegend: false\n    },\n    {\n        x: [1,2,3,4,5],\n        y: [3.02825,2.63728,4.83839,3.8485,1.73463],\n        hovertemplate: 'Price: %{y:$.2f}&lt;extra&gt;&lt;/extra&gt;',\n        showlegend: false\n    }\n];\n\nvar layout = {\n    title: {\n        text: \"Set hover text with hovertemplate\"\n    },\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/hover-text-and-formatting/#unified-hover-mode","title":"unified-hover-mode","text":"<p>If \"x unified\" (or \"y unified\"), a single hoverlabel will appear for multiple points at the closest x- (or y-) coordinate within the <code>hoverdistance</code> with the caveat that no more than one hoverlabel will appear per trace.</p> <pre><code>var data = [\n  {\n    x: ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01'],\n    y: [10, 15, 12, 18],\n    mode: 'markers+lines',\n    name: 'Series A',\n    hovertemplate: null,\n    type: 'scatter'\n  },\n  {\n    x: ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01'],\n    y: [8, 12, 16, 14],\n    mode: 'markers+lines',\n    name: 'Series B',\n    hovertemplate: null,\n    type: 'scatter'\n  }\n];\n\nvar layout = {\n  title: {\n    text: \"layout.hovermode='x unified'\"\n  },\n  hovermode: 'x unified',\n  xaxis: {\n    title: 'Date'\n  },\n  yaxis: {\n    title: 'Value'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/hover-text-and-formatting/#custom-unified-hover-title","title":"custom-unified-hover-title","text":"<p>New in 3.1</p> <p>Customize the title shown in unified hovermode by specifying <code>unifiedhovertitle.text</code>. The unified hover title is a template string that supports using variables from the data. Numbers are formatted using d3-format's syntax <code>%{variable:d3-format}</code>, for example <code>\"Price: %{y:$.2f}\"</code>. Dates are formatted using d3-time-format's syntax <code>%{variable|d3-time-format}</code>, for example <code>\"Day: %{x|%A}\"</code>.</p> <pre><code>var data = [\n  {\n    x: ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01'],\n    y: [150.25, 165.50, 142.75, 178.90],\n    mode: 'lines+markers',\n    name: 'Stock A',\n    type: 'scatter'\n  },\n  {\n    x: ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01'],\n    y: [85.30, 92.15, 88.45, 95.20],\n    mode: 'lines+markers',\n    name: 'Stock B',\n    type: 'scatter'\n  }\n];\n\nvar layout = {\n  title: {\n    text: \"Stock Prices with Custom Unified Hover Title\"\n  },\n  hovermode: 'x unified',\n  xaxis: {\n    title: 'Date',\n    unifiedhovertitle: {\n      text: '&lt;b&gt;%{x|%A, %B %d, %Y}&lt;/b&gt;'\n    }\n  },\n  yaxis: {\n    title: 'Price (USD)',\n    tickprefix: '$'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/images/","title":"images","text":""},{"location":"examples/images/#add-a-logo","title":"add-a-logo","text":"<pre><code>var data = [\n  {\n    x: [\"-35.3\", \"-15.9\", \"-15.8\", \"-15.6\", \"-11.1\", \"-9.6\", \"-9.2\", \"-3.5\", \"-1.9\", \"-0.9\", \"1.0\", \"1.4\", \"1.7\", \"2.0\", \"2.8\", \"6.2\", \"8.1\", \"8.5\", \"8.5\", \"8.6\", \"11.4\", \"12.5\", \"13.3\", \"13.7\", \"14.4\", \"17.5\", \"17.7\", \"18.9\", \"25.1\", \"28.9\", \"41.4\"],\n    y: [\"Designers, musicians, artists, etc.\", \"Secretaries and administrative assistants\", \"Waiters and servers\", \"Archivists, curators, and librarians\", \"Sales and related\", \"Childcare workers, home car workers, etc.\", \"Food preparation occupations\", \"Janitors, maids, etc.\", \"Healthcare technicians, assistants. and aides\", \"Counselors, social and religious workers\", \"Physical, life and social scientists\", \"Construction\", \"Factory assembly workers\", \"Machinists, repairmen, etc.\", \"Media and communications workers\", \"Teachers\", \"Mechanics, repairmen, etc.\", \"Financial analysts and advisers\", \"Farming, fishing and forestry workers\", \"Truck drivers, heavy equipment operator, etc.\", \"Accountants and auditors\", \"Human resources, management analysts, etc.\", \"Managers\", \"Lawyers and judges\", \"Engineers, architects and surveyors\", \"Nurses\", \"Legal support workers\", \"Computer programmers and system admin.\", \"Police officers and firefighters\", \"Chief executives\", \"Doctors, dentists and surgeons\"],\n    marker: {\n      color: \"rgb(253, 240, 54)\",\n      line: {\n        color: \"rgb(0, 0, 0)\",\n        width: 2\n      }\n    },\n    name: \"y\",\n    orientation: \"h\",\n    type: \"bar\",\n  }\n];\nvar layout = {\n  autosize: false,\n  bargap: 0.15,\n  bargroupgap: 0.1,\n  barmode: \"stack\",\n  height: 800,\n  hovermode: \"x\",\n  images: [\n    {\n      x: 1,\n      y: 1.05,\n      sizex: 0.2,\n      sizey: 0.2,\n      source: \"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/vox.png\",\n      xanchor: \"right\",\n      xref: \"paper\",\n      yanchor: \"bottom\",\n      yref: \"paper\"\n    }\n  ],\n  margin: {\n    r: 20,\n    t: 125,\n    b: 75,\n    l: 300\n  },\n  title: {\n    text: \"Moving Up, Moving Down&lt;br&gt;&lt;i&gt;Percentile change in income between childhood and adulthood&lt;/i&gt;\"\n  },\n  width: 700,\n  xaxis: {\n    tickmode: \"linear\",\n    dtick: 10,\n    gridcolor: \"rgba(102, 102, 102, 0.4)\",\n    linecolor: \"#000\",\n    linewidth: 1,\n    mirror: true,\n    nticks: 0,\n    showticklabels: true,\n    tick0: 0,\n    tickwidth: 1,\n    title: {\n      text: \"&lt;i&gt;Change in percentile&lt;/i&gt;\"\n    },\n  },\n  yaxis: {\n    anchor: \"x\",\n    tickmode: \"linear\",\n    gridcolor: \"rgba(102, 102, 102, 0.4)\",\n    gridwidth: 1,\n    linecolor: \"#000\",\n    linewidth: 1,\n    mirror: true,\n    showgrid: false,\n    showline: true,\n    showticklabels: true,\n    tick0: 0,\n    type: \"category\",\n    zeroline: false\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/images/#add-multiple-images","title":"add-multiple-images","text":"<pre><code>Plotly.newPlot('myDiv', [{\n  x: [1, 2, 3],\n  y: [1, 2, 3]\n}], {\n  images: [\n      {\n        \"source\": \"https://images.plot.ly/language-icons/api-home/python-logo.png\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"x\": 0,\n        \"y\": 1,\n        \"sizex\": 0.2,\n        \"sizey\": 0.2,\n        \"xanchor\": \"right\",\n        \"yanchor\": \"bottom\"\n      },\n      {\n        \"source\": \"https://images.plot.ly/language-icons/api-home/js-logo.png\",\n        \"xref\": \"x\",\n        \"yref\": \"y\",\n        \"x\": 1.5,\n        \"y\": 2,\n        \"sizex\": 1,\n        \"sizey\": 1,\n        \"xanchor\": \"right\",\n        \"yanchor\": \"bottom\"\n      },\n      {\n        \"source\": \"https://images.plot.ly/language-icons/api-home/r-logo.png\",\n        \"xref\": \"x\",\n        \"yref\": \"y\",\n        \"x\": 1,\n        \"y\": 3,\n        \"sizex\": 2,\n        \"sizey\": 2,\n        \"sizing\": \"stretch\",\n        \"opacity\": 0.4,\n        \"layer\": \"below\"\n      },\n      {\n        \"source\": \"https://images.plot.ly/language-icons/api-home/matlab-logo.png\",\n        \"xref\": \"x\",\n        \"yref\": \"paper\",\n        \"x\": 3,\n        \"y\": 0,\n        \"sizex\": 0.5,\n        \"sizey\": 1,\n        \"opacity\": 1,\n        \"xanchor\": \"right\",\n        \"yanchor\": \"middle\"\n      },\n    ]\n})</code></pre>"},{"location":"examples/indicator/","title":"indicator","text":""},{"location":"examples/indicator/#overview","title":"overview","text":"<p>In this tutorial we introduce a new trace named \"Indicator\". The purpose of \"indicator\" is to visualize a single value specified by the \"value\" attribute. Three distinct visual elements are available to represent that value: number, delta and gauge. Any combination of them can be specified via the \"mode\" attribute. Top-level attributes are:  <ol> <li>value: the value to visualize</li> <li> mode: which visual elements to draw</li> <li> align: how to align number and delta (left, center, right)</li> <li> domain: the extent of the figure</li> </ol> </p> <p>Then we can configure the 3 different visual elements via their respective container:  <ol> <li> number is simply a representation of the number in text. It has attributes:     <li> valueformat: to format the number</li> <li> prefix: a string before the number</li> <li> suffix: a string after the number </li> <li> font.(family|size): to control the font</li> <p>\"delta\" simply displays the difference between the value with respect to a reference. It has attributes:  <ol> <li> reference: the number to compare the value with</li> <li> relative: whether that difference is absolute or relative</li> <li> valueformat: to format the delta</li> <li> (increasing|decreasing).color: color to be used for positive or decreasing delta</li> <li> (increasing|decreasing).symbol: symbol displayed on the left of the delta</li> <li> font.(family|size): to control the font</li> <li> position: position relative to `number` (either top, left, bottom, right)</li> </ol></p> <p>Finally, we can have a simple title for the indicator via <code>title</code> with 'text' attribute which is a string, and 'align' which can be set to left, center, and right.   There are two gauge types: angular and bullet. Here is a combination of both shapes (angular, bullet), and different modes (guage, delta, and value):</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    value: 200,\n    delta: { reference: 160 },\n    gauge: { axis: { visible: false, range: [0, 250] } },\n    domain: { row: 0, column: 0 }\n  },\n  {\n    type: \"indicator\",\n    value: 120,\n    gauge: {\n      shape: \"bullet\",\n      axis: {\n        visible: false,\n        range: [-200, 200]\n      }\n    },\n    domain: { x: [0.1, 0.5], y: [0.15, 0.35] }\n  },\n  {\n    type: \"indicator\",\n    mode: \"number+delta\",\n    value: 300,\n    domain: { row: 0, column: 1 }\n  },\n  { type: \"indicator\", mode: \"delta\", value: 40, domain: { row: 1, column: 1 } }\n];\n\nvar layout = {\n  width: 600,\n  height: 400,\n  margin: { t: 25, b: 25, l: 25, r: 25 },\n  grid: { rows: 2, columns: 2, pattern: \"independent\" },\n  template: {\n    data: {\n      indicator: [\n        {\n          title: { text: \"Speed\" },\n          mode: \"number+delta+gauge\",\n          delta: { reference: 90 }\n        }\n      ]\n    }\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/indicator/#a-single-angular-gauge-chart","title":"a-single-angular-gauge-chart","text":"<pre><code>var data = [\n  {\n    domain: { x: [0, 1], y: [0, 1] },\n    value: 450,\n    title: { text: \"Speed\" },\n    type: \"indicator\",\n    mode: \"gauge+number\",\n    delta: { reference: 400 },\n    gauge: { axis: { range: [null, 500] } }\n  }\n];\n\nvar layout = { width: 600, height: 400 };\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/indicator/#bullet-gauge","title":"bullet-gauge","text":"<p>The equivalent of above \"angular gauge\":</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+gauge+delta\",\n    gauge: { shape: \"bullet\" },\n    delta: { reference: 300 },\n    value: 220,\n    domain: { x: [0, 1], y: [0, 1] },\n    title: { text: \"Profit\" }\n  }\n];\n\nvar layout = { width: 600, height: 250 };\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/indicator/#showing-information-above-your-chart","title":"showing-information-above-your-chart","text":"<p>Another interesting feature is that indicator trace sits above the other traces (even the 3d ones). This way, it can be easily used as an overlay as demonstrated below:</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+delta\",\n    value: 492,\n    delta: { reference: 512, valueformat: \".0f\" },\n    domain: { y: [0, 1], x: [0.25, 0.75] },\n    title: { text: \"Users online\" }\n  },\n  {\n    y: [325, 324, 405, 400, 424, 404, 417, 432, 419, 394, 410, 426, 413, 419, 404, 408, 401, 377, 368, 361, 356, 359, 375, 397, 394, 418, 437, 450, 430, 442, 424, 443, 420, 418, 423, 423, 426, 440, 437, 436, 447, 460, 478, 472, 450, 456, 436, 418, 429, 412, 429, 442, 464, 447, 434, 457, 474, 480, 499, 497, 480, 502, 512, 492]\n  }\n];\n\nvar layout = { width: 600, height: 450, xaxis: { range: [0, 62] } };\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/indicator/#data-cards-/-big-numbers","title":"data-cards-/-big-numbers","text":"<p>Data card helps to display more contextual information about the data. Sometimes one number is all you want to see in a report, such as total sales, annual revenue, etc. This example shows how to visualize these big numbers:</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+delta\",\n    value: 400,\n    number: { prefix: \"$\" },\n    delta: { position: \"top\", reference: 320 },\n    domain: { x: [0, 1], y: [0, 1] }\n  }\n];\n\nvar layout = {\n  paper_bgcolor: \"lightgray\",\n  width: 600,\n  height: 200,\n  margin: { t: 0, b: 0, l: 0, r: 0 }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/indicator/","title":"","text":"<p>It's possible to display several numbers</p> <pre><code>var data = [\n  {\n    type: \"indicator\",\n    mode: \"number+delta\",\n    value: 200,\n    domain: { x: [0, 0.5], y: [0, 0.5] },\n    delta: { reference: 400, relative: true, position: \"top\" }\n  },\n  {\n    type: \"indicator\",\n    mode: \"number+delta\",\n    value: 350,\n    delta: { reference: 400, relative: true },\n    domain: { x: [0, 0.5], y: [0.5, 1] }\n  },\n  {\n    type: \"indicator\",\n    mode: \"number+delta\",\n    value: 450,\n    title: {\n      text:\n        \"Accounts&lt;br&gt;&lt;span style='font-size:0.8em;color:gray'&gt;Subtitle&lt;/span&gt;&lt;br&gt;&lt;span style='font-size:0.8em;color:gray'&gt;Subsubtitle&lt;/span&gt;\"\n    },\n    delta: { reference: 400, relative: true },\n    domain: { x: [0.6, 1], y: [0, 1] }\n  }\n];\n\nvar layout = {\n  width: 600,\n  height: 400,\n  margin: { t: 25, r: 25, l: 25, b: 25 }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/insets/","title":"insets","text":""},{"location":"examples/insets/#simple-inset-graph","title":"simple-inset-graph","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [4, 3, 2],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [20, 30, 40],\n  y: [30, 40, 50],\n  xaxis: 'x2',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  yaxis2: {\n    domain: [0.6, 0.95],\n    anchor: 'x2'\n  },\n  xaxis2: {\n    domain: [0.6, 0.95],\n    anchor: 'y2'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/lasso-selection/","title":"lasso-selection","text":""},{"location":"examples/lasso-selection/#lasso-selection","title":"lasso-selection","text":"<pre><code>var graphDiv = document.getElementById('myDiv');\nvar N = 1000;\nvar color1 = '#7b3294';\nvar color1Light = '#c2a5cf';\nvar colorX = '#ffa7b5';\nvar colorY = '#fdae61';\n\nfunction randomArray() {\n  var out = new Array(N);\n  for(var i = 0; i &lt; N; i++) {\n    out[i] = Math.random();\n  }\n  return out;\n}\nvar x = randomArray();\nvar y = randomArray();\n\nPlotly.newPlot(graphDiv, [{\n  type: 'scatter',\n  mode: 'markers',\n  x: x,\n  y: y,\n  xaxis: 'x',\n  yaxis: 'y',\n  name: 'random data',\n  marker: {color: color1, size: 10}\n}, {\n  type: 'histogram',\n  x: x,\n  xaxis: 'x2',\n  yaxis: 'y2',\n  name: 'x coord dist.',\n  marker: {color: colorX}\n}, {\n  type: 'histogram',\n  x: y,\n  xaxis: 'x3',\n  yaxis: 'y3',\n  name: 'y coord dist.',\n  marker: {color: colorY}\n}], {\n  title: {\n    text: 'Lasso around the scatter points to see sub-distributions'\n  },\n  dragmode: 'lasso',\n  xaxis: {\n    zeroline: false,\n  },\n  yaxis: {\n    domain: [0.55, 1],\n  },\n  xaxis2: {\n    domain: [0, 0.45],\n    anchor: 'y2',\n  },\n  yaxis2: {\n    domain: [0, 0.45],\n    anchor: 'x2'\n  },\n  xaxis3: {\n    domain: [0.55, 1],\n    anchor: 'y3'\n  },\n  yaxis3: {\n    domain: [0, 0.45],\n    anchor: 'x3'\n  }\n});\n\ngraphDiv.on('plotly_selected', function(eventData) {\n  var x = [];\n  var y = [];\n\n  var colors = [];\n  for(var i = 0; i &lt; N; i++) colors.push(color1Light);\n\n  console.log(eventData.points)\n\n  eventData.points.forEach(function(pt) {\n    x.push(pt.x);\n    y.push(pt.y);\n    colors[pt.pointNumber] = color1;\n  });\n\n  Plotly.restyle(graphDiv, {\n    x: [x, y],\n    xbins: {}\n  }, [1, 2]);\n\n  Plotly.restyle(graphDiv, 'marker.color', [colors], [0]);\n});</code></pre>"},{"location":"examples/layout-template/","title":"layout-template","text":""},{"location":"examples/layout-template/#the-layout-template-attribute","title":"the-layout-template-attribute","text":"<p>The <code>template</code> attribute of <code>layout</code> allows a Plotly chart to take it's style and formatting from a <code>template</code> object. <code>template</code>s can be generated using Plotly.makeTemplate or manually. <code>annotaions</code>, <code>updatemenus</code>, <code>images</code>, <code>shapes</code> and other container array objects in the Plotly <code>layout</code> are specially handled by the template machinery to provide more flexibility when using these container arrays in plots derived from these templates.</p> <p>For more information see https://plotly.com/javascript/reference/layout/#layout-template.</p>"},{"location":"examples/layout-template/#add-named-container-array-items","title":"add-named-container-array-items","text":"<p>Container array items in a template with a <code>name</code> attribute will be added to any plot using that template. We can use this feature to create a template that adds watermarks to our chart by including named image items in <code>images</code>. The example below also shows how to make one of these images invisible using the <code>templateitemname</code> attribute if you don't want it to display for this specific chart.</p> <pre><code>var baseLayout = {\n    title: {\n      text: 'Watermark Template'\n  },\n    // items with a `name` attribute in template.images will be added to any\n    // plot using this template\n    images: [{\n        name: 'watermark_1',\n        source: \"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/benzene.png\",\n        xref: \"paper\",\n        yref: \"paper\",\n        x: 0.40,\n        y: 0.9,\n        sizex: 0.7,\n        sizey: 0.7,\n        opacity: 0.1,\n        layer: \"below\"\n      },\n      {\n          name: 'watermark_2',\n          source: \"https://raw.githubusercontent.com/michaelbabyn/plot_data/master/naphthalene.png\",\n          xref: \"paper\",\n          yref: \"paper\",\n          x: .75,\n          y: 0.3,\n          sizex: 0.25,\n          sizey: 0.25,\n          sizing: \"stretch\",\n          opacity: 0.2,\n          layer: \"below\"\n        }],\n    showlegend: false\n};\n\nvar template = {data: {}, layout: baseLayout};\n\nvar data = [{\n    x: [0, 1, 2, 3, 4, 5],\n    y: [2, 4, 3, 0, 5, 6],\n}];\n\nvar layoutUsingTemplate = {\n  template: template,\n  images: [\n    {\n      // set the second watermark in the template to be invisible\n      templateitemname: 'watermark_2',\n      visible: false\n    }\n  ]\n};\n\nPlotly.newPlot(\"myDiv\", data, layoutUsingTemplate);</code></pre>"},{"location":"examples/layout-template/#matching-named-template-container-items","title":"matching-named-template-container-items","text":"<p>A container item in your new plot with the attribute <code>templateitemname</code> matching one of the named container items in the template will inherit attributes from item with the corresponding name. If an item in the plot using the template has the <code>templateitemname</code> attribute but there is no corresponding template container item by the same name, it will be marked as invisible in your new plot.</p> <pre><code>var x = [0, 1, 2, 3, 4, 5];\nvar y = [2, 4, 3, 0, 5, 6];\n\nvar baseData = [{\n    mode: 'lines',\n    error_y: {visible: true, width: 0},\n    line: {color: 'teal'}\n}];\n\nvar baseLayout = {\n    title: {\n      text: 'Template Title'\n    },\n    annotations: [{\n      text: 'First point',\n      name:'first',\n      yref: 'y', xref: 'x',\n      ay: 40, ax: 30,\n      font: {size: 16}\n    }],\n    showlegend: false\n};\n\n// use Plotly.makeTemplate to generate the template object\nvar template = Plotly.makeTemplate({data: baseData, layout: baseLayout});\n\nvar data = [{\n    x: x,\n    y: y,\n}];\n\nvar annotations = [\n\n  // plotly will look for an annotation with `name` matching `templateitemname`\n  // and use insert that annotation into the new plot.\n  {\n    templateitemname:'first',\n    x: x[0],\n    y: y[0],\n  },\n  {\n    templateitemname: 'fourth', //since there is no template item with this name,\n                                //this annotation will be set to invisible.\n    text: 'Fourth point',\n    x: x[3],\n    y: y[3],\n    showarrow: true,\n    yref: 'y', xref: 'x',\n  }\n ];\nvar layoutWithTemplate = {template: template, annotations: annotations};\n\nPlotly.newPlot(\"myDiv\", data, layoutWithTemplate);</code></pre>"},{"location":"examples/layout-template/#creating-default-item-values","title":"creating-default-item-values","text":"<p>Add an attribute called <code>annotationdefaults</code> to your template to set a default annotation object. Each item in the plot using the template without a <code>templateitemname</code> attribute will have the default applied to it. <code>annotationdefaults</code> can be manually added to a template or, if makeTemplate is used, the first un-named item in annotations will be used as the default.</p> <p>Note, this behaviour works for all container array objects. E.g for <code>images</code>, you would create <code>imagedefaults</code> in your layout containing the default image item.</p> <pre><code>var x = [0, 1, 2, 3, 4, 5];\nvar y = [2, 4, 3, 0, 5, 6];\n\nvar baseData = [{\n    mode: 'lines',\n    error_y: {visible: true, width: 0},\n    line: {color: 'teal'}\n}];\n\nvar baseLayout = {\n\n  // Plotly.makeTemplate will use the first annotation without a `name` attribute\n  // in the annotations array as the annotationdefaults for the template.\n  annotations: [\n  {\n      text: 'DEFAULT ANNOTATION',\n      x: 0.1,\n      y: 1.1,\n      yref: 'paper', xref: 'paper',\n      showarrow: false,\n      font: {color:'teal', size: 14}\n    }\n  ],\n    showlegend: false\n};\n\n// use Plotly.makeTemplate to generate the template object\nvar template = Plotly.makeTemplate({data: baseData, layout: baseLayout});\n\nvar data = [{\n    x: x,\n    y: y\n}];\n\nvar annotations = [\n  {}, // An empty annotation object will copy annotationdefaults\n  {\n    text: 'Third point',\n    x: x[2],\n    y: y[2],\n    showarrow: true,\n    yref: 'y', xref: 'x',\n    font: {size: 20} // since there is no font.color attribute for this object,\n                     // it will use the annotationdefaults' color\n  }\n];\nvar layoutWithTemplate = {template: template, annotations: annotations};\n\nPlotly.newPlot(\"myDiv\", data, layoutWithTemplate);</code></pre>"},{"location":"examples/legend/","title":"legend","text":""},{"location":"examples/legend/#hiding-the-legend","title":"hiding-the-legend","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {showlegend: false};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/legend/#legend-names","title":"legend-names","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4],\n  name: 'Blue Trace',\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4],\n  name: 'Orange Trace',\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/legend/#positioning-the-legend-inside-the-plot","title":"positioning-the-legend-inside-the-plot","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: true,\n  legend: {\n    x: 1,\n    xanchor: 'right',\n    y: 1\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/legend/#positioning-the-legend-outside-the-plot","title":"positioning-the-legend-outside-the-plot","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: true,\n  legend: {\n    x: 1,\n    y: 0.5\n  }\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/legend/#styling-and-coloring-the-legend","title":"styling-and-coloring-the-legend","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {legend: {\n    x: 0,\n    y: 1,\n    traceorder: 'normal',\n    font: {\n      family: 'sans-serif',\n      size: 12,\n      color: '#000'\n    },\n    bgcolor: '#E2E2E2',\n    bordercolor: '#FFFFFF',\n    borderwidth: 2\n  }};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/legend/#changing-the-orientation-of-legend","title":"changing-the-orientation-of-legend","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 3, 6, 4, 5, 2, 3, 5, 4],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 7, 8, 3, 6, 3, 3, 4],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {showlegend: true,\n    legend: {\"orientation\": \"h\"}};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/legend/#hiding-legend-entries","title":"hiding-legend-entries","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2],\n  y: [1, 2, 3],\n  name: 'First Trace',\n  showlegend: false,\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3],\n  y: [8, 4, 2, 0],\n  name: 'Second Trace',\n  showlegend: true,\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/legend/#grouped-legend","title":"grouped-legend","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [2, 1, 3],\n  legendgroup: 'group',\n  marker: {color: 'rgb(164, 194, 244)'},\n  mode: 'markers',\n  name: 'first legend group',\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [1, 2, 3],\n  y: [2, 2, 2],\n  legendgroup: 'group',\n  line: {color: 'rgb(164, 194, 244)'},\n  mode: 'lines',\n  name: 'first legend group - average',\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [1, 2, 3],\n  y: [4, 9, 2],\n  legendgroup: 'group2',\n  marker: {color: 'rgb(142, 124, 195)'},\n  mode: 'markers',\n  name: 'second legend group',\n  type: 'scatter'\n};\n\nvar trace4 = {\n  x: [1, 2, 3],\n  y: [5, 5, 5],\n  legendgroup: 'group2',\n  line: {color: 'rgb(142, 124, 195)'},\n  mode: 'lines',\n  name: 'second legend group - average',\n  type: 'scatter'\n};\n\ndata = [trace1, trace2, trace3, trace4];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/legend/#subplot-grouped-legend","title":"subplot-grouped-legend","text":"<pre><code>var trace1 = {\n  x: ['a'],\n  y: [2],\n  legendgroup: 'a',\n  marker: {\n    color: 'rgba(102,194,165,1)',\n    line: {color: 'transparent'}\n  },\n  name: 'a',\n  type: 'bar',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar trace2 = {\n  x: ['b'],\n  y: [3],\n  legendgroup: 'b',\n  marker: {\n    color: 'rgba(252,141,98,1)',\n    line: {color: 'transparent'}\n  },\n  name: 'b',\n  type: 'bar',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar trace3 = {\n  x: ['c'],\n  y: [2],\n  legendgroup: 'c',\n  marker: {\n    color: 'rgba(141,160,203,1)',\n    line: {color: 'transparent'}\n  },\n  name: 'c',\n  type: 'bar',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar trace4 = {\n  x: ['a'],\n  y: [4],\n  legendgroup: 'a',\n  marker: {\n    color: 'rgba(102,194,165,1)',\n    line: {color: 'transparent'}\n  },\n  name: 'a',\n  showlegend: false,\n  type: 'bar',\n  xaxis: 'x2',\n  yaxis: 'y2'\n};\n\nvar trace5 = {\n  x: ['b'],\n  y: [2],\n  legendgroup: 'b',\n  marker: {\n    color: 'rgba(252,141,98,1)',\n    line: {color: 'transparent'}\n  },\n  name: 'b',\n  showlegend: false,\n  type: 'bar',\n  xaxis: 'x2',\n  yaxis: 'y2'\n};\n\nvar trace6 = {\n  x: ['c'],\n  y: [4],\n  legendgroup: 'c',\n  marker: {\n    color: 'rgba(141,160,203,1)',\n    line: {color: 'transparent'}\n  },\n  name: 'c',\n  showlegend: false,\n  type: 'bar',\n  xaxis: 'x2',\n  yaxis: 'y2'\n};\n\nvar data = [trace1, trace2, trace3, trace4, trace5, trace6];\n\nvar layout = {\n  hovermode: 'closest',\n  margin: {\n    r: 10,\n    t: 25,\n    b: 40,\n    l: 60\n  },\n  showlegend: true,\n  xaxis: {\n    anchor: 'y',\n    categoryorder: 'array',\n    domain: [0, 1],\n    type: 'category',\n     showgrid: false,\n     showticklabels: false\n  },\n  xaxis2: {\n    anchor: 'y2',\n    categoryorder: 'array',\n    domain: [0, 1],\n    type: 'category',\n     showgrid: false\n  },\n  yaxis: {\n    anchor: 'x',\n    domain: [0.52, 1],\n     showgrid: false\n  },\n  yaxis2: {\n    anchor: 'x2',\n    domain: [0, 0.48],\n     showgrid: false\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-and-scatter/","title":"line-and-scatter","text":""},{"location":"examples/line-and-scatter/#line-and-scatter-plot","title":"line-and-scatter-plot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  mode: 'markers',\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [2, 3, 4, 5],\n  y: [16, 5, 11, 9],\n  mode: 'lines',\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [12, 9, 15, 12],\n  mode: 'lines+markers',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/line-and-scatter/#data-labels-hover","title":"data-labels-hover","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4, 5],\n  y: [1, 6, 3, 6, 1],\n  mode: 'markers',\n  type: 'scatter',\n  name: 'Team A',\n  text: ['A-1', 'A-2', 'A-3', 'A-4', 'A-5'],\n  marker: { size: 12 }\n};\n\nvar trace2 = {\n  x: [1.5, 2.5, 3.5, 4.5, 5.5],\n  y: [4, 1, 7, 1, 4],\n  mode: 'markers',\n  type: 'scatter',\n  name: 'Team B',\n  text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],\n  marker: { size: 12 }\n};\n\nvar data = [ trace1, trace2 ];\n\nvar layout = {\n  xaxis: {\n    range: [ 0.75, 5.25 ]\n  },\n  yaxis: {\n    range: [0, 8]\n  },\n  title: {text: 'Data Labels Hover'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-and-scatter/#data-labels-on-the-plot","title":"data-labels-on-the-plot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4, 5],\n  y: [1, 6, 3, 6, 1],\n  mode: 'markers+text',\n  type: 'scatter',\n  name: 'Team A',\n  text: ['A-1', 'A-2', 'A-3', 'A-4', 'A-5'],\n  textposition: 'top center',\n  textfont: {\n    family:  'Raleway, sans-serif'\n  },\n  marker: { size: 12 }\n};\n\nvar trace2 = {\n  x: [1.5, 2.5, 3.5, 4.5, 5.5],\n  y: [4, 1, 7, 1, 4],\n  mode: 'markers+text',\n  type: 'scatter',\n  name: 'Team B',\n  text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],\n  textfont : {\n    family:'Times New Roman'\n  },\n  textposition: 'bottom center',\n  marker: { size: 12 }\n};\n\nvar data = [ trace1, trace2 ];\n\nvar layout = {\n  xaxis: {\n    range: [ 0.75, 5.25 ]\n  },\n  yaxis: {\n    range: [0, 8]\n  },\n  legend: {\n    y: 0.5,\n    yref: 'paper',\n    font: {\n      family: 'Arial, sans-serif',\n      size: 20,\n      color: 'grey',\n    }\n  },\n  title: {text: 'Data Labels on the Plot'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-and-scatter/#scatter-plot-with-a-color-dimension","title":"scatter-plot-with-a-color-dimension","text":"<pre><code>var trace1 = {\n  y: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],\n  mode: 'markers',\n  marker: {\n    size: 40,\n    color: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\n  }\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'Scatter Plot with a Color Dimension'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-and-scatter/#grouped-scatter-plot","title":"grouped-scatter-plot","text":"<pre><code>var trace1 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [24, 10, 9],\n  name: 'Gold',\n  type: 'scatter',\n  mode: 'markers'\n};\n\nvar trace2 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [13, 15, 12],\n  name: 'Silver',\n  type: 'scatter',\n  mode: 'markers'\n};\n\nvar trace3 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [11, 8, 12],\n  name: 'Bronze',\n  type: 'scatter',\n  mode: 'markers'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  scattermode: 'group',\n  title: {\n    text: 'Grouped by Country'\n  },\n  xaxis: {\n    title: {\n      text: 'Country'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'Medals'\n    }\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-and-scatter/#grouped-scatter-plot-with-custom-scatter-gap","title":"grouped-scatter-plot-with-custom-scatter-gap","text":"<pre><code>var trace1 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [24, 10, 9],\n  name: 'Gold',\n  type: 'scatter',\n  mode: 'markers'\n};\n\nvar trace2 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [13, 15, 12],\n  name: 'Silver',\n  type: 'scatter',\n  mode: 'markers'\n};\n\nvar trace3 = {\n  x: ['South Korea', 'China', 'Canada'],\n  y: [11, 8, 12],\n  name: 'Bronze',\n  type: 'scatter',\n  mode: 'markers'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  scattermode: 'group',\n  title: {\n    text: 'Grouped by Country'\n  },\n  xaxis: {\n    title: {\n      text: 'Country'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'Medals'\n    }\n  },\n  scattergap: 0.7\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/","title":"line-charts","text":""},{"location":"examples/line-charts/#basic-line-plot","title":"basic-line-plot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [16, 5, 11, 9],\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/line-charts/#line-and-scatter-plot","title":"line-and-scatter-plot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  mode: 'markers'\n};\n\nvar trace2 = {\n  x: [2, 3, 4, 5],\n  y: [16, 5, 11, 9],\n  mode: 'lines'\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [12, 9, 15, 12],\n  mode: 'lines+markers'\n};\n\nvar data = [ trace1, trace2, trace3 ];\n\nvar layout = {\n  title: {text: 'Line and Scatter Plot'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#adding-names-to-line-and-scatter-plot","title":"adding-names-to-line-and-scatter-plot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  mode: 'markers',\n  name: 'Scatter'\n};\n\nvar trace2 = {\n  x: [2, 3, 4, 5],\n  y: [16, 5, 11, 9],\n  mode: 'lines',\n  name: 'Lines'\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [12, 9, 15, 12],\n  mode: 'lines+markers',\n  name: 'Scatter + Lines'\n};\n\nvar data = [ trace1, trace2, trace3 ];\n\nvar layout = {\n  title: {text: 'Adding Names to Line and Scatter Plot'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#line-and-scatter-styling","title":"line-and-scatter-styling","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  mode: 'markers',\n  marker: {\n    color: 'rgb(219, 64, 82)',\n    size: 12\n  }\n};\n\nvar trace2 = {\n  x: [2, 3, 4, 5],\n  y: [16, 5, 11, 9],\n  mode: 'lines',\n  line: {\n    color: 'rgb(55, 128, 191)',\n    width: 3\n  }\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [12, 9, 15, 12],\n  mode: 'lines+markers',\n  marker: {\n    color: 'rgb(128, 0, 128)',\n    size: 8\n  },\n  line: {\n    color: 'rgb(128, 0, 128)',\n    width: 1\n  }\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  title: {\n    text: 'Line and Scatter Styling'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#colored-and-styled-scatter-plot","title":"colored-and-styled-scatter-plot","text":"<pre><code>var trace1 = {\n  x: [52698, 43117],\n  y: [53, 31],\n  mode: 'markers',\n  name: 'North America',\n  text: ['United States', 'Canada'],\n  marker: {\n    color: 'rgb(164, 194, 244)',\n    size: 12,\n    line: {\n      color: 'white',\n      width: 0.5\n    }\n  },\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007],\n  y: [33, 20, 13, 19, 27, 19, 49, 44, 38],\n  mode: 'markers',\n  name: 'Europe',\n  text: ['Germany', 'Britain', 'France', 'Spain', 'Italy', 'Czech Rep.', 'Greece', 'Poland'],\n  marker: {\n    color: 'rgb(255, 217, 102)',\n    size: 12\n  },\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899],\n  y: [23, 42, 54, 89, 14, 99, 93, 70],\n  mode: 'markers',\n  name: 'Asia/Pacific',\n  text: ['Australia', 'Japan', 'South Korea', 'Malaysia', 'China', 'Indonesia', 'Philippines', 'India'],\n  marker: {\n    color: 'rgb(234, 153, 153)',\n    size: 12\n  },\n  type: 'scatter'\n};\n\nvar trace4 = {\n  x: [19097, 18601, 15595, 13546, 12026, 7434, 5419],\n  y: [43, 47, 56, 80, 86, 93, 80],\n  mode: 'markers',\n  name: 'Latin America',\n  text: ['Chile', 'Argentina', 'Mexico', 'Venezuela', 'Venezuela', 'El Salvador', 'Bolivia'],\n  marker: {\n    color: 'rgb(142, 124, 195)',\n    size: 12\n  },\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {\n    text: 'Quarter 1 Growth'\n  },\n  xaxis: {\n    title: {\n      text: 'GDP per Capita'\n    },\n    showgrid: false,\n    zeroline: false\n  },\n  yaxis: {\n    title: {\n      text: 'Percent'\n    },\n    showline: false\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#styling-line-plot","title":"styling-line-plot","text":"<pre><code>trace1 = {\n  type: 'scatter',\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  mode: 'lines',\n  name: 'Red',\n  line: {\n    color: 'rgb(219, 64, 82)',\n    width: 3\n  }\n};\n\ntrace2 = {\n  type: 'scatter',\n  x: [1, 2, 3, 4],\n  y: [12, 9, 15, 12],\n  mode: 'lines',\n  name: 'Blue',\n  line: {\n    color: 'rgb(55, 128, 191)',\n    width: 1\n  }\n};\n\nvar layout = {\n  width: 500,\n  height: 500\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#line-shape-options-for-interpolation","title":"line-shape-options-for-interpolation","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4, 5],\n  y: [1, 3, 2, 3, 1],\n  mode: 'lines+markers',\n  name: 'linear',\n  line: {shape: 'linear'},\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4, 5],\n  y: [6, 8, 7, 8, 6],\n  mode: 'lines+markers',\n  name: 'spline',\n  text: ['tweak line smoothness&lt;br&gt;with \"smoothing\" in line object', 'tweak line smoothness&lt;br&gt;with \"smoothing\" in line object', 'tweak line smoothness&lt;br&gt;with \"smoothing\" in line object', 'tweak line smoothness&lt;br&gt;with \"smoothing\" in line object', 'tweak line smoothness&lt;br&gt;with \"smoothing\" in line object', 'tweak line smoothness&lt;br&gt;with \"smoothing\" in line object'],\n  line: {shape: 'spline'},\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4, 5],\n  y: [11, 13, 12, 13, 11],\n  mode: 'lines+markers',\n  name: 'vhv',\n  line: {shape: 'vhv'},\n  type: 'scatter'\n};\n\nvar trace4 = {\n  x: [1, 2, 3, 4, 5],\n  y: [16, 18, 17, 18, 16],\n  mode: 'lines+markers',\n  name: 'hvh',\n  line: {shape: 'hvh'},\n  type: 'scatter'\n};\n\nvar trace5 = {\n  x: [1, 2, 3, 4, 5],\n  y: [21, 23, 22, 23, 21],\n  mode: 'lines+markers',\n  name: 'vh',\n  line: {shape: 'vh'},\n  type: 'scatter'\n};\n\nvar trace6 = {\n  x: [1, 2, 3, 4, 5],\n  y: [26, 28, 27, 28, 26],\n  mode: 'lines+markers',\n  name: 'hv',\n  line: {shape: 'hv'},\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3, trace4, trace5, trace6];\n\nvar layout = {\n  legend: {\n    y: 0.5,\n    traceorder: 'reversed',\n    font: {size: 16},\n    yref: 'paper'\n  }};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#graph-and-axes-titles","title":"graph-and-axes-titles","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  mode: 'markers',\n  name: 'Scatter'\n};\n\nvar trace2 = {\n  x: [2, 3, 4, 5],\n  y: [16, 5, 11, 9],\n  mode: 'lines',\n  name: 'Lines'\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4],\n  y: [12, 9, 15, 12],\n  mode: 'lines+markers',\n  name: 'Scatter and Lines'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  title: {\n    text: 'Title of the Graph'\n  },\n  xaxis: {\n    title: {\n      text: 'x-axis title'\n    }\n  },\n  yaxis: {\n    title: {\n      text: 'y-axis title'\n    }\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#line-dash","title":"line-dash","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4, 5],\n  y: [1, 3, 2, 3, 1],\n  mode: 'lines',\n  name: 'Solid',\n  line: {\n    dash: 'solid',\n    width: 4\n  }\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4, 5],\n  y: [6, 8, 7, 8, 6],\n  mode: 'lines',\n  name: 'dashdot',\n  line: {\n    dash: 'dashdot',\n    width: 4\n  }\n};\n\nvar trace3 = {\n  x: [1, 2, 3, 4, 5],\n  y: [11, 13, 12, 13, 11],\n  mode: 'lines',\n  name: 'Solid',\n  line: {\n    dash: 'solid',\n    width: 4\n  }\n};\n\nvar trace4 = {\n  x: [1, 2, 3, 4, 5],\n  y: [16, 18, 17, 18, 16],\n  mode: 'lines',\n  name: 'dot',\n  line: {\n    dash: 'dot',\n    width: 4\n  }\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {\n    text: 'Line Dash'\n  },\n  xaxis: {\n    range: [0.75, 5.25],\n    autorange: false\n  },\n  yaxis: {\n    range: [0, 18.5],\n    autorange: false\n  },\n  legend: {\n    y: 0.5,\n    traceorder: 'reversed',\n    font: {\n      size: 16\n    }\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#connect-gaps-between-data","title":"connect-gaps-between-data","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8],\n  y: [10, 15, null, 17, 14, 12, 10, null, 15],\n  mode: 'lines+markers',\n  connectgaps: true\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4, 5, 6, 7, 8],\n  y: [16, null, 13, 10, 8, null, 11, 12],\n  mode: 'lines',\n  connectgaps: true\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {\n    text: 'Connect the Gaps Between Data'\n  },\n  showlegend: false\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/line-charts/#labelling-lines-with-annotations","title":"labelling-lines-with-annotations","text":"<pre><code>var xData = [\n  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],\n  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013]\n];\n\nvar yData = [\n  [74, 82, 80, 74, 73, 72, 74, 70, 70, 66, 66, 69],\n  [45, 42, 50, 46, 36, 36, 34, 35, 32, 31, 31, 28],\n  [13, 14, 20, 24, 20, 24, 24, 40, 35, 41, 43, 50],\n  [18, 21, 18, 21, 16, 14, 13, 18, 17, 16, 19, 23]\n];\n\nvar colors = ['rgba(67,67,67,1)', 'rgba(115,115,115,1)', 'rgba(49,130,189, 1)',\n  'rgba(189,189,189,1)'\n];\n\nvar lineSize = [2, 2, 4, 2];\n\nvar labels = ['Television', 'Newspaper', 'Internet', 'Radio'];\n\nvar data = [];\n\nfor ( var i = 0 ; i &lt; xData.length ; i++ ) {\n  var result = {\n    x: xData[i],\n    y: yData[i],\n    type: 'scatter',\n    mode: 'lines',\n    line: {\n      color: colors[i],\n      width: lineSize[i]\n    }\n  };\n  var result2 = {\n    x: [xData[i][0], xData[i][11]],\n    y: [yData[i][0], yData[i][11]],\n    type: 'scatter',\n    mode: 'markers',\n    marker: {\n      color: colors[i],\n      size: 12\n    }\n  };\n  data.push(result, result2);\n}\n\nvar layout = {\n  showlegend: false,\n  height: 600,\n  width: 600,\n  xaxis: {\n    showline: true,\n    showgrid: false,\n    showticklabels: true,\n    linecolor: 'rgb(204,204,204)',\n    linewidth: 2,\n    tickmode: 'linear',\n    ticks: 'outside',\n    tickcolor: 'rgb(204,204,204)',\n    tickwidth: 2,\n    ticklen: 5,\n    tickfont: {\n      family: 'Arial',\n      size: 12,\n      color: 'rgb(82, 82, 82)'\n    }\n  },\n  yaxis: {\n    showgrid: false,\n    zeroline: false,\n    showline: false,\n    showticklabels: false\n  },\n  autosize: false,\n  margin: {\n    autoexpand: false,\n    l: 100,\n    r: 20,\n    t: 100\n  },\n  annotations: [\n    {\n      xref: 'paper',\n      yref: 'paper',\n      x: 0.0,\n      y: 1.05,\n      xanchor: 'left',\n      yanchor: 'bottom',\n      text: 'Main Source for News',\n      font:{\n        family: 'Arial',\n        size: 30,\n        color: 'rgb(37,37,37)'\n      },\n      showarrow: false\n    },\n    {\n      xref: 'paper',\n      yref: 'paper',\n      x: 0.5,\n      y: -0.1,\n      xanchor: 'center',\n      yanchor: 'top',\n      text: 'Source: Pew Research Center &amp; Storytelling with data',\n      showarrow: false,\n      font: {\n        family: 'Arial',\n        size: 12,\n        color: 'rgb(150,150,150)'\n      }\n    }\n  ]\n};\n\nfor( var i = 0 ; i &lt; xData.length ; i++ ) {\n  var result = {\n    xref: 'paper',\n    x: 0.05,\n    y: yData[i][0],\n    xanchor: 'right',\n    yanchor: 'middle',\n    text: labels[i] + ' ' + yData[i][0] +'%',\n    showarrow: false,\n    font: {\n      family: 'Arial',\n      size: 16,\n      color: 'black'\n    }\n  };\n  var result2 = {\n    xref: 'paper',\n    x: 0.95,\n    y: yData[i][11],\n    xanchor: 'left',\n    yanchor: 'middle',\n    text: yData[i][11] +'%',\n    font: {\n      family: 'Arial',\n      size: 16,\n      color: 'black'\n    },\n    showarrow: false\n  };\n\n  layout.annotations.push(result, result2);\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/lines-on-maps/","title":"lines-on-maps","text":""},{"location":"examples/lines-on-maps/#lines-on-an-orthographic-map","title":"lines-on-an-orthographic-map","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/globe_contours.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    var data = [];\n    var scl =['rgb(213,62,79)','rgb(244,109,67)','rgb(253,174,97)','rgb(254,224,139)','rgb(255,255,191)','rgb(230,245,152)','rgb(171,221,164)','rgb(102,194,165)','rgb(50,136,189)'];\n    var allLats = [];\n    var allLons = [];\n\n    for ( var i = 0 ; i &lt; scl.length; i++){\n        var latHead = 'lat-'+i;\n        var lonHead = 'lon-'+i;\n        var lat = unpack(rows, latHead);\n        var lon = unpack(rows, lonHead);\n        allLats.push(lat);\n        allLons.push(lon);\n    }\n\n    for ( var i = 0 ; i &lt; scl.length; i++) {\n        var current = {\n            type:'scattergeo',\n            lon: allLons[i],\n            lat: allLats[i],\n            mode: 'lines',\n            line: {\n                width: 2,\n                color: scl[i]\n            }\n        }\n        data.push(current);\n    };\n\n\n    var layout = {\n        geo: {\n            projection: {\n                type: 'orthographic',\n                rotation: {\n                    lon: -100,\n                    lat: 40\n                },\n            },\n            showocean: true,\n            oceancolor: 'rgb(0, 255, 255)',\n            showland: true,\n            landcolor: 'rgb(230, 145, 56)',\n            showlakes: true,\n            lakecolor: 'rgb(0, 255, 255)',\n            showcountries: true,\n            lonaxis: {\n                showgrid: true,\n                gridcolor: 'rgb(102, 102, 102)'\n            },\n            lataxis: {\n                showgrid: true,\n                gridcolor: 'rgb(102, 102, 102)'\n            }\n        }\n    };\n\n    Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n});</code></pre>"},{"location":"examples/lines-on-maps/#london-to-nyc-great-circle","title":"london-to-nyc-great-circle","text":"<pre><code>var data = [{\n    type: 'scattergeo',\n    lat: [ 40.7127, 51.5072 ],\n    lon: [ -74.0059, 0.1275 ],\n    mode: 'lines',\n    line:{\n        width: 2,\n        color: 'blue'\n    }\n  }];\n\nvar layout = {\n  title: {text: 'London to NYC Great Circle'},\n  showlegend: false,\n  geo: {\n      resolution: 50,\n      showland: true,\n      showlakes: true,\n      landcolor: 'rgb(204, 204, 204)',\n      countrycolor: 'rgb(204, 204, 204)',\n      lakecolor: 'rgb(255, 255, 255)',\n      projection: {\n        type: 'equirectangular'\n      },\n      coastlinewidth: 2,\n      lataxis: {\n        range: [ 20, 60 ],\n        showgrid: true,\n        tickmode: 'linear',\n        dtick: 10\n      },\n      lonaxis:{\n        range: [-100, 20],\n        showgrid: true,\n        tickmode: 'linear',\n        dtick: 20\n      }\n    }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/lines-on-maps/#us-flight-paths-map","title":"us-flight-paths-map","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/c34aaa0b1b3cddad335173cb7bc0181897201ee6/2011_february_aa_flight_paths.csv', function(err, rows){\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });}\n\n    function getMaxOfArray(numArray) {\n        return Math.max.apply(null, numArray);\n    }\n\n    var data = [];\n    var count = unpack(rows, 'cnt');\n    var startLongitude = unpack(rows, 'start_lon');\n    var endLongitude = unpack(rows, 'end_lon');\n    var startLat = unpack(rows, 'start_lat');\n    var endLat = unpack(rows, 'end_lat');\n\n    for ( var i = 0 ; i &lt; count.length; i++ ) {\n        var opacityValue = count[i]/getMaxOfArray(count);\n\n        var result = {\n            type: 'scattergeo',\n            locationmode: 'USA-states',\n            lon: [ startLongitude[i] , endLongitude[i] ],\n            lat: [ startLat[i] , endLat[i] ],\n            mode: 'lines',\n            line: {\n                width: 1,\n                color: 'red'\n            },\n            opacity: opacityValue\n        };\n\n        data.push(result);\n    };\n\n    var layout = {\n        title: {text: 'Feb. 2011 American Airline flight paths'},\n        showlegend: false,\n        geo:{\n            scope: 'north america',\n            projection: {\n                type: 'azimuthal equal area'\n            },\n            showland: true,\n            landcolor: 'rgb(243,243,243)',\n            countrycolor: 'rgb(204,204,204)'\n        }\n    };\n\n    Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n\n});</code></pre>"},{"location":"examples/log-plot/","title":"log-plot","text":""},{"location":"examples/log-plot/#logarithmic-axes","title":"logarithmic-axes","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  xaxis: {\n    type: 'log',\n    autorange: true\n  },\n  yaxis: {\n    type: 'log',\n    autorange: true\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/map-animations/","title":"map-animations","text":""},{"location":"examples/map-animations/#map-animations","title":"map-animations","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/gapminder_with_codes.csv\", function(err, rows){\n\n  function filter_and_unpack(rows, key, year) {\n  return rows.filter(row =&gt; row['year'] == year).map(row =&gt; row[key])\n  }\n\n  var frames = []\n  var slider_steps = []\n\n  var n = 11;\n  var num = 1952;\n  for (var i = 0; i &lt;= n; i++) {\n    var z = filter_and_unpack(rows, 'lifeExp', num)\n    var locations = filter_and_unpack(rows, 'iso_alpha', num)\n    frames[i] = {data: [{z: z, locations: locations, text: locations}], name: num}\n    slider_steps.push ({\n        label: num.toString(),\n        method: \"animate\",\n        args: [[num], {\n            mode: \"immediate\",\n            transition: {duration: 300},\n            frame: {duration: 300}\n          }\n        ]\n      })\n    num = num + 5\n  }\n\nvar data = [{\n      type: 'choropleth',\n      locationmode: 'world',\n      locations: frames[0].data[0].locations,\n      z: frames[0].data[0].z,\n      text: frames[0].data[0].locations,\n      zauto: false,\n      zmin: 30,\n      zmax: 90\n\n}];\nvar layout = {\n    title: {\n      text: 'World Life Expectency&lt;br&gt;1952 - 2007'\n    },\n    geo:{\n       scope: 'world',\n       countrycolor: 'rgb(255, 255, 255)',\n       showland: true,\n       landcolor: 'rgb(217, 217, 217)',\n       showlakes: true,\n       lakecolor: 'rgb(255, 255, 255)',\n       subunitcolor: 'rgb(255, 255, 255)',\n       lonaxis: {},\n       lataxis: {}\n    },\n    updatemenus: [{\n      x: 0.1,\n      y: 0,\n      yanchor: \"top\",\n      xanchor: \"right\",\n      showactive: false,\n      direction: \"left\",\n      type: \"buttons\",\n      pad: {\"t\": 87, \"r\": 10},\n      buttons: [{\n        method: \"animate\",\n        args: [null, {\n          fromcurrent: true,\n          transition: {\n            duration: 200,\n          },\n          frame: {\n            duration: 500\n          }\n        }],\n        label: \"Play\"\n      }, {\n        method: \"animate\",\n        args: [\n          [null],\n          {\n            mode: \"immediate\",\n            transition: {\n              duration: 0\n            },\n            frame: {\n              duration: 0\n            }\n          }\n        ],\n        label: \"Pause\"\n      }]\n    }],\n    sliders: [{\n      active: 0,\n      steps: slider_steps,\n      x: 0.1,\n      len: 0.9,\n      xanchor: \"left\",\n      y: 0,\n      yanchor: \"top\",\n      pad: {t: 50, b: 10},\n      currentvalue: {\n        visible: true,\n        prefix: \"Year:\",\n        xanchor: \"right\",\n        font: {\n          size: 20,\n          color: \"#666\"\n        }\n      },\n      transition: {\n        duration: 300,\n        easing: \"cubic-in-out\"\n      }\n    }]\n};\n\nPlotly.newPlot('myDiv', data, layout).then(function() {\n    Plotly.addFrames('myDiv', frames);\n  });\n})</code></pre>"},{"location":"examples/mixed-subplots/","title":"mixed-subplots","text":""},{"location":"examples/mixed-subplots/#mixed-subplots","title":"mixed-subplots","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\nvar trace1 = {\n  x: unpack(rows, 'Status'),\n  y: unpack(rows, 'Type'),\n  z: unpack(rows, 'Elev'),\n  marker: {\n    size: 2,\n    color: unpack(rows, 'Elev'),\n    colorscale: 'Reds',\n    line: {color: 'transparent'}\n  },\n  mode: 'markers',\n  type: 'scatter3d',\n  text: unpack(rows, 'Country'),\n  hoverinfo: 'x+y+z+text',\n  showlegend: false\n};\n\nvar x = unpack(rows, 'Elev');\n\nvar trace2 = {\n    x: unpack(rows, 'Elev'),\n    type: 'histogram',\n    hoverinfo: 'x+y',\n    showlegend: false,\n    xaxis: 'x2',\n    yaxis: 'y2',\n     marker: {\n         color: 'red'\n    }};\n\nvar trace3 = {\n    geo: 'geo3',\n    type:'scattergeo',\n    locationmode: 'world',\n    lon: unpack(rows, 'Longitude'),\n    lat: unpack(rows, 'Latitude'),\n    hoverinfo:  'text',\n    text:  unpack(rows, 'Elev'),\n    mode: 'markers',\n    showlegend: false,\n    marker: {\n      size: 4,\n      color: unpack(rows, 'Elev'),\n      colorscale: 'Reds',\n      opacity: 0.8,\n      symbol: 'circle',\n      line: {\n        width: 1\n      }\n    }\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n      paper_bgcolor: 'black',\n      plot_bgcolor: 'black',\n      title: {text: 'Volcano Database: Elevation'},\n      font: {color: 'white'},\n      colorbar: true,\n      annotations: [{\n         x: 0,\n         y: 0,\n         xref: 'paper',\n         yref: 'paper',\n         text: 'Source: NOAA',\n         showarrow: false\n      }],\n      geo3: {\n        domain: {\n      x: [0, 0.45],\n      y: [0.02, 0.98]\n          },\n        scope: 'world',\n        projection: {\n          type: 'orthographic'\n        },\n        showland: true,\n        showocean: true,\n        showlakes: true,\n        landcolor: 'rgb(250,250,250)',\n        lakecolor: 'rgb(127,205,255)',\n        oceancolor: 'rgb(6,66,115)',\n        subunitcolor: 'rgb(217,217,217)',\n        countrycolor: 'rgb(217,217,217)',\n        countrywidth: 0.5,\n        subunitwidth: 0.5,\n        bgcolor: 'black'\n      },\n    scene: {domain: {\n      x: [0.55, 1],\n      y: [0, 0.6]\n    },\n    xaxis: {\n      title: {\n          text: 'Status'\n      },\n      showticklabels: false,\n      showgrid: true,\n      gridcolor: 'white'\n    },\n    yaxis: {\n        title: {\n            text: 'Type'\n        },\n        showticklabels: false,\n        showgrid: true,\n        gridcolor: 'white'\n    },\n    zaxis: {\n        title: {\n            text: 'Elev'\n        },\n        showgrid: true,\n        gridcolor: 'white'\n    }\n             },\n    yaxis2: {\n        anchor: 'x2',\n      domain: [0.7, 1],\n      showgrid: false\n    },\n    xaxis2: {\n      tickangle: 45,\n      anchor: 'y2',\n      ticksuffix: 'm',\n      domain: [0.6, 1]},\n};\n\nPlotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n\n});</code></pre>"},{"location":"examples/multiple-axes/","title":"multiple-axes","text":""},{"location":"examples/multiple-axes/#two-y-axes","title":"two-y-axes","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [40, 50, 60],\n  name: 'yaxis data',\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [2, 3, 4],\n  y: [4, 5, 6],\n  name: 'yaxis2 data',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  title: {text: 'Double Y Axis Example'},\n  yaxis: {\n    title: {\n      text: 'yaxis title'\n    }\n  },\n  yaxis2: {\n    title: {\n      text: 'yaxis2 title',\n      font: {color: 'rgb(148, 103, 189)'}\n    },\n    tickfont: {color: 'rgb(148, 103, 189)'},\n    overlaying: 'y',\n    side: 'right'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/multiple-axes/#multiple-y-axes","title":"multiple-y-axes","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [4, 5, 6],\n  name: 'yaxis1 data',\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [2, 3, 4],\n  y: [40, 50, 60],\n  name: 'yaxis2 data',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [4, 5, 6],\n  y: [40000, 50000, 60000],\n  name: 'yaxis3 data',\n  yaxis: 'y3',\n  type: 'scatter'\n};\n\nvar trace4 = {\n  x: [5, 6, 7],\n  y: [400000, 500000, 600000],\n  name: 'yaxis4 data',\n  yaxis: 'y4',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {\n    text: 'multiple y-axes example',\n    font: {color: '#1f77b4'}\n  },\n  width: 800,\n  xaxis: {domain: [0.3, 0.7]},\n  yaxis: {\n    title: {\n      text: 'yaxis title',\n      font: {color: '#1f77b4'}\n    },\n    tickfont: {color: '#1f77b4'}\n  },\n  yaxis2: {\n    title: {\n      text: 'yaxis2 title',\n      font: {color: '#ff7f0e'}\n    },\n    tickfont: {color: '#ff7f0e'},\n    anchor: 'free',\n    overlaying: 'y',\n    side: 'left',\n    position: 0.15\n  },\n  yaxis3: {\n    title: {\n      text: 'yaxis4 title',\n      font: {color: '#d62728'}\n    },\n    tickfont: {color: '#d62728'},\n    anchor: 'x',\n    overlaying: 'y',\n    side: 'right'\n  },\n  yaxis4: {\n    title: {\n      text: 'yaxis5 title',\n      font: {color: '#9467bd'}\n    },\n    tickfont: {color: '#9467bd'},\n    anchor: 'free',\n    overlaying: 'y',\n    side: 'right',\n    position: 0.85\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/ohlc-charts/","title":"ohlc-charts","text":""},{"location":"examples/ohlc-charts/#simple-ohlc-chart","title":"simple-ohlc-chart","text":"<pre><code>var trace1 = {\n\n  x: ['2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10'],\n\n  close: [120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995],\n\n  decreasing: {line: {color: '#7F7F7F'}},\n\n  high: [120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002],\n\n  increasing: {line: {color: '#17BECF'}},\n\n  line: {color: 'rgba(31,119,180,1)'},\n\n  low: [118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003],\n  open: [118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007],\n\n  type: 'ohlc',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  dragmode: 'zoom',\n  margin: {\n    r: 10,\n    t: 25,\n    b: 40,\n    l: 60\n  },\n  showlegend: false,\n  xaxis: {\n    autorange: true,\n    rangeslider: {range: ['2017-01-17 12:00', '2017-02-10 12:00']},\n    title: {\n      text: 'Date'\n    },\n    type: 'date'\n  },\n  yaxis: {\n    autorange: true,\n    type: 'linear'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/ohlc-charts/#ohlc-chart-without-rangeslider","title":"ohlc-chart-without-rangeslider","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar trace = {\n  x: unpack(rows, 'Date'),\n  close: unpack(rows, 'AAPL.Close'),\n  high: unpack(rows, 'AAPL.High'),\n  low: unpack(rows, 'AAPL.Low'),\n  open: unpack(rows, 'AAPL.Open'),\n\n  // cutomise colors\n  increasing: {line: {color: 'black'}},\n  decreasing: {line: {color: 'red'}},\n\n  type: 'ohlc',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace];\n\nvar layout = {\n  dragmode: 'zoom',\n  showlegend: false,\n  xaxis: {\n    rangeslider: {\n         visible: false\n     }\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/ohlc-charts/#customizing-the-figure-with-shapes-and-annotations","title":"customizing-the-figure-with-shapes-and-annotations","text":"<pre><code>var trace1 = {\n\n  x: ['2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10'],\n\n  close: [120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995],\n\n  decreasing: {line: {color: '#7F7F7F'}},\n\n  high: [120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002],\n\n  increasing: {line: {color: '#17BECF'}},\n\n  line: {color: 'rgba(31,119,180,1)'},\n\n  low: [118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002,\n  127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003],\n\n  open: [118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007],\n\n  type: 'ohlc',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  dragmode: 'zoom',\n  margin: {\n    r: 10,\n    t: 25,\n    b: 40,\n    l: 60\n  },\n  showlegend: false,\n  xaxis: {\n    autorange: true,\n    rangeslider: {range: ['2017-01-17 12:00', '2017-02-10 12:00']},\n    title: {\n      text: 'Date'\n    },\n    type: 'date'\n  },\n  yaxis: {\n    autorange: true,\n    type: 'linear'\n  },\n\n  annotations: [\n    {\n      x: '2017-01-31',\n      y: 0.9,\n      xref: 'x',\n      yref: 'paper',\n      text: 'largest movement',\n      font: {color: 'magenta'},\n      showarrow: true,\n      xanchor: 'right',\n      ax: -20,\n      ay: 0\n    }\n  ],\n\n  shapes: [\n      {\n          type: 'rect',\n          xref: 'x',\n          yref: 'paper',\n          x0: '2017-01-31',\n          y0: 0,\n          x1: '2017-02-01',\n          y1: 1,\n          fillcolor: '#d3d3d3',\n          opacity: 0.2,\n          line: {\n              width: 0\n          }\n      }\n    ]\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/ohlc-charts/#customise-ohlc-chart-colors","title":"customise-ohlc-chart-colors","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar trace = {\n  x: unpack(rows, 'Date'),\n  close: unpack(rows, 'AAPL.Close'),\n  high: unpack(rows, 'AAPL.High'),\n  low: unpack(rows, 'AAPL.Low'),\n  open: unpack(rows, 'AAPL.Open'),\n\n  // cutomise colors\n  increasing: {line: {color: 'black'}},\n  decreasing: {line: {color: 'red'}},\n\n  type: 'ohlc',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace];\n\nvar layout = {\n  dragmode: 'zoom',\n  showlegend: false,\n  xaxis: {\n    autorange: true,\n    title: {\n      text: 'Date'\n    },\n  },\n  yaxis: {\n    autorange: true,\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/ohlc-charts/#add-rangeselector","title":"add-rangeselector","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar trace = {\n  x: unpack(rows, 'Date'),\n  close: unpack(rows, 'AAPL.Close'),\n  high: unpack(rows, 'AAPL.High'),\n  low: unpack(rows, 'AAPL.Low'),\n  open: unpack(rows, 'AAPL.Open'),\n\n  // cutomise colors\n  increasing: {line: {color: 'black'}},\n  decreasing: {line: {color: 'red'}},\n\n  type: 'ohlc',\n  xaxis: 'x',\n  yaxis: 'y'\n};\n\nvar data = [trace];\n\nvar layout = {\n  dragmode: 'zoom',\n  showlegend: false,\n  xaxis: {\n    autorange: true,\n    title: {\n      text: 'Date'\n    },\n     rangeselector: {\n        x: 0,\n        y: 1.2,\n        xanchor: 'left',\n        font: {size:8},\n        buttons: [{\n            step: 'month',\n            stepmode: 'backward',\n            count: 1,\n            label: '1 month'\n        }, {\n            step: 'month',\n            stepmode: 'backward',\n            count: 6,\n            label: '6 months'\n        }, {\n            step: 'all',\n            label: 'All dates'\n        }]\n      }\n  },\n  yaxis: {\n    autorange: true,\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/parallel-categories-diagram/","title":"parallel-categories-diagram","text":""},{"location":"examples/parallel-categories-diagram/#basic-parallel-categories-diagram","title":"basic-parallel-categories-diagram","text":"<p>The parallel categories diagram is a visualization of multi-dimensional categorical data sets.  Each variable in the data set is represented by a column of rectangles, where each rectangle corresponds to a discrete value taken on by that variable.  The relative heights of the rectangles reflect the relative frequency of occurrence of the corresponding value.</p> <p>Combinations of category rectangles across dimensions are connected by ribbons, where the height of the ribbon corresponds to the relative frequency of occurrence of the combination of categories in the data set.</p> <p>In this example, we visualize the hair color, eye color, and sex of a sample of 8 people.  Hovering over a category rectangle displays a tooltip with the number of people with that single trait. Hovering over a ribbon in the diagram displays a tooltip with the number of people with a particular combination of the three traits connected by the ribbon.</p> <p>The dimension labels can be dragged horizontally to reorder the dimensions and the category rectangles can be dragged vertically to reorder the categories within a dimension.</p> <pre><code>var trace1 = {\n  type: 'parcats',\n  dimensions: [\n    {label: 'Hair',\n     values: ['Black', 'Black', 'Black', 'Brown',\n              'Brown', 'Brown', 'Red', 'Brown']},\n    {label: 'Eye',\n     values: ['Brown', 'Brown', 'Brown', 'Brown',\n              'Brown', 'Blue', 'Blue', 'Blue']},\n    {label: 'Sex',\n     values: ['Female', 'Female', 'Female', 'Male',\n              'Female', 'Male', 'Male', 'Male']}]\n};\n\nvar data = [ trace1 ];\n\nvar layout = {width: 600};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/parallel-categories-diagram/#basic-parallel-categories-diagram-with-counts","title":"basic-parallel-categories-diagram-with-counts","text":"<p>If the frequency of occurrence for each combination of attributes is known in advance, this can be specified using the <code>counts</code> property</p> <pre><code>var trace1 = {\n  type: 'parcats',\n  dimensions: [\n    {label: 'Hair',\n     values: ['Black', 'Brown', 'Brown', 'Brown', 'Red']},\n    {label: 'Eye',\n     values: ['Brown', 'Brown', 'Brown', 'Blue', 'Blue']},\n    {label: 'Sex',\n     values: ['Female', 'Male', 'Female', 'Male', 'Male']}],\n  counts: [6, 10, 40, 23, 7]\n};\n\nvar data = [ trace1 ];\n\nvar layout = {width: 600};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/parallel-categories-diagram/#mutli-color-parallel-categories-diagram","title":"mutli-color-parallel-categories-diagram","text":"<p>The color of the ribbons can be specified with the <code>line.color</code> property.  Similar to other trace types, this property may be set to an array of numbers, which are then mapped to colors according to the the colorscale specified in the <code>line.colorscale</code> property.</p> <p>Here is an example of visualizing the survival rate of passengers in the titanic dataset, where the ribbons are colored based on survival outcome.</p> <p>By setting the <code>hoveron</code> property to <code>'color'</code> and the <code>hoverinfo</code> property to <code>'count+probability'</code> the tooltips now display count and probability information for each color (outcome) per category.</p> <p>By setting the <code>arrangement</code> property to <code>'freeform'</code> it is now possible to drag categories horizontally to reorder dimensions as well as vertically to reorder categories within the dimension.</p> <pre><code>var gd = document.getElementById('myDiv');\n\nd3.csv(\n  \"https://raw.githubusercontent.com/plotly/datasets/master/titanic.csv\",\n  function(titanicData) {\n    var classDim = {\n      values: titanicData.map(function(row) {return row['Pclass']}),\n      categoryorder: 'category ascending',\n      label: \"Class\"\n    };\n\n    var genderDim = {\n      values: titanicData.map(function(row) {return row['Sex']}),\n      label: \"Gender\"\n    };\n\n    var survivalDim = {\n      values: titanicData.map(function(row) {return row['Survived']}),\n      label: \"Outcome\",\n      categoryarray: [0, 1],\n      ticktext: ['perished', 'survived'],\n    };\n\n    var color = survivalDim.values;\n    var colorscale = [[0, 'lightsteelblue'], [1, 'mediumseagreen']];\n\n    // Build Traces\n    var traces = [\n      {type: 'parcats',\n       dimensions: [classDim, genderDim, survivalDim],\n       line: {color: color,\n              colorscale: colorscale},\n       hoveron: 'color',\n       hoverinfo: 'count+probability',\n       labelfont: {size: 14},\n       arrangement: 'freeform'\n      }\n    ];\n\n    var layout = {width: 600};\n\n    // Make plot\n    Plotly.newPlot('myDiv', traces, layout);\n  });</code></pre>"},{"location":"examples/parallel-categories-diagram/#parallel-categories-linked-brushing","title":"parallel-categories-linked-brushing","text":"<p>This example demonstrates how the <code>plotly_selected</code> and <code>plotly_click</code> events can be used to implement linked brushing between 3 categorical dimensions displayed with a <code>parcats</code> trace and 2 continuous dimensions displayed with a <code>scatter</code> trace.</p> <p>This example also sets the <code>line.shape</code> property to <code>hspline</code> to cause the ribbons to curve between categories.</p> <pre><code>var gd = document.getElementById(\"myDiv\");\nvar categoricalDimensionLabels = [\n  'body-style',\n  'drive-wheels',\n  'fuel-type'\n];\n\nd3.csv(\n  'https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv',\n  function(carsData) {\n    // Preprocess Data\n    var mpg = carsData.map(function(row) { return row['highway-mpg'] });\n    var horsepower = carsData.map(function(row) { return row['horsepower'] });\n\n    var categoricalDimensions = categoricalDimensionLabels.map(\n      function(dimLabel) {\n        // Extract column\n        var values = carsData.map(function(row) {\n          return row[dimLabel]\n        });\n\n        return {\n          values: values,\n          label: dimLabel\n        };\n      });\n\n    // Colors\n    var color = new Int8Array(carsData.length);\n    var colorscale = [[0, 'gray'], [1, 'firebrick']];\n\n    // Layout\n    var layout = {\n      width: 600,\n      height: 800,\n      xaxis: {title: {text: 'Horsepower'}},\n      yaxis: {domain: [0.6, 1], title: {text: 'MPG'}},\n      dragmode: 'lasso',\n      hovermode: 'closest'\n    };\n\n    // Build Traces\n    var traces = [\n      {type: 'scatter',\n       x: horsepower,\n       y: mpg,\n       marker: {color: 'gray'},\n       mode: 'markers',\n       selected: {'marker': {'color': 'firebrick'}},\n       unselected: {'marker': {'opacity': 0.3}}\n      },\n      {type: 'parcats',\n       domain: {y: [0, 0.4]},\n       dimensions:categoricalDimensions,\n       line: {\n         colorscale: colorscale,\n         cmin: 0,\n         cmax: 1,\n         color: color,\n         shape: 'hspline'},\n       labelfont: {size: 14}\n      }\n    ];\n\n    // Make plot\n    Plotly.newPlot('myDiv', traces, layout);\n\n    // Update color on selection and click\n    var update_color = function(points_data) {\n      var new_color = new Int8Array(carsData.length);\n      var selection = []\n      for(var i = 0; i &lt; points_data.points.length; i++) {\n        new_color[points_data.points[i].pointNumber] = 1;\n        selection.push(points_data.points[i].pointNumber);\n      }\n\n      // Update selected points in scatter plot\n      Plotly.restyle('myDiv', {'selectedpoints': [selection]}, 0)\n\n      // Update color of selected paths in parallel categories diagram\n      Plotly.restyle('myDiv', {'line.color': [new_color]}, 1)\n    };\n\n    gd.on('plotly_selected', update_color);\n    gd.on('plotly_click', update_color);\n  });</code></pre>"},{"location":"examples/parallel-categories-diagram/#parallel-categories-with-multi-color-linked-brushing","title":"parallel-categories-with-multi-color-linked-brushing","text":"<p>This example extends the previous example to support brushing with multiple colors.  The radio buttons above may be used to select the active color, and this color will be applied when points are selected in the <code>scatter</code> trace and when categories or ribbons are clicked in the <code>parcats</code> trace.</p> <pre><code>var gd = document.getElementById('myDiv');\nvar categoricalDimensionLabels = [\n  'body-style',\n  'drive-wheels',\n  'fuel-type'\n];\n\nd3.csv(\n  'https://raw.githubusercontent.com/plotly/datasets/master/imports-85.csv',\n  function(carsData) {\n    // Preprocess Data\n    var mpg = carsData.map(function(row) { return row['highway-mpg'] });\n    var horsepower = carsData.map(function(row) { return row['horsepower'] });\n\n    var categoricalDimensions = categoricalDimensionLabels.map(\n      function(dimLabel) {\n        // Extract column\n        var values = carsData.map(function(row) {\n          return row[dimLabel]\n        });\n\n        return {\n          values: values,\n          label: dimLabel\n        };\n      }\n    );\n\n    // Colors\n    var color = new Int8Array(carsData.length);\n    var colorscale = [[0, 'gray'], [0.33, 'gray'],\n                      [0.33, 'firebrick'], [0.66, 'firebrick'],\n                      [0.66, 'blue'], [1.0, 'blue']];\n\n    // Layout\n    var layout = {\n      width: 600,\n      height: 800,\n      xaxis: {title: {text: 'Horsepower'}},\n      yaxis: {domain: [0.6, 1], title: {text: 'MPG'}},\n      dragmode: 'lasso',\n      hovermode: 'closest'\n    };\n\n    // Build Traces\n    var traces = [\n      {type: 'scatter',\n       x: horsepower,\n       y: mpg,\n       marker: {color: color,\n                colorscale: colorscale,\n                cmin: -0.5,\n                cmax: 2.5,\n                showscale: true,\n                colorbar: {tickvals: [0, 1, 2],\n                           ticktext: ['None', 'Red', 'Blue']}},\n       mode: 'markers',\n      },\n      {type: 'parcats',\n       domain: {y: [0, 0.4]},\n       dimensions:categoricalDimensions,\n       line: {\n         colorscale: colorscale,\n         cmin: -0.5,\n         cmax: 2.5,\n         color: color,\n         shape: 'hspline'},\n       labelfont: {size: 14}\n      }\n    ];\n\n    // Make plot\n    Plotly.newPlot('myDiv', traces, layout);\n\n    // Update color on selection and click\n    var update_color = function(points_data) {\n      var new_color = color;\n      var color_value = document.querySelector('input[name=\"rate\"]:checked').value;\n      console.log(color_value);\n      var selection = []\n      for(var i = 0; i &lt; points_data.points.length; i++) {\n        new_color[points_data.points[i].pointNumber] = color_value;\n        selection.push(points_data.points[i].pointNumber);\n      }\n\n      // Update selected points in scatter plot\n      Plotly.restyle'myDiv', {'marker.color': [new_color]}, 0)\n\n      // Update color of selected paths in parallel categories diagram\n      Plotly.restyle'myDiv',\n                     {'line.color': [new_color]}, 1)\n    };\n\n    gd.on('plotly_selected', update_color);\n    gd.on('plotly_click', update_color);\n  });</code></pre>"},{"location":"examples/parallel-coordinates-plot/","title":"parallel-coordinates-plot","text":""},{"location":"examples/parallel-coordinates-plot/#adding-dimensions","title":"adding-dimensions","text":"<p>Parallel coordinates are richly interactive by default. Drag the lines along the axes to filter regions and drag the axis names across the plot to rearrange variables: </p> <pre><code>var trace = {\n  type: 'parcoords',\n  line: {\n    color: 'blue'\n  },\n\n  dimensions: [{\n    range: [1, 5],\n    constraintrange: [1, 2],\n    label: 'A',\n    values: [1,4]\n  }, {    \n    range: [1,5],\n    label: 'B',\n    values: [3,1.5],\n    tickvals: [1.5,3,4.5]\n  }, {\n    range: [1, 5],\n    label: 'C',\n    values: [2,4],\n    tickvals: [1,2,4,5],\n    ticktext: ['text 1','text 2','text 4','text 5']\n  }, {\n    range: [1, 5],\n    label: 'D',\n    values: [4,2]\n  }]\n};\n\nvar data = [trace]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/parallel-coordinates-plot/#basic-parallel-coordinates-plot","title":"basic-parallel-coordinates-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar data = [{\n  type: 'parcoords',\n  pad: [80,80,80,80],\n  line: {\n    color: unpack(rows, 'species_id'),\n    colorscale: [[0, 'red'], [0.5, 'green'], [1, 'blue']]\n  },\n\n  dimensions: [{\n    range: [2, 4.5],\n    label: 'sepal_width',\n    values: unpack(rows, 'sepal_width')\n  }, {\n    constraintrange: [5, 6],\n    range: [4,8],\n    label: 'sepal_length',\n    values: unpack(rows, 'sepal_length')\n  }, {\n    label: 'petal_width',\n    range: [0, 2.5],\n    values: unpack(rows, 'petal_width')\n  }, {\n    label: 'petal_length',\n    range: [1, 7],\n    values: unpack(rows, 'petal_length')\n  }]\n}];\n\nvar layout = {\n  width: 800\n};\n\nPlotly.newPlot('myDiv', data, layout);\n\n});</code></pre>"},{"location":"examples/parallel-coordinates-plot/#annotated-parallel-coordinates-plot","title":"annotated-parallel-coordinates-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-id.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar data = [{\n  type: 'parcoords',\n  pad: [80,80,80,80],\n  line: {\n    color: unpack(rows, 'species_id'),\n    colorscale: [[0, 'red'], [0.5, 'green'], [1, 'blue']]\n  },\n\n  dimensions: [{\n    range: [2, 4.5],\n    label: 'sepal_width',\n    values: unpack(rows, 'sepal_width')\n  }, {\n    constraintrange: [5, 6],\n    range: [4,8],\n    label: 'sepal_length',\n    values: unpack(rows, 'sepal_length')\n  }, {\n    label: 'petal_width',\n    range: [0, 2.5],\n    values: unpack(rows, 'petal_width')\n  }, {\n    label: 'petal_length',\n    range: [1, 7],\n    values: unpack(rows, 'petal_length')\n  }]\n}];\n\nvar layout = {\n  width: 800,\n  annotations: [\n      {showarrow: false,\n      text: 'Higher sepal width',\n      x: 0, y: 1, xref: 'paper', yref: 'paper'},\n      {showarrow: false,\n      text: 'Lower petal width and length',\n      x: 0.9, y: .25, xref: 'paper', yref: 'paper'\n    }]\n};\n\nPlotly.newPlot('myDiv', data, layout);\n\n});</code></pre>"},{"location":"examples/parallel-coordinates-plot/#advanced-parallel-coordinates-plot","title":"advanced-parallel-coordinates-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv', function(err, rows){\n\nfunction unpack(rows, key) {\n  return rows.map(function(row) {\n    return row[key];\n  });\n}\n\nvar data = [{\n  type: 'parcoords',\n  line: {\n    showscale: true,\n    reversescale: true,\n    colorscale: 'Jet',\n    cmin: -4000,\n    cmax: -100,\n    color: unpack(rows, 'colorVal')\n  },\n\n  dimensions: [{\n    constraintrange: [100000, 150000],\n    range: [32000, 227900],\n    label: 'Block height',\n    values: unpack(rows, 'blockHeight')\n  }, {\n    range: [0, 700000],\n    label: 'Block width',\n    values: unpack(rows, 'blockWidth')\n  }, {\n    label: 'Cylinder material',\n    tickvals: [0, 0.5, 1, 2, 3],\n    ticktext: ['A', 'AB', 'B', 'Y', 'Z'],\n    values: unpack(rows, 'cycMaterial')\n  }, {\n    label: 'Block material',\n    tickvals: [0, 1, 2, 3],\n    range: [-1, 4],\n    values: unpack(rows, 'blockMaterial')\n  }, {\n    range: [134, 3154],\n    label: 'Total weight',\n    visible: true,\n    values: unpack(rows, 'totalWeight')\n  }, {\n    range: [9, 19984],\n    label: 'Assembly penalty weight',\n    values: unpack(rows, 'assemblyPW')\n  }, {\n    range: [49000, 568000],\n    label: 'Height st width',\n    values: unpack(rows, 'HstW')\n  }, {\n    range: [-28000, 196430],\n    label: 'Min height width',\n    values: unpack(rows, 'minHW')\n  }, {\n     range: [98453, 501789],\n     label: 'Min width diameter',\n     values: unpack(rows, 'minWD')\n  }, {\n    range: [1417, 107154],\n    label: 'RF block',\n    values: unpack(rows, 'rfBlock')\n  }]\n}];\n\nPlotly.newPlot('myDiv', data);\n\n});</code></pre>"},{"location":"examples/pie-charts/","title":"pie-charts","text":""},{"location":"examples/pie-charts/#basic-pie-chart","title":"basic-pie-chart","text":"<pre><code>var data = [{\n  values: [19, 26, 55],\n  labels: ['Residential', 'Non-Residential', 'Utility'],\n  type: 'pie'\n}];\n\nvar layout = {\n  height: 400,\n  width: 500\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/pie-charts/#pie-chart-subplots","title":"pie-chart-subplots","text":"<p>In order to create pie chart subplots, you need to use the domain attribute. <code>domain</code> allows you to place each trace on a grid of rows and columns defined in the layout or within a rectangle defined by <code>X</code> and <code>Y</code> arrays. The example below uses the <code>grid</code> method (with a 2 x 2 grid defined in the layout) for the first three traces and the X and Y method for the fourth trace.</p> <pre><code>var allLabels = ['1st', '2nd', '3rd', '4th', '5th'];\n\nvar allValues = [\n  [38, 27, 18, 10, 7],\n  [28, 26, 21, 15, 10],\n  [38, 19, 16, 14, 13],\n  [31, 24, 19, 18, 8]\n];\n\nvar ultimateColors = [\n  ['rgb(56, 75, 126)', 'rgb(18, 36, 37)', 'rgb(34, 53, 101)', 'rgb(36, 55, 57)', 'rgb(6, 4, 4)'],\n  ['rgb(177, 127, 38)', 'rgb(205, 152, 36)', 'rgb(99, 79, 37)', 'rgb(129, 180, 179)', 'rgb(124, 103, 37)'],\n  ['rgb(33, 75, 99)', 'rgb(79, 129, 102)', 'rgb(151, 179, 100)', 'rgb(175, 49, 35)', 'rgb(36, 73, 147)'],\n  ['rgb(146, 123, 21)', 'rgb(177, 180, 34)', 'rgb(206, 206, 40)', 'rgb(175, 51, 21)', 'rgb(35, 36, 21)']\n];\n\nvar data = [{\n  values: allValues[0],\n  labels: allLabels,\n  type: 'pie',\n  name: 'Starry Night',\n  marker: {\n    colors: ultimateColors[0]\n  },\n  domain: {\n    row: 0,\n    column: 0\n  },\n  hoverinfo: 'label+percent+name',\n  textinfo: 'none'\n},{\n  values: allValues[1],\n  labels: allLabels,\n  type: 'pie',\n  name: 'Sunflowers',\n  marker: {\n    colors: ultimateColors[1]\n  },\n  domain: {\n    row: 1,\n    column: 0\n  },\n  hoverinfo: 'label+percent+name',\n  textinfo: 'none'\n},{\n  values: allValues[2],\n  labels: allLabels,\n  type: 'pie',\n  name: 'Irises',\n  marker: {\n    colors: ultimateColors[2]\n  },\n  domain: {\n    row: 0,\n    column: 1\n  },\n  hoverinfo: 'label+percent+name',\n  textinfo: 'none'\n},{\n  values: allValues[3],\n  labels: allLabels,\n  type: 'pie',\n  name: 'The Night Cafe',\n  marker: {\n    colors: ultimateColors[3]\n  },\n  domain: {\n    x: [0.52,1],\n    y: [0, 0.48]\n  },\n  hoverinfo: 'label+percent+name',\n  textinfo: 'none'\n}];\n\nvar layout = {\n  height: 400,\n  width: 500,\n  grid: {rows: 2, columns: 2}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/pie-charts/#donut-chart","title":"donut-chart","text":"<pre><code>var data = [{\n  values: [16, 15, 12, 6, 5, 4, 42],\n  labels: ['US', 'China', 'European Union', 'Russian Federation', 'Brazil', 'India', 'Rest of World' ],\n  domain: {column: 0},\n  name: 'GHG Emissions',\n  hoverinfo: 'label+percent+name',\n  hole: .4,\n  type: 'pie'\n},{\n  values: [27, 11, 25, 8, 1, 3, 25],\n  labels: ['US', 'China', 'European Union', 'Russian Federation', 'Brazil', 'India', 'Rest of World' ],\n  text: 'CO2',\n  textposition: 'inside',\n  domain: {column: 1},\n  name: 'CO2 Emissions',\n  hoverinfo: 'label+percent+name',\n  hole: .4,\n  type: 'pie'\n}];\n\nvar layout = {\n  title: {\n    text: 'Global Emissions 1990-2011'\n  },\n  annotations: [\n    {\n      font: {\n        size: 20\n      },\n      showarrow: false,\n      text: 'GHG',\n      x: 0.17,\n      y: 0.5\n    },\n    {\n      font: {\n        size: 20\n      },\n      showarrow: false,\n      text: 'CO2',\n      x: 0.82,\n      y: 0.5\n    }\n  ],\n  height: 400,\n  width: 600,\n  showlegend: false,\n  grid: {rows: 1, columns: 2}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/pie-charts/#automatically-adjust-margins","title":"automatically-adjust-margins","text":"<p>The following example sets automargin attribute to true, which automatically increases the margin size.</p> <pre><code>var data = [{\n  type: \"pie\",\n  values: [2, 3, 4, 4],\n  labels: [\"Wages\", \"Operating expenses\", \"Cost of sales\", \"Insurance\"],\n  textinfo: \"label+percent\",\n  textposition: \"outside\",\n  automargin: true\n}]\n\nvar layout = {\n  height: 400,\n  width: 400,\n  margin: {\"t\": 0, \"b\": 0, \"l\": 0, \"r\": 0},\n  showlegend: false\n  }\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/pie-charts/#control-text-orientation-inside-pie-chart-sectors","title":"control-text-orientation-inside-pie-chart-sectors","text":"<p>The <code>insidetextorientation</code> attribute controls the orientation of the text inside chart sectors. When set to auto, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The horizontal option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The radial option orients text along the radius of the sector. The tangential option orients text perpendicular to the radius of the sector.</p> <pre><code>var data = [{\n  type: \"pie\",\n  values: [2, 3, 4, 4],\n  labels: [\"Wages\", \"Operating expenses\", \"Cost of sales\", \"Insurance\"],\n  textinfo: \"label+percent\",\n  insidetextorientation: \"radial\"\n}]\n\nvar layout = [{\n  height: 700,\n  width: 700\n}]\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/plotlyjs-events/","title":"plotlyjs-events","text":""},{"location":"examples/plotlyjs-events/#using-plotly.js-events","title":"using-plotly.js-events","text":"<p>Plotly graphs emit events prefixed with plotly_ (i.e. <code>'plotly_click'</code>, <code>'plotly_hover'</code>, <code>'plotly_relayout'</code>) when interacted with (clicked, hovered, zoomed). Event handlers can be bound to events using the <code>.on</code> method that is exposed by the plot div object.</p> <p>In addition to the event handler, some events emit additional information about the point(s) or plot  interacted with. The following documentation organizes Plotly events based on the accessible information emitted with the event: event data, update data, or no additional data. The following page provides a description and example of each Plotly event as well as the structure of the data or update returned with the event.</p> <pre><code>myDiv.on('plotly_event', function(){\n        // do something;\n    });</code></pre>"},{"location":"examples/plotlyjs-events/#simple-event-example","title":"simple-event-example","text":"<p>Here's a simple example using a Plotly event. Click on a point on the chart below to see an alert triggered by the <code>plotly_click</code> event.</p> <pre><code>var myPlot = document.getElementById('myDiv'),\n    x = [1, 2, 3, 4, 5],\n    y = [10, 20, 30, 20, 10],\n    data = [{x:x, y:y, type:'scatter',\n             mode:'markers', marker:{size:20}\n            }],\n    layout = {hovermode:'closest',\n              title: {text: 'Click on Points'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_click', function(){\n    alert('You clicked this Plotly chart!');\n});</code></pre>"},{"location":"examples/plotlyjs-events/#event-data","title":"event-data","text":"<p>Many Plotly events emit event data when the event is triggered. Event data is information about the data point related to the event (i.e. the point clicked). The following events emit event data: <code>plotly_click</code>, <code>plotly_hover</code>, <code>plotly_unhover</code>, <code>plotly_selecting</code>, and <code>plotly_selected</code>. Event data differs depending on the type of plot the user is interacting with. The event data structure for Cartesian (2D) plots, 3D plots, and maps can be found below, along with examples of each event.</p> <pre><code>// Cartesian\n{\n  points: [{\n    curveNumber: 1,  // index in data of the trace associated with the selected point\n    pointNumber: 1,  // index of the selected point\n    x: 1,        // x value\n    y: 1,      // y value\n    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point\n    fullData: {/* */},   // ref to the trace including all of the default attributes\n   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point\n   yaxis: {/* */}    // ref to y-axis object \" \"\n  }, {\n    /* similarly for other selected points */\n  }]\n}\n\n// Cartesian Histograms\n{\n  points: [{\n    curveNumber: 1,  // index in data of the trace associated with the selected point\n    pointNumbers: [1, 5, 28, 33, 41, ...],  // Array of indices of the points aggregated into selected bin\n    x: 1,        // x value\n    y: 45,      // y value\n    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point\n    fullData: {/* */},   // ref to the trace including all of the default attributes\n   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point\n   yaxis: {/* */}    // ref to y-axis object \" \"\n  }, {\n    /* similarly for other selected points */\n  }]\n}\n\n// 3D\n{\n  points: [{\n    curveNumber: 2,  // index in data of the trace associated with the selected point\n    pointNumber: 2,  // index of the selected point\n    x: 5,        // x value\n    y: 600,      // y value\n    z: 12,       // z value\n    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point\n    fullData: {/* */},   // ref to the trace including all of the default attributes\n   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point\n   yaxis: {/* */}    // ref to y-axis object \" \"\n   zaxis: {/* */}    // ref to z-axis object \" \"\n  }, {\n    /* similarly for other selected points */\n  }]\n}\n\n// Maps\n{\n  points: [{\n    curveNumber: 2,  // index in data of the trace associated with the selected point\n    pointNumber: 2,  // index of the selected point\n    lat: 50,        // latitude value\n    lon: -12,      // longitude value\n    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point\n    fullData: {/* */},   // ref to the trace including all of the default attributes\n    location:       //\n  }, {\n    /* similarly for other selected points */\n  }]\n}</code></pre>"},{"location":"examples/plotlyjs-events/#click-event","title":"click-event","text":"<p>Here's a simple example of using the data returned from the <code>plotly_click</code> event to restyle the graph. After creating a plot, we can change the color of the point clicked on by updating the <code>marker.color</code> array at the index of the point we clicked on then using <code>Plotly.restyle()</code> to apply the update. For more examples of using <code>plotly_click</code> events, see: https://plotly.com/javascript/click-events/</p> <pre><code>var myPlot = document.getElementById('myDiv'),\n    x = [1, 2, 3, 4, 5, 6],\n    y = [1, 2, 3, 2, 3, 4],\n    colors = ['#00000','#00000','#00000',\n              '#00000','#00000','#00000'],\n    data = [{x:x, y:y, type:'scatter',\n             mode:'markers', marker:{size:16, color:colors}}],\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Click on a Point to Change Color&lt;br&gt;Double Click (anywhere) to Change it Back'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_click', function(data){\n  var pn='',\n      tn='',\n      colors=[];\n  for(var i=0; i &lt; data.points.length; i++){\n    pn = data.points[i].pointNumber;\n    tn = data.points[i].curveNumber;\n    colors = data.points[i].data.marker.color;\n  };\n  colors[pn] = '#C54C82';\n\n  var update = {'marker':{color: colors, size:16}};\n  Plotly.restyle('myDiv', update, [tn]);\n});</code></pre>"},{"location":"examples/plotlyjs-events/#legend-click-events","title":"legend-click-events","text":"<p><code>plotly_legendclick</code> and <code>plotly_legenddoubleclick</code> allow customization of the plotly legend. The default behaviour of <code>plotly_legendclick</code> is to hide a trace and the default behavior of <code>plotly_legenddoubleclick</code> is to select one trace and hide all the others. We can add to the default behaviour by creating a new <code>plotly_legendclick</code> event with a function of our choice. We can also disable the default behaviour by creating a function that returns <code>false</code>. In the example below, we do both in order to create a <code>plotly_legendclick</code> event which changes the marker color back to black instead of erasing the trace.</p> <pre><code>var myPlot = document.getElementById('myDiv'),\n    x = [1, 2, 3, 4, 5, 6],\n    y = [1, 2, 3, 2, 3, 4],\n    y2 = [1, 4, 7, 6, 1, 5],\n    colors = [['#5C636E','#5C636E','#5C636E','#5C636E','#5C636E','#5C636E'],\n              ['#393e46','#393e46','#393e46','#393e46','#393e46','#393e46']],\n    data = [{x:x, y:y, type:'scatter',\n             mode:'line', line:{ color:'#5C636E'},marker:{size:16, color:colors[0]}},\n            {x:x, y:y2, type:'scatter',\n             mode:'line',line:{ color:'#393e46'}, marker:{size:16, color:colors[1]}}],\n    layout = {\n        showlegend: true,\n        hovermode:'closest',\n        title: {text: 'Click on a Point to Change Color&lt;br&gt;Click on a Trace in the Legend to Change Back One Trace Only'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_click', function(data){\n  var pn='',\n      tn='',\n      colors=[];\n  for(var i=0; i &lt; data.points.length; i++){\n    pn = data.points[i].pointNumber;\n    tn = data.points[i].curveNumber;\n    colors = data.points[i].data.marker.color;\n  };\n  colors[pn] = '#C54C82';\n  var update = {'marker':{color: colors, size:16}};\n  Plotly.restyle('myDiv', update,[tn]);\n});\n\nmyPlot.on('plotly_legendclick', function(data){\n  var trColors = [['#5C636E','#5C636E','#5C636E','#5C636E','#5C636E','#5C636E'],\n              ['#393e46','#393e46','#393e46','#393e46','#393e46','#393e46']];\n  var update = {'marker':{color: trColors[data.curveNumber], size:16}};\n  Plotly.restyle('myDiv', update,[data.curveNumber]);\n  return false;\n});</code></pre>"},{"location":"examples/plotlyjs-events/#hover-event","title":"hover-event","text":"<p>Here's a simple example of using the data returned from the <code>plotly_hover</code> and <code>plotly_unhover</code> events to restyle the graph. After creating a plot, we can change the color of the point hovered on by updating the <code>marker.color</code> array at the index of the point we hovered on then using <code>Plotly.restyle()</code> to apply the update. Then we can use <code>plotly_unhover</code> to change the <code>marker.color</code> back to the original color. For more examples of using <code>plotly_hover</code> events, see: https://plotly.com/javascript/hover-events/</p> <pre><code>var myPlot = document.getElementById('myDiv'),\n    x = [1, 2, 3, 4, 5, 6, 7],\n    y = [1, 2, 3, 2, 3, 4, 3],\n    colors =['#00000','#00000','#00000',\n             '#00000','#00000','#00000',\n             '#00000'],\n    data = [{x:x, y:y,\n             type:'scatter',\n             mode:'markers', marker:{size:16, color:colors}}],\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Hover on a Point&lt;br&gt;to Change Color'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_hover', function(data){\n  var pn='',\n      tn='',\n      colors=[];\n  for(var i=0; i &lt; data.points.length; i++){\n    pn = data.points[i].pointNumber;\n    tn = data.points[i].curveNumber;\n    colors = data.points[i].data.marker.color;\n  };\n  colors[pn] = '#C54C82';\n\n  var update = {'marker':{color: colors, size:16}};\n  Plotly.restyle('myDiv', update, [tn]);\n});\n\nmyPlot.on('plotly_unhover', function(data){\n  var pn='',\n      tn='',\n      colors=[];\n  for(var i=0; i &lt; data.points.length; i++){\n    pn = data.points[i].pointNumber;\n    tn = data.points[i].curveNumber;\n    colors = data.points[i].data.marker.color;\n  };\n  colors[pn] = '#00000';\n\n  var update = {'marker':{color: colors, size:16}};\n  Plotly.restyle('myDiv', update, [tn]);\n});</code></pre>"},{"location":"examples/plotlyjs-events/#select-event","title":"select-event","text":"<p>Here's a simple example using the data returned from the <code>plotly_selected</code> event. <code>plotly_selected</code> returns event data for all points selected simultaneously. After creating a scatter plot with random data and two histograms that display the x and y distributions of that random data, we can select points by clicking and dragging on the plot. Upon <code>plotly_selected</code> the histograms will update to display the distribution of the x and y values of the selected points. The color of the scatter plot will be updated as well to highlight the selected points. For more examples of using <code>plotly_selected</code> and <code>plotly_selecting</code> events, see: https://plotly.com/javascript/lasso-selection/</p> <pre><code>var graphDiv = document.getElementById('myDiv');\nvar N = 1000;\nvar color1 = '#7b3294';\nvar color1Light = '#c2a5cf';\nvar colorX = '#ffa7b5';\nvar colorY = '#fdae61';\n\nfunction randomArray() {\n  var out = new Array(N);\n  for(var i = 0; i &lt; N; i++) {\n    out[i] = Math.random();\n  }\n  return out;\n}\nvar x = randomArray();\nvar y = randomArray();\n\nPlotly.newPlot(graphDiv, [{\n  type: 'scatter',\n  mode: 'markers',\n  x: x,\n  y: y,\n  xaxis: 'x',\n  yaxis: 'y',\n  name: 'random data',\n  marker: {color: color1, size: 10}\n}, {\n  type: 'histogram',\n  x: x,\n  xaxis: 'x2',\n  yaxis: 'y2',\n  name: 'x coord dist.',\n  marker: {color: colorX}\n}, {\n  type: 'histogram',\n  x: y,\n  xaxis: 'x3',\n  yaxis: 'y3',\n  name: 'y coord dist.',\n  marker: {color: colorY}\n}], {\n  title: {\n    text: 'Lasso around the scatter points to see sub-distributions'\n  },\n  dragmode: 'lasso',\n  xaxis: {\n    zeroline: false,\n  },\n  yaxis: {\n    domain: [0.55, 1],\n  },\n  xaxis2: {\n    domain: [0, 0.45],\n    anchor: 'y2',\n  },\n  yaxis2: {\n    domain: [0, 0.45],\n    anchor: 'x2'\n  },\n  xaxis3: {\n    domain: [0.55, 1],\n    anchor: 'y3'\n  },\n  yaxis3: {\n    domain: [0, 0.45],\n    anchor: 'x3'\n  }\n});\n\ngraphDiv.on('plotly_selected', function(eventData) {\n  var x = [];\n  var y = [];\n\n  var colors = [];\n  for(var i = 0; i &lt; N; i++) colors.push(color1Light);\n\n  eventData.points.forEach(function(pt) {\n    x.push(pt.x);\n    y.push(pt.y);\n    colors[pt.pointNumber] = color1;\n  });\n\n  Plotly.restyle(graphDiv, {\n    x: [x, y],\n    xbins: {}\n  }, [1, 2]);\n\n  Plotly.restyle(graphDiv, 'marker.color', [colors], [0]);\n});</code></pre>"},{"location":"examples/plotlyjs-events/#update-data","title":"update-data","text":"<p>The following Plotly events emit update information when the event is triggered: <code>plotly_restyle</code> and <code>plotly_relayout</code>. The update emitted with <code>plotly_restyle</code> is similar across plot types and includes an array containing an object of the newly updated attributes and an array of the trace numbers that were updated.</p> <p>For Cartesian (2D) plots, <code>plotly_relayout</code> emits only the xaxis and yaxis ranges which were directly changed by the triggering event. For 3D plots, <code>layout.scene.camera</code> data is similarly emitted. See the full structures below:</p> <pre><code>// plotly_restyle update\n[\n  {update},  // update object -- attribute updated: new value\n  [0]       // array of traces updated\n]\n\n// plotly_relayout update: Cartesian\n//// Upon resizing plot:\n{\n xaxis.range[0]: , // new value if xaxis.range[0] was updated\n xaxis.range[1]: ,\n yaxis.range[0]: , // new value if yaxis.range[0] was updated\n yaxis.range[1]:\n}\n//// Upon autosizing plot:\n{\n xaxis.autorange: true,\n yaxis.autorange: true\n}\n\n// plotly_relayout update: 3D\n// a subset of the following data will be emitted depending on\n// which attributes were changed by the triggering event.\n{\n  scene: {\n    center: { // https://plotly.com/javascript/reference/layout/scene/#layout-scene-camera-center\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  },\n  {\n    eye: { // https://plotly.com/javascript/reference/layout/scene/#layout-scene-camera-eye\n      x: 1.25,\n      y: 1.25,\n      z: 1.25\n    }\n  }.\n  {\n    up: { // https://plotly.com/javascript/reference/layout/scene/#layout-scene-camera-up\n      x: 0,\n      y: 0,\n      z: 1\n    }\n  }\n}</code></pre>"},{"location":"examples/plotlyjs-events/#additional-events","title":"additional-events","text":"<p>The following Plotly events do not emit additional data or update information: <code>plotly_webglcontextlost</code>, <code>plotly_afterplot</code>, <code>plotly_autosize</code>, <code>plotly_deselect</code>, <code>plotly_doubleclick</code>, <code>plotly_redraw</code>, and <code>plotly_animated</code>. These event handlers can be used to notify or trigger an additional event with the following syntax:</p> <pre><code>function eventTriggeredHandler() {\n   /*  add your event triggered handler here */\n}\n\nmyDiv.on('plotly_event', eventTriggeredHandler);</code></pre>"},{"location":"examples/plotlyjs-events/#webgl-context-lost-event","title":"webgl-context-lost-event","text":"<p>Plotly graphs which use WebGL receive a \"WebGL context\" from the browser which gives them access to gpu resources. A program may lose its WebGL context if the browser is overloaded with them and is forced to shut one down. The event handler: <code>plotly_webglcontextlost</code>, can be used to trigger an event after a graph loses it's WebGL context.</p>"},{"location":"examples/plotlyjs-events/#afterplot-event","title":"afterplot-event","text":"<p>The event handler: <code>plotly_afterplot</code>, can be used to trigger an event each time a chart is plotted. This also includes re-plotting after the restyling or relayout of a plot. Users also have the option of adding a post-plot handler to the plot call with the following syntax: <code>Plotly.newPlot('myDiv', data, layout, config).then(postPlotHandler);</code></p> <p>The simple example below logs a console message each time the chart is plotted. Zoom or pan on the graph below to trigger the <code>plotly_afterplot</code> handler.</p> <pre><code>var myPlot = document.getElementById('myDiv'),\n    N = 20,\n    x = d3.range(N),\n    y = d3.range(N).map( d3.random.normal() ),\n    data = [{x:x, y:y, type:'scatter',\n            mode:'markers', marker:{size:14}}\n           ];\n\nPlotly.newPlot('myDiv', data);\n\nmyPlot.on('plotly_afterplot', function(){\n    console.log('done plotting');\n});</code></pre>"},{"location":"examples/plotlyjs-events/#double-click-event","title":"double-click-event","text":"<p>In addition to <code>plotly_click</code>, <code>plotly_doubleclick</code> can be used as an event handle in Plotly charts as well. You may already be familiar with <code>plotly_doubleclick</code> if you regularly use Plotly's zoom and pan functionality, double clicking on the graph will restore the axes ranges after zooming into a specific area. Unlike <code>plotly_click</code>, a <code>plotly_doubleclick</code> is registered upon clicking anywhere on the graph (not just data points), therefore, <code>plotly_doubleclick</code> does not return data. In the following example, we'll build off of our <code>plotly_click</code> example, and reset the color of our data points upon double clicking anywhere on the graph.</p> <pre><code>var myPlot = document.getElementById('myDiv'),\n    x = [1, 2, 3, 4, 5, 6],\n    y = [1, 2, 3, 2, 3, 4],\n    colors = ['#00000','#00000','#00000',\n              '#00000','#00000','#00000'],\n    data = [{x:x, y:y, type:'scatter',\n             mode:'markers', marker:{size:16, color:colors}}],\n    layout = {\n        hovermode:'closest',\n        title: {text: 'Click on a Point to Change Color&lt;br&gt;Double Click (anywhere) to Change it Back'}\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_click', function(data){\n  var pn='',\n      tn='',\n      colors=[];\n  for(var i=0; i &lt; data.points.length; i++){\n    pn = data.points[i].pointNumber;\n    tn = data.points[i].curveNumber;\n    colors = data.points[i].data.marker.color;\n  };\n  colors[pn] = '#C54C82';\n\n  var update = {'marker':{color: colors, size:16}};\n  Plotly.restyle('myDiv', update, [tn]);\n});\n\nmyPlot.on('plotly_doubleclick', function(data){\n  var orgColors = ['#00000','#00000','#00000',\n                   '#00000','#00000','#00000'];\n  var update = {'marker':{color: orgColors, size:16}};\n  Plotly.restyle('myDiv', update);\n});</code></pre>"},{"location":"examples/polar-chart/","title":"polar-chart","text":""},{"location":"examples/polar-chart/#line-polar-plot","title":"line-polar-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/polar_dataset.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\nvar trace1 = {\n  r: unpack(rows, 'x1'),\n  theta: unpack(rows, 'y'),\n  mode: 'lines',\n  name: 'Figure8',\n  line: {color: 'peru'},\n  type: 'scatterpolar'\n};\n\nvar trace2 = {\n  r: unpack(rows, 'x2'),\n  theta: unpack(rows, 'y'),\n  mode: 'lines',\n  name: 'Cardioid',\n  line: {color: 'darkviolet'},\n  type: 'scatterpolar'\n};\n\nvar trace3 = {\n  r: unpack(rows, 'x3'),\n  theta: unpack(rows, 'y'),\n  mode: 'lines',\n  name: 'Hypercardioid',\n  line: {color: 'deepskyblue'},\n  type: 'scatterpolar'\n};\n\nvar trace4 = {\n\n  r: unpack(rows, 'x4'),\n  theta: unpack(rows, 'y'),\n  mode: 'lines',\n  name: 'Subcardioid',\n  line: {color: 'orangered'},\n  type: 'scatterpolar'\n};\n\nvar trace5 = {\n\n  r: unpack(rows, 'x5'),\n  theta: unpack(rows, 'y'),\n  mode: 'lines',\n  name: 'Supercardioid',\n  marker: {\n    color: 'none',\n    line: {color: 'green'}\n  },\n  type: 'scatterpolar'\n};\n\nvar data = [trace1, trace2, trace3, trace4, trace5];\n\nvar layout = {\n  title: {\n    text: 'Mic Patterns'\n  },\n  font: {\n    family: 'Arial, sans-serif;',\n    size: 12,\n    color: '#000'\n  },\n  showlegend: true,\n  orientation: -90\n};\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/polar-chart/#area-polar-chart","title":"area-polar-chart","text":"<pre><code>data = [\n  {\n    type: \"scatterpolar\",\n    mode: \"lines\",\n    r: [0, 1.5, 1.5, 0, 2.5, 2.5, 0],\n    theta: [0, 10, 25, 0, 205, 215, 0],\n    fill: \"toself\",\n    fillcolor: '#709BFF',\n    line: {\n      color: 'black'\n    }\n  },\n  {\n    type: \"scatterpolar\",\n    mode: \"lines\",\n    r: [0, 3.5, 3.5, 0],\n    theta: [0, 55, 75, 0],\n    fill: \"toself\",\n    fillcolor: '#E4FF87',\n    line: {\n      color: 'black'\n    }\n  },\n  {\n    type: \"scatterpolar\",\n    mode: \"lines\",\n    r: [0, 4.5, 4.5, 0, 4.5, 4.5, 0],\n    theta: [0, 100, 120, 0, 305, 320, 0],\n    fill: \"toself\",\n    fillcolor: '#FFAA70',\n    line: {\n      color: 'black'\n    }\n  },\n  {\n    type: \"scatterpolar\",\n    mode: \"lines\",\n    r: [0, 4, 4, 0],\n    theta: [0, 165, 195, 0],\n    fill: \"toself\",\n    fillcolor: '#FFDF70',\n    line: {\n      color: 'black'\n    }\n  },\n  {\n    type: \"scatterpolar\",\n    mode: \"lines\",\n    r: [0, 3, 3, 0],\n    theta: [0, 262.5, 277.5, 0],\n    fill: \"toself\",\n    fillcolor: '#B6FFB4',\n    line: {\n      color: 'black'\n    }\n  }\n]\n\nlayout = {\n  polar: {\n    radialaxis: {\n      visible: true,\n      range: [0, 5]\n    }\n  },\n  showlegend: false\n}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/polar-chart/#categorical-polar-chart","title":"categorical-polar-chart","text":"<pre><code>var data = [\n    {\n      type: \"scatterpolar\",\n      name: \"angular categories\",\n      r: [5, 4, 2, 4, 5],\n      theta: [\"a\", \"b\", \"c\", \"d\", \"a\"],\n      fill: \"toself\"\n    },\n    {\n      type: \"scatterpolar\",\n      name: \"radial categories\",\n      r: [\"a\", \"b\", \"c\", \"d\", \"b\", \"f\", \"a\"],\n      theta: [1, 4, 2, 1.5, 1.5, 6, 5],\n      thetaunit: \"radians\",\n      fill: \"toself\",\n      subplot: \"polar2\"\n    },\n    {\n      type: \"scatterpolar\",\n      name: \"angular categories (w/ categoryarray)\",\n      r: [5, 4, 2, 4, 5],\n      theta: [\"a\", \"b\", \"c\", \"d\", \"a\"],\n      fill: \"toself\",\n      subplot: \"polar3\"\n    },\n    {\n      type: \"scatterpolar\",\n      name: \"radial categories (w/ category descending)\",\n      r: [\"a\", \"b\", \"c\", \"d\", \"b\", \"f\", \"a\", \"a\"],\n      theta: [45, 90, 180, 200, 300, 15, 20, 45],\n      fill: \"toself\",\n      subplot: \"polar4\"\n    },\n    {\n      type: \"scatterpolar\",\n      name: \"angular categories (w/ extra category)\",\n      r: [5, 4, 2, 4, 5, 5],\n      theta: [\"b\", \"c\", \"d\", \"e\", \"a\", \"b\"],\n      fill: \"toself\"\n    }\n  ]\n\nvar layout = {\n    polar: {\n      domain: {\n        x: [0, 0.46],\n        y: [0.56, 1]\n      },\n      radialaxis: {\n        angle: 45\n      },\n      angularaxis: {\n        direction: \"clockwise\",\n        period: 6\n      }\n    },\n    polar2: {\n      domain: {\n        x: [0, 0.46],\n        y: [0, 0.44]\n      },\n      radialaxis: {\n        angle: 180,\n        tickangle: -180\n      }\n    },\n    polar3: {\n      domain: {\n        x: [0.54, 1],\n        y: [0.56, 1]\n      },\n      sector: [150, 400],\n      radialaxis: {\n        angle: -45\n      },\n      angularaxis: {\n        categoryarray: [\"d\", \"a\", \"c\", \"b\"]\n      }\n    },\n    polar4: {\n      domain: {\n        x: [0.54, 1],\n        y: [0, 0.44]\n      },\n      radialaxis: {\n        categoryorder: \"category descending\"\n      },\n      angularaxis: {\n        thetaunit: \"radians\",\n        dtick: 0.3141592653589793\n      }\n    }\n  }\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/polar-chart/#polar-chart-directions","title":"polar-chart-directions","text":"<pre><code>var data = [\n    {\n      type: \"scatterpolar\",\n      mode: \"lines+markers\",\n      r: [1,2,3,4,5],\n      theta: [0,90,180,360,0],\n      line: {\n        color: \"#ff66ab\"\n      },\n      marker: {\n        color: \"#8090c7\",\n        symbol: \"square\",\n        size: 8\n      },\n      subplot: \"polar\"\n    },\n    {\n      type: \"scatterpolar\",\n      mode: \"lines+markers\",\n      r: [1,2,3,4,5],\n      theta: [0,90,180,360,0],\n      line: {\n        color: \"#ff66ab\"\n      },\n      marker: {\n        color: \"#8090c7\",\n        symbol: \"square\",\n        size: 8\n      },\n      subplot: \"polar2\"\n    }\n  ]\n\nvar layout = {\n    showlegend: false,\n    polar: {\n      domain: {\n        x: [0,0.4],\n        y: [0,1]\n      },\n      radialaxis: {\n        tickfont: {\n          size: 8\n        }\n      },\n      angularaxis: {\n        tickfont: {\n          size: 8\n        },\n        rotation: 90,\n        direction: \"counterclockwise\"\n      }\n    },\n    polar2: {\n      domain: {\n        x: [0.6,1],\n        y: [0,1]\n      },\n      radialaxis: {\n        tickfont: {\n          size: 8\n        }\n      },\n      angularaxis: {\n        tickfont: {\n          size: 8\n        },\n        direction: \"clockwise\"\n      }\n    }\n  }\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/polar-chart/#polar-chart-sector","title":"polar-chart-sector","text":"<pre><code>var data = [\n    {\n      type: \"scatterpolar\",\n      mode: \"lines+markers\",\n      r: [1,2,3,4,5],\n      theta: [0,90,180,360,0],\n      line: {\n        color: \"#ff66ab\"\n      },\n      marker: {\n        color: \"#8090c7\",\n        symbol: \"square\",\n        size: 8\n      },\n      subplot: \"polar\"\n    },\n    {\n      type: \"scatterpolar\",\n      mode: \"lines+markers\",\n      r: [1,2,3,4,5],\n      theta: [0,90,180,360,0],\n      line: {\n        color: \"#ff66ab\"\n      },\n      marker: {\n        color: \"#8090c7\",\n        symbol: \"square\",\n        size: 8\n      },\n      subplot: \"polar2\"\n    }\n  ]\n\nvar layout = {\n    showlegend: false,\n    polar: {\n        sector: [145,215],\n      domain: {\n        x: [0,0.4],\n        y: [0,1]\n      },\n      radialaxis: {\n        tickfont: {\n          size: 8\n        }\n      },\n      angularaxis: {\n        tickfont: {\n          size: 8\n        }\n      }\n    },\n    polar2: {\n      domain: {\n        x: [0.6,1],\n        y: [0,1]\n      },\n      radialaxis: {\n        tickfont: {\n          size: 8\n        }\n      },\n      angularaxis: {\n        tickfont: {\n          size: 8\n        }\n      }\n    }\n  }\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/polar-chart/#polar-chart-subplots","title":"polar-chart-subplots","text":"<pre><code>var data = [{\n    type: \"scatterpolargl\",\n    r: [1, 2, 3],\n    theta: [50, 100, 200],\n    marker: {symbol: \"square\"}\n  }, {\n    type: \"scatterpolargl\",\n    r: [1, 2, 3],\n    theta: [1, 2, 3],\n    thetaunit: \"radians\"\n  }, {\n    type: \"scatterpolargl\",\n    r: [\"a\", \"b\", \"c\", \"b\"],\n    theta: [\"D\", \"C\", \"B\", \"A\"],\n    subplot: \"polar2\"\n  }, {\n    type: \"scatterpolargl\",\n    r: [50, 300, 900],\n    theta: [0, 90, 180],\n    subplot: \"polar3\"\n  }, {\n    type: \"scatterpolargl\",\n    mode: \"lines\",\n    r: [3, 3, 4, 3],\n    theta: [0, 45, 90, 270],\n    fill: \"toself\",\n    subplot: \"polar4\"\n  }]\n\nvar layout =  {\n    polar: {\n      domain: {\n        x: [0, 0.46],\n        y: [0.56, 1]\n      },\n      radialaxis: {\n        range: [1, 4]\n      },\n      angularaxis: {\n        thetaunit: \"radians\"\n      }\n    },\n    polar2: {\n      domain: {\n        x: [0, 0.46],\n        y: [0, 0.42]\n      }\n    },\n    polar3: {\n      domain: {\n        x: [0.54, 1],\n        y: [0.56, 1]\n      },\n      radialaxis: {\n        type: \"log\",\n        tickangle: 45\n      },\n      sector: [0, 180]\n    },\n    polar4: {\n      domain: {\n        x: [0.54, 1],\n        y: [0, 0.44]\n      },\n      radialaxis: {\n          visible: false,\n          range: [0, 6]\n      }\n    },\n    showlegend: false\n  }\n\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/polar-chart/#webgl-polar-chart","title":"webgl-polar-chart","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/hobbs-pearson-trials.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\nvar data = [\n    {\n      type: \"scatterpolargl\",\n      r: unpack(rows, 'trial_1_r'),\n      theta: unpack(rows, 'trial_1_theta'),\n      mode: \"markers\",\n      name: \"Trial 1\",\n      marker: {\n        color: \"rgb(27,158,119)\",\n        size: 15,\n        line: {\n          color: \"white\"\n        },\n        opacity: 0.7\n      },\n      cliponaxis: false\n    },\n    {\n      type: \"scatterpolargl\",\n      r: unpack(rows, \"trial_2_r\"),\n      theta: unpack(rows, \"trial_2_theta\"),\n      mode: \"markers\",\n      name: \"Trial 2\",\n      marker: {\n        color: \"rgb(217,95,2)\",\n        size: 20,\n        line: {\n          color: \"white\"\n        },\n        \"opacity\": 0.7\n      },\n      \"cliponaxis\": false\n    },\n    {\n      type: \"scatterpolargl\",\n      r: unpack(rows, \"trial_3_r\"),\n      theta: unpack(rows, \"trial_3_theta\"),\n      mode: \"markers\",\n      name: \"Trial 3\",\n      marker: {\n        color: \"rgb(117,112,179)\",\n        size: 12,\n        line: {\n          color: \"white\"\n        },\n        opacity: 0.7\n      },\n      cliponaxis: false\n    },\n    {\n      type: \"scatterpolargl\",\n      r: unpack(rows, \"trial_4_r\"),\n      theta: unpack(rows, \"trial_4_theta\"),\n      mode: \"markers\",\n      name: \"Trial 4\",\n      marker: {\n        color: \"rgb(231,41,138)\",\n        size: 22,\n        line: {\n          color: \"white\"\n        },\n        opacity: 0.7\n      },\n      cliponaxis: false\n    },\n    {\n      type: \"scatterpolargl\",\n      r: unpack(rows, \"trial_5_r\"),\n      theta: unpack(rows, \"trial_5_theta\"),\n      mode: \"markers\",\n      name: \"Trial 5\",\n      marker: {\n        color: \"rgb(102,166,30)\",\n        size: 19,\n        line: {\n          color: \"white\"\n        },\n        opacity: 0.7\n      },\n      cliponaxis: false\n    },\n    {\n      type: \"scatterpolargl\",\n      r: unpack(rows, \"trial_6_r\"),\n      theta: unpack(rows, \"trial_6_theta\"),\n      mode: \"markers\",\n      name: \"Trial 6\",\n      marker: {\n        color: \"rgb(230,171,2)\",\n        size: 10,\n        line: {\n          color: \"white\"\n        },\n        opacity: 0.7\n      },\n      cliponaxis: false\n    }\n  ]\n\nvar layout = {\n    title: {\n      text: \"Hobbs-Pearson Trials\"\n    },\n    font: {\n      size: 15\n    },\n    showlegend: false,\n    polar: {\n      bgcolor: \"rgb(223, 223, 223)\",\n      angularaxis: {\n        tickwidth: 2,\n        linewidth: 3,\n        layer: \"below traces\"\n      },\n      radialaxis: {\n        side: \"counterclockwise\",\n        showline: true,\n        linewidth: 2,\n        tickwidth: 2,\n        gridcolor: \"white\",\n        gridwidth: 2\n      }\n    },\n    paper_bgcolor: \"rgb(223, 223, 223)\",\n  }\n\nPlotly.newPlot('myDiv', data, layout);\n})</code></pre>"},{"location":"examples/radar-chart/","title":"radar-chart","text":""},{"location":"examples/radar-chart/#basic-radar-chart","title":"basic-radar-chart","text":"<pre><code>data = [{\n  type: 'scatterpolar',\n  r: [39, 28, 8, 7, 28, 39],\n  theta: ['A','B','C', 'D', 'E', 'A'],\n  fill: 'toself'\n}]\n\nlayout = {\n  polar: {\n    radialaxis: {\n      visible: true,\n      range: [0, 50]\n    }\n  },\n  showlegend: false\n}\n\nPlotly.newPlot(\"myDiv\", data, layout)</code></pre>"},{"location":"examples/radar-chart/#multiple-trace-radar-chart","title":"multiple-trace-radar-chart","text":"<pre><code>data = [\n  {\n  type: 'scatterpolar',\n  r: [39, 28, 8, 7, 28, 39],\n  theta: ['A','B','C', 'D', 'E', 'A'],\n  fill: 'toself',\n  name: 'Group A'\n  },\n  {\n  type: 'scatterpolar',\n  r: [1.5, 10, 39, 31, 15, 1.5],\n  theta: ['A','B','C', 'D', 'E', 'A'],\n  fill: 'toself',\n  name: 'Group B'\n  }\n]\n\nlayout = {\n  polar: {\n    radialaxis: {\n      visible: true,\n      range: [0, 50]\n    }\n  }\n}\n\nPlotly.newPlot(\"myDiv\", data, layout)</code></pre>"},{"location":"examples/range-slider/","title":"range-slider","text":""},{"location":"examples/range-slider/#basic-range-slider-on-time-series","title":"basic-range-slider-on-time-series","text":"<pre><code>var rawDataURL = 'https://raw.githubusercontent.com/plotly/datasets/master/2016-weather-data-seattle.csv';\nvar xField = 'Date';\nvar yField = 'Mean_TemperatureC';\n\nvar selectorOptions = {\n    buttons: [{\n        step: 'month',\n        stepmode: 'backward',\n        count: 1,\n        label: '1m'\n    }, {\n        step: 'month',\n        stepmode: 'backward',\n        count: 6,\n        label: '6m'\n    }, {\n        step: 'year',\n        stepmode: 'todate',\n        count: 1,\n        label: 'YTD'\n    }, {\n        step: 'year',\n        stepmode: 'backward',\n        count: 1,\n        label: '1y'\n    }, {\n        step: 'all',\n    }],\n};\n\nd3.csv(rawDataURL, function(err, rawData) {\n    if(err) throw err;\n\n    var data = prepData(rawData);\n    var layout = {\n        title: {\n            text: 'Time series with range slider and selectors'\n        },\n        xaxis: {\n            rangeselector: selectorOptions,\n            rangeslider: {}\n        },\n        yaxis: {\n            fixedrange: true\n        }\n    };\n\n    Plotly.newPlot('myDiv', data, layout);\n});\n\nfunction prepData(rawData) {\n    var x = [];\n    var y = [];\n\n    rawData.forEach(function(datum, i) {\n\n        x.push(new Date(datum[xField]));\n        y.push(datum[yField]);\n    });\n\n    return [{\n        mode: 'lines',\n        x: x,\n        y: y\n    }];\n}</code></pre>"},{"location":"examples/react/","title":"react","text":""},{"location":"examples/react/#introduction","title":"introduction","text":"<p>Use react-plotly.js to embed D3 charts in your React-powered web application. This React component takes the chart type, data, and styling as Plotly JSON in its data and layout props, then draws the chart using Plotly.js. See below about how to get started with react-plotly.js.</p>"},{"location":"examples/react/#installation","title":"installation","text":"<pre><code>$ npm install react-plotly.js plotly.js</code></pre>"},{"location":"examples/react/#quick-start","title":"quick-start","text":"<p>The easiest way to use this component is to import and pass data to a plot component:</p> <pre><code>import React from 'react';\nimport Plot from 'react-plotly.js';\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;Plot\n        data={[\n          {\n            x: [1, 2, 3],\n            y: [2, 6, 3],\n            type: 'scatter',\n            mode: 'lines+markers',\n            marker: {color: 'red'},\n          },\n          {type: 'bar', x: [1, 2, 3], y: [2, 5, 3]},\n        ]}\n        layout={ {width: 320, height: 240, title: {text: 'A Fancy Plot'}} }\n      /&gt;\n    );\n  }\n}</code></pre>"},{"location":"examples/react/#advanced-usage","title":"advanced-usage","text":"<p>For information on more advanced usage patterns such as State Management or Customizing the plotly.js bundle please see the ReadMe for react-plotly.js.</p>"},{"location":"examples/react/#props-and-events","title":"props-and-events","text":"<p>More information about Props and Event Handlers can be found in the ReadMe for react-plotly.js.</p>"},{"location":"examples/react/#plotly.js-chart-types-and-attributes","title":"plotly.js-chart-types-and-attributes","text":"<p>Click here for more information about Plotly Chart Types and Attributes.</p>"},{"location":"examples/remove-trace/","title":"remove-trace","text":""},{"location":"examples/remove-trace/#remove-trace","title":"remove-trace","text":"<pre><code>function plotGraph(){\nvar trace1 = {\n  x: [1, 2, 3, 4],\n  y: [10, 15, 13, 17],\n  type: 'scatter',\n  line: {\n    color: 'rgb(55, 128, 191)',\n  }\n};\n\nvar trace2 = {\n  x: [1, 2, 3, 4],\n  y: [16, 5, 11, 9],\n  type: 'scatter',\n  line: {\n    color: 'rgb(255,140,0)',\n  }\n};\n\nvar layout = {\n  title: {text: 'Click Buttons to Delete Traces'},\n  showlegend:false\n};\n\nvar data = [trace1, trace2];\n\nPlotly.newPlot('myDiv', data, layout);\n}\n\nfunction deleteTrace(divId){\n  Plotly.deleteTraces('myDiv', 0);\n};</code></pre>"},{"location":"examples/responsive-fluid-layout/","title":"responsive-fluid-layout","text":""},{"location":"examples/responsive-fluid-layout/#responsive-plots","title":"responsive-plots","text":"<p>If you set the <code>responsive</code> attribute equal to <code>true</code> (using the <code>config</code> object), then your figures will be automatically resized when the browser window size changes. This is an especially useful feature for charts which are going to viewed on mobile devices!</p> <pre><code>var trace1 = {\n  type: 'bar',\n  x: [1, 2, 3, 4],\n  y: [5, 10, 2, 8],\n  marker: {\n      color: '#C8A2C8',\n      line: {\n          width: 2.5\n      }\n  }\n};\n\nvar data = [ trace1 ];\n\nvar layout = {\n  title: {\n    text: 'Responsive to window\\'s size!'\n  },\n  font: {size: 18}\n};\n\nvar config = {responsive: true}\n\nPlotly.newPlot('myDiv', data, layout, config );</code></pre>"},{"location":"examples/ribbon-plots/","title":"ribbon-plots","text":""},{"location":"examples/ribbon-plots/#basic-ribbon-plot","title":"basic-ribbon-plot","text":"<pre><code>d3.json('https://raw.githubusercontent.com/plotly/datasets/master/3d-ribbon.json', function(figure){\n\n  var trace1 = {\n    x:figure.data[0].x, y:figure.data[0].y, z:figure.data[0].z,\n    name: '',\n    colorscale: figure.data[0].colorscale,\n    type: 'surface',\n    showscale: false\n  }\n  var trace2 = {\n    x:figure.data[1].x, y:figure.data[1].y, z:figure.data[1].z,\n    name: '',\n    colorscale: figure.data[1].colorscale,\n    type: 'surface',\n    showscale: false\n  }\n  var trace3 = {\n    x:figure.data[2].x, y:figure.data[2].y, z:figure.data[2].z,\n    colorscale: figure.data[2].colorscale,\n    type: 'surface',\n    showscale: false\n  }\n  var trace4 = {\n    x:figure.data[3].x, y:figure.data[3].y, z:figure.data[3].z,\n    colorscale: figure.data[3].colorscale,\n    type: 'surface',\n    showscale: false\n  }\n  var trace5 = {\n    x:figure.data[4].x, y:figure.data[4].y, z:figure.data[4].z,\n    colorscale: figure.data[4].colorscale,\n    type: 'surface',\n    showscale: false\n  }\n  var trace6 = {\n    x:figure.data[5].x, y:figure.data[5].y, z:figure.data[5].z,\n    colorscale: figure.data[5].colorscale,\n    type: 'surface',\n    showscale: false\n  }\n  var trace7 = {\n    x:figure.data[6].x, y:figure.data[6].y, z:figure.data[6].z,\n    name: '',\n    colorscale: figure.data[6].colorscale,\n    type: 'surface',\n    showscale: false\n  }\n\n  var data = [trace1, trace2, trace3, trace4, trace5, trace6, trace7];\n\n  var layout = {\n    title: {\n      text: 'Ribbon Plot'\n    },\n    showlegend: false,\n    autosize: true,\n    width: 600,\n    height: 600,\n    scene: {\n      xaxis: {title: {text: 'Sample #'}},\n      yaxis: {title: {text: 'Wavelength'}},\n      zaxis: {title: {text: 'OD'}}\n    }\n  };\n  Plotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/sankey-diagram/","title":"sankey-diagram","text":""},{"location":"examples/sankey-diagram/#basic-sankey-diagram","title":"basic-sankey-diagram","text":"<pre><code>var data = {\n  type: \"sankey\",\n  orientation: \"h\",\n  node: {\n    pad: 15,\n    thickness: 30,\n    line: {\n      color: \"black\",\n      width: 0.5\n    },\n   label: [\"A1\", \"A2\", \"B1\", \"B2\", \"C1\", \"C2\"],\n   color: [\"blue\", \"blue\", \"blue\", \"blue\", \"blue\", \"blue\"]\n      },\n\n  link: {\n    source: [0,1,0,2,3,3],\n    target: [2,3,3,4,4,5],\n    value:  [8,4,2,8,4,2]\n  }\n}\n\nvar data = [data]\n\nvar layout = {\n  title: {\n    text: \"Basic Sankey\"\n  },\n  font: {\n    size: 10\n  }\n}\n\nPlotly.react('myDiv', data, layout)</code></pre>"},{"location":"examples/sankey-diagram/#create-sankey-canvas","title":"create-sankey-canvas","text":"<pre><code>var data = {\n  type: \"sankey\",\n  domain: {\n    x: [0,1],\n    y: [0,1]\n  },\n  orientation: \"h\",\n  valueformat: \".0f\",\n  valuesuffix: \"TWh\"\n}\n\nvar data = [data]\n\nvar layout = {\n  title: {\n    text: \"Energy forecast for 2050&lt;br&gt;Source: Department of Energy &amp; Climate Change, Tom Counsell via &lt;a href='https://bost.ocks.org/mike/sankey/'&gt;Mike Bostock&lt;/a&gt;\"\n  },\n  width: 1118,\n  height: 772,\n  font: {\n    size: 10\n  }\n}</code></pre>"},{"location":"examples/sankey-diagram/#add-nodes","title":"add-nodes","text":"<pre><code>d3.json('https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json', function(fig){\n\nvar data = {\n  type: \"sankey\",\n  domain: {\n    x: [0,1],\n    y: [0,1]\n  },\n  orientation: \"h\",\n  valueformat: \".0f\",\n  valuesuffix: \"TWh\",\n\n  node: {\n    pad: 15,\n    thickness: 15,\n    line: {\n      color: \"black\",\n      width: 0.5\n    },\n   label: fig.data[0].node.label,\n   color: fig.data[0].node.color\n      }\n}\n\nvar data = [data]\n\nvar layout = {\n  title: {\n    text: \"Energy forecast for 2050&lt;br&gt;Source: Department of Energy &amp; Climate Change, Tom Counsell via &lt;a href='https://bost.ocks.org/mike/sankey/'&gt;Mike Bostock&lt;/a&gt;\"\n  },\n  width: 1118,\n  height: 772,\n  font: {\n    size: 10\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout)\n\n});</code></pre>"},{"location":"examples/sankey-diagram/#add-links","title":"add-links","text":"<pre><code>d3.json('https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy.json', function(fig){\n\nvar data = {\n  type: \"sankey\",\n  domain: {\n    x: [0,1],\n    y: [0,1]\n  },\n  orientation: \"h\",\n  valueformat: \".0f\",\n  valuesuffix: \"TWh\",\n  node: {\n    pad: 15,\n    thickness: 15,\n    line: {\n      color: \"black\",\n      width: 0.5\n    },\n   label: fig.data[0].node.label,\n   color: fig.data[0].node.color\n      },\n\n  link: {\n    source: fig.data[0].link.source,\n    target: fig.data[0].link.target,\n    value: fig.data[0].link.value,\n    label: fig.data[0].link.label\n  }\n}\n\nvar data = [data]\n\nvar layout = {\n  title: {\n    text: \"Energy forecast for 2050&lt;br&gt;Source: Department of Energy &amp; Climate Change, Tom Counsell via &lt;a href='https://bost.ocks.org/mike/sankey/'&gt;Mike Bostock&lt;/a&gt;\"\n  },\n  width: 1118,\n  height: 772,\n  font: {\n    size: 10\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout)\n});</code></pre>"},{"location":"examples/sankey-diagram/#style-sankey-diagram","title":"style-sankey-diagram","text":"<pre><code>d3.json('https://raw.githubusercontent.com/plotly/plotly.js/master/test/image/mocks/sankey_energy_dark.json', function(fig){\n\nvar data = {\n  type: \"sankey\",\n  domain: {\n    x: [0,1],\n    y: [0,1]\n  },\n  orientation: \"h\",\n  valueformat: \".0f\",\n  valuesuffix: \"TWh\",\n  node: {\n    pad: 15,\n    thickness: 15,\n    line: {\n      color: \"black\",\n      width: 0.5\n    },\n   label: fig.data[0].node.label,\n   color: fig.data[0].node.color\n      },\n  link: {\n    source: fig.data[0].link.source,\n    target: fig.data[0].link.target,\n    value: fig.data[0].link.value,\n    label: fig.data[0].link.label\n  }\n}\n\nvar data = [data]\n\nvar layout = {\n  title: {\n    text: \"Energy forecast for 2050&lt;br&gt;Source: Department of Energy &amp; Climate Change, Tom Counsell via &lt;a href='https://bost.ocks.org/mike/sankey/'&gt;Mike Bostock&lt;/a&gt;\"\n  },\n  width: 1118,\n  height: 772,\n  font: {\n    size: 10,\n    color: 'white'\n  },\n  plot_bgcolor: 'black',\n  paper_bgcolor: 'black'\n}\n\nPlotly.newPlot('myDiv', data, layout)\n});</code></pre>"},{"location":"examples/sankey-diagram/#define-node-position","title":"define-node-position","text":"<p>The following example sets node.x and <code>node.y</code> to place nodes in the specified locations, except in the <code>snap arrangement</code> (default behaviour when <code>node.x</code> and <code>node.y</code> are not defined) to avoid overlapping of the nodes, therefore, an automatic snapping of elements will be set to define the padding between nodes via nodepad. The other possible arrangements are: 1) perpendicular 2) freeform 3) fixed</p> <pre><code>var data = [{\n  type: \"sankey\",\n    arrangement: \"snap\",\n    node:{\n        label: [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"],\n        x: [0.2, 0.1, 0.5, 0.7, 0.3, 0.5],\n        y: [0.7, 0.5, 0.2, 0.4, 0.2, 0.3],\n        pad:10}, // 10 Pixels\n    link: {\n        source: [0, 0, 1, 2, 5, 4, 3, 5],\n        target: [5, 3, 4, 3, 0, 2, 2, 3],\n        value: [1, 2, 1, 1, 1, 1, 1, 2]}\n    }]\n\nvar layout = {\n  title: {\n    text: \"Sankey with manually positioned node\"\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/sankey-diagram/#node-alignment","title":"node-alignment","text":"<p>You can set the alignment of nodes using <code>node.align</code>. In this example, we align nodes to the \"right\". <code>node.align</code> can also be set to \"left\", \"center\", or \"justify\". The default is \"justify\" if <code>`node.align</code> is not set, and is similar to aligning to the \"left\", except that nodes without outgoing links are moved to the right of the figure.</p> <pre><code>var data = {\n  type: \"sankey\",\n  orientation: \"h\",\n  node: {\n    label: [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"],\n    align: \"right\",\n  },\n\n  link: {\n    source: [0, 1, 4, 2, 1],\n    target: [1, 4, 5, 4, 3],\n    value: [4, 2, 3, 1, 2],\n  },\n};\n\nvar data = [data];\n\nvar layout = {\n  title: {\n    text: \"Align Nodes (Right)\"\n  },\n  font: {\n    size: 10,\n  },\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/scatter-plots-on-maps/","title":"scatter-plots-on-maps","text":""},{"location":"examples/scatter-plots-on-maps/#canadian-cities-map","title":"canadian-cities-map","text":"<pre><code>var data = [{\n    type: 'scattergeo',\n    mode: 'markers+text',\n    text: [\n        'Montreal', 'Toronto', 'Vancouver', 'Calgary', 'Edmonton',\n        'Ottawa', 'Halifax', 'Victoria', 'Winnepeg', 'Regina'\n    ],\n    lon: [\n        -73.57, -79.24, -123.06, -114.1, -113.28,\n        -75.43, -63.57, -123.21, -97.13, -104.6\n    ],\n    lat: [\n        45.5, 43.4, 49.13, 51.1, 53.34, 45.24,\n        44.64, 48.25, 49.89, 50.45\n    ],\n    marker: {\n        size: 7,\n        color: [\n            '#bebada', '#fdb462', '#fb8072', '#d9d9d9', '#bc80bd',\n            '#b3de69', '#8dd3c7', '#80b1d3', '#fccde5', '#ffffb3'\n        ],\n        line: {\n            width: 1\n        }\n    },\n    name: 'Canadian cities',\n    textposition: [\n        'top right', 'top left', 'top center', 'bottom right', 'top right',\n        'top left', 'bottom right', 'bottom left', 'top right', 'top right'\n    ],\n}];\n\nvar layout = {\n    title: {\n        text: 'Canadian cities',\n        font: {\n            family: 'Droid Serif, serif',\n            size: 16\n        }\n    },\n    geo: {\n        scope: 'north america',\n        resolution: 50,\n        lonaxis: {\n            'range': [-130, -55]\n        },\n        lataxis: {\n            'range': [40, 70]\n        },\n        showrivers: true,\n        rivercolor: '#fff',\n        showlakes: true,\n        lakecolor: '#fff',\n        showland: true,\n        landcolor: '#EAEAAE',\n        countrycolor: '#d3d3d3',\n        countrywidth: 1.5,\n        subunitcolor: '#d3d3d3'\n    }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/scatter-plots-on-maps/#us-airports-map","title":"us-airports-map","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2011_february_us_airport_traffic.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    var scl = [[0,'rgb(5, 10, 172)'],[0.35,'rgb(40, 60, 190)'],[0.5,'rgb(70, 100, 245)'], [0.6,'rgb(90, 120, 245)'],[0.7,'rgb(106, 137, 247)'],[1,'rgb(220, 220, 220)']];\n\n    var data = [{\n        type:'scattergeo',\n        locationmode: 'USA-states',\n        lon: unpack(rows, 'long'),\n        lat: unpack(rows, 'lat'),\n        hoverinfor:  unpack(rows, 'airport'),\n        text:  unpack(rows, 'airport'),\n        mode: 'markers',\n        marker: {\n            size: 8,\n            opacity: 0.8,\n            reversescale: true,\n            autocolorscale: false,\n            symbol: 'square',\n            line: {\n                width: 1,\n                color: 'rgb(102,102,102)'\n            },\n            colorscale: scl,\n            cmin: 0,\n            color: unpack(rows, 'cnt'),\n            colorbar: {\n                title: {text: 'Incoming Flights February 2011'}\n            }\n        }\n    }];\n\n\n    var layout = {\n        title: {text: 'Most Trafficked US airports'},\n        colorbar: true,\n        geo: {\n            scope: 'usa',\n            projection: {\n                type: 'albers usa'\n            },\n            showland: true,\n            landcolor: 'rgb(250,250,250)',\n            subunitcolor: 'rgb(217,217,217)',\n            countrycolor: 'rgb(217,217,217)',\n            countrywidth: 0.5,\n            subunitwidth: 0.5\n        }\n    };\n\n    Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n\n});</code></pre>"},{"location":"examples/scatter-plots-on-maps/#north-america-precipitation-map","title":"north-america-precipitation-map","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\n scl = [[0, 'rgb(150,0,90)'],[0.125, 'rgb(0, 0, 200)'],[0.25,'rgb(0, 25, 255)'],[0.375,'rgb(0, 152, 255)'],[0.5,'rgb(44, 255, 150)'],[0.625,'rgb(151, 255, 0)'],[0.75,'rgb(255, 234, 0)'],[0.875,'rgb(255, 111, 0)'],[1,'rgb(255, 0, 0)']];\n\n    var data = [{\n        type: 'scattergeo',\n        mode: 'markers',\n        text: unpack(rows, 'Globvalue'),\n        lon: unpack(rows, 'Lon'),\n        lat: unpack(rows, 'Lat'),\n        marker: {\n          color: unpack(rows, 'Globvalue'),\n          colorscale: scl,\n          cmin: 0,\n          cmax: 1.4,\n          reversescale: true,\n          opacity: 0.2,\n          size: 2,\n          colorbar:{\n            thickness: 10,\n            title: {side:\n              'right'\n            },\n            outlinecolor: 'rgba(68,68,68,0)',\n            ticks: 'outside',\n            ticklen: 3,\n            shoticksuffix: 'last',\n            ticksuffix: 'inches',\n            dtick: 0.1\n          }\n        },\n        name: 'NA Precipitation'\n    }];\n\n    var layout = {\n      geo:{\n        scope: 'north america',\n        showland: true,\n        landcolor: 'rgb(212,212,212)',\n        subunitcolor: 'rgb(255,255,255)',\n        countrycolor: 'rgb(255,255,255)',\n        showlakes: true,\n        lakecolor: 'rgb(255,255,255)',\n        showsubunits: true,\n        showcountries: true,\n        resolution: 50,\n        projection: {\n          type: 'conic conformal',\n          rotation: {\n            long: -100\n          }\n        },\n      },\n      longaxis: {\n        showgrid: true,\n        gridwidth: 0.5,\n        range: [ -140.0, -55.0 ],\n        dtick: 5\n      },\n      lataxis: {\n        showgrid: true,\n        gridwidth: 0.5,\n        range: [ 20.0, 60.0 ],\n        dtick: 5\n      },\n      title: {text: 'North America Precipitation'},\n      width: 600,\n      height: 600\n    };\n\n    Plotly.newPlot('myDiv', data, layout);\n  });</code></pre>"},{"location":"examples/scatter-tile-maps/","title":"scatter-tile-maps","text":""},{"location":"examples/scatter-tile-maps/#basic-example","title":"basic-example","text":"<pre><code>var data = [{\n  type:'scattermap',\n  lat:['45.5017'],\n  lon:['-73.5673'],\n  mode:'markers',\n  marker: {\n    size:14\n  },\n  text:['Montreal']\n}]\n\nvar layout = {\n  autosize: true,\n  hovermode:'closest',\n  map: {\n    bearing:0,\n    center: {\n      lat:45,\n      lon:-73\n    },\n    pitch:0,\n    zoom:5\n  },\n}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/scatter-tile-maps/#multiple-markers","title":"multiple-markers","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/bcdunbar/datasets/master/meteorites_subset.csv', function(err, rows){\n\n  var classArray = unpack(rows, 'class');\n  var classes = [...new Set(classArray)];\n\n  function unpack(rows, key) {\n    return rows.map(function(row) { return row[key]; });\n  }\n\n  var data = classes.map(function(classes) {\n    var rowsFiltered = rows.filter(function(row) {\n        return (row.class === classes);\n    });\n    return {\n       type: 'scattermap',\n       name: classes,\n       lat: unpack(rowsFiltered, 'reclat'),\n       lon: unpack(rowsFiltered, 'reclong')\n    };\n  });\n\n  var layout = {\n     title: {text: 'Meteorite Landing Locations'},\n     font: {\n         color: 'white'\n     },\n    dragmode: 'zoom',\n    map: {\n      center: {\n        lat: 38.03697222,\n        lon: -90.70916722\n      },\n      domain: {\n        x: [0, 1],\n        y: [0, 1]\n      },\n      style: 'dark',\n      zoom: 1\n    },\n    margin: {\n      r: 20,\n      t: 40,\n      b: 20,\n      l: 20,\n      pad: 0\n    },\n    paper_bgcolor: '#191A1A',\n    plot_bgcolor: '#191A1A',\n    showlegend: true,\n     annotations: [{\n         x: 0,\n       y: 0,\n       xref: 'paper',\n       yref: 'paper',\n         text: 'Source: &lt;a href=\"https://data.nasa.gov/Space-Science/Meteorite-Landings/gh4g-9sfh\" style=\"color: rgb(255,255,255)\"&gt;NASA&lt;/a&gt;',\n         showarrow: false\n     }]\n  };\n\n  Plotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/scatter-tile-maps/#adding-colorscale-to-maps","title":"adding-colorscale-to-maps","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n      }\n\n scl = [[0, 'rgb(150,0,90)'],[0.125, 'rgb(0, 0, 200)'],[0.25,'rgb(0, 25, 255)'],[0.375,'rgb(0, 152, 255)'],[0.5,'rgb(44, 255, 150)'],[0.625,'rgb(151, 255, 0)'],[0.75,'rgb(255, 234, 0)'],[0.875,'rgb(255, 111, 0)'],[1,'rgb(255, 0, 0)']];\n\n    var data = [{\n        type: 'scattermap',\n        mode: 'markers',\n        text: unpack(rows, 'Globvalue'),\n        lon: unpack(rows, 'Lon'),\n        lat: unpack(rows, 'Lat'),\n        marker: {\n          color: unpack(rows, 'Globvalue'),\n          colorscale: scl,\n          cmin: 0,\n          cmax: 1.4,\n          reversescale: true,\n          opacity: 0.5,\n          size: 3,\n          colorbar:{\n            thickness: 10,\n            title: {side:\n              'right'\n            },\n            outlinecolor: 'rgba(68,68,68,0)',\n            ticks: 'outside',\n            ticklen: 3,\n            shoticksuffix: 'last',\n            ticksuffix: 'inches',\n            dtick: 0.1\n          }\n        },\n        name: 'NA Precipitation'\n    }];\n\n    layout = {\n      dragmode: 'zoom',\n      map: {\n        center: {\n          lat: 38.03697222,\n          lon: -90.70916722\n        },\n        domain: {\n          x: [0, 1],\n          y: [0, 1]\n        },\n        style: 'light',\n        zoom: 3\n      },\n      margin: {\n        r: 0,\n        t: 0,\n        b: 0,\n        l: 0,\n        pad: 0\n      },\n      showlegend: false\n   };\n\n    Plotly.newPlot('myDiv', data, layout);\n  });</code></pre>"},{"location":"examples/scatter-tile-maps/#adding-lines-to-maps","title":"adding-lines-to-maps","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/c34aaa0b1b3cddad335173cb7bc0181897201ee6/2011_february_aa_flight_paths.csv', function(err, rows){\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });}\n\n    function getMaxOfArray(numArray) {\n        return Math.max.apply(null, numArray);\n    }\n\n    var data = [];\n    var count = unpack(rows, 'cnt');\n    var startLongitude = unpack(rows, 'start_lon');\n    var endLongitude = unpack(rows, 'end_lon');\n    var startLat = unpack(rows, 'start_lat');\n    var endLat = unpack(rows, 'end_lat');\n\n    for ( var i = 0 ; i &lt; count.length; i++ ) {\n        var opacityValue = count[i]/getMaxOfArray(count);\n\n        var result = {\n            type: 'scattermap',\n            lon: [ startLongitude[i] , endLongitude[i] ],\n            lat: [ startLat[i] , endLat[i] ],\n            mode: 'lines',\n            line: {\n                width: 1,\n                color: 'red'\n            },\n            opacity: opacityValue\n        };\n\n        data.push(result);\n    };\n\n    layout = {\n      dragmode: 'zoom',\n      map: {\n        center: {\n          lat: 38.03697222,\n          lon: -90.70916722\n        },\n        domain: {\n          x: [0, 1],\n          y: [0, 1]\n        },\n        style: 'dark',\n        zoom: 2\n      },\n      margin: {\n        r: 0,\n        t: 0,\n        b: 0,\n        l: 0,\n        pad: 0\n      },\n      paper_bgcolor: '#191A1A',\n      plot_bgcolor: '#191A1A',\n      showlegend: false\n   };\n\n  Plotly.newPlot(\"myDiv\", data, layout, {showLink: false});\n\n});</code></pre>"},{"location":"examples/scatter-tile-maps/#set-marker-symbols","title":"set-marker-symbols","text":"<p>This example uses symbol attribute to set the marker symbol.</p> <pre><code>var data = [\n    {\n        type: \"scattermap\",\n        mode: \"markers+text+lines\",\n        lon: [-75, -80, -50],\n        lat: [45, 20, -20],\n        marker: { size: 20, symbol: [\"bus\", \"harbor\", \"airport\"] },\n        text: [\"Bus\", \"Harbor\", \"Airport\"],\n        textposition: \"bottom right\"\n    }\n];\n\nvar layout = {\n    map: { style: \"outdoors\", zoom: 0.7 },\n    showlegend: false, height: 500, width: 700\n};\n\nPlotly.newPlot(\"myDiv\", data, layout);</code></pre>"},{"location":"examples/scatter-tile-maps/#basic-example-(mapbox)","title":"basic-example-(mapbox)","text":"<p>&gt; Mapbox traces are deprecated and may be removed in a future version of Plotly.js.</p> <p>Earlier examples use traces that render with Maplibre GL JS.   These traces were introduced in Plotly.js 2.35.0 and replace Mapbox-based tile maps,   which are now deprecated. Here's one of the earlier examples using the Mapbox-based <code>choroplethmapbox</code> trace</p> <pre><code>var data = [{\n  type:'scattermapbox',\n  lat:['45.5017'],\n  lon:['-73.5673'],\n  mode:'markers',\n  marker: {\n    size:14\n  },\n  text:['Montreal']\n}]\n\nvar layout = {\n  autosize: true,\n  hovermode:'closest',\n  mapbox: {\n    bearing:0,\n    center: {\n      lat:45,\n      lon:-73\n    },\n    pitch:0,\n    zoom:5\n  },\n}\n\nPlotly.setPlotConfig({\n  mapboxAccessToken: \"your access token\"\n})\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/setting-graph-size/","title":"setting-graph-size","text":""},{"location":"examples/setting-graph-size/#adjusting-height-width-and-margins","title":"adjusting-height-width-and-margins","text":"<pre><code>var data = [\n  {\n    x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    y: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n    type: 'scatter'\n  }\n];\nvar layout = {\n  autosize: false,\n  width: 500,\n  height: 500,\n  margin: {\n    l: 50,\n    r: 50,\n    b: 100,\n    t: 100,\n    pad: 4\n  },\n  paper_bgcolor: '#7f7f7f',\n  plot_bgcolor: '#c7c7c7'\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/setting-graph-size/#automatically-adjust-margins","title":"automatically-adjust-margins","text":"<p>Set <code>automargin=true</code> (reference) and Plotly will automatically increase the margin size to prevent ticklabels from being cut off or overlapping with axis titles.</p> <pre><code>var data = [\n  {\n    x: ['Apples', 'Oranges', 'Watermelon', 'Pears'],\n    y: [3, 2, 1, 4],\n    type: 'bar'\n  }\n];\nvar layout = {\n  autosize: false,\n  width: 500,\n  height: 500,\n  yaxis: {\n    title: {\n      text: 'Y-axis Title',\n      font: { size: 30 }\n    },\n    ticktext: ['long label','Very long label','3','label'],\n    tickvals: [1, 2, 3, 4],\n    tickmode: 'array',\n    automargin: true,\n  },\n  paper_bgcolor: '#7f7f7f',\n  plot_bgcolor: '#c7c7c7'\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/","title":"shapes","text":""},{"location":"examples/shapes/#highlighting-time-series-regions-with-rectangle-shapes","title":"highlighting-time-series-regions-with-rectangle-shapes","text":"<pre><code>var data = [\n  {\n    x: ['2015-02-01', '2015-02-02', '2015-02-03', '2015-02-04', '2015-02-05',\n        '2015-02-06', '2015-02-07', '2015-02-08', '2015-02-09', '2015-02-10',\n        '2015-02-11', '2015-02-12', '2015-02-13', '2015-02-14', '2015-02-15',\n        '2015-02-16', '2015-02-17', '2015-02-18', '2015-02-19', '2015-02-20',\n        '2015-02-21', '2015-02-22', '2015-02-23', '2015-02-24', '2015-02-25',\n        '2015-02-26', '2015-02-27', '2015-02-28'],\n    y: [-14, -17, -8, -4, -7, -10, -12, -14, -12, -7, -11, -7, -18, -14, -14,\n        -16, -13, -7, -8, -14, -8, -3, -9, -9, -4, -13, -9, -6],\n    mode: 'line',\n    name: 'temperature'\n  }\n];\n\nvar layout = {\n\n    // to highlight the timestamp we use shapes and create a rectangular\n\n    shapes: [\n        // 1st highlight during Feb 4 - Feb 6\n        {\n            type: 'rect',\n            // x-reference is assigned to the x-values\n            xref: 'x',\n            // y-reference is assigned to the plot paper [0,1]\n            yref: 'paper',\n            x0: '2015-02-04',\n            y0: 0,\n            x1: '2015-02-06',\n            y1: 1,\n            fillcolor: '#d3d3d3',\n            opacity: 0.2,\n            line: {\n                width: 0\n            }\n        },\n\n        // 2nd highlight during Feb 20 - Feb 23\n\n        {\n            type: 'rect',\n            xref: 'x',\n            yref: 'paper',\n            x0: '2015-02-20',\n            y0: 0,\n            x1: '2015-02-22',\n            y1: 1,\n            fillcolor: '#d3d3d3',\n            opacity: 0.2,\n            line: {\n                width: 0\n            }\n        }\n    ],\n    height: 500,\n    width: 500\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#highlighting-clusters-of-scatter-points-with-circle-shapes","title":"highlighting-clusters-of-scatter-points-with-circle-shapes","text":"<pre><code>function normal_array( mean, stddev, size ){\n    var arr = new Array(size), i;\n    // from http://bl.ocks.org/nrabinowitz/2034281\n    var generator = (function() {\n        return d3.random.normal(mean, stddev);\n    }());\n\n    for( i=0; i&lt; arr.length; i++ ){\n        arr[i] = generator();\n    }\n    return arr;\n}\n\nvar x0 = normal_array(2, 0.45, 300);\nvar y0 = normal_array(2, 0.45, 300);\n\nvar x1 = normal_array(6, 0.4, 200);\nvar y1 = normal_array(6, 0.4, 200)\n\nvar x2 = normal_array(4, 0.3, 200);\nvar y2 = normal_array(4, 0.3, 200);\n\nconsole.log(x0);\n\nvar data = [\n    {\n        x: x0,\n        y: y0,\n        mode: 'markers'\n    }, {\n        x: x1,\n        y: y1,\n        mode: 'markers'\n    }, {\n        x: x2,\n        y: y2,\n        mode: 'markers'\n    }, {\n        x: x1,\n        y: y0,\n        mode: 'markers'\n    }\n];\n\nvar layout = {\n    shapes: [\n        {\n            type: 'circle',\n            xref: 'x',\n            yref: 'y',\n            x0: d3.min(x0),\n            y0: d3.min(y0),\n            x1: d3.max(x0),\n            y1: d3.max(y0),\n            opacity: 0.2,\n            fillcolor: 'blue',\n            line: {\n                color: 'blue'\n            }\n        },\n        {\n            type: 'circle',\n            xref: 'x',\n            yref: 'y',\n            x0: d3.min(x1),\n            y0: d3.min(y1),\n            x1: d3.max(x1),\n            y1: d3.max(y1),\n            opacity: 0.2,\n            fillcolor: 'orange',\n            line: {\n                color: 'orange'\n            }\n        },\n        {\n            type: 'circle',\n            xref: 'x',\n            yref: 'y',\n            x0: d3.min(x2),\n            y0: d3.min(y2),\n            x1: d3.max(x2),\n            y1: d3.max(y2),\n            opacity: 0.2,\n            fillcolor: 'green',\n            line: {\n                color: 'green'\n            }\n        },\n        {\n            type: 'circle',\n            xref: 'x',\n            yref: 'y',\n            x0: d3.min(x1),\n            y0: d3.min(y0),\n            x1: d3.max(x1),\n            y1: d3.max(y0),\n            opacity: 0.2,\n            fillcolor: 'red',\n            line: {\n                color: 'red'\n            }\n        }\n    ],\n    height: 400,\n    width: 480,\n    showlegend: false\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#vertical-and-horizontal-lines-positioned-relative-to-the-axes","title":"vertical-and-horizontal-lines-positioned-relative-to-the-axes","text":"<pre><code>var trace1 = {\n  x: [2, 3.5, 6],\n  y: [1, 1.5, 1],\n  text: ['Vertical Line', 'Horizontal Dashed Line', 'Diagonal dotted Line'],\n  mode: 'text'\n};\n\nvar layout = {\n  title: {\n    text: 'Vertical and Horizontal Lines Positioned Relative to the Axes'\n  },\n  xaxis: {\n    range: [0, 7]\n  },\n  yaxis: {\n    range: [0, 2.5]\n  },\n  width: 500,\n  height: 500,\n  shapes: [\n\n    //line vertical\n\n    {\n      type: 'line',\n      x0: 1,\n      y0: 0,\n      x1: 1,\n      y1: 2,\n      line: {\n        color: 'rgb(55, 128, 191)',\n        width: 3\n      }\n    },\n\n    //Line Horizontal\n\n    {\n      type: 'line',\n      x0: 2,\n      y0: 2,\n      x1: 5,\n      y1: 2,\n      line: {\n        color: 'rgb(50, 171, 96)',\n        width: 4,\n        dash: 'dashdot'\n      }\n    },\n\n    //Line Diagonal\n\n    {\n      type: 'line',\n      x0: 4,\n      y0: 0,\n      x1: 6,\n      y1: 2,\n      line: {\n        color: 'rgb(128, 0, 128)',\n        width: 4,\n        dash: 'dot'\n      }\n    }\n  ]\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#circle","title":"circle","text":"<pre><code>var trace1 = {\n  x: [1.5, 3.5],\n  y: [0.75, 2.5],\n  text: ['Unfilled Circle', 'Filled Circle'],\n  mode: 'text'\n};\n\nvar layout = {\n  title: {\n    text: 'Circles'\n  },\n  xaxis: {\n    range: [0, 4.5],\n    zeroline: false\n  },\n  yaxis: {\n    range: [0, 4.5]\n  },\n  width: 500,\n  height: 500,\n  shapes: [\n\n    // Unfilled Circle\n\n    {\n      type: 'circle',\n      xref: 'x',\n      yref: 'y',\n      x0: 1,\n      y0: 1,\n      x1: 3,\n      y1: 3,\n      line: {\n        color: 'rgba(50, 171, 96, 1)'\n      }\n    },\n\n    // Filled Circle\n\n    {\n      type: 'circle',\n      xref: 'x',\n      yref: 'y',\n      fillcolor: 'rgba(50, 171, 96, 0.7)',\n      x0: 3,\n      y0: 3,\n      x1: 4,\n      y1: 4,\n      line: {\n        color: 'rgba(50, 171, 96, 1)'\n      }\n    }\n  ]\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#rectangle-positioned-relative-to-the-axes","title":"rectangle-positioned-relative-to-the-axes","text":"<pre><code>var trace1 = {\n  x: [1.5, 4.5],\n  y: [0.75, 0.75],\n  text: ['Unfilled Rectangle', 'Filled Rectangle'],\n  mode: 'text'\n};\n\nvar layout = {\n  title: {\n    text: 'Rectangle Positioned Relative to the Axes'\n  },\n  xaxis: {\n    range: [0, 7],\n    showgrid: false\n  },\n  yaxis: {\n    range: [0, 3.5]\n  },\n  width: 500,\n  height: 500,\n  shapes: [\n\n    //Unfilled Rectangle\n\n    {\n      type: 'rect',\n      x0: 1,\n      y0: 1,\n      x1: 2,\n      y1: 3,\n      line: {\n        color: 'rgba(128, 0, 128, 1)'\n      }\n    },\n\n    //Filled Rectangle\n\n    {\n      type: 'rect',\n      x0: 3,\n      y0: 1,\n      x1: 6,\n      y1: 2,\n      line: {\n        color: 'rgba(128, 0, 128, 1)',\n        width: 2\n      },\n      fillcolor: 'rgba(128, 0, 128, 0.7)'\n    }\n  ]\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#rectangle-positioned-relative-to-the-plot-and-to-the-axes","title":"rectangle-positioned-relative-to-the-plot-and-to-the-axes","text":"<pre><code>var trace1 = {\n  x: [1.5, 3],\n  y: [2.5, 2.5],\n  text: ['Rectangle reference to the plot', 'Rectangle reference to the axes'],\n  mode: 'text'\n};\n\nvar layout = {\n  title: {\n    text: 'Rectangles Positioned Relative to the Plot and to the Axes'\n  },\n  xaxis: {\n    range: [0, 4],\n    showgrid: false\n  },\n  yaxis: {\n    range: [0, 4]\n  },\n  width: 800,\n  height: 600,\n  shapes: [\n\n    //Rectangle reference to the axes\n\n    {\n      type: 'rect',\n      xref: 'x',\n      yref: 'y',\n      x0: 2.5,\n      y0: 0,\n      x1: 3.5,\n      y1: 2,\n      line: {\n        color: 'rgb(55, 128, 191)',\n        width: 3\n      },\n      fillcolor: 'rgba(55, 128, 191, 0.6)'\n    },\n\n    //Rectangle reference to the Plot\n\n    {\n      type: 'rect',\n      xref: 'paper',\n      yref: 'paper',\n      x0: 0.25,\n      y0: 0,\n      x1: 0.5,\n      y1: 0.5,\n      line: {\n        color: 'rgb(50, 171, 96)',\n        width: 3\n      },\n      fillcolor: 'rgba(50, 171, 96, 0.6)'\n    }\n  ]\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#lines-positioned-relative-to-the-plot-and-to-the-axis","title":"lines-positioned-relative-to-the-plot-and-to-the-axis","text":"<pre><code>var trace1 = {\n  x: [2, 6],\n  y: [1, 1],\n  text: ['Line positioned relative to the plot', 'Line positioned relative to the axes'],\n  mode: 'text'\n};\n\nvar layout = {\n  title: {\n    text: 'Lines Positioned Relative to the Plot &amp; to the Axes'\n  },\n  xaxis: {\n    range: [0, 8]\n  },\n  yaxis: {\n    range: [0, 2]\n  },\n  width: 500,\n  height: 500,\n  shapes: [\n\n    //Line reference to the axes\n\n    {\n      type: 'line',\n      xref: 'x',\n      yref: 'y',\n      x0: 4,\n      y0: 0,\n      x1: 8,\n      y1: 1,\n      line: {\n        color: 'rgb(55, 128, 191)',\n        width: 3\n      }\n    },\n\n    //Line reference to the plot\n\n    {\n      type: 'line',\n      xref: 'paper',\n      yref: 'paper',\n      x0: 0,\n      y0: 0,\n      x1: 0.5,\n      y1: 0.5,\n      line: {\n        color: 'rgb(50, 171, 96)',\n        width: 3\n      }\n    }\n  ]\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#basic-arbitrary-svg-paths","title":"basic-arbitrary-svg-paths","text":"<pre><code>var trace1 = {\n  x: [2, 1, 8, 8],\n  y: [0.25, 9, 2, 6],\n  text: ['filled triangle', 'filled Polygon', 'Quadratic Bezier Curves', 'Cubic Bezier Curves'],\n  mode: 'text'\n};\n\nvar layout = {\n  title: {\n    text: 'Basic Arbitrary SVG Paths'\n  },\n  xaxis: {\n    range: [0, 9],\n    zeroline: false\n  },\n  yaxis: {\n    range: [0, 11],\n    showgrid: false\n  },\n  width: 500,\n  height: 500,\n  shapes: [\n\n    //Quadratic Bezier Curves\n\n    {\n      type: 'path',\n      path: 'M 4,4 Q 6,0 8,4',\n      line: {\n        color: 'rgb(93, 164, 214)'\n      }\n    },\n\n    //Cubic Bezier Curves\n\n    {\n      type: 'path',\n      path: 'M 1,4 C 2,8 6,4 8,8',\n      line: {\n        color: 'rgb(207, 114, 255)'\n      }\n    },\n\n    //Filled Triangle\n\n    {\n      type: 'path',\n      path: 'M 1 1 L 1 3 L 4 1 Z',\n      fillcolor: 'rgba(44, 160, 101, 0.5)',\n      line: {\n        color: 'rgb(44, 160, 101)'\n      }\n    },\n\n    //Filled Polygon\n\n    {\n      type: 'path',\n      path: ' M 3,7 L2,8 L2,9 L3,10, L4,10 L5,9 L5,8 L4,7 Z',\n      fillcolor: 'rgba(255, 140, 184, 0.5)',\n      line: {\n        color: 'rgb(255, 140, 184)'\n      }\n    }\n  ]\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#venn-diagram-with-circle-shapes","title":"venn-diagram-with-circle-shapes","text":"<pre><code>var trace1 = {\n  x: [1, 1.75, 2.5],\n  y: [1, 1, 1],\n  type: 'scatter',\n  mode: 'text',\n  text: ['A', 'A+B', 'B'],\n  textfont: {\n    color: 'black',\n    size: 18,\n    family: 'Arial'\n  }\n};\n\nvar layout = {\n  title: {\n    text: 'Venn Diagram with Circle Shapes'\n  },\n  xaxis: {\n    showticklabels: false,\n    tickmode: 'linear',\n    showgrid: false,\n    zeroline: false\n  },\n  yaxis: {\n    showticklabels: false,\n    tickmode: 'linear',\n    showgrid: false,\n    zeroline: false\n  },\n  shapes: [{\n    opacity: 0.3,\n    xref: 'x',\n    yref: 'y',\n    fillcolor: 'blue',\n    x0: 0,\n    y0: 0,\n    x1: 2,\n    y1: 2,\n    type: 'circle',\n    line: {\n      color: 'blue'\n    }\n  }, {\n    opacity: 0.3,\n    xref: 'x',\n    yref: 'y',\n    fillcolor: 'gray',\n    x0: 1.5,\n    y0: 0,\n    x1: 3.5,\n    y1: 2,\n    type: 'circle',\n    line: {\n      color: 'gray'\n    }\n  }],\n  margin: {\n    l: 20,\n    r: 20,\n    b: 100\n  },\n  height: 500,\n  width: 500\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#creating-tangent-lines-with-shapes","title":"creating-tangent-lines-with-shapes","text":"<pre><code>function linspace(a,b,n) {\n  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});\n}\n\nvar xValues = linspace(1, 3, 200);\n\nvar yValues = [];\n\nfor ( var i = 0 ; i &lt; xValues.length ; i++ ) {\n  var result = xValues[i] * Math.sin(Math.pow(xValues[i], 2)) + 1;\n  yValues.push(result);\n};\n\nvar trace1 = {\n  x: xValues,\n  y: yValues,\n  type: 'scatter'\n};\n\nvar data = [trace1];\n\nvar layout = {\n  title: {\n    text: 'Rectangles Positioned Relative to the Plot and to the Axes'\n  },\n  shapes: [{\n    type: 'line',\n    x0: 1,\n    y0: 2.30756,\n    x1: 1.75,\n    y1: 2.30756,\n    opacity: 0.7,\n    line: {\n      color: 'red',\n      width: 2.5\n    }\n  }, {\n    type: 'line',\n    x0: 2.5,\n    y0: 3.80796,\n    x1: 3.05,\n    y1: 3.80796,\n    opacity: 0.7,\n    line: {\n      color: 'red',\n      width: 2.5\n    }\n  }, {\n    type: 'line',\n    x0: 1.90,\n    y0: -1.1827,\n    x1: 2.50,\n    y1: -1.1827,\n    opacity: 0.7,\n    line: {\n      color: 'red',\n      width: 2.5\n    }\n  }],\n  height: 500,\n  width: 500\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/shapes/#adding-labels-to-shapes","title":"adding-labels-to-shapes","text":"<p>This example adds a <code>label</code> to a rectangle and a line on the graph, sets a <code>font</code> <code>size</code> and <code>color</code> on the rectangle, and positions its label  'top center' using <code>textposition</code>. On the line, we specify a <code>yanchor</code> of \"top\"  to anchor the top of the label to its <code>textposition</code>.  You can also draw new shapes on the graph and each new shape automatically  gets a text label.</p> <pre><code>var data = [\n  {\n    x: [\n      '2015-02-01', '2015-02-02', '2015-02-03', '2015-02-04', '2015-02-05',\n      '2015-02-06', '2015-02-07', '2015-02-08', '2015-02-09', '2015-02-10',\n      '2015-02-11', '2015-02-12', '2015-02-13', '2015-02-14', '2015-02-15',\n      '2015-02-16', '2015-02-17', '2015-02-18', '2015-02-19', '2015-02-20',\n      '2015-02-21', '2015-02-22', '2015-02-23', '2015-02-24', '2015-02-25',\n      '2015-02-26', '2015-02-27', '2015-02-28',\n    ],\n    y: [\n      14, 17, 8, 4, 7, 10, 12, 14, 12, 11, 10, 9, 18, 14, 14, 16, 13, 8, 8,\n      7, 7, 3, 9, 9, 4, 13, 9, 6,\n    ],\n    mode: 'line',\n  },\n];\n\nvar layout = {\n  title: {text: 'Product price changes and revenue growth'},\n  xaxis: { title: {text: 'Date' }},\n  yaxis: { title: {text: 'Revenue Growth' }},\n  dragmode: 'drawline',\n\n  shapes: [\n    {\n      type: 'rect',\n      xref: 'x',\n      yref: 'paper',\n      x0: '2015-02-02',\n      y0: 0,\n      x1: '2015-02-08',\n      y1: 1,\n      fillcolor: '#d3d3d3',\n      opacity: 0.2,\n      editable: true,\n      line: {\n        width: 0,\n      },\n      label: {\n        text: 'Price drop',\n        font: { size: 10, color: 'green' },\n        textposition: 'top center',\n      },\n    },\n    {\n      type: 'line',\n      x0: '2015-02-01',\n      y0: 8,\n      x1: '2015-02-28',\n      y1: 8,\n      fillcolor: '#d3d3d3',\n      opacity: 0.2,\n      editable: true,\n      label: {\n        text: 'January average',\n        yanchor: 'top',\n      },\n    },\n  ],\n  newshape: { label: { text: 'New shape text' } },\n  height: 500,\n  width: 500,\n};\n\nvar config = { 'modeBarButtonsToAdd': [\n  'drawline',\n  'drawopenpath',\n  'drawclosedpath',\n  'drawcircle',\n  'drawrect',\n  'eraseshape'\n  ]\n};\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/sliders/","title":"sliders","text":""},{"location":"examples/sliders/#bind-components-to-the-appearance-of-a-plot","title":"bind-components-to-the-appearance-of-a-plot","text":"<pre><code>Plotly.newPlot('myDiv', [{\n  x: [1, 2, 3],\n  y: [2, 1, 3]\n}], {\n  sliders: [{\n    pad: {t: 30},\n    len: 0.5,\n    x: 0.5,\n    currentvalue: {\n      xanchor: 'right',\n      prefix: 'color: ',\n      font: {\n        color: '#888',\n        size: 20\n      }\n    },\n    // If all of a component's commands affect a single attribute, the component\n    // will be bound to the plot and will automatically update to reflect changes.\n    steps: [{\n      label: 'red',\n      method: 'restyle',\n      args: ['line.color', 'red']\n    }, {\n      label: 'green',\n      method: 'restyle',\n      args: ['line.color', 'green']\n    }, {\n      label: 'blue',\n      method: 'restyle',\n      args: ['line.color', 'blue']\n    }]\n  }],\n  updatemenus: [{\n    pad: {t: 60, r: 30},\n    type: 'buttons',\n    xanchor: 'left',\n    yanchor: 'top',\n    x: 00,\n    y: 0,\n    direction: 'right',\n    buttons: [{\n      label: 'red',\n      method: 'restyle',\n      args: ['line.color', 'red']\n    }, {\n      label: 'green',\n      method: 'restyle',\n      args: ['line.color', 'green']\n    }, {\n      label: 'blue',\n      method: 'restyle',\n      args: ['line.color', 'blue']\n    }]\n  }]\n});</code></pre>"},{"location":"examples/sliders/#basic-slider","title":"basic-slider","text":"<pre><code>Plotly.newPlot('myDiv', [{\n  x: [1, 2, 3],\n  y: [2, 1, 3]\n}], {\n  sliders: [{\n    pad: {t: 30},\n    currentvalue: {\n      xanchor: 'right',\n      prefix: 'color: ',\n      font: {\n        color: '#888',\n        size: 20\n      }\n    },\n    steps: [{\n      label: 'red',\n      method: 'restyle',\n      args: ['line.color', 'red']\n    }, {\n      label: 'green',\n      method: 'restyle',\n      args: ['line.color', 'green']\n    }, {\n      label: 'blue',\n      method: 'restyle',\n      args: ['line.color', 'blue']\n    }]\n  }]\n});</code></pre>"},{"location":"examples/sliders/#add-a-play-button-to-control-a-slider","title":"add-a-play-button-to-control-a-slider","text":"<pre><code>Plotly.newPlot('myDiv', {\n  data: [{\n    x: [1, 2, 3],\n    y: [2, 1, 3],\n    line: {\n      color: 'red',\n      simplify: false,\n    }\n  }],\n  layout: {\n    sliders: [{\n      pad: {t: 30},\n      x: 0.05,\n      len: 0.95,\n      currentvalue: {\n        xanchor: 'right',\n        prefix: 'color: ',\n        font: {\n          color: '#888',\n          size: 20\n        }\n      },\n      transition: {duration: 500},\n      // By default, animate commands are bound to the most recently animated frame:\n      steps: [{\n        label: 'red',\n        method: 'animate',\n        args: [['red'], {\n          mode: 'immediate',\n          frame: {redraw: false, duration: 500},\n          transition: {duration: 500}\n        }]\n      }, {\n        label: 'green',\n        method: 'animate',\n        args: [['green'], {\n          mode: 'immediate',\n          frame: {redraw: false, duration: 500},\n          transition: {duration: 500}\n        }]\n      }, {\n        label: 'blue',\n        method: 'animate',\n        args: [['blue'], {\n          mode: 'immediate',\n          frame: {redraw: false, duration: 500},\n          transition: {duration: 500}\n        }]\n      }]\n    }],\n    updatemenus: [{\n      type: 'buttons',\n      showactive: false,\n      x: 0.05,\n      y: 0,\n      xanchor: 'right',\n      yanchor: 'top',\n      pad: {t: 60, r: 20},\n      buttons: [{\n        label: 'Play',\n        method: 'animate',\n        args: [null, {\n          fromcurrent: true,\n          frame: {redraw: false, duration: 1000},\n          transition: {duration: 500}\n        }]\n      }]\n    }]\n  },\n  // The slider itself does not contain any notion of timing, so animating a slider\n  // must be accomplished through a sequence of frames. Here we'll change the color\n  // and the data of a single trace:\n  frames: [{\n    name: 'red',\n    data: [{\n      y: [2, 1, 3],\n      'line.color': 'red'\n    }]\n  }, {\n    name: 'green',\n    data: [{\n      y: [3, 2, 1],\n      'line.color': 'green'}]\n  }, {\n    name: 'blue',\n    data: [{\n      y: [1, 3, 2],\n      'line.color': 'blue'}]\n  }]\n});</code></pre>"},{"location":"examples/spc-control-charts/","title":"spc-control-charts","text":""},{"location":"examples/spc-control-charts/#basic-spc-control-chart","title":"basic-spc-control-chart","text":"<pre><code>var Data = {\n  type: 'scatter',\n  x: [1,2,3,4,5,6,7,8,9],\n  y: [4,2,-1,4,-5,-7,0,3,8],\n  mode: 'lines+markers',\n  name: 'Data',\n  showlegend: true,\n  hoverinfo: 'all',\n  line: {\n    color: 'blue',\n    width: 2\n  },\n  marker: {\n    color: 'blue',\n    size: 8,\n    symbol: 'circle'\n  }\n}\n\nvar Viol = {\n  type: 'scatter',\n  x: [6,9],\n  y: [-7,8],\n  mode: 'markers',\n  name: 'Violation',\n  showlegend: true,\n  marker: {\n    color: 'rgb(255,65,54)',\n    line: {width: 3},\n    opacity: 0.5,\n    size: 12,\n    symbol: 'circle-open'\n  }\n}\n\nvar CL = {\n  type: 'scatter',\n  x: [0.5, 10, null, 0.5, 10],\n  y: [-5, -5, null, 5, 5],\n  mode: 'lines',\n  name: 'LCL/UCL',\n  showlegend: true,\n  line: {\n    color: 'red',\n    width: 2,\n    dash: 'dash'\n  }\n}\n\nvar Centre = {\n  type: 'scatter',\n  x: [0.5, 10],\n  y: [0, 0],\n  mode: 'lines',\n  name: 'Centre',\n  showlegend: true,\n  line: {\n    color: 'grey',\n    width: 2\n  }\n}\n\nvar data = [Data,Viol,CL,Centre]\n\nvar layout = {\n  title: {\n    text: 'Basic SPC Chart'\n  },\n  xaxis: {\n    zeroline: false\n  },\n  yaxis: {\n    range: [-10,10],\n    zeroline: false\n  }\n}\n\nPlotly.newPlot('myDiv', data,layout);</code></pre>"},{"location":"examples/spc-control-charts/#spc-control-chart-&-distribution","title":"spc-control-chart-&amp;-distribution","text":"<pre><code>var Data = {\n  type: 'scatter',\n  x: [1,2,3,4,5,6,7,8,9],\n  y: [4,2,-1,4,-5,-7,0,3,8],\n  mode: 'lines+markers',\n  name: 'Data',\n  showlegend: true,\n  hoverinfo: 'all',\n  line: {\n    color: 'blue',\n    width: 2\n  },\n  marker: {\n    color: 'blue',\n    size: 8,\n    symbol: 'circle'\n  }\n}\n\nvar Viol = {\n  type: 'scatter',\n  x: [6,9],\n  y: [-7,8],\n  mode: 'markers',\n  name: 'Violation',\n  showlegend: true,\n  marker: {\n    color: 'rgb(255,65,54)',\n    line: {width: 3},\n    opacity: 0.5,\n    size: 12,\n    symbol: 'circle-open'\n  }\n}\n\nvar CL = {\n  type: 'scatter',\n  x: [0.5, 10, null, 0.5, 10],\n  y: [-5, -5, null, 5, 5],\n  mode: 'lines',\n  name: 'LCL/UCL',\n  showlegend: true,\n  line: {\n    color: 'red',\n    width: 2,\n    dash: 'dash'\n  }\n}\n\nvar Centre = {\n  type: 'scatter',\n  x: [0.5, 10],\n  y: [0, 0],\n  mode: 'lines',\n  name: 'Centre',\n  showlegend: true,\n  line: {\n    color: 'grey',\n    width: 2\n  }\n}\n\nvar histo = {\n  type: 'histogram',\n  x: [1,2,3,4,5,6,7,8,9],\n  y: [4,2,-1,4,-5,-7,0,3,8],\n  name: 'Distribution',\n  orientation: 'h',\n  marker: {\n    color: 'blue',\n    line: {\n      color: 'white',\n      width: 1\n    }\n  },\n  xaxis: 'x2',\n  yaxis: 'y2'\n}\n\nvar data = [Data,Viol,CL,Centre,histo]\n\n// layout\nvar layout = {\n  title: {\n    text: 'Basic SPC Chart'\n  },\n  xaxis: {\n    domain: [0, 0.7], // 0 to 70% of width\n    zeroline: false\n  },\n  yaxis: {\n    range: [-10,10],\n    zeroline: false\n  },\n  xaxis2: {\n    domain: [0.8, 1] // 70 to 100% of width\n  },\n  yaxis2: {\n    anchor: 'x2',\n    showticklabels: false\n  }\n}\n\nPlotly.newPlot('myDiv', data,layout);</code></pre>"},{"location":"examples/splom/","title":"splom","text":""},{"location":"examples/splom/#splom-of-iris-dataset","title":"splom-of-iris-dataset","text":"<p>The Iris dataset contains four data variables, sepal length, sepal width, petal length petal width, for 150 iris flowers. The flowers are labeled as Iris-setosa, Iris-versicolor, Iris-virginica.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-data.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key.replace('.',' ')]; });\n    }\n\n    colors = []\n    for (i=0; i &lt; unpack(rows, 'class').length; i++) {\n      if (unpack(rows, 'class')[i] == \"Iris-setosa\") {\n        colors.push(0)\n      } else if (unpack(rows, 'class')[i] == \"Iris-versicolor\") {\n        colors.push(0.5)\n      } else if (unpack(rows, 'class')[i] == \"Iris-virginica\") {\n        colors.push(1)\n      }\n    }\n\n    var pl_colorscale=[\n               [0.0, '#19d3f3'],\n               [0.333, '#19d3f3'],\n               [0.333, '#e763fa'],\n               [0.666, '#e763fa'],\n               [0.666, '#636efa'],\n               [1, '#636efa']\n    ]\n\n    var axis = () =&gt; ({\n      showline:false,\n      zeroline:false,\n      gridcolor:'#ffff',\n      ticklen:4\n    })\n\n    var data = [{\n      type: 'splom',\n      dimensions: [\n        {label:'sepal length', values:unpack(rows,'sepal length')},\n        {label:'sepal width', values:unpack(rows,'sepal width')},\n        {label:'petal length', values:unpack(rows,'petal length')},\n        {label:'petal width', values:unpack(rows,'petal width')}\n      ],\n      text: unpack(rows, 'class'),\n      marker: {\n        color: colors,\n        colorscale:pl_colorscale,\n        size: 7,\n        line: {\n          color: 'white',\n          width: 0.5\n        }\n      }\n    }]\n\n    var layout = {\n      title: {\n        text: 'Iris Data set'\n      },\n      height: 800,\n      width: 800,\n      autosize: false,\n      hovermode:'closest',\n      dragmode:'select',\n      plot_bgcolor:'rgba(240,240,240, 0.95)',\n      xaxis:axis(),\n      yaxis:axis(),\n      xaxis2:axis(),\n      xaxis3:axis(),\n      xaxis4:axis(),\n      yaxis2:axis(),\n      yaxis3:axis(),\n      yaxis4:axis()\n    }\n\n    Plotly.react('myDiv', data, layout)\n\n});</code></pre>"},{"location":"examples/splom/#splom-of-diabetes-dataset","title":"splom-of-diabetes-dataset","text":"<p>Diabetes dataset is downloaded from kaggle. It is used to predict the onset of diabetes based on 8 diagnostic measures. The diabetes file contains the diagnostic measures for 768 patients, that are labeled as non-diabetic (Outcome=0), respectively diabetic (Outcome=1). The splom associated to the 8 variables can illustrate the strength of the relationship between pairs of measures for diabetic/nondiabetic patients.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    text = []\n    for (i=0; i &lt; unpack(rows, 'Outcome').length; i++) {\n      if (unpack(rows, 'Outcome')[i] == \"0\") {\n        text.push(\"Diabetic\")\n      } else {\n        text.push(\"Non-Diabetic\")\n      }\n    }\n\n    var pl_colorscale=[\n      [0.0, '#119dff'],\n      [0.5, '#119dff'],\n      [0.5, '#ef553b'],\n      [1, '#ef553b']\n    ]\n\n    var axis = () =&gt; ({\n      showline:false,\n      zeroline:false,\n      gridcolor:'#ffff',\n      ticklen:2,\n      tickfont:{size:10},\n      title:{font:{size:12}}\n    })\n\n    var data = [{\n      type: 'splom',\n      dimensions: [\n        {label:'Pregnancies', values:unpack(rows, 'Pregnancies')},\n        {label:'Glucose', values:unpack(rows, 'Glucose')},\n        {label:'BloodPressure', values:unpack(rows, 'BloodPressure')},\n        {label:'SkinThickness', values:unpack(rows, 'SkinThickness')},\n        {label:'Insulin', values:unpack(rows, 'Insulin')},\n        {label:'BMI', values:unpack(rows, 'BMI')},\n        {label:'DiabPedigreeFun', values:unpack(rows, 'DiabetesPedigreeFunction')},\n        {label:'Age', values:unpack(rows, 'Age')}\n      ],\n      text:text,\n      marker: {\n        color: unpack(rows, 'Outcome'),\n        colorscale:pl_colorscale,\n        size: 5,\n        line: {\n          color: 'white',\n          width: 0.5\n        }\n      }\n    }]\n\n    var layout = {\n      title: {\n        text: \"Scatterplot Matrix (SPLOM) for Diabetes Dataset&lt;br&gt;Data source: &lt;a href='https://www.kaggle.com/uciml/pima-indians-diabetes-database/data'&gt;[1]&lt;/a&gt;\"\n      },\n      height: 1000,\n      width: 1000,\n      autosize: false,\n      hovermode:'closest',\n      dragmode:'select',\n      plot_bgcolor:'rgba(240,240,240, 0.95)',\n      xaxis:axis(),\n      yaxis:axis(),\n      xaxis2:axis(),\n      xaxis3:axis(),\n      xaxis4:axis(),\n      xaxis5:axis(),\n      xaxis6:axis(),\n      xaxis7:axis(),\n      xaxis8:axis(),\n      yaxis2:axis(),\n      yaxis3:axis(),\n      yaxis4:axis(),\n      yaxis5:axis(),\n      yaxis6:axis(),\n      yaxis7:axis(),\n      yaxis8:axis()\n    }\n\n    Plotly.react('myDiv', data, layout);\n\n});</code></pre>"},{"location":"examples/streaming/","title":"streaming","text":""},{"location":"examples/streaming/#basic-streaming","title":"basic-streaming","text":"<pre><code>function rand() {\n  return Math.random();\n}\n\nPlotly.newPlot('myDiv', [{\n  y: [1,2,3].map(rand),\n  mode: 'lines',\n  line: {color: '#80CAF6'}\n}]);\n\nvar cnt = 0;\n\nvar interval = setInterval(function() {\n\n  Plotly.extendTraces('myDiv', {\n    y: [[rand()]]\n  }, [0])\n\n  if(++cnt === 100) clearInterval(interval);\n}, 300);</code></pre>"},{"location":"examples/streaming/#multiple-traces","title":"multiple-traces","text":"<pre><code>function rand() {\n  return Math.random();\n}\n\nPlotly.newPlot('myDiv', [{\n  y: [1,2,3].map(rand),\n  mode: 'lines',\n  line: {color: '#80CAF6'}\n}, {\n  y: [1,2,3].map(rand),\n  mode: 'lines',\n  line: {color: '#DF56F1'}\n}]);\n\nvar cnt = 0;\n\nvar interval = setInterval(function() {\n\n  Plotly.extendTraces('myDiv', {\n    y: [[rand()], [rand()]]\n  }, [0, 1])\n\n  if(++cnt === 100) clearInterval(interval);\n}, 300);</code></pre>"},{"location":"examples/streaming/#streaming-with-timestamp","title":"streaming-with-timestamp","text":"<pre><code>function rand() {\n  return Math.random();\n}\n\nvar time = new Date();\n\nvar data = [{\n  x: [time],\n  y: [rand()],\n  mode: 'lines',\n  line: {color: '#80CAF6'}\n}]\n\n\nPlotly.newPlot('myDiv', data);\n\nvar cnt = 0;\n\nvar interval = setInterval(function() {\n\n  var time = new Date();\n\n  var update = {\n  x:  [[time]],\n  y: [[rand()]]\n  }\n\n  Plotly.extendTraces('myDiv', update, [0])\n\n  if(++cnt === 100) clearInterval(interval);\n}, 1000);</code></pre>"},{"location":"examples/streaming/#extend-traces-&-relayout","title":"extend-traces-&amp;-relayout","text":"<pre><code>function rand() {\n  return Math.random();\n}\n\nvar time = new Date();\n\nvar data = [{\n  x: [time],\n  y: [rand],\n  mode: 'lines',\n  line: {color: '#80CAF6'}\n}]\n\nPlotly.newPlot('myDiv', data);\n\nvar cnt = 0;\n\nvar interval = setInterval(function() {\n\n  var time = new Date();\n\n  var update = {\n  x:  [[time]],\n  y: [[rand()]]\n  }\n\n  var olderTime = time.setMinutes(time.getMinutes() - 1);\n  var futureTime = time.setMinutes(time.getMinutes() + 1);\n\n  var minuteView = {\n        xaxis: {\n          type: 'date',\n          range: [olderTime,futureTime]\n        }\n      };\n\n  Plotly.relayout('myDiv', minuteView);\n  Plotly.extendTraces('myDiv', update, [0])\n\n  if(++cnt === 100) clearInterval(interval);\n}, 1000);</code></pre>"},{"location":"examples/streaming/#30-points-using-update","title":"30-points-using-update","text":"<pre><code>var arrayLength = 30\nvar newArray = []\n\nfor(var i = 0; i &lt; arrayLength; i++) {\n  var y = Math.round(Math.random()*10) + 1\n  newArray[i] = y\n}\n\nPlotly.newPlot('myDiv', [{\n  y: newArray,\n  mode: 'lines',\n  line: {color: '#80CAF6'}\n}]);\n\nvar cnt = 0;\n\nvar interval = setInterval(function() {\n\n  var y = Math.round(Math.random()*10) + 1\n  newArray = newArray.concat(y)\n  newArray.splice(0, 1)\n\n  var data_update = {\n    y: [newArray]\n  };\n\n  Plotly.update('myDiv', data_update)\n\n  if(++cnt === 100) clearInterval(interval);\n}, 1000);</code></pre>"},{"location":"examples/streaming/#streaming-subplots","title":"streaming-subplots","text":"<pre><code>function rand() {\n  return Math.random();\n}\n\nvar time = new Date();\n\nvar trace1 = {\n  x: [],\n  y: [],\n  mode: 'lines',\n  line: {\n    color: '#80CAF6',\n    shape: 'spline'\n  }\n}\n\nvar trace2 = {\n  x: [],\n  y: [],\n  xaxis: 'x2',\n  yaxis: 'y2',\n  mode: 'lines',\n  line: {color: '#DF56F1'}\n};\n\nvar layout = {\n  xaxis: {\n    type: 'date',\n    domain: [0, 1],\n    showticklabels: false\n  },\n  yaxis: {domain: [0.6,1]},\n  xaxis2: {\n    type: 'date',\n    anchor: 'y2',\n    domain: [0, 1]\n  },\n  yaxis2: {\n    anchor: 'x2',\n    domain: [0, 0.4]},\n}\n\nvar data = [trace1,trace2];\n\nPlotly.newPlot('myDiv', data, layout);\n\nvar cnt = 0;\n\nvar interval = setInterval(function() {\n\n  var time = new Date();\n\n  var update = {\n    x: [[time], [time]],\n    y: [[rand()], [rand()]]\n  }\n\n  Plotly.extendTraces('myDiv', update, [0,1])\n\n  if(++cnt === 100) clearInterval(interval);\n}, 1000);</code></pre>"},{"location":"examples/streamtube-plot/","title":"streamtube-plot","text":""},{"location":"examples/streamtube-plot/#introduction","title":"introduction","text":"<p>In streamtube plots, attributes inlcude <code>x</code>, <code>y</code>, and <code>z</code>, which set the coorindates of the vector field, and <code>u</code>, <code>v</code>, and <code>w</code>, which sets the x, y, and z components of the vector field. Additionally, you can use <code>starts</code> to determine the streamtube's starting position. Lastly, <code>maxdisplayed</code> determines the maximum segments displayed in a streamtube.</p>"},{"location":"examples/streamtube-plot/#basic-streamtube-plot","title":"basic-streamtube-plot","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-basic.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return row[key]; });\n    }\n\n    var data = [{\n      type: \"streamtube\",\n      x: unpack(rows, 'x'),\n      y: unpack(rows, 'y'),\n      z: unpack(rows, 'z'),\n      u: unpack(rows, 'u'),\n      v: unpack(rows, 'v'),\n      w: unpack(rows, 'w'),\n      sizeref: 0.5,\n      cmin: 0,\n      cmax: 3\n    }]\n\n    var layout = {\n      scene: {\n        camera: {\n          eye: {\n            x: -0.7243612458865182,\n            y: 1.9269804254717962,\n            z: 0.6704828299861716\n          }\n        }\n      }\n    }\n\n    Plotly.newPlot('myDiv', data, layout)\n\n});</code></pre>"},{"location":"examples/streamtube-plot/#starting-position-and-segments","title":"starting-position-and-segments","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/streamtube-wind.csv', function(err, rows){\n\n    function unpack(rows, key) {\n        return rows.map(function(row) { return +row[key]; });\n    }\n\n    var data = [{\n      type: 'streamtube',\n      x: unpack(rows, 'x'),\n      y: unpack(rows, 'y'),\n      z: unpack(rows, 'z'),\n      u: unpack(rows, 'u'),\n      v: unpack(rows, 'v'),\n      w: unpack(rows, 'w'),\n      starts: {\n        x: Array(16).fill(80),\n        y: [20,30,40,50,20,30,40,50,20,30,40,50,20,30,40,50],\n        z: [0,0,0,0,5,5,5,5,10,10,10,10,15,15,15,15]\n      },\n      sizeref: 0.3,\n      colorscale: \"Portland\",\n      showscale: false,\n      maxdisplayed: 3000\n    }]\n\n    var layout = {\n      scene: {\n        aspectratio: {\n          x: 2,\n          y: 1,\n          z: 0.3\n        }\n      },\n      margin: {\n        t: 20,\n        b: 20,\n        l: 20,\n        r: 20\n      },\n      width: 600,\n      height: 400\n    }\n\n    Plotly.newPlot('myDiv', data, layout);\n\n});</code></pre>"},{"location":"examples/subplots/","title":"subplots","text":""},{"location":"examples/subplots/#simple-subplot","title":"simple-subplot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [4, 5, 6],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [20, 30, 40],\n  y: [50, 60, 70],\n  xaxis: 'x2',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  grid: {rows: 1, columns: 2, pattern: 'independent'},\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/subplots/#custom-sized-subplot","title":"custom-sized-subplot","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [4, 5, 6],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [20, 30, 40],\n  y: [50, 60, 70],\n  xaxis: 'x2',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2];\n\nvar layout = {\n  xaxis: {domain: [0, 0.7]},\n  yaxis2: {anchor: 'x2'},\n  xaxis2: {domain: [0.8, 1]}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/subplots/#multiple-subplots","title":"multiple-subplots","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [4, 5, 6],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [20, 30, 40],\n  y: [50, 60, 70],\n  xaxis: 'x2',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [300, 400, 500],\n  y: [600, 700, 800],\n  xaxis: 'x3',\n  yaxis: 'y3',\n  type: 'scatter'\n};\n\nvar trace4 = {\n  x: [4000, 5000, 6000],\n  y: [7000, 8000, 9000],\n  xaxis: 'x4',\n  yaxis: 'y4',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  grid: {rows: 2, columns: 2, pattern: 'independent'},\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/subplots/#subplots-with-shared-axes","title":"subplots-with-shared-axes","text":"<pre><code>var trace1 = {\n  x: [1, 2, 3],\n  y: [2, 3, 4],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [20, 30, 40],\n  y: [5, 5, 5],\n  xaxis: 'x2',\n  yaxis: 'y',\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [2, 3, 4],\n  y: [600, 700, 800],\n  xaxis: 'x',\n  yaxis: 'y3',\n  type: 'scatter'\n};\n\nvar trace4 = {\n  x: [4000, 5000, 6000],\n  y: [7000, 8000, 9000],\n  xaxis: 'x4',\n  yaxis: 'y4',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  grid: {\n    rows: 2,\n    columns: 2,\n    subplots:[['xy','x2y'], ['xy3','x4y4']],\n    roworder:'bottom to top'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/subplots/#stacked-subplots","title":"stacked-subplots","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2],\n  y: [10, 11, 12],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [2, 3, 4],\n  y: [100, 110, 120],\n  xaxis: 'x2',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [3, 4, 5],\n  y: [1000, 1100, 1200],\n  xaxis: 'x3',\n  yaxis: 'y3',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\ngrid: {\n    rows: 3,\n    columns: 1,\n    pattern: 'independent',\n    roworder: 'bottom to top'}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/subplots/#stacked-subplots-with-a-shared-x-axis","title":"stacked-subplots-with-a-shared-x-axis","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2],\n  y: [10, 11, 12],\n  type: 'scatter'\n};\n\nvar trace2 = {\n  x: [2, 3, 4],\n  y: [100, 110, 120],\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar trace3 = {\n  x: [3, 4, 5],\n  y: [1000, 1100, 1200],\n  yaxis: 'y3',\n  type: 'scatter'\n};\n\nvar data = [trace1, trace2, trace3];\n\nvar layout = {\n  yaxis: {domain: [0, 0.33]},\n  legend: {traceorder: 'reversed'},\n  yaxis2: {domain: [0.33, 0.66]},\n  yaxis3: {domain: [0.66, 1]}\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/subplots/#multiple-custom-sized-subplots","title":"multiple-custom-sized-subplots","text":"<pre><code>var trace1 = {\n  x: [1, 2],\n  y: [1, 2],\n  type: 'scatter',\n  name: '(1,1)'\n};\n\nvar trace2 = {\n  x: [1, 2],\n  y: [1, 2],\n  type: 'scatter',\n  name: '(1,2)',\n  xaxis: 'x2',\n  yaxis: 'y2'\n};\n\nvar trace3 = {\n  x: [1, 2],\n  y: [1, 2],\n  type: 'scatter',\n  name: '(1,2)',\n  xaxis: 'x3',\n  yaxis: 'y3'\n};\n\nvar trace4 = {\n  x: [1, 2],\n  y: [1, 2],\n  type: 'scatter',\n  name: '(1,2)',\n  xaxis: 'x4',\n  yaxis: 'y4'\n};\n\nvar data = [trace1, trace2, trace3, trace4];\n\nvar layout = {\n  title: {text: 'Multiple Custom Sized Subplots'},\n  xaxis: {\n    domain: [0, 0.45],\n    anchor: 'y1'\n  },\n  yaxis: {\n    domain: [0.5, 1],\n    anchor: 'x1'\n  },\n  xaxis2: {\n    domain: [0.55, 1],\n    anchor: 'y2'\n  },\n  yaxis2: {\n    domain: [0.8, 1],\n    anchor: 'x2'\n  },\n  xaxis3: {\n    domain: [0.55, 1],\n    anchor: 'y3'\n  },\n  yaxis3: {\n    domain: [0.5, 0.75],\n    anchor: 'x3'\n  },\n  xaxis4: {\n    domain: [0, 1],\n    anchor: 'y4'\n  },\n  yaxis4: {\n    domain: [0, 0.45],\n    anchor: 'x4'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/sunburst-charts/","title":"sunburst-charts","text":""},{"location":"examples/sunburst-charts/#basic-sunburst-chart","title":"basic-sunburst-chart","text":"<pre><code>var data = [{\n  type: \"sunburst\",\n  labels: [\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n  parents: [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n  values:  [10, 14, 12, 10, 2, 6, 6, 4, 4],\n  outsidetextfont: {size: 20, color: \"#377eb8\"},\n  leaf: {opacity: 0.4},\n  marker: {line: {width: 2}},\n}];\n\nvar layout = {\n  margin: {l: 0, r: 0, b: 0, t: 0},\n  width: 500,\n  height: 500\n};\n\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/sunburst-charts/#branchvalues","title":"branchvalues","text":"<p>With branchvalues \"total\", the value of the parent represents the width of its wedge. In the example below, \"Enoch\" is 4 and \"Awan\" is 6 and so Enoch's width is 4/6ths of Awans. With branchvalues \"remainder\", the parent's width is determined by its own value plus those of its children. So, Enoch's width is 4/10ths of Awan's (4 / (6 + 4)).Note that this means that the sum of the values of the children cannot exceed the value of their parent when branchvalues \"total\". When branchvalues \"relative\" (the default), children will not take up all of the space below their parent (unless the parent is the root and it has a value of 0).</p> <pre><code>var data = [\n{\n  \"type\": \"sunburst\",\n  \"labels\": [\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n  \"parents\": [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n  \"values\":  [65, 14, 12, 10, 2, 6, 6, 4, 4],\n  \"leaf\": {\"opacity\": 0.4},\n  \"marker\": {\"line\": {\"width\": 2}},\n  \"branchvalues\": 'total'\n}];\n\nvar layout = {\n  \"margin\": {\"l\": 0, \"r\": 0, \"b\": 0, \"t\": 0},\n};\n\n\nPlotly.newPlot('myDiv', data, layout, {showSendToCloud: true})\n\nmyPlot = document.getElementById(\"myDiv\");</code></pre>"},{"location":"examples/sunburst-charts/#sunburst-with-repeated-labels","title":"sunburst-with-repeated-labels","text":"<pre><code>var data = [{\n  type: \"sunburst\",\n  ids: [\n    \"North America\", \"Europe\", \"Australia\", \"North America - Football\", \"Soccer\",\n    \"North America - Rugby\", \"Europe - Football\", \"Rugby\",\n    \"Europe - American Football\",\"Australia - Football\", \"Association\",\n    \"Australian Rules\", \"Autstralia - American Football\", \"Australia - Rugby\",\n    \"Rugby League\", \"Rugby Union\"\n  ],\n  labels: [\n    \"North&lt;br&gt;America\", \"Europe\", \"Australia\", \"Football\", \"Soccer\", \"Rugby\",\n    \"Football\", \"Rugby\", \"American&lt;br&gt;Football\", \"Football\", \"Association\",\n    \"Australian&lt;br&gt;Rules\", \"American&lt;br&gt;Football\", \"Rugby\", \"Rugby&lt;br&gt;League\",\n    \"Rugby&lt;br&gt;Union\"\n  ],\n  parents: [\n    \"\", \"\", \"\", \"North America\", \"North America\", \"North America\", \"Europe\",\n    \"Europe\", \"Europe\",\"Australia\", \"Australia - Football\", \"Australia - Football\",\n    \"Australia - Football\", \"Australia - Football\", \"Australia - Rugby\",\n    \"Australia - Rugby\"\n  ],\n  outsidetextfont: {size: 20, color: \"#377eb8\"},\n  // leaf: {opacity: 0.4},\n  marker: {line: {width: 2}},\n}];\n\nvar layout = {\n  margin: {l: 0, r: 0, b: 0, t:0},\n  sunburstcolorway:[\"#636efa\",\"#ef553b\",\"#00cc96\"],\n};\n\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/sunburst-charts/#large-number-of-slices","title":"large-number-of-slices","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/coffee-flavors.csv', function(err, rows){\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\nvar data = [\n    {\n      type: \"sunburst\",\n      maxdepth: 3,\n      ids: unpack(rows, 'ids'),\n      labels: unpack(rows, 'labels'),\n      parents:unpack(rows, 'parents')\n    }\n  ];\n\nvar layout = {\n  margin: {l: 0, r: 0, b: 0, t:0},\n  sunburstcolorway:[\n    \"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#19d3f3\",\n    \"#e763fa\", \"#FECB52\",\"#FFA15A\",\"#FF6692\",\"#B6E880\"\n  ],\n  extendsunburstcolorway: true\n};\n\n\nPlotly.newPlot('myDiv', data, layout, {showSendToCloud: true});\n})</code></pre>"},{"location":"examples/sunburst-charts/#control-text-orientation-inside-sunburst-chart-sectors","title":"control-text-orientation-inside-sunburst-chart-sectors","text":"<p>The <code>insidetextorientation</code> attribute controls the orientation of the text inside chart sectors. When set to auto, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The horizontal option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The radial option orients text along the radius of the sector. The tangential option orients text perpendicular to the radius of the sector.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/coffee-flavors.csv', function(err, rows){\n  function unpack(rows, key) {\n  return rows.map(function(row) {return row[key]})\n}\n\n  var data = [{\n        type: \"sunburst\",\n        maxdepth: 2,\n        ids: unpack(rows, 'ids'),\n        labels: unpack(rows, 'labels'),\n        parents: unpack(rows, 'parents'),\n        textposition: 'inside',\n        insidetextorientation: 'radial'\n  }]\n\n  var layout = {margin: {l: 0, r: 0, b: 0, t:0}}\n\n  Plotly.newPlot('myDiv', data, layout)\n})</code></pre>"},{"location":"examples/table-subplots/","title":"table-subplots","text":""},{"location":"examples/table-subplots/#table-and-chart-subplot","title":"table-and-chart-subplot","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n  }\n\n  // header values\n  var headerNames = d3.keys(rows[0]);\n  var headerValues = [headerNames[1],headerNames[2],\n                      headerNames[3],headerNames[4]];\n\n  // cell values\n  var cellValues = [];\n  for (i = 0; i &lt; headerValues.length; i++) {\n    cellValue = unpack(rows, headerValues[i]);\n    cellValues[i] = cellValue;\n  }\n\n  // clean date\n  for (i = 0; i &lt; cellValues[0].length; i++) {\n  var dateValue = cellValues[0][i].split(' ')[0]\n  cellValues[0][i] = dateValue\n  }\n\n  // create table\n  var table = {\n    type: 'table',\n    columnwidth: [150,200,200,150],\n    columnorder: [0,1,2,3],\n    header: {\n      values: headerValues,\n      align: \"center\",\n      line: {width: 1, color: 'rgb(50, 50, 50)'},\n      fill: {color: ['rgb(235, 100, 230)']},\n      font: {family: \"Arial\", size: 11, color: \"white\"}\n    },\n    cells: {\n      values: cellValues,\n      align: [\"center\", \"center\"],\n      line: {color: \"black\", width: 1},\n      fill: {color: ['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']},\n      font: {family: \"Arial\", size: 10, color: [\"black\"]}\n    },\n    xaxis: 'x',\n    yaxis: 'y',\n    domain: {x: [0,0.4], y: [0,1]}\n  }\n\n  // create 1st plot\n  var trace1 = {\n    x: unpack(rows, 'Date'),\n    y: unpack(rows, 'Hash-rate'),\n    xaxis: 'x1',\n    yaxis: 'y1',\n    mode: 'lines',\n    line: {width: 2, color: '#9748a1'},\n    name: 'hash-rate-TH/s'\n  }\n  // create 2nd plot\n  var trace2 = {\n    x: unpack(rows, 'Date'),\n    y: unpack(rows, 'Mining-revenue-USD'),\n    xaxis: 'x2',\n    yaxis: 'y2',\n    mode: 'lines',\n    line: {width: 2, color: '#b04553'},\n    name: 'Mining-revenue-USD'\n  }\n\n  // create 3rd plot\n  var trace3 = {\n    x: unpack(rows, 'Date'),\n    y: unpack(rows, 'Transaction-fees-BTC'),\n    xaxis: 'x3',\n    yaxis: 'y3',\n    mode: 'lines',\n    line: {width: 2, color: '#af7bbd'},\n    name: 'Transaction-fees-BTC'\n  }\n\n  var data = [table,trace1,trace2,trace3]\n\n  // define subplot axes\n  var axis = {\n    showline: true,\n    zeroline: false,\n    showgrid: true,\n    mirror:true,\n    ticklen: 4,\n    gridcolor: '#ffffff',\n    tickfont: {size: 10},\n  }\n\n  var axis1 = {domain: [0.5, 1], anchor: 'y1', showticklabels: false}\n  var axis2 = {domain: [0.5, 1], anchor: 'y2', showticklabels: false}\n  var axis3 = {domain: [0.5, 1], anchor: 'y3'}\n  var axis4 = {domain: [0.66, 0.98], anchor: 'x1', hoverformat: '.2f'}\n  var axis5 = {domain: [0.34, 0.64], anchor: 'x2', tickprefix: '$', hoverformat: '.2f'}\n  var axis6 = {domain: [0.0, 0.32], anchor: 'x3', tickprefix: '\\u20BF', hoverformat: '.2f'}\n\n  // define layout\n  var layout = {\n    title: {text: \"Bitcoin mining stats for 180 days\"},\n    plot_bgcolor: 'rgba(228, 222, 249, 0.65)',\n    showlegend: false,\n    xaxis1: Object.assign(axis1,axis),\n    xaxis2: Object.assign(axis2,axis),\n    xaxis3: Object.assign(axis3,axis),\n    yaxis1: Object.assign(axis4,axis),\n    yaxis2: Object.assign(axis5,axis),\n    yaxis3: Object.assign(axis6,axis)\n  }\n\n  Plotly.newPlot('myDiv', data, layout);\n\n});</code></pre>"},{"location":"examples/table/","title":"table","text":""},{"location":"examples/table/#basic-table","title":"basic-table","text":"<pre><code>var values = [\n      ['Salaries', 'Office', 'Merchandise', 'Legal', '&lt;b&gt;TOTAL&lt;/b&gt;'],\n      [1200000, 20000, 80000, 2000, 12120000],\n      [1300000, 20000, 70000, 2000, 130902000],\n      [1300000, 20000, 120000, 2000, 131222000],\n      [1400000, 20000, 90000, 2000, 14102000]]\n\nvar data = [{\n  type: 'table',\n  header: {\n    values: [[\"&lt;b&gt;EXPENSES&lt;/b&gt;\"], [\"&lt;b&gt;Q1&lt;/b&gt;\"],\n                 [\"&lt;b&gt;Q2&lt;/b&gt;\"], [\"&lt;b&gt;Q3&lt;/b&gt;\"], [\"&lt;b&gt;Q4&lt;/b&gt;\"]],\n    align: \"center\",\n    line: {width: 1, color: 'black'},\n    fill: {color: \"grey\"},\n    font: {family: \"Arial\", size: 12, color: \"white\"}\n  },\n  cells: {\n    values: values,\n    align: \"center\",\n    line: {color: \"black\", width: 1},\n    font: {family: \"Arial\", size: 11, color: [\"black\"]}\n  }\n}]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/table/#styled-table","title":"styled-table","text":"<pre><code>var values = [\n      ['Salaries', 'Office', 'Merchandise', 'Legal', '&lt;b&gt;TOTAL&lt;/b&gt;'],\n      [1200000, 20000, 80000, 2000, 12120000],\n      [1300000, 20000, 70000, 2000, 130902000],\n      [1300000, 20000, 120000, 2000, 131222000],\n      [1400000, 20000, 90000, 2000, 14102000]]\n\nvar data = [{\n  type: 'table',\n  header: {\n    values: [[\"&lt;b&gt;EXPENSES&lt;/b&gt;\"], [\"&lt;b&gt;Q1&lt;/b&gt;\"],\n                 [\"&lt;b&gt;Q2&lt;/b&gt;\"], [\"&lt;b&gt;Q3&lt;/b&gt;\"], [\"&lt;b&gt;Q4&lt;/b&gt;\"]],\n    align: [\"left\", \"center\"],\n    line: {width: 1, color: '#506784'},\n    fill: {color: '#119DFF'},\n    font: {family: \"Arial\", size: 12, color: \"white\"}\n  },\n  cells: {\n    values: values,\n    align: [\"left\", \"center\"],\n    line: {color: \"#506784\", width: 1},\n     fill: {color: ['#25FEFD', 'white']},\n    font: {family: \"Arial\", size: 11, color: [\"#506784\"]}\n  }\n}]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/table/#table-from-a-csv","title":"table-from-a-csv","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n  }\n\n  var headerNames = d3.keys(rows[0]);\n\n  var headerValues = [];\n  var cellValues = [];\n  for (i = 0; i &lt; headerNames.length; i++) {\n    headerValue = [headerNames[i]];\n    headerValues[i] = headerValue;\n    cellValue = unpack(rows, headerNames[i]);\n    cellValues[i] = cellValue;\n  }\n\n  // clean date\n  for (i = 0; i &lt; cellValues[1].length; i++) {\n  var dateValue = cellValues[1][i].split(' ')[0]\n  cellValues[1][i] = dateValue\n  }\n\n\nvar data = [{\n  type: 'table',\n  columnwidth: [150,600,1000,900,600,500,1000,1000,1000],\n  columnorder: [0,1,2,3,4,5,6,7,8,9],\n  header: {\n    values: headerValues,\n    align: \"center\",\n    line: {width: 1, color: 'rgb(50, 50, 50)'},\n    fill: {color: ['rgb(235, 100, 230)']},\n    font: {family: \"Arial\", size: 8, color: \"white\"}\n  },\n  cells: {\n    values: cellValues,\n    align: [\"center\", \"center\"],\n    line: {color: \"black\", width: 1},\n    fill: {color: ['rgba(228, 222, 249, 0.65)','rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']},\n    font: {family: \"Arial\", size: 9, color: [\"black\"]}\n  }\n}]\n\nvar layout = {\n  title: {\n    text: \"Bitcoin mining stats for 180 days\"\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/table/#changing-size-of-rows-and-columns","title":"changing-size-of-rows-and-columns","text":"<pre><code>var values = [\n      ['Salaries', 'Office', 'Merchandise', 'Legal', '&lt;b&gt;TOTAL&lt;br&gt;EXPENSES&lt;/b&gt;'],\n    [\"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n     \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n     \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n     \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\",\n    \"Lorem ipsum dolor sit amet, tollit discere inermis pri ut. Eos ea iusto timeam, an prima laboramus vim. Id usu aeterno adversarium, summo mollis timeam vel ad\"]]\n\nvar data = [{\n  type: 'table',\n  columnorder: [1,2],\n  columnwidth: [80,400],\n  header: {\n    values: [[\"&lt;b&gt;EXPENSES&lt;/b&gt;&lt;br&gt;as of July 2017\"], [\"&lt;b&gt;DESCRIPTION&lt;/b&gt;\"]],\n     align: [\"left\", \"center\"],\n     height: 40,\n    line: {width: 1, color: '#506784'},\n    fill: {color: '#119DFF'},\n    font: {family: \"Arial\", size: 12, color: \"white\"}\n  },\n  cells: {\n    values: values,\n    align: [\"left\", \"center\"],\n     height: 30,\n    line: {color: \"#506784\", width: 1},\n     fill: {color: ['#25FEFD', 'white']},\n    font: {family: \"Arial\", size: 11, color: [\"#506784\"]}\n  }\n}]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/table/#alternating-row-colors","title":"alternating-row-colors","text":"<pre><code>var values = [\n      ['Salaries', 'Office', 'Merchandise', 'Legal', '&lt;b&gt;TOTAL&lt;/b&gt;'],\n      [1200000, 20000, 80000, 2000, 12120000],\n      [1300000, 20000, 70000, 2000, 130902000],\n      [1300000, 20000, 120000, 2000, 131222000],\n      [1400000, 20000, 90000, 2000, 14102000]]\n\nvar headerColor = \"grey\";\nvar rowEvenColor = \"lightgrey\";\nvar rowOddColor = \"white\";\n\nvar data = [{\n  type: 'table',\n  header: {\n    values: [[\"&lt;b&gt;EXPENSES&lt;/b&gt;\"], [\"&lt;b&gt;Q1&lt;/b&gt;\"],\n                 [\"&lt;b&gt;Q2&lt;/b&gt;\"], [\"&lt;b&gt;Q3&lt;/b&gt;\"], [\"&lt;b&gt;Q4&lt;/b&gt;\"]],\n    align: \"center\",\n    line: {width: 1, color: 'black'},\n    fill: {color: headerColor},\n    font: {family: \"Arial\", size: 12, color: \"white\"}\n  },\n  cells: {\n    values: values,\n    align: \"center\",\n    line: {color: \"black\", width: 1},\n    fill: {color: [[rowOddColor,rowEvenColor,rowOddColor,\n                          rowEvenColor,rowOddColor]]},\n    font: {family: \"Arial\", size: 11, color: [\"black\"]}\n  }\n}]\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/table/#table-subplots","title":"table-subplots","text":"<p>Please see Table Subplots documentation.</p>"},{"location":"examples/ternary-contour/","title":"ternary-contour","text":""},{"location":"examples/ternary-contour/#basic-filled-ternary-plot","title":"basic-filled-ternary-plot","text":"<pre><code>var url = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json';\n\nvar colors = ['#8dd3c7','#ffffb3','#bebada','#fb8072','#80b1d3','#fdb462','#b3de69','#fccde5','#d9d9d9','#bc80bd','#ccebc5','#ffed6f'];\n\n\nd3.json(url, function(err, rawData) {\n    if(err) throw err;\n\n    plot(rawData);\n});\n\nfunction plot(rawData) {\n    var data = Object.keys(rawData).map(function(k, i) {\n        var pts = rawData[k];\n        pts = pts.concat(pts[0]);\n\n        return {\n            type: 'scatterternary',\n            mode: 'lines',\n            name: k,\n            a: pts.map(function(d) { return d.clay }),\n            b: pts.map(function(d) { return d.sand }),\n            c: pts.map(function(d) { return d.silt }),\n            line: { color: '#444' },\n            fill: 'toself',\n            fillcolor: colors[i],\n            hoveron:'fills+points'\n        };\n    });\n\n    var layout = {\n        ternary: {\n            sum: 100,\n            aaxis: makeAxis('Clay'),\n            baxis: makeAxis('Sand'),\n            caxis: makeAxis('Silt')\n        },\n        showlegend: false,\n        width: 700,\n        annotations: [{\n            showarrow: false,\n            text: 'Soil Types Fill Plot',\n            x: 0.15,\n            y: 1.1\n        }]\n    };\n\n    Plotly.newPlot('myDiv', data, layout);\n}\n\nfunction makeAxis(title) {\n  return {\n      title: {\n        text: title\n      },\n      ticksuffix: '%',\n      min: 0.01,\n      linewidth: 2,\n      ticks: 'outside',\n      ticklen: 8,\n      showgrid: true,\n  };\n}</code></pre>          Inspired from Daven Quinn's block"},{"location":"examples/ternary-plots/","title":"ternary-plots","text":""},{"location":"examples/ternary-plots/#basic-ternary-plot-with-markers","title":"basic-ternary-plot-with-markers","text":"<pre><code>var rawData = [\n    {journalist:75,developer:25,designer:0,label:'point 1'},\n    {journalist:70,developer:10,designer:20,label:'point 2'},\n    {journalist:75,developer:20,designer:5,label:'point 3'},\n    {journalist:5,developer:60,designer:35,label:'point 4'},\n    {journalist:10,developer:80,designer:10,label:'point 5'},\n    {journalist:10,developer:90,designer:0,label:'point 6'},\n    {journalist:20,developer:70,designer:10,label:'point 7'},\n    {journalist:10,developer:20,designer:70,label:'point 8'},\n    {journalist:15,developer:5,designer:80,label:'point 9'},\n    {journalist:10,developer:10,designer:80,label:'point 10'},\n    {journalist:20,developer:10,designer:70,label:'point 11'},\n];\n\nPlotly.newPlot('myDiv', [{\n    type: 'scatterternary',\n    mode: 'markers',\n    a: rawData.map(function(d) { return d.journalist; }),\n    b: rawData.map(function(d) { return d.developer; }),\n    c: rawData.map(function(d) { return d.designer; }),\n    text: rawData.map(function(d) { return d.label; }),\n    marker: {\n        symbol: 100,\n        color: '#DB7365',\n        size: 14,\n        line: { width: 2 }\n    },\n}], {\n    ternary: {\n        sum: 100,\n        aaxis: makeAxis('Journalist', 0),\n        baxis: makeAxis('&lt;br&gt;Developer', 45),\n        caxis: makeAxis('&lt;br&gt;Designer', -45),\n        bgcolor: '#fff1e0'\n    },\n    annotations: [{\n      showarrow: false,\n      text: 'Replica of Tom Pearson\\'s &lt;a href=\"http://bl.ocks.org/tomgp/7674234\"&gt;block&lt;/a&gt;',\n        x: 1.0,\n        y: 1.3,\n        font: { size: 15 }\n    }],\n    paper_bgcolor: '#fff1e0',\n});\n\nfunction makeAxis(title, tickangle) {\n    return {\n        title: {\n            text: title,\n            font: {\n                size: 20\n            }\n        },\n        tickangle: tickangle,\n        tickfont: {\n            size: 15\n        },\n        tickcolor: 'rgba(0,0,0,0)',\n        ticklen: 5,\n        showline: true,\n        showgrid: true\n    };\n}</code></pre>          Inspired from Tom Pearson's block"},{"location":"examples/ternary-plots/#soil-types-ternary-plot","title":"soil-types-ternary-plot","text":"<pre><code>var url = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json';\n\nd3.json(url, function(err, rawData) {\n    if(err) throw err;\n\n    plot(rawData);\n});\n\nfunction plot(rawData) {\n    var data = Object.keys(rawData).map(function(k) {\n        var pts = rawData[k];\n\n        return {\n            type: 'scatterternary',\n            mode: 'lines',\n            name: k,\n            a: pts.map(function(d) { return d.clay }),\n            b: pts.map(function(d) { return d.sand }),\n            c: pts.map(function(d) { return d.silt }),\n            line: { color: '#c00' }\n        };\n    });\n\n    var layout = {\n        ternary: {\n            sum: 100,\n            aaxis: makeAxis('Clay'),\n            baxis: makeAxis('Sand'),\n            caxis: makeAxis('Silt')\n        },\n        showlegend: false,\n        width: 700,\n        annotations: [{\n            showarrow: false,\n            text: 'Replica of Daven Quinn\\'s &lt;a href=\"http://bl.ocks.org/davenquinn/988167471993bc2ece29\"&gt;block&lt;/a&gt;',\n            x: 0.15,\n            y: 1.1\n        }]\n    };\n\n    Plotly.newPlot('myDiv', data, layout);\n}\n\nfunction makeAxis(title) {\n  return {\n      title: {\n         text: title\n      },\n      ticksuffix: '%',\n      min: 0.01,\n      linewidth: 2,\n      ticks: 'outside',\n      ticklen: 8,\n      showgrid: true,\n  };\n}</code></pre>          Inspired from Daven Quinn's block"},{"location":"examples/text-and-annotations/","title":"text-and-annotations","text":""},{"location":"examples/text-and-annotations/#adding-text-to-data-in-line-and-scatter-plots","title":"adding-text-to-data-in-line-and-scatter-plots","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2],\n  y: [1, 1, 1],\n  mode: 'lines+markers+text',\n  name: 'Lines, Markers and Text',\n  text: ['Text A', 'Text B', 'Text C'],\n  textposition: 'top',\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2],\n  y: [2, 2, 2],\n  mode: 'markers+text',\n  name: 'Markers and Text',\n  text: ['Text D', 'Text E', 'Text F'],\n  textposition: 'bottom',\n  type: 'scatter'\n};\nvar trace3 = {\n  x: [0, 1, 2],\n  y: [3, 3, 3],\n  mode: 'lines+text',\n  name: 'Lines and Text',\n  text: ['Text G', 'Text H', 'Text I'],\n  textposition: 'bottom',\n  type: 'scatter'\n};\nvar data = [trace1, trace2, trace3];\nvar layout = {showlegend: false};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#paper-referenced-annotations","title":"paper-referenced-annotations","text":"<pre><code>Plotly.newPlot('myDiv', [{\n  x: [1,2,3],\n  y: [2,1,2]\n}], {\n  annotations: [{\n    xref: 'paper',\n    yref: 'paper',\n    x: 0,\n    xanchor: 'right',\n    y: 1,\n    yanchor: 'bottom',\n    text: 'X axis label',\n    showarrow: false\n  }, {\n    xref: 'paper',\n    yref: 'paper',\n    x: 1,\n    xanchor: 'left',\n    y: 0,\n    yanchor: 'top',\n    text: 'Y axis label',\n    showarrow: false\n  }]\n\n})</code></pre>"},{"location":"examples/text-and-annotations/#simple-annotation","title":"simple-annotation","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false,\n  annotations: [\n    {\n      x: 2,\n      y: 5,\n      xref: 'x',\n      yref: 'y',\n      text: 'Annotation Text',\n      showarrow: true,\n      arrowhead: 7,\n      ax: 0,\n      ay: -40\n    }\n  ]\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#annotations-with-log-axes","title":"annotations-with-log-axes","text":"<p>If the <code>x</code> or <code>y</code> positions of an annotation reference a log axis, you need to provide that position as a <code>log10</code> value when adding the annotation. In this example, the <code>yaxis</code> is a log axis so we pass the <code>log10</code> value of <code>1000</code> to the annotation's <code>y</code> position.</p> <pre><code>var dates = [\n    \"2024-01-01\",\n    \"2024-01-02\",\n    \"2024-01-03\",\n    \"2024-01-04\",\n    \"2024-01-05\",\n    \"2024-01-06\",\n];\n\nvar y_values = [1, 30, 70, 100, 1000, 10000000];\n\nvar trace1 = {\n    x: dates,\n    y: y_values,\n    mode: 'lines+markers',\n    type: 'scatter'\n};\n\nvar layout = {\n    yaxis: {\n        type: 'log',\n    },\n    annotations: [\n        {\n            x: '2024-01-05',\n            y: Math.log10(1000),\n            text: 'Log axis annotation',\n            showarrow: true,\n            xanchor: 'right',\n        }\n    ]\n};\n\nvar data = [trace1];\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#multiple-annotations","title":"multiple-annotations","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false,\n  annotations: [\n    {\n      x: 2,\n      y: 5,\n      xref: 'x',\n      yref: 'y',\n      text: 'Annotation Text',\n      showarrow: true,\n      arrowhead: 7,\n      ax: 0,\n      ay: -40\n    },\n    {\n      x: 4,\n      y: 4,\n      xref: 'x',\n      yref: 'y',\n      text: 'Annotation Text 2',\n      showarrow: true,\n      arrowhead: 7,\n      ax: 0,\n      ay: -40\n    }\n  ]\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#subplot-annotations","title":"subplot-annotations","text":"<pre><code>var trace0 = {\n  x: [1, 2, 3],\n  y: [4, 5, 6],\n  type: 'scatter'\n};\n\nvar trace1 = {\n  x: [20, 30, 40],\n  y: [50, 60, 70],\n  xaxis: 'x2',\n  yaxis: 'y2',\n  type: 'scatter'\n};\n\nvar data = [trace0, trace1];\n\nvar layout = {\n  title: {\n    text: 'Subplot Annotations'\n  },\n  xaxis: {domain: [0, 0.45]},\n  yaxis2: {anchor: 'x2'},\n  xaxis2: {domain: [0.55, 1]},\n  annotations: [\n    {\n      x: 2,\n      y: 5,\n      xref: 'x',\n      yref: 'y',\n      text: 'Annotation A',\n      showarrow: true,\n      arrowhead: 3,\n      ax: -30,\n      ay: -40\n    },\n    {\n      x: 30,\n      y: 60,\n      xref: 'x2',\n      yref: 'y2',\n      text: 'Annotation B',\n      showarrow: true,\n      arrowhead: 2,\n      ax: -25,\n      ay: -40\n    }\n  ]\n};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#3d-annotations","title":"3d-annotations","text":"<pre><code>var data = [{\n    type: \"scatter3d\",\n    x: [\"2017-01-01\", \"2017-02-10\", \"2017-03-20\"],\n    y: [\"A\", \"B\", \"C\"],\n    z: [1, 1e3, 1e5]\n }]\n\nvar layout = {\n    scene: {\n      camera: {\n        eye: {x: 2.1, y: 0.1, z: 0.9}\n      },\n      xaxis: {\n        title: {\n            text: \"\"\n        }\n      },\n      yaxis: {\n          title: {\n              text: \"\"\n          }\n      },\n      zaxis: {\n          type: \"log\",\n          title: {\n              text: \"\"\n          }\n      },\n      annotations: [{\n        showarrow: false,\n        x: \"2017-01-01\",\n        y: \"A\",\n        z: 0,\n        text: \"Point 1\",\n        font: {\n          color: \"black\",\n          size: 12\n        },\n        xanchor: \"left\",\n        xshift: 10,\n        opacity: 0.7\n      }, {\n        x: \"2017-02-10\",\n        y: \"B\",\n        z: 4,\n        text: \"Point 2\",\n        textangle: 0,\n        ax: 0,\n        ay: -75,\n        font: {\n          color: \"black\",\n          size: 12\n        },\n        arrowcolor: \"black\",\n        arrowsize: 3,\n        arrowwidth: 1,\n        arrowhead: 1\n      }, {\n        x: \"2017-03-20\",\n        y: \"C\",\n        z: 5,\n        ax: 50,\n        ay: 0,\n        text: \"Point 3\",\n        arrowhead: 1,\n        xanchor: \"left\",\n        yanchor: \"bottom\"\n      }]\n}\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#custom-text-color-and-styling","title":"custom-text-color-and-styling","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2],\n  y: [1, 1, 1],\n  mode: 'lines+markers+text',\n  name: 'Lines, Markers and Text',\n  text: ['Text A', 'Text B', 'Text C'],\n  textposition: 'top right',\n  textfont: {\n    family: 'sans serif',\n    size: 18,\n    color: '#1f77b4'\n  },\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2],\n  y: [2, 2, 2],\n  mode: 'lines+markers+text',\n  name: 'Lines and Text',\n  text: ['Text G', 'Text H', 'Text I'],\n  textposition: 'bottom',\n  textfont: {\n    family: 'sans serif',\n    size: 18,\n    color: '#ff7f0e'\n  },\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {showlegend: false};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#styling-and-coloring-annotations","title":"styling-and-coloring-annotations","text":"<pre><code>var trace1 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 1, 3, 2, 4, 3, 4, 6, 5],\n  type: 'scatter'\n};\nvar trace2 = {\n  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],\n  y: [0, 4, 5, 1, 2, 2, 3, 4, 2],\n  type: 'scatter'\n};\nvar data = [trace1, trace2];\nvar layout = {\n  showlegend: false,\n  annotations: [\n    {\n      x: 2,\n      y: 5,\n      xref: 'x',\n      yref: 'y',\n      text: 'max=5',\n      showarrow: true,\n      font: {\n        family: 'Courier New, monospace',\n        size: 16,\n        color: '#ffffff'\n      },\n      align: 'center',\n      arrowhead: 2,\n      arrowsize: 1,\n      arrowwidth: 2,\n      arrowcolor: '#636363',\n      ax: 20,\n      ay: -30,\n      bordercolor: '#c7c7c7',\n      borderwidth: 2,\n      borderpad: 4,\n      bgcolor: '#ff7f0e',\n      opacity: 0.8\n    }\n  ]\n};\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/text-and-annotations/#styling-and-formatting-annotations","title":"styling-and-formatting-annotations","text":"<pre><code>var myPlot = document.getElementById('myDiv'),\n   N = 12,\n    x = d3.range(N).map( d3.random.normal(3) ),\n    y1 = d3.range(N).map( d3.random.normal(4) ),\n    y2 = d3.range(N).map( d3.random.normal(4) ),\n    y3 = d3.range(N).map( d3.random.normal(4) ),\n    months = ['Jan', 'Feb', 'Mar',\n          'Apr', 'May', 'June',\n          'July', 'Aug', 'Sept',\n          'Oct', 'Nov', 'Dec'],\n    data = [{ x:x, y:y1,\n             type:'scatter', mode:'markers',\n         name:'2014', text: months,\n             marker:{color:'rgba(200, 50, 100, .7)',\n                      size:16}\n             },\n            { x:x, y:y2,\n             type:'scatter', mode:'markers',\n         name:'2015', text:months,\n             marker:{color:'rgba(120, 20, 130, .7)',\n                     size:16}\n             },\n            { x:x, y:y3,\n             type:'scatter', mode:'markers',\n         name: '2016', text:months,\n             marker:{color:'rgba(10, 180, 180, .8)',\n                     size:16}}];\n    layout = {\n        hovermode:'closest',\n        title: {text: '&lt;b&gt;Formatting Annotations&lt;/b&gt; &lt;br&gt; click on a point to plot an annotation'},\n        xaxis: {\n          zeroline: false,\n          title: {\n              text: 'Value A'\n          }\n        },\n        yaxis: {\n            zeroline: false,\n            title: {\n                text: 'Value B'\n            }\n        }\n     };\n\nPlotly.newPlot('myDiv', data, layout);\n\nmyPlot.on('plotly_click',\n    function(data){\n      var point = data.points[0],\n          newAnnotation = {\n            x: point.xaxis.d2l(point.x),\n            y: point.yaxis.d2l(point.y),\n            arrowhead: 6,\n            ax: 0,\n            ay: -80,\n            bgcolor: 'rgba(255, 255, 255, 0.9)',\n            arrowcolor: point.fullData.marker.color,\n            font: {size:12},\n            bordercolor: point.fullData.marker.color,\n            borderwidth: 3,\n            borderpad: 4,\n            text: '&lt;i&gt;Series Identification&lt;/i&gt;' + &lt;br&gt;\n                  '&lt;b&gt;Year&lt;/b&gt;       '+(point.data.name) + '&lt;br&gt;' +\n                  '&lt;i&gt;Point Identification&lt;/i&gt;&lt;br&gt;' +\n                  '&lt;b&gt;Month&lt;/b&gt;      '+ (months[point.pointNumber]) +\n                  '&lt;br&gt;&lt;i&gt;Point Values&lt;/i&gt;&lt;br&gt;' +\n                  '&lt;b&gt;A&lt;/b&gt;     '+(point.x).toPrecision(4) +\n                  '&lt;br&gt;&lt;b&gt;B&lt;/b&gt;     '+(point.y).toPrecision(4)\n\n        },\n        divid = document.getElementById('myDiv'),\n        newIndex = (divid.layout.annotations || []).length;\n    console.log(point.pointNumber)\n     // delete instead if clicked twice\n    if(newIndex) {\n       var foundCopy = false;\n       divid.layout.annotations.forEach(function(ann, sameIndex) {\n         if(ann.text === newAnnotation.text ) {\n           Plotly.relayout('myDiv', 'annotations[' + sameIndex + ']', 'remove');\n           foundCopy = true;\n         }\n       });\n       if(foundCopy) return;\n     }\n     Plotly.relayout('myDiv', 'annotations[' + newIndex + ']', newAnnotation);\n  })\n  .on('plotly_clickannotation', function(event, data) {\n    Plotly.relayout('myDiv', 'annotations[' + data.index + ']', 'remove');\n  });</code></pre>"},{"location":"examples/text-and-annotations/#webgl-text-and-annotations","title":"webgl-text-and-annotations","text":"<pre><code>var n = 250;\nvar t = 12;\nvar x = [];\nvar y = [];\nvar z = [];\nvar text = [];\nvar arr = [\"A\",\"T\",\"G\", \"C\"];\n\nfor (var j = 0; j &lt; t; j++){\n  ztemp = [];\n  for (var i = 0; i &lt; n; i++) {\n    x.push(i);\n    y.push(j);\n    ztemp.push(Math.floor(Math.random() * 10));\n    text.push(arr[Math.floor(Math.random() * 4)])\n  }\n  z.push(ztemp)\n}\n\nvar steps = [];\nfor (var e = 0; e &lt; n-30; e++){\n  steps.push({\n      label: e,\n      value: e,\n      method: 'relayout',\n      args: ['xaxis', {range: [-0.5 + e, 30.5 + e]}]\n    })\n}\n\ndata1 = {\n  x: x,\n  y: y,\n  mode: \"text\",\n  text: text,\n  type: \"scattergl\",\n  textfont: {\n    size: 20\n    }\n  }\n\ndata2 = {\n  z: z,\n  type: \"heatmap\"\n  }\n\nsliders = [{\n      active: 0,\n      steps: steps\n    }]\n\nlayout = {\n  sliders: sliders,\n  xaxis: {\n    range: [-0.5, 30.5],\n    showline: false,\n    zeroline: false,\n     showgrid: false\n  },\n  yaxis: {\n    showline: false,\n    zeroline: false,\n     showgrid: false\n  }  \n  }\n\ndata = [data1, data2]\nPlotly.newPlot('myDiv', {data:data,\n                     layout:layout});</code></pre>"},{"location":"examples/texttemplate/","title":"texttemplate","text":""},{"location":"examples/texttemplate/#add-text-template-in-pie-chart","title":"add-text-template-in-pie-chart","text":"<p>To show an arbitrary text in your chart you can use texttemplate, which is a template string used for rendering the information, and will override textinfo.</p> <pre><code>var data = [{\n  type: \"pie\",\n  values: [2, 5, 3, 2.5],\n  labels: [\"R\", \"Python\", \"Java Script\", \"Matlab\"],\n  texttemplate: \"%{label}: %{value} (%{percent})\",\n  textposition: \"inside\"\n}];\n\nPlotly.newPlot(\"myDiv\", data)</code></pre>"},{"location":"examples/texttemplate/#customize-text-template","title":"customize-text-template","text":"<p>The following example uses textfont to customize the added text.</p> <pre><code>var data = [{\n      type: \"scatterternary\",\n      a: [3, 2, 5],\n      b: [2, 5, 2],\n      c: [5, 2, 2],\n      mode: \"markers+text\",\n      text: [\"A\", \"B\", \"C\"],\n      texttemplate: \"%{text}&lt;br&gt;(%{a:.2f}, %{b:.2f}, %{c:.2f})\",\n      textposition: \"bottom center\",\n      textfont:{'family': \"Times\", 'size': [18, 21, 20], 'color': [\"IndianRed\", \"MediumPurple\", \"DarkOrange\"]}\n}];\n\nPlotly.newPlot(\"myDiv\", data)</code></pre>"},{"location":"examples/texttemplate/#set-date-in-text-template","title":"set-date-in-text-template","text":"<p>The following example displays how to show date by setting axis.type in funnel charts.</p> <pre><code>var data = [{\n  type: 'funnel',\n  name: 'Montreal',\n  orientation: \"h\",\n  y: [\"2018-01-01\", \"2018-07-01\", \"2019-01-01\", \"2020-01-01\"],\n  x: [100, 60, 40, 20],\n  textposition: \"inside\",\n  texttemplate: \"%{label}\"\n},{\n  type: \"funnel\",\n  name: 'Vancouver',\n  orientation: \"h\",\n  y: [\"2018-01-01\", \"2018-07-01\", \"2019-01-01\", \"2020-01-01\"],\n  x: [90, 70, 50, 10],\n  textposition: \"inside\",\n  textinfo: \"label\"}]\n\nvar layout = {yaxis: {type: 'date'}}\n\nPlotly.newPlot(\"myDiv\", data, layout)</code></pre>"},{"location":"examples/tick-formatting/","title":"tick-formatting","text":""},{"location":"examples/tick-formatting/#layout-attributes-with-respect-to-formatting-ticks","title":"layout-attributes-with-respect-to-formatting-ticks","text":"<pre><code>{\n  xaxis: {\n    /* show/hide tick labels (defaults to true) */\n    showticklabels: boolean,\n    /*  Set the tick mode for the axis \"auto\" or \"linear\" or \"array\" */\n    tickmode: 'auto',\n\n    /* Set the placement of the first tick*/\n    tick0: '',\n    /* Set the step in-between ticks*/\n    dtick: '',\n    /* Specifies the maximum number of ticks */\n    nticks: 0,\n\n    /* Set the values at which ticks on this axis appear */\n    tickvals: [ /* */ ],\n    /* Set the text displayed at the ticks position via tickvals */\n    ticktext: [ /* */ ],\n    /* Set the source reference for tickvals */\n    tickvalssrc: '',\n    /* Set the source reference for ticktext */\n    tickvtextsrc: '',\n\n    /* Set the tick label formatting rule using d3 formatting mini-languages */\n    tickformat: '',\n    /* Set the tickformat per zoom level */\n    tickformatstops: {\n      enabled: true,\n      /* Set the range of the dtick values which describe the zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\" */\n      dtickrange: [\"min\", \"max\"],\n      /* dtickformat for described zoom level, the same as \"tickformat\" */\n      value: string,\n    },\n\n    /* Set the ticks to display with a prefix: \"all\" or \"first\" or \"last\" or \"none\" */\n    showtickprefix: 'all',\n    tickprefix: string,\n\n    /* Set the ticks to display with a suffix: \"all\" or \"first\" or \"last\" or \"none\" */\n    showticksuffix: 'all',\n    ticksuffix: string,\n\n    /* Determines a formatting rule for the tick exponents: \"none\" or \"e\" or \"E\" or \"power\" or \"SI\" or \"B\" */\n    exponentformat: 'B',\n  }\n  /* similarly for yaxis */\n}</code></pre>"},{"location":"examples/tick-formatting/#tickmode---linear","title":"tickmode---linear","text":"<pre><code>var x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9];\nvar data = [{\n  x: x,\n  y: y,\n  type: 'scatter'\n}];\nvar layout = {\n  xaxis: {\n    tickmode: \"linear\", //  If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick`\n    tick0: 0.5,\n    dtick: 0.75\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tick-formatting/#tickmode---linear-(date)","title":"tickmode---linear-(date)","text":"<pre><code>var x = ['2000-01', '2000-02', '2000-03', '2000-04', '2000-05', '2000-06', '2000-07', '2000-08', '2000-09', '2000-10', '2000-11', '2000-12', '2001-01'];\nvar y = [-36.5, -26.6, -43.6, -52.3, -71.5, -81.4, -80.5, -82.2, -76, -67.3, -46.1, -35, -40];\nvar data = [{\n  x: x,\n  y: y,\n  type: 'scatter'\n}];\nvar layout = {\n  xaxis: {\n    tickmode: \"linear\", //  If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick`\n    tick0: '1999-12-15',\n    dtick: 30 * 24 * 60 * 60 * 1000 // milliseconds\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tick-formatting/#tickmode---array","title":"tickmode---array","text":"<pre><code>var x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar y = [28.8, 28.5, 37, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9];\nvar data = [{\n  x: x,\n  y: y,\n  type: 'scatter'\n}];\nvar layout = {\n  xaxis: {\n    tickmode: \"array\", // If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`.\n    tickvals: [1, 3, 5, 7, 9, 11],\n    ticktext: ['One', 'Three', 'Five', 'Seven', 'Nine', 'Eleven']\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tick-formatting/#using-tickformat","title":"using-tickformat","text":"<pre><code>var x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar y = [0.18, 0.38, 0.56, 0.46, 0.59, 0.4, 0.78, 0.77, 0.74, 0.42, 0.45, 0.39];\nvar data = [{\n  x: x,\n  y: y,\n  type: 'scatter'\n}];\nvar layout = {\n  yaxis: {\n    tickformat: '%' // For more formatting types, see: https://github.com/d3/d3-format/blob/master/README.md#locale_format\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tick-formatting/#using-tickformat-(date)","title":"using-tickformat-(date)","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\", function (err, rows) {\n\n  function unpack(rows, key) {\n    return rows.map(function (row) {\n      return row[key];\n    });\n  }\n\n\n  var trace1 = {\n    type: \"scatter\",\n    mode: \"lines\",\n    name: 'AAPL High',\n    x: unpack(rows, 'Date'),\n    y: unpack(rows, 'AAPL.High'),\n    line: {\n      color: '#17BECF'\n    }\n  }\n\n  var trace2 = {\n    type: \"scatter\",\n    mode: \"lines\",\n    name: 'AAPL Low',\n    x: unpack(rows, 'Date'),\n    y: unpack(rows, 'AAPL.Low'),\n    line: {\n      color: '#7F7F7F'\n    }\n  }\n\n  var data = [trace1, trace2];\n\n  var layout = {\n    title: {text: 'Time series with custom tickformat'},\n    xaxis: {\n      tickformat: '%d %B (%a)\\n %Y' // For more time formatting types, see: https://github.com/d3/d3-time-format/blob/master/README.md\n    }\n  };\n\n  Plotly.newPlot('myDiv', data, layout);\n})</code></pre>"},{"location":"examples/tick-formatting/#tickformatstops-to-customize-for-different-zoom-levels","title":"tickformatstops-to-customize-for-different-zoom-levels","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar x = [\"2005-01\", \"2005-02\", \"2005-03\", \"2005-04\", \"2005-05\", \"2005-06\", \"2005-07\"];\nvar y = [-20, 10, -5, 0, 5, -10, 20];\nvar data = [{\n  x: x,\n  y: y,\n  type: 'scatter'\n}];\nvar layout = {\n  xaxis: {\n    tickformatstops: [{\n        \"dtickrange\": [null, 1000],\n        \"value\": \"%H:%M:%S.%L ms\"\n      },\n      {\n        \"dtickrange\": [1000, 60000],\n        \"value\": \"%H:%M:%S s\"\n      },\n      {\n        \"dtickrange\": [60000, 3600000],\n        \"value\": \"%H:%M m\"\n      },\n      {\n        \"dtickrange\": [3600000, 86400000],\n        \"value\": \"%H:%M h\"\n      },\n      {\n        \"dtickrange\": [86400000, 604800000],\n        \"value\": \"%e. %b d\"\n      },\n      {\n        \"dtickrange\": [604800000, \"M1\"],\n        \"value\": \"%e. %b w\"\n      },\n      {\n        \"dtickrange\": [\"M1\", \"M12\"],\n        \"value\": \"%b '%y M\"\n      },\n      {\n        \"dtickrange\": [\"M12\", null],\n        \"value\": \"%Y Y\"\n      }\n    ]\n  }\n};\n\nPlotly.newPlot(\"myDiv\", data, layout);</code></pre>"},{"location":"examples/tick-formatting/#using-exponentformat","title":"using-exponentformat","text":"<pre><code>var x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar y = [68000, 52000, 60000, 20000, 95000, 40000, 60000, 79000, 74000, 42000, 20000, 90000];\nvar data = [{\n  x: x,\n  y: y,\n  type: 'scatter'\n}];\nvar layout = {\n  yaxis: {\n    showexponent: 'all',\n    exponentformat: 'e'\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tick-formatting/#include-locale-config","title":"include-locale-config","text":"<pre><code>var x = ['2013-02-04', '2013-04-05', '2013-06-06', '2013-08-07', '2013-10-02'];\nvar y = [1, 4, 3, 6, 2];\nvar data = [{\n  x: x,\n  y: y,\n  type: 'scatter'\n}];\nvar layout = {\n  xaxis: {\n    tickformat: '%a %e %b \\n %Y'\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout, {\n  locale: 'fr' // For more info, see: https://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization and https://github.com/plotly/plotly.js/tree/master/dist\n});</code></pre>"},{"location":"examples/tile-county-choropleth/","title":"tile-county-choropleth","text":""},{"location":"examples/tile-county-choropleth/#basic-tile","title":"basic-tile","text":"<p>This tutorial uses Maplibre GL JS to make a map of US states using vector tiles.</p> <pre><code>var data = [{\n  type: \"choroplethmap\", locations: [\"NY\", \"MA\", \"VT\"], z: [-50, -10, -20],\n  geojson: \"https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json\"\n}];\n\nvar layout = {map: {center: {lon: -74, lat: 43}, zoom: 3.5},\n              width: 600, height:400};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tile-county-choropleth/#streets-tile","title":"streets-tile","text":"<p>The following example sets <code>geojson object</code> of type <code>feature</code> and geometries of type 'Polygon'. For more information see geojson attribute in the reference page. As you see, the scattermap trace is above the Choropleth map trace. To set the Choropleth map trace above all the other traces you should set below attribute.</p> <pre><code>var data = [\n   {type: \"scattermap\", lon: [-86], lat: [34], marker: {size: 20, color: 'purple'}},\n   {\n    type: \"choroplethmap\",locations: [\"AL\"], z: [10], coloraxis: \"coloraxis\",           geojson: {type: \"Feature\", id: \"AL\", geometry: {type: \"Polygon\", coordinates: [[\n    [-86, 35], [-85, 34], [-85, 32], [-85, 32], [-85, 32], [-85, 32], [-85, 31],\n    [-86, 31], [-87, 31], [-87, 31], [-88, 30], [-88, 30], [-88, 30], [-88, 30],\n    [-88, 34], [-88, 35]]]\n   }}}];\n\nvar layout = {width: 600, height: 400, map: {style: 'streets',\n    center: {lon: -86, lat: 33}, zoom: 5}, marker: {line: {color: \"blue\"}},\n    coloraxis: {showscale: false, colorscale: \"Viridis\"}};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tile-county-choropleth/#dark-tile","title":"dark-tile","text":"<p>This example uses zmin and zmax to define the lower bound and upper bound of the color domain. If these attributes are not set, Plotly determines the color domain based on the input data.</p> <pre><code>var data = [{\n type: \"choroplethmap\", name: \"US states\", geojson: \"https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json\", locations: [ \"AL\", \"AK\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"FL\", \"GA\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"OH\", \"OK\", \"OR\", \"PA\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\" ],\nz: [ 141, 140, 155, 147, 132, 146, 151, 137, 146, 136, 145, 141, 149, 151, 138, 158, 164, 141, 146, 145, 142, 150, 155, 160, 156, 161, 147, 164, 150, 152, 155, 167, 145, 146, 151, 154, 161, 145, 155, 150, 151, 162, 172, 169, 170, 151, 152, 173, 160, 176 ],\nzmin: 25, zmax: 280, colorbar: {y: 0, yanchor: \"bottom\", title: {text: \"US states\", side: \"right\"}}}\n ];\n\nvar layout = {map: {style: \"dark\", center: {lon: -110, lat: 50}, zoom: 0.8}, width: 600, height: 400, margin: {t: 0, b: 0}};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tile-county-choropleth/#basic-tile-using-mapbox","title":"basic-tile-using-mapbox","text":"<p>&gt; Mapbox traces are deprecated and may be removed in a future version of Plotly.js.</p> <p>Earlier examples use traces that render with Maplibre GL JS. These traces were introduced in Plotly.js 2.35.0 and replace Mapbox-based tile maps, which are now deprecated. Here's one of the earlier examples using the Mapbox-based <code>choroplethmapbox</code> trace</p> <pre><code>var data = [{\n  type: \"choroplethmapbox\", locations: [\"NY\", \"MA\", \"VT\"], z: [-50, -10, -20],\n  geojson: \"https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json\"\n}];\n\nvar layout = {mapbox: {center: {lon: -74, lat: 43}, zoom: 3.5},\n              width: 600, height:400};\n\nvar config = {mapboxAccessToken: \"your access token\"};\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/tile-density-heatmaps/","title":"tile-density-heatmaps","text":""},{"location":"examples/tile-density-heatmaps/#light-tile","title":"light-tile","text":"<pre><code>var data = [\n  {type: \"densitymap\", lon: [10, 20, 30], lat: [15, 25, 35], z: [1, 3, 2],\n   radius: 50, colorbar: {y: 1, yanchor: 'top', len: 0.45}},\n  {type: 'densitymap', lon: [-10, -20, -30], lat: [15, 25, 35],\n   radius: [50, 100, 10],  colorbar: {y: 0, yanchor: 'bottom', len: 0.45}\n  }];\n\nvar layout = {map: {style: 'light', center: {lat: 20}}, width: 600, height: 400};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tile-density-heatmaps/#outdoors-tile","title":"outdoors-tile","text":"<pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv',\n  function(err, rows){function unpack(rows, key) {return rows.map(function(row){ return row[key];\n})};\n\nvar data = [{\n  lon: unpack(rows, 'Longitude'), lat: unpack(rows, 'Latitude'), radius:10,\n  z: unpack(rows, 'Magnitude'), type: \"densitymap\", coloraxis: 'coloraxis',\n  hoverinfo: 'skip'}];\n\nvar layout = {\n    map: {center: {lon: 60, lat: 30}, style: \"outdoors\", zoom: 2},\n    coloraxis: {colorscale: \"Viridis\"}, title: {text: \"Earthquake Magnitude\"},\n    width: 600, height: 400, margin: {t: 30, b: 0}};\n\nPlotly.newPlot('myDiv', data, layout);\n})</code></pre>"},{"location":"examples/tile-density-heatmaps/#stamen-terrain-tile","title":"stamen-terrain-tile","text":"<pre><code>var data = [{type: 'densitymapbox', lon: [10, 20, 30], lat: [15, 25, 35], z: [1, 3, 2]}];\n\nvar layout = {width: 600, height: 400, mapbox: {style: 'https://tiles.stadiamaps.com/styles/stamen_watercolor.json?api_key=YOUR-API-KEY'}};\n\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/tile-density-heatmaps/#light-tile-(mapbox)---requires-token","title":"light-tile-(mapbox)---requires-token","text":"<p>Mapbox traces are deprecated and may be removed in a future version of Plotly.js.</p> <p>Earlier examples use traces that render with Maplibre GL JS. These traces were introduced in Plotly.js 2.35.0 and replace Mapbox-based tile maps, which are now deprecated. Here's one of the earlier examples written using the Mapbox-based <code>densitymapbox</code> trace.</p> <pre><code>var data = [\n  {type: \"densitymapbox\", lon: [10, 20, 30], lat: [15, 25, 35], z: [1, 3, 2],\n   radius: 50, colorbar: {y: 1, yanchor: 'top', len: 0.45}},\n  {type: 'densitymapbox', lon: [-10, -20, -30], lat: [15, 25, 35],\n   radius: [50, 100, 10],  colorbar: {y: 0, yanchor: 'bottom', len: 0.45}\n  }];\n\nvar layout = {mapbox: {style: 'light', center: {lat: 20}}, width: 600, height: 400};\n\nvar config = {mapboxAccessToken: \"your access token\"};\n\nPlotly.newPlot('myDiv', data, layout, config);</code></pre>"},{"location":"examples/tile-map-layers/","title":"tile-map-layers","text":""},{"location":"examples/tile-map-layers/#how-layers-work-in-tile-based-maps","title":"how-layers-work-in-tile-based-maps","text":"<p>If your figure contains one or more traces of type <code>Scattermap</code>, <code>Choroplethmap</code> or <code>Densitymap</code>, the <code>layout</code> object in your figure contains configuration information for the map itself. The map is composed of various layers, of three different types.</p> <ol> <li> `layout.map.style` defines the lowest layers, also known as your \"base map\"</li> <li> The various traces in `data` are by default rendered above the base map (although this can be controlled via the `below` attribute).</li> <li> `layout.map.layers` is an array that defines more layers that are by default rendered above the traces in `data` (although this can also be controlled via the `below` attribute).</li> </ol>"},{"location":"examples/tile-map-layers/#openstreetmap-tiles","title":"openstreetmap-tiles","text":"<p>Here is a simple map rendered with \"open-street-map\" tiles.</p> <pre><code>d3.csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv\",\n    function(err, rows) {\n        function unpack(rows, key) {\n            return rows.map(function(row) {\n                return row[key];\n            });\n        }\n\n        var data = [\n            {\n                type: \"scattermap\",\n                text: unpack(rows, \"Globvalue\"),\n                lon: unpack(rows, \"Lon\"),\n                lat: unpack(rows, \"Lat\"),\n                marker: { color: \"fuchsia\", size: 4 }\n            }\n        ];\n\n        var layout = {\n            dragmode: \"zoom\",\n            map: { style: \"open-street-map\", center: { lat: 38, lon: -90 }, zoom: 3 },\n            margin: { r: 0, t: 0, b: 0, l: 0 }\n        };\n\n        Plotly.newPlot(\"myDiv\", data, layout);\n    }\n);</code></pre>"},{"location":"examples/tile-map-layers/#using-","title":"using-\"layout.map.layers\"-to-specify-a-base-map","text":"<p>If you have access to your own private tile servers, or wish to use a tile server not included in the list above, the recommended approach is to set layout.map.style to \"white-bg\" and to use layout.map.layers with below to specify a custom base map. If you omit the below attribute when using this approach, your data will likely be hidden by fully-opaque raster tiles!</p>"},{"location":"examples/tile-map-layers/#base-tiles-from-the-usgs","title":"base-tiles-from-the-usgs","text":"<p>Here is an example of a map which uses a public USGS imagery map, specified in layout.map.layers, and which is rendered below the data layer.</p> <pre><code>d3.csv(\n    \"https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv\",\n    function(err, rows) {\n        function unpack(rows, key) {\n            return rows.map(function(row) {\n                return row[key];\n            });\n        }\n\nvar data = [\n    {\n        type: \"scattermap\",\n        text: unpack(rows, \"Globvalue\"),\n        lon: unpack(rows, \"Lon\"),\n        lat: unpack(rows, \"Lat\"),\n        marker: { color: \"fuchsia\", size: 4 }\n    }\n];\n\nvar layout = {\n    dragmode: \"zoom\",\n    map: {\n        style: \"white-bg\",\n        layers: [\n            {\n                sourcetype: \"raster\",\n                source: [\"https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}\"],\n                below: \"traces\"\n            }\n        ],\n        center: { lat: 38, lon: -90 },\n        zoom: 3\n    },\n    margin: { r: 0, t: 0, b: 0, l: 0 }\n};\n\nPlotly.newPlot(\"myDiv\", data, layout);\n    }\n);</code></pre>"},{"location":"examples/tile-map-layers/#base-tiles-from-the-usgs-radar-overlay-from-environment-canada","title":"base-tiles-from-the-usgs-radar-overlay-from-environment-canada","text":"<p>Here is the same example, with in addition, a WMS layer from Environment Canada which displays near-real-time radar imagery in partly-transparent raster tiles, rendered above the go.Scattermap trace, as is the default.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv', function(err, rows){\n      function unpack(rows, key) {\n          return rows.map(function(row) { return row[key]; });\n        }\n\nvar data = [{\n        type: 'scattermap', text: unpack(rows, 'Globvalue'),\n        lon: unpack(rows, 'Lon'), lat: unpack(rows, 'Lat'),\n        marker: {color: 'fuchsia', size: 4}\n    }];\n\nvar layout = {\n    dragmode: 'zoom',\n    map: {\n        style: 'white-bg',\n        layers: [\n            {\n            \"below\": 'traces',\n            \"sourcetype\": \"raster\",\n            \"source\": [\n                \"https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}\"\n            ]\n        },\n            {\n             sourcetype: \"raster\",\n             source: [\"https://geo.weather.gc.ca/geomet/?SERVICE=WMS&amp;VERSION=1.3.0&amp;REQUEST=GetMap&amp;BBOX={bbox-epsg-3857}&amp;CRS=EPSG:3857&amp;WIDTH=1000&amp;HEIGHT=1000&amp;LAYERS=RADAR_1KM_RDBR&amp;TILED=true&amp;FORMAT=image/png\"]}],\n        below: 'traces',\n        center: {lat: 38, lon: -90}, zoom: 4},\n    margin: {r: 0, t: 0, b: 0, l: 0},\n    showlegend: false};\n\nPlotly.newPlot('myDiv', data, layout);\n  });</code></pre>"},{"location":"examples/tile-map-layers/#dark-tiles","title":"dark-tiles","text":"<pre><code>var url = \"https://maplibre.org/maplibre-gl-js/docs/assets/significant-earthquakes-2015.geojson\";\n\nd3.json(url, (err, raw) =&gt; {\n  var lon = raw.features.map(f =&gt; f.geometry.coordinates[0]);\n  var lat = raw.features.map(f =&gt; f.geometry.coordinates[1]);\n  var z = raw.features.map(f =&gt; f.properties.mag);\n\n  var data = [\n    { type: \"scattermap\", lon: lon, lat: lat, z: z, hoverinfo: \"y\" }\n  ];\n\n  var layout = {\n    map: { style: \"dark\", zoom: 2, center: { lon: -150, lat: 60 } },\n    margin: { t: 0, b: 0 }\n  };\n\n  Plotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/tile-map-layers/#mapbox-maps-and-access-tokens","title":"mapbox-maps-and-access-tokens","text":"<p>&gt; Mapbox traces are deprecated and may be removed in a future version of Plotly.js.</p> <p>The word \"mapbox\" in the trace names and <code>layout.mapbox</code> refers to the Mapbox GL JS open-source library. If your basemap in <code>layout.mapbox.style</code> uses data from the Mapbox service, then you will need to register for a free account at https://mapbox.com/ and obtain a Mapbox Access token. If your basemap uses data from the Stadia Maps service (see below for details), you'll need to register for a Stadia Maps account and token.</p> <p>To use a token, provide it as <code>mapboxAccessToken</code> in the <code>setPlotConfig</code> function, or as a variable that would be passed as an argument of <code>newPlot</code>. If your <code>layout.mapbox.style</code> does not use data from the Mapbox service, you do not need to register for a Mapbox account.</p> Base Maps in `layout.mapbox.style` <p>The accepted values for <code>layout.mapbox.style</code> are one of the following tiles.</p> <ol> <li> `\"white-bg\"` yields an empty white canvas which results in no external HTTP requests </li> <li> `\"open-street-map\"`, `\"carto-positron\"`, or `\"carto-darkmatter\"` yield maps composed of *raster* tiles from various public tile servers which do not require signups or access tokens </li> <li> `\"stamen-terrain\"`, `\"stamen-toner\"` or `\"stamen-watercolor\"` yield maps composed of *raster* tiles from the [Stadia Maps service](https://stadiamaps.com/) and require a Stadia Maps account and token.</li> <li> `\"basic\"`, `\"streets\"`, `\"outdoors\"`, `\"light\"`, `\"dark\"`, `\"satellite\"`, or `\"satellite-streets\"` yield maps composed of *vector* tiles from the Mapbox service, and *do* require a Mapbox Access Token or an on-premise Mapbox installation. </li> <li> A Mapbox service style URL, which requires a Mapbox Access Token or an on-premise Mapbox installation. </li> <li> A Mapbox Style object as defined at https://docs.mapbox.com/mapbox-gl-js/style-spec/ </li> </ol>"},{"location":"examples/time-series/","title":"time-series","text":""},{"location":"examples/time-series/#date-strings","title":"date-strings","text":"<pre><code>var data = [\n  {\n    x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],\n    y: [1, 3, 6],\n    type: 'scatter'\n  }\n];\n\nPlotly.newPlot('myDiv', data);</code></pre>"},{"location":"examples/time-series/#basic-time-series","title":"basic-time-series","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\n\nvar trace1 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  name: 'AAPL High',\n  x: unpack(rows, 'Date'),\n  y: unpack(rows, 'AAPL.High'),\n  line: {color: '#17BECF'}\n}\n\nvar trace2 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  name: 'AAPL Low',\n  x: unpack(rows, 'Date'),\n  y: unpack(rows, 'AAPL.Low'),\n  line: {color: '#7F7F7F'}\n}\n\nvar data = [trace1,trace2];\n\nvar layout = {\n  title: {\n    text: 'Date'\n  },\n};\n\nPlotly.newPlot('myDiv', data, layout);\n})</code></pre>"},{"location":"examples/time-series/#manually-set-range","title":"manually-set-range","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\n\nvar trace1 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  x: unpack(rows, 'Date'),\n  y: unpack(rows, 'AAPL.High'),\n  line: {color: '#17BECF'}\n}\n\nvar trace2 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  x: unpack(rows, 'Date'),\n  y: unpack(rows, 'AAPL.Low'),\n  line: {color: '#7F7F7F'}\n}\n\nvar data = [trace1,trace2];\n\nvar layout = {\n  title: {\n    text: 'Custom Range'\n  },\n  xaxis: {\n    range: ['2016-07-01', '2016-12-31'],\n    type: 'date'\n  },\n  yaxis: {\n    autorange: true,\n    range: [86.8700008333, 138.870004167],\n    type: 'linear'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n})</code></pre>"},{"location":"examples/time-series/#time-series-with-rangeslider","title":"time-series-with-rangeslider","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n}\n\n\nvar trace1 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  name: 'AAPL High',\n  x: unpack(rows, 'Date'),\n  y: unpack(rows, 'AAPL.High'),\n  line: {color: '#17BECF'}\n}\n\nvar trace2 = {\n  type: \"scatter\",\n  mode: \"lines\",\n  name: 'AAPL Low',\n  x: unpack(rows, 'Date'),\n  y: unpack(rows, 'AAPL.Low'),\n  line: {color: '#7F7F7F'}\n}\n\nvar data = [trace1,trace2];\n\nvar layout = {\n  title: {text: 'Time Series with Rangeslider'},\n  xaxis: {\n    autorange: true,\n    range: ['2015-02-17', '2017-02-16'],\n    rangeselector: {buttons: [\n        {\n          count: 1,\n          label: '1m',\n          step: 'month',\n          stepmode: 'backward'\n        },\n        {\n          count: 6,\n          label: '6m',\n          step: 'month',\n          stepmode: 'backward'\n        },\n        {step: 'all'}\n      ]},\n    rangeslider: {range: ['2015-02-17', '2017-02-16']},\n    type: 'date'\n  },\n  yaxis: {\n    autorange: true,\n    range: [86.8700008333, 138.870004167],\n    type: 'linear'\n  }\n};\n\nPlotly.newPlot('myDiv', data, layout);\n})</code></pre>"},{"location":"examples/treemaps/","title":"treemaps","text":""},{"location":"examples/treemaps/#basic-treemap","title":"basic-treemap","text":"<p>Treemap charts visualize hierarchical data using nested rectangles. Same as Sunburst the hierarchy is defined by labels and parents attributes. Click on one sector to zoom in/out, which also displays a pathbar in the upper-left corner of your treemap. To zoom out you can use the path bar as well.</p> <pre><code>data = [{\n      type: \"treemap\",\n      labels: [\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n      parents: [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ]\n}]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/treemaps/#set-different-attributes-in-treemap","title":"set-different-attributes-in-treemap","text":"<p>This example uses the following attributes:</p> <ol> <li> [values](https://plotly.com/javascript/reference/treemap/#treemap-values): sets the values associated with each of the sectors.</li> <li> [textinfo](https://plotly.com/javascript/reference/treemap/#treemap-textinfo): determines which trace information appear on the graph that can be 'text', 'value', 'current path', 'percent root', 'percent entry', and 'percent parent', or any combination of them. </li> <li> [pathbar](https://plotly.com/javascript/reference/treemap/#treemap-pathbar): a main extra feature of treemap to display the current path of the visible portion of the hierarchical map. It may also be useful for zooming out of the graph.</li> <li> [branchvalues](https://plotly.com/javascript/reference/treemap/#treemap-branchvalues): determines how the items in `values` are summed. When set to \"total\", items in `values` are taken to be value of all its descendants. In the example below Eva = 65, which is equal to 14 + 12 + 10 + 2 + 6 + 6 + 1 + 4. </li> </ol> <p>When set to \"remainder\", items in <code>values</code> corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</p> <pre><code>var labels = [\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"]\nvar parents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"]\nvar data = [{\n      type: \"treemap\",\n      labels: labels,\n      parents: parents,\n      values:  [10, 14, 12, 10, 2, 6, 6, 1, 4],\n      textinfo: \"label+value+percent parent+percent entry\",\n      domain: {\"x\": [0, 0.48]},\n      outsidetextfont: {\"size\": 20, \"color\": \"#377eb8\"},\n      marker: {\"line\": {\"width\": 2}},\n      pathbar: {\"visible\": false}\n    },{\n      type: \"treemap\",\n      branchvalues: \"total\",\n      labels: labels,\n      parents: parents,\n      domain: {x: [0.52, 1]},\n      values: [65, 14, 12, 10, 2, 6, 6, 1, 4],\n      textinfo: \"label+value+percent parent+percent entry\",\n      outsidetextfont: {\"size\": 20, \"color\": \"#377eb8\"},\n      marker: {\"line\": {\"width\": 2}},\n      pathbar: {\"visible\": false}\n    }];\nvar layout = {\n  annotations: [{\n    showarrow: false,\n    text: \"branchvalues: &lt;b&gt;remainder&lt;/b&gt;\",\n    x: 0.25,\n    xanchor: \"center\",\n    y: 1.1,\n    yanchor: \"bottom\"\n    }, {\n    showarrow: false,\n    text: \"branchvalues: &lt;b&gt;total&lt;/b&gt;\",\n    x: 0.75,\n    xanchor: \"center\",\n    y: 1.1,\n    yanchor: \"bottom\"\n    }]}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/treemaps/#set-color-of-treemap-sectors","title":"set-color-of-treemap-sectors","text":"<p>There are three different ways to change the color of the sectors in Treemap: 1) marker.colors, 2) colorway, 3) colorscale. The following examples show how to use each of them.</p> <pre><code>var labels = [\"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"B1\", \"B2\"];\nvar parents = [\"\", \"A1\", \"A2\", \"A3\", \"A4\", \"\", \"B1\"];\nvar data = [{\n  type: 'treemap',\n  labels: labels,\n  parents: parents,\n  marker: {colors: [\"pink\", \"royalblue\", \"lightgray\", \"purple\", \"cyan\", \"lightgray\", \"lightblue\"]}\n}]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/treemaps/","title":"","text":"<p>This example uses <code>treemapcolorway</code> attribute, which should be set in layout.</p> <pre><code>var labels = [\"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"B1\", \"B2\"];\nvar parents = [\"\", \"A1\", \"A2\", \"A3\", \"A4\", \"\", \"B1\"];\nvar data = [{\n  type: 'treemap',\n  labels: labels,\n  parents: parents\n}]\nvar layout = {treemapcolorway: [\"pink\", \"lightgray\"]}\n\nPlotly.newPlot('myDiv', data, layout)</code></pre>"},{"location":"examples/treemaps/","title":"","text":"<p>This example uses marker.colorscale to change the sector's color.</p> <pre><code>var values = [\"11\", \"12\", \"13\", \"14\", \"15\", \"20\", \"30\"]\nvar labels = [\"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"B1\", \"B2\"]\nvar parents = [\"\", \"A1\", \"A2\", \"A3\", \"A4\", \"\", \"B1\"]\n\nvar data = [{\n  type: 'treemap',\n  values: values,\n  labels: labels,\n  parents: parents,\n  marker: {colorscale: 'Blues'}\n}]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/treemaps/#nested-layers-in-treemap","title":"nested-layers-in-treemap","text":"<p>The following example uses hierarchical data that includes layers and grouping. Treemap and Sunburst charts reveal insights into the data, and the format of your hierarchical data. maxdepth attribute sets the number of rendered sectors from the given level.</p> <pre><code>d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/coffee-flavors.csv', function(err, rows){\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]});\n}\n\nvar data = [{\n      type: \"treemap\",\n      ids: unpack(rows, 'ids'),\n      labels: unpack(rows, 'labels'),\n      parents: unpack(rows, 'parents')\n    }];\n\nPlotly.newPlot('myDiv', data);\n})</code></pre>"},{"location":"examples/trisurf/","title":"trisurf","text":""},{"location":"examples/trisurf/#basic-trisurf-plot","title":"basic-trisurf-plot","text":"<pre><code>function trisurf(Tri, X, Y, Z, C) {\n  var data = {\n    type: 'mesh3d',\n    x: X,\n    y: Y,\n    z: Z,\n    i: Tri.map(function(f) { return f[0] }),\n    j: Tri.map(function(f) { return f[1] }),\n    k: Tri.map(function(f) { return f[2] }),\n    facecolor: C,\n    flatshading: true,\n  }\n\n  Plotly.newPlot('myDiv', [data])\n}\n\n\n//Example usage\ntrisurf(\n  [\n    [0, 1, 2],\n    [0, 2, 3],\n    [0, 3, 1],\n    [1, 2, 3]\n  ], \n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n  [ \n    'rgb(0, 0, 0)',\n    'rgb(255, 0, 0)',\n    'rgb(0, 255, 0)',\n    'rgb(0, 0, 255)'\n  ])</code></pre>"},{"location":"examples/trisurf/#trisurf-cube","title":"trisurf-cube","text":"<pre><code>var x = [0, 0, 1, 1, 0, 0, 1, 1]\nvar y = [0, 1, 1, 0, 0, 1, 1, 0]\nvar z = [0, 0, 0, 0, 1, 1, 1, 1]\nvar i = [7, 0, 0, 0, 4, 4, 2, 6, 4, 0, 3, 7]\nvar j = [3, 4, 1, 2, 5, 6, 5, 5, 0, 1, 2, 2]\nvar k = [0, 7, 2, 3, 6, 7, 1, 2, 5, 5, 7, 6]\n\nvar facecolor = [\n    'rgb(50, 200, 200)',\n    'rgb(100, 200, 255)',\n    'rgb(150, 200, 115)',\n    'rgb(200, 200, 50)',\n    'rgb(230, 200, 10)',\n    'rgb(255, 140, 0)'\n]\n\nfacecolor2 = new Array(facecolor.length * 2);\n\nfacecolor.forEach(function(x, i) {\n    facecolor2[i * 2 + 1] = facecolor2[i * 2] = x;\n});\n\nvar data = {\n    x: x,\n    y: y,\n    z: z,\n    i: i,\n    j: j,\n    k: k,\n    facecolor: facecolor2,\n    type: 'mesh3d'\n}\n\nPlotly.newPlot('myDiv', [data])</code></pre>"},{"location":"examples/trisurf/#extending-the-cube-example-for-boxes","title":"extending-the-cube-example-for-boxes","text":"<pre><code>// Note x, y, z define the vertices for a unit cube\n\nvar x = [0, 0, 1, 1, 0, 0, 1, 1];\nvar y = [0, 1, 1, 0, 0, 1, 1, 0];\nvar z = [0, 0, 0, 0, 1, 1, 1, 1];\nvar i = [7, 0, 0, 0, 4, 4, 2, 6, 4, 0, 3, 7];\nvar j = [3, 4, 1, 2, 5, 6, 5, 5, 0, 1, 2, 2];\nvar k = [0, 7, 2, 3, 6, 7, 1, 2, 5, 5, 7, 6];\n\nvar range_x = [-2, 2];\nvar range_y = [-3, 3];\nvar range_z = [-1, 1];\n\nfunction rectangle(x, y, z, range_x, range_y, range_z) {\n\n  if (range_x.length !== 2 || range_y.length !== 2 || range_z.length !== 2) {\n    throw 'Ranges must contain 2 values';\n  }\n    // we will forego other checks for to limit the length of the example\n    x = x.map(function(e, i) {\n    return range_x[e];\n  });\n\n  y = y.map(function(e, i) {\n    return range_y[e];\n  });\n\n  z = z.map(function(e, i) {\n    return range_z[e];\n  });\n\n    return {x: x, y: y, z: z};\n}\n\nresult = rectangle(x, y, z, range_x, range_y, range_z);\n\n// x, y, z now represent the vertices for the rectangular box with\n// the ranges specified above\nx = result.x;\ny = result.y;\nz = result.z;\n\nvar facecolor = [\n    'rgb(50, 200, 200)',\n    'rgb(100, 200, 255)',\n    'rgb(150, 200, 115)',\n    'rgb(200, 200, 50)',\n    'rgb(230, 200, 10)',\n    'rgb(255, 140, 0)'\n];\n\nfacecolor2 = new Array(facecolor.length * 2);\nfacecolor.forEach(function(x, i) {\n    facecolor2[i * 2 + 1] = facecolor2[i * 2] = x;\n});\n\nvar data = {\n    x: x,\n    y: y,\n    z: z,\n    i: i,\n    j: j,\n    k: k,\n    facecolor: facecolor2,\n    type: 'mesh3d'\n};\n\nPlotly.newPlot('myDiv', [data]);</code></pre>"},{"location":"examples/uirevision/","title":"uirevision","text":""},{"location":"examples/uirevision/#persist-user-changes","title":"persist-user-changes","text":"<p>Adding a <code>uirevision</code> attribute and then keeping it the same during the next call to Plotly.react ensures that user interactions persist.</p> <pre><code>const rand = () =&gt; Math.random();\nvar x = [1, 2, 3, 4, 5];\nconst new_data = (trace) =&gt; Object.assign(trace, {y: x.map(rand)});\n\n// add random data to three line traces\nvar data = [\n    {mode:'lines', line: {color: \"#b55400\"}},\n    {mode: 'lines', line: {color: \"#393e46\"}},\n    {mode: 'lines', line: {color: \"#222831\"}}\n].map(new_data);\n\nvar layout = {\n    title: {text: 'User Zoom Persists&lt;br&gt;When uirevision Unchanged'},\n    uirevision:'true',\n    xaxis: {autorange: true},\n    yaxis: {autorange: true}\n};\n\nPlotly.react('myDiv', data, layout);\n\nvar myPlot = document.getElementById('myDiv');\n\nvar cnt = 0;\nvar interval = setInterval(function() {\n    data = data.map(new_data);\n\n    // user interaction will mutate layout and set autorange to false\n    // so we need to reset it to true\n    layout.xaxis.autorange = true;\n    layout.yaxis.autorange = true;\n\n    // not changing uirevision will ensure that user interactions are unchanged\n    // layout.uirevision = rand();\n\n    Plotly.react('myDiv', data, layout);\n    if(cnt === 100) clearInterval(interval);\n}, 2500);</code></pre>"},{"location":"examples/uirevision/#reset-user-changes","title":"reset-user-changes","text":"<p>Changing the <code>uirevision</code> attribute during a Plotly.react call will reset previous user interactions in the updated plot.</p> <pre><code>const rand = () =&gt; Math.random();\nvar x = [1, 2, 3, 4, 5];\nconst new_data = (trace) =&gt; Object.assign(trace, {y: x.map(rand)});\n\n// add random data to three line traces\nvar data = [\n    {mode:'lines', line: {color: \"#b55400\"}},\n    {mode: 'lines', line: {color: \"#393e46\"}},\n    {mode: 'lines', line: {color: \"#222831\"}}\n].map(new_data);\n\nvar layout = {\n    title: {text: 'User Zoom Resets&lt;br&gt;When uirevision Changes'},\n    uirevision:'true',\n    xaxis: {autorange: true},\n    yaxis: {autorange: true}\n};\n\nPlotly.react('myDiv', data, layout);\n\nvar myPlot = document.getElementById('myDiv');\n\nvar cnt = 0;\nvar interval = setInterval(function() {\n    data = data.map(new_data);\n\n    // user interaction will mutate layout and set autorange to false\n    // so we need to reset it to true\n    layout.xaxis.autorange = true;\n    layout.yaxis.autorange = true;\n\n    // a new random number should ensure that uirevision will be different\n    // and so the graph will autorange after the Plotly.react\n    layout.uirevision = rand();\n\n    Plotly.react('myDiv', data, layout);\n  if(cnt === 100) clearInterval(interval);\n}, 2500);</code></pre>"},{"location":"examples/violin/","title":"violin","text":""},{"location":"examples/violin/#basic-violin-plot","title":"basic-violin-plot","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n  }\n\nvar data = [{\n  type: 'violin',\n  y: unpack(rows, 'total_bill'),\n  points: 'none',\n  box: {\n    visible: true\n  },\n  boxpoints: false,\n  line: {\n    color: 'black'\n  },\n  fillcolor: '#8dd3c7',\n  opacity: 0.6,\n  meanline: {\n    visible: true\n  },\n  x0: \"Total Bill\"\n}]\n\nvar layout = {\n  title: {\n    text: \"\"\n  },\n  yaxis: {\n    zeroline: false\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/violin/#grouped-violin-plot","title":"grouped-violin-plot","text":"<pre><code>// need to fix data\n\nd3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n  }\n\nvar data = [{\n  type: 'violin',\n  x: unpack(rows, 'day'),\n  y: unpack(rows, 'total_bill'),\n  legendgroup: 'M',\n  scalegroup: 'M',\n  name: 'M',\n  box: {\n    visible: true\n  },\n  line: {\n    color: 'blue',\n  },\n  meanline: {\n    visible: true\n  }\n}, {\n  type: 'violin',\n  x: unpack(rows, 'day'),\n  y: unpack(rows, 'total_bill'),\n  legendgroup: 'F',\n  scalegroup: 'F',\n  name: 'F',\n  box: {\n    visible: true\n  },\n  line: {\n    color: 'pink',\n  },\n  meanline: {\n    visible: true\n  }\n}]\n\nvar layout = {\n  title: {\n    text: \"Grouped Violin Plot\"\n  },\n  yaxis: {\n    zeroline: false\n  },\n  violinmode: 'group'\n}\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/violin/#horizontal-violin-plot","title":"horizontal-violin-plot","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n  }\n\nvar data = [{\n  type: 'violin',\n  x: unpack(rows, 'total_bill'),\n  points: 'none',\n  box: {\n    visible: true\n  },\n  boxpoints: false,\n  line: {\n    color: 'black'\n  },\n  fillcolor: '#8dd3c7',\n  opacity: 0.6,\n  meanline: {\n    visible: true\n  },\n  y0: \"Total Bill\"\n}]\n\nvar layout = {\n  title: {\n    text: \"Basic Horizontal Violin Plot\"\n  },\n  xaxis: {\n    zeroline: false\n  }\n}\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/violin/#split-violin-plot","title":"split-violin-plot","text":"<pre><code>d3.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/violin_data.csv\", function(err, rows){\n\n  function unpack(rows, key) {\n  return rows.map(function(row) { return row[key]; });\n  }\n\nvar data = [{\n  type: 'violin',\n  x: unpack(rows, 'day'),\n  y: unpack(rows, 'total_bill'),\n  legendgroup: 'Yes',\n  scalegroup: 'Yes',\n  name: 'Yes',\n  side: 'negative',\n  box: {\n    visible: true\n  },\n  line: {\n    color: 'blue',\n    width: 2\n  },\n  meanline: {\n    visible: true\n  }\n}, {\n  type: 'violin',\n  x: unpack(rows, 'day'),\n  y: unpack(rows, 'total_bill'),\n  legendgroup: 'No',\n  scalegroup: 'No',\n  name: 'No',\n  side: 'positive',\n  box: {\n    visible: true\n  },\n  line: {\n    color: 'green',\n    width: 2\n  },\n  meanline: {\n    visible: true\n  }\n}]\n\nvar layout = {\n  title: {\n    text: \"Split Violin Plot\"\n  },\n  yaxis: {\n    zeroline: false\n  },\n  violingap: 0,\n  violingroupgap: 0,\n  violinmode: \"overlay\",\n}\n\nPlotly.newPlot('myDiv', data, layout);\n});</code></pre>"},{"location":"examples/violin/#advanced-violin-plot","title":"advanced-violin-plot","text":"<pre><code>var trace1 = {\n            text: \"sample length: 32\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"F\",\n            scalegroup: \"F\",\n            points: \"all\",\n            pointpos: 1,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#bebada\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: false,\n            side: \"positive\",\n            type: \"violin\",\n            name: \"F\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#bebada\"\n            },\n            y0: \"Thursday\",\n            x: [\n                10.07,\n                34.83,\n                10.65,\n                12.43,\n                24.08,\n                13.42,\n                12.48,\n                29.8,\n                14.52,\n                11.38,\n                20.27,\n                11.17,\n                12.26,\n                18.26,\n                8.51,\n                10.33,\n                14.15,\n                13.16,\n                17.47,\n                27.05,\n                16.43,\n                8.35,\n                18.64,\n                11.87,\n                19.81,\n                43.11,\n                13.0,\n                12.74,\n                13.0,\n                16.4,\n                16.47,\n                18.78\n            ],\n            orientation: \"h\"\n        }\n\n\nvar trace2 = {\n            text: \"sample length: 30\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"M\",\n            scalegroup: \"M\",\n            points: \"all\",\n            pointpos: -0.6,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#8dd3c7\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: false,\n            side: \"negative\",\n            type: \"violin\",\n            name: \"M\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#8dd3c7\"\n            },\n            y0: \"Thursday\",\n            x: [\n                27.2,\n                22.76,\n                17.29,\n                19.44,\n                16.66,\n                32.68,\n                15.98,\n                13.03,\n                18.28,\n                24.71,\n                21.16,\n                11.69,\n                14.26,\n                15.95,\n                8.52,\n                22.82,\n                19.08,\n                16.0,\n                34.3,\n                41.19,\n                9.78,\n                7.51,\n                28.44,\n                15.48,\n                16.58,\n                7.56,\n                10.34,\n                13.51,\n                18.71,\n                20.53\n            ],\n            orientation: \"h\"\n        }\n\nvar trace3 = {\n            text: \"sample length: 9\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"F\",\n            scalegroup: \"F\",\n            points: \"all\",\n            pointpos: 0.4,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#bebada\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: false,\n            side: \"positive\",\n            type: \"violin\",\n            name: \"F\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#bebada\"\n            },\n            y0: \"Friday\",\n            x: [\n                5.75,\n                16.32,\n                22.75,\n                11.35,\n                15.38,\n                13.42,\n                15.98,\n                16.27,\n                10.09\n            ],\n            orientation: \"h\"\n        }\n\n\nvar trace4= {\n            text: \"sample length: 10\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"M\",\n            scalegroup: \"M\",\n            points: \"all\",\n            pointpos: -0.3,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#8dd3c7\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: false,\n            side: \"negative\",\n            type: \"violin\",\n            name: \"M\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#8dd3c7\"\n            },\n            y0: \"Friday\",\n            x: [\n                28.97,\n                22.49,\n                40.17,\n                27.28,\n                12.03,\n                21.01,\n                12.46,\n                12.16,\n                8.58,\n                13.42\n            ],\n            orientation: \"h\"\n        }\n\nvar trace5 = {\n            text: \"sample length: 28\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"F\",\n            scalegroup: \"F\",\n            points: \"all\",\n            pointpos: 0.55,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#bebada\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: true,\n            side: \"positive\",\n            type: \"violin\",\n            name: \"F\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#bebada\"\n            },\n            y0: \"Saturday\",\n            x: [\n                20.29,\n                15.77,\n                19.65,\n                15.06,\n                20.69,\n                16.93,\n                26.41,\n                16.45,\n                3.07,\n                17.07,\n                26.86,\n                25.28,\n                14.73,\n                44.3,\n                22.42,\n                20.92,\n                14.31,\n                7.25,\n                10.59,\n                10.63,\n                12.76,\n                13.27,\n                28.17,\n                12.9,\n                30.14,\n                22.12,\n                35.83,\n                27.18\n            ],\n            orientation: \"h\"\n        }\n\nvar trace4 = {\n            text: \"sample length: 59\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"M\",\n            scalegroup: \"M\",\n            points: \"all\",\n            pointpos: -1.1,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#8dd3c7\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: true,\n            side: \"negative\",\n            type: \"violin\",\n            name: \"M\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#8dd3c7\"\n            },\n            y0: \"Saturday\",\n            x: [\n                20.65,\n                17.92,\n                39.42,\n                19.82,\n                17.81,\n                13.37,\n                12.69,\n                21.7,\n                9.55,\n                18.35,\n                17.78,\n                24.06,\n                16.31,\n                18.69,\n                31.27,\n                16.04,\n                38.01,\n                11.24,\n                48.27,\n                20.29,\n                13.81,\n                11.02,\n                18.29,\n                17.59,\n                20.08,\n                20.23,\n                15.01,\n                12.02,\n                10.51,\n                17.92,\n                15.36,\n                20.49,\n                25.21,\n                18.24,\n                14.0,\n                50.81,\n                15.81,\n                26.59,\n                38.73,\n                24.27,\n                30.06,\n                25.89,\n                48.33,\n                28.15,\n                11.59,\n                7.74,\n                20.45,\n                13.28,\n                24.01,\n                15.69,\n                11.61,\n                10.77,\n                15.53,\n                10.07,\n                12.6,\n                32.83,\n                29.03,\n                22.67,\n                17.82\n            ],\n            orientation: \"h\"\n        }\n\nvar trace6 = {\n            text: \"sample length: 18\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"F\",\n            scalegroup: \"F\",\n            points: \"all\",\n            pointpos: 0.45,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#bebada\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: false,\n            side: \"positive\",\n            type: \"violin\",\n            name: \"F\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#bebada\"\n            },\n            y0: \"Sunday\",\n            x: [\n                16.99,\n                24.59,\n                35.26,\n                14.83,\n                10.33,\n                16.97,\n                10.29,\n                34.81,\n                25.71,\n                17.31,\n                29.85,\n                25.0,\n                13.39,\n                16.21,\n                17.51,\n                9.6,\n                20.9,\n                18.15\n            ],\n            orientation: \"h\"\n        }\n\nvar trace7 = {\n            text: \"sample length: 58\",\n            hoveron: \"points+kde\",\n            meanline: {\n                visible: true\n            },\n            legendgroup: \"M\",\n            scalegroup: \"M\",\n            points: \"all\",\n            pointpos: -0.9,\n            box: {\n                visible: true\n            },\n            jitter: 0,\n            scalemode: \"count\",\n            marker: {\n                line: {\n                    width: 2,\n                    color: \"#8dd3c7\"\n                },\n                symbol: \"line-ns\"\n            },\n            showlegend: false,\n            side: \"negative\",\n            type: \"violin\",\n            name: \"M\",\n            span: [\n                0\n            ],\n            line: {\n                color: \"#8dd3c7\"\n            },\n            y0: \"Sunday\",\n            x: [\n                10.34,\n                21.01,\n                23.68,\n                25.29,\n                8.77,\n                26.88,\n                15.04,\n                14.78,\n                10.27,\n                15.42,\n                18.43,\n                21.58,\n                16.29,\n                17.46,\n                13.94,\n                9.68,\n                30.4,\n                18.29,\n                22.23,\n                32.4,\n                28.55,\n                18.04,\n                12.54,\n                9.94,\n                25.56,\n                19.49,\n                38.07,\n                23.95,\n                29.93,\n                14.07,\n                13.13,\n                17.26,\n                24.55,\n                19.77,\n                48.17,\n                16.49,\n                21.5,\n                12.66,\n                13.81,\n                24.52,\n                20.76,\n                31.71,\n                7.25,\n                31.85,\n                16.82,\n                32.9,\n                17.89,\n                14.48,\n                34.63,\n                34.65,\n                23.33,\n                45.35,\n                23.17,\n                40.55,\n                20.69,\n                30.46,\n                23.1,\n                15.69\n            ],\n            orientation: \"h\"\n        }\n\nvar data = [trace1,trace2,trace3,trace4,trace5,trace6,trace7]\n\nvar layout = {\n        hovermode: \"closest\",\n        width: 400,\n        yaxis: {\n            showgrid: true\n        },\n        title: {\n            text: \"Total bill distribution&lt;br&gt;&lt;i&gt;scaled by number of bills per gender\"\n        },\n        legend: {\n            tracegroupgap: 0\n        },\n        violingap: 0,\n        violingroupgap: 0,\n        violinmode: \"overlay\",\n        height: 700\n    }\n\nPlotly.newPlot(\"myDiv\", data, layout)</code></pre>"},{"location":"examples/waterfall-charts/","title":"waterfall-charts","text":""},{"location":"examples/waterfall-charts/#basic-waterfall-chart","title":"basic-waterfall-chart","text":"<pre><code>var data = [\n        {\n            name: \"2018\",\n            type: \"waterfall\",\n            orientation: \"v\",\n            measure: [\n                \"relative\",\n                \"relative\",\n                \"total\",\n                \"relative\",\n                \"relative\",\n                \"total\"\n            ],\n            x: [\n                \"Sales\",\n                \"Consulting\",\n                \"Net revenue\",\n                \"Purchases\",\n                \"Other expenses\",\n                \"Profit before tax\"\n            ],\n            textposition: \"outside\",\n            text: [\n                \"+60\",\n                \"+80\",\n                \"\",\n                \"-40\",\n                \"-20\",\n                \"Total\"\n            ],          \n            y: [\n                60,\n                80,\n                0,\n                -40,\n                -20,\n                0\n            ],\n            connector: {\n              line: {\n                color: \"rgb(63, 63, 63)\"\n              }\n            },\n        }\n    ];\n layout = {\n        title: {\n            text: \"Profit and loss statement 2018\"\n        },\n        xaxis: {\n            type: \"category\"\n        },\n        yaxis: {\n            type: \"linear\"\n        },\n        autosize: true,\n        showlegend: true\n    };\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/waterfall-charts/#multi-category-waterfall-chart","title":"multi-category-waterfall-chart","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar data = [\n    {\n      type: \"waterfall\",\n      x: [\n        [\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n        [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\" ]\n      ],\n      measure: [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n      y: [1, 2, 3, -1, null, 1, 2, -4, null],\n      base: 1000\n    },\n    {\n      type: \"waterfall\",\n      x: [\n        [\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n        [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\" ]\n      ],\n      measure: [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n      y: [1.1, 2.2, 3.3, -1.1, null, 1.1, 2.2, -4.4, null],\n      base: 1000\n    }\n  ];\nvar layout = {\n    waterfallgroupgap : 0.5,\n    xaxis: {\n      title: {\n        text: \"MULTI-CATEGORY\",\n      },\n      tickfont: {size: 16},\n      ticks: \"outside\"\n    }\n  }\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/waterfall-charts/#horizontal-waterfall-chart","title":"horizontal-waterfall-chart","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar data = [\n        {\n            name: \"2018\",\n            type: \"waterfall\",\n            orientation: \"h\",\n            measure: [\n                \"relative\",\n                \"relative\",\n                \"relative\",\n                \"relative\",\n                \"total\",\n                \"relative\",\n                \"relative\",\n                \"relative\",\n                \"relative\",\n                \"total\",\n                \"relative\",\n                \"relative\",\n                \"total\",\n                \"relative\",\n                \"total\"\n            ],\n            y: [\n                \"Sales\",\n                \"Consulting\",\n                \"Maintenance\",\n                \"Other revenue\",\n                \"Net revenue\",\n                \"Purchases\",\n                \"Material expenses\",\n                \"Personnel expenses\",\n                \"Other expenses\",\n                \"Operating profit\",\n                \"Investment income\",\n                \"Financial income\",\n                \"Profit before tax\",\n                \"Income tax (15%)\",\n                \"Profit after tax\"\n            ],\n            x: [\n                375,\n                128,\n                78,\n                27,\n                null,\n                -327,\n                -12,\n                -78,\n                -12,\n                null,\n                32,\n                89,\n                null,\n                -45,\n                null\n            ],\n            connector: {\n                mode: \"between\",\n                line: {\n                    width: 4,\n                    color: \"rgb(0, 0, 0)\",\n                    dash: 0\n                }\n            }\n        }\n    ];\nvar layout = {title: {\n            text: \"Profit and loss statement 2018&lt;br&gt;waterfall chart displaying positive and negative\"\n        },\n        yaxis: {\n            type: \"category\",\n            autorange: \"reversed\"\n        },\n        xaxis: {\n            type: \"linear\"\n        },\n        margin: { l: 150 },\n        showlegend: true\n    }\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/waterfall-charts/#style-waterfall-chart","title":"style-waterfall-chart","text":"<pre><code>var gd = document.getElementById('myDiv');\nvar data = [\n    {\n      type: \"waterfall\",\n      x: [\n        [\"2016\", \"2017\", \"2017\", \"2017\", \"2017\", \"2018\", \"2018\", \"2018\", \"2018\"],\n        [\"initial\", \"q1\", \"q2\", \"q3\", \"total\", \"q1\", \"q2\", \"q3\", \"total\" ]\n      ],\n      measure: [\"absolute\", \"relative\", \"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"relative\", \"total\"],\n      y: [10, 20, 30, -10, null, 10, 20, -40, null],\n      base: 300,\n    decreasing: { marker: { color: \"Maroon\" , line:{color : \"red\", width :2}}},\n    increasing: { marker: { color: \"Teal\"} },\n    totals: { marker: { color: \"deep sky blue\", line:{color:'blue',width:3}} }\n    }];\nvar layout = {title: {\n            text: \"Profit and loss statement\"\n        },\n    waterfallgap : 0.3,\n    xaxis: {\n      title: { text: \"\"},\n      tickfont: {size: 15},\n      ticks: \"outside\"\n    }\n  }\nPlotly.newPlot('myDiv', data, layout);</code></pre>"},{"location":"examples/webgl-vs-svg/","title":"webgl-vs-svg","text":""},{"location":"examples/webgl-vs-svg/#webgl-with-100000-points","title":"webgl-with-100000-points","text":"<pre><code>function gaussianRand() {\n  var rand = 0;\n  for (var i = 0; i &lt; 6; i += 1) {\n    rand += Math.random();\n  }\n  return (rand / 6)-0.5;\n}\n\nvar X = [],\n    Y = [],\n    n = 100000,\n    i;\n\nfor (i = 0; i &lt; n; i += 1) {\n  X.push(gaussianRand());\n  Y.push(gaussianRand());\n}\n\nvar data = [{\n    type: \"scattergl\",\n    mode: \"markers\",\n    marker: {\n        line: {\n            width: 1,\n            color: '#404040'}\n    },\n    x: X,\n    y: Y\n}]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/webgl-vs-svg/#webgl-with-1-million-points","title":"webgl-with-1-million-points","text":"<pre><code>function gaussianRand() {\n  var rand = 0;\n  for (var i = 0; i &lt; 6; i += 1) {\n    rand += Math.random();\n  }\n  return (rand / 6)-0.5;\n}\n\nvar X = [],\n    Y = [],\n    n = 1000000,\n    i;\n\nfor (i = 0; i &lt; n; i += 1) {\n  X.push(gaussianRand());\n  Y.push(gaussianRand());\n}\n\nvar data = [{\n    type: \"scattergl\",\n    mode: \"markers\",\n    marker: {\n        color : 'rgb(152, 0, 0)',\n        line: {\n            width: 1,\n            color: 'rgb(0,0,0)'}\n    },\n    x: X,\n    y: Y\n}]\n\nPlotly.newPlot('myDiv', data)</code></pre>"},{"location":"examples/webgl-vs-svg/#webgl-with-many-traces","title":"webgl-with-many-traces","text":"<pre><code>function gaussianRand() {\n  var rand = 0;\n  for (var i = 0; i &lt; 6; i += 1) {\n    rand += Math.random();\n  }\n  return (rand / 6)-0.5;\n}\n\n\nvar start_value = 0,\n     stop_value = 1,\n     point_num = 5000,\n     trace_num = 10;\nvar curr_value = start_value;\nvar step = (stop_value - start_value) / (point_num - 1);\n\nvar data = [];\nfor (var j = 0; j &lt; trace_num; j++) {\n    var X = [],\n         Y = [];\n    for (var i = 0; i &lt; point_num; i++) {\n        X.push(curr_value + (step * i));\n        Y.push((gaussianRand()*8)+(j*5));\n    }\n    data.push({\n        type: \"scattergl\",\n        mode: \"line\",\n        x: X,\n        y: Y\n    })\n}\nvar layout = {showlegend: false}\nPlotly.newPlot('myDiv', data = data, layout = layout)</code></pre>"},{"location":"examples/wind-rose-charts/","title":"wind-rose-charts","text":""},{"location":"examples/wind-rose-charts/#wind-rose-chart","title":"wind-rose-chart","text":"<pre><code>var data = [{\n    r: [77.5, 72.5, 70.0, 45.0, 22.5, 42.5, 40.0, 62.5],\n    theta: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"],\n    name: \"11-14 m/s\",\n    marker: {color: \"rgb(106,81,163)\"},\n    type: \"barpolar\"\n  }, {\n    r: [57.5, 50.0, 45.0, 35.0, 20.0, 22.5, 37.5, 55.0],\n    theta: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"],\n    name: \"8-11 m/s\",\n    marker: {color: \"rgb(158,154,200)\"},\n    type: \"barpolar\"\n  }, {\n    r: [40.0, 30.0, 30.0, 35.0, 7.5, 7.5, 32.5, 40.0],\n    theta: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"],\n    name: \"5-8 m/s\",\n    marker: {color: \"rgb(203,201,226)\"},\n    type: \"barpolar\"\n  }, {\n    r: [20.0, 7.5, 15.0, 22.5, 2.5, 2.5, 12.5, 22.5],\n    theta: [\"North\", \"N-E\", \"East\", \"S-E\", \"South\", \"S-W\", \"West\", \"N-W\"],\n    name: \"&lt; 5 m/s\",\n    marker: {color: \"rgb(242,240,247)\"},\n    type: \"barpolar\"\n  }]\nvar layout = {\n    title: {\n      text: \"Wind Speed Distribution in Laurel, NE\"\n    },\n    font: {size: 16},\n    legend: {font: {size: 16}},\n    polar: {\n      barmode: \"overlay\",\n      bargap: 0,\n      radialaxis: {ticksuffix: \"%\", angle: 45, dtick: 20},\n      angularaxis: {direction: \"clockwise\"}\n    }\n  }\n\nPlotly.newPlot(\"myDiv\", data, layout)</code></pre>"},{"location":"examples/zoom-events/","title":"zoom-events","text":""},{"location":"examples/zoom-events/#binding-to-zoom-events","title":"binding-to-zoom-events","text":"<pre><code>var graphDiv = document.getElementById('myDiv');\n\nvar N = 40,\n    x = d3.range(N),\n    y = d3.range(N).map( d3.random.normal() ),\n    data = [ { x:x, y:y } ];\n    layout = { title: {text: 'Click-drag to zoom' }};\n\nPlotly.newPlot(graphDiv, data, layout);\n\ngraphDiv.on('plotly_relayout',\n    function(eventdata){\n        alert( 'ZOOM!' + '\\n\\n' +\n            'Event data:' + '\\n' +\n             JSON.stringify(eventdata) + '\\n\\n' +\n            'x-axis start:' + eventdata['xaxis.range[0]'] + '\\n' +\n            'x-axis end:' + eventdata['xaxis.range[1]'] );\n    });</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>bar</li> <li>barpolar</li> <li>box</li> <li>candlestick</li> <li>carpet</li> <li>choropleth</li> <li>choroplethmap</li> <li>choroplethmapbox</li> <li>cone</li> <li>contour</li> <li>contourcarpet</li> <li>densitymap</li> <li>densitymapbox</li> <li>funnel</li> <li>funnelarea</li> <li>heatmap</li> <li>histogram</li> <li>histogram2d</li> <li>histogram2dcontour</li> <li>icicle</li> <li>image</li> <li>indicator</li> <li>isosurface</li> <li>layout</li> <li>mesh3d</li> <li>ohlc</li> <li>parcats</li> <li>parcoords</li> <li>pie</li> <li>sankey</li> <li>scatter</li> <li>scatter3d</li> <li>scattercarpet</li> <li>scattergeo</li> <li>scattergl</li> <li>scattermap</li> <li>scattermapbox</li> <li>scatterpolar</li> <li>scatterpolargl</li> <li>scattersmith</li> <li>scatterternary</li> <li>splom</li> <li>streamtube</li> <li>sunburst</li> <li>surface</li> <li>table</li> <li>treemap</li> <li>violin</li> <li>volume</li> <li>waterfall</li> </ul>"},{"location":"reference/bar/","title":"bar","text":"A <code>bar</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"bar\"</code>   (i.e. <code>{\"type\": \"bar\"}</code>) and any of the keys listed below.   The data visualized by the span of the bars is set in `y` if `orientation` is set to \"v\" (the default) and the labels are set in `x`. By setting `orientation` to \"h\", the roles are interchanged. <ul> <li>      alignmentgroup  Parent: <code>data[type=bar]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</p> </li> <li>      base  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Sets where the bar base is drawn (in position axis units). In \"stack\" or \"relative\" barmode, traces that set \"base\" will be excluded and drawn in \"overlay\" mode instead.</p> </li> <li>      cliponaxis  Parent: <code>data[type=bar]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      constraintext  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"both\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"both\"</code> <p>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</p> </li> <li>      customdata  Parent: <code>data[type=bar]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=bar]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      dy  Parent: <code>data[type=bar]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      error_x  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=bar].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=bar].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=bar].error_x</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      copy_ystyle  Parent: <code>data[type=bar].error_x</code> Type: boolean</li> <li>      symmetric  Parent: <code>data[type=bar].error_x</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=bar].error_x</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=bar].error_x</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=bar].error_x</code> Type: integer</li> <li>      type  Parent: <code>data[type=bar].error_x</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=bar].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=bar].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=bar].error_x</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=bar].error_x</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      error_y  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=bar].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=bar].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=bar].error_y</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      symmetric  Parent: <code>data[type=bar].error_y</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=bar].error_y</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=bar].error_y</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=bar].error_y</code> Type: integer</li> <li>      type  Parent: <code>data[type=bar].error_y</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=bar].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=bar].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=bar].error_y</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=bar].error_y</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=bar]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=bar].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=bar].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=bar].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=bar].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=bar].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=bar].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=bar].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=bar].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=bar].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=bar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=bar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=bar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=bar].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=bar].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=bar]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=bar]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=bar]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextanchor  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>\"end\"</code>| <code>\"middle\"</code>| <code>\"start\"</code>                    )                 Default: <code>\"end\"</code> <p>Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.</p> </li> <li>      insidetextfont  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying inside the bar.</p> <ul> <li>      color  Parent: <code>data[type=bar].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=bar].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=bar].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=bar].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=bar].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=bar].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=bar].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=bar].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=bar].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      legend  Parent: <code>data[type=bar]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=bar]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=bar].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=bar].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=bar].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=bar]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=bar]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=bar].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=bar].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=bar].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=bar].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=bar].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=bar].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=bar].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=bar].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=bar].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=bar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=bar].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=bar].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=bar].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=bar].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=bar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=bar].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=bar].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=bar].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=bar].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=bar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=bar].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=bar].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=bar].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=bar].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=bar].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=bar].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=bar].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=bar].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=bar].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=bar].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=bar].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=bar].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=bar].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=bar].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=bar].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=bar].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=bar].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=bar].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=bar].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=bar].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=bar].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=bar].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=bar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=bar].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      cornerradius  Parent: <code>data[type=bar].marker</code> Type: number or categorical coordinate string <p>Sets the rounding of corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %). Defaults to `layout.barcornerradius`. In stack or relative barmode, the first trace to set cornerradius is used for the whole stack.</p> </li> <li>      line  Parent: <code>data[type=bar].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=bar].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=bar].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=bar].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=bar].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=bar].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=bar].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=bar].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=bar].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=bar].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=bar].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=bar].marker</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the bars.</p> </li> <li>      pattern  Parent: <code>data[type=bar].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=bar].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=bar].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=bar].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=bar].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=bar].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=bar].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=bar].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=bar].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> <li>      reversescale  Parent: <code>data[type=bar].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=bar].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=bar]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      offset  Parent: <code>data[type=bar]</code> Type: number or array of numbers<p>Shifts the position where the bar is drawn (in position axis units). In \"group\" barmode, traces that set \"offset\" will be excluded and drawn in \"overlay\" mode instead.</p> </li> <li>      offsetgroup  Parent: <code>data[type=bar]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</p> </li> <li>      opacity  Parent: <code>data[type=bar]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      orientation  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    ) <p>Sets the orientation of the bars. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal).</p> </li> <li>      outsidetextfont  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying outside the bar.</p> <ul> <li>      color  Parent: <code>data[type=bar].outsidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=bar].outsidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=bar].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=bar].outsidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=bar].outsidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=bar].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=bar].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=bar].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=bar].outsidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      selected  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=bar].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=bar].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=bar].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=bar].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=bar].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=bar]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=bar]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textangle  Parent: <code>data[type=bar]</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.</p> </li> <li>      textfont  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text`.</p> <ul> <li>      color  Parent: <code>data[type=bar].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=bar].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=bar].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=bar].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=bar].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=bar].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=bar].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=bar].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=bar].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=bar]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"auto\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"auto\"</code> <p>Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.</p> </li> <li>      texttemplate  Parent: <code>data[type=bar]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`.</p> </li> <li>      type  Parent: <code>data[type=bar]</code> Type: \"bar\" </li> <li>      uid  Parent: <code>data[type=bar]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=bar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=bar].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=bar].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=bar].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=bar].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=bar].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      width  Parent: <code>data[type=bar]</code> Type: number or array of numbers<p>Sets the bar width (in position axis units).</p> </li> <li>      x  Parent: <code>data[type=bar]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      x0  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      xaxis  Parent: <code>data[type=bar]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=bar]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      y  Parent: <code>data[type=bar]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      y0  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      yaxis  Parent: <code>data[type=bar]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ycalendar  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=bar]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=bar]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=bar]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> <li>      zorder  Parent: <code>data[type=bar]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/barpolar/","title":"barpolar","text":"A <code>barpolar</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"barpolar\"</code>   (i.e. <code>{\"type\": \"barpolar\"}</code>) and any of the keys listed below.   The data visualized by the radial span of the bars is set in `r` <ul> <li>      base  Parent: <code>data[type=barpolar]</code> Type: number or categorical coordinate string <p>Sets where the bar base is drawn (in radial axis units). In \"stack\" barmode, traces that set \"base\" will be excluded and drawn in \"overlay\" mode instead.</p> </li> <li>      customdata  Parent: <code>data[type=barpolar]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dr  Parent: <code>data[type=barpolar]</code> Type: number                Default: <code>1</code> <p>Sets the r coordinate step.</p> </li> <li>      dtheta  Parent: <code>data[type=barpolar]</code> Type: number<p>Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.</p> </li> <li>      hoverinfo  Parent: <code>data[type=barpolar]</code> Type: flaglist string.                      Any combination of \"r\", \"theta\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"r\"</code>, <code>\"theta\"</code>, <code>\"r+theta\"</code>, <code>\"r+theta+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=barpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=barpolar].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=barpolar].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=barpolar].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=barpolar].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=barpolar].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=barpolar].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=barpolar]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=barpolar]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=barpolar]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=barpolar]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=barpolar]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=barpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=barpolar].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=barpolar].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=barpolar].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=barpolar]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=barpolar]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=barpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=barpolar].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=barpolar].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=barpolar].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=barpolar].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=barpolar].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=barpolar].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=barpolar].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=barpolar].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=barpolar].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=barpolar].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=barpolar].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=barpolar].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=barpolar].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=barpolar].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=barpolar].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=barpolar].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=barpolar].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=barpolar].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=barpolar].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=barpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=barpolar].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=barpolar].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=barpolar].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=barpolar].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=barpolar].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=barpolar].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=barpolar].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=barpolar].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=barpolar].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=barpolar].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=barpolar].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=barpolar].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=barpolar].marker</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the bars.</p> </li> <li>      pattern  Parent: <code>data[type=barpolar].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=barpolar].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=barpolar].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=barpolar].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=barpolar].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=barpolar].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=barpolar].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=barpolar].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=barpolar].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> <li>      reversescale  Parent: <code>data[type=barpolar].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=barpolar].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=barpolar]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=barpolar]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      offset  Parent: <code>data[type=barpolar]</code> Type: number or array of numbers<p>Shifts the angular position where the bar is drawn (in \"thetatunit\" units).</p> </li> <li>      opacity  Parent: <code>data[type=barpolar]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      r  Parent: <code>data[type=barpolar]</code> Type: data_array <p>Sets the radial coordinates</p> </li> <li>      r0  Parent: <code>data[type=barpolar]</code> Type: number or categorical coordinate string <p>Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.</p> </li> <li>      selected  Parent: <code>data[type=barpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=barpolar].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=barpolar].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=barpolar].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=barpolar].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=barpolar].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=barpolar]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=barpolar]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      subplot  Parent: <code>data[type=barpolar]</code> Type: subplotid                 Default: <code>polar</code> <p>Sets a reference between this trace's data coordinates and a polar subplot. If \"polar\" (the default value), the data refer to `layout.polar`. If \"polar2\", the data refer to `layout.polar2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=barpolar]</code> Type: string or array of strings<p>Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.</p> </li> <li>      theta  Parent: <code>data[type=barpolar]</code> Type: data_array <p>Sets the angular coordinates</p> </li> <li>      theta0  Parent: <code>data[type=barpolar]</code> Type: number or categorical coordinate string <p>Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.</p> </li> <li>      thetaunit  Parent: <code>data[type=barpolar]</code> Type:                     enumerated                    , one of ( <code>\"radians\"</code>| <code>\"degrees\"</code>| <code>\"gradians\"</code>                    )                 Default: <code>\"degrees\"</code> <p>Sets the unit of input \"theta\" values. Has an effect only when on \"linear\" angular axes.</p> </li> <li>      type  Parent: <code>data[type=barpolar]</code> Type: \"barpolar\" </li> <li>      uid  Parent: <code>data[type=barpolar]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=barpolar]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=barpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=barpolar].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=barpolar].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=barpolar].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=barpolar].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=barpolar].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=barpolar]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      width  Parent: <code>data[type=barpolar]</code> Type: number or array of numbers<p>Sets the bar angular width (in \"thetaunit\" units).</p> </li> </ul>"},{"location":"reference/box/","title":"box","text":"A <code>box</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"box\"</code>   (i.e. <code>{\"type\": \"box\"}</code>) and any of the keys listed below.   Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2, i.e. the median) is marked by a line inside the box. The fences grow outward from the boxes' edges, by default they span +/- 1.5 times the interquartile range (IQR: Q3-Q1), The sample mean and standard deviation as well as notches and the sample, outlier and suspected outliers points can be optionally added to the box plot. The values and positions corresponding to each boxes can be input using two signatures. The first signature expects users to supply the sample values in the `y` data array for vertical boxes (`x` for horizontal boxes). By supplying an `x` (`y`) array, one box per distinct `x` (`y`) value is drawn If no `x` (`y`) array is provided, a single box is drawn. In this case, the box is positioned with the trace `name` or with `x0` (`y0`) if provided. The second signature expects users to supply the boxes corresponding Q1, median and Q3 statistics in the `q1`, `median` and `q3` data arrays respectively. Other box features relying on statistics namely `lowerfence`, `upperfence`, `notchspan` can be set directly by the users. To have plotly compute them or to show sample points besides the boxes, users can set the `y` data array for vertical boxes (`x` for horizontal boxes) to a 2D array with the outer length corresponding to the number of boxes in the traces and the inner length corresponding the sample size. <ul> <li>      alignmentgroup  Parent: <code>data[type=box]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</p> </li> <li>      boxmean  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>\"sd\"</code>| <code>false</code>                    ) <p>If \"true\", the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If \"sd\" the standard deviation is also drawn. Defaults to \"true\" when `mean` is set. Defaults to \"sd\" when `sd` is set Otherwise defaults to \"false\".</p> </li> <li>      boxpoints  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"outliers\"</code>| <code>\"suspectedoutliers\"</code>| <code>false</code>                    ) <p>If \"outliers\", only the sample points lying outside the whiskers are shown If \"suspectedoutliers\", the outlier points are shown and points either less than 4\"Q1-3\"Q3 or greater than 4\"Q3-3\"Q1 are highlighted (see `outliercolor`) If \"all\", all sample points are shown If \"false\", only the box(es) are shown with no sample points Defaults to \"suspectedoutliers\" when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to \"all\" under the q1/median/q3 signature. Otherwise defaults to \"outliers\".</p> </li> <li>      customdata  Parent: <code>data[type=box]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=box]</code> Type: number<p>Sets the x coordinate step for multi-box traces set using q1/median/q3.</p> </li> <li>      dy  Parent: <code>data[type=box]</code> Type: number<p>Sets the y coordinate step for multi-box traces set using q1/median/q3.</p> </li> <li>      fillcolor  Parent: <code>data[type=box]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=box]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=box]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=box].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=box].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=box].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=box].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=box].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=box].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=box].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=box].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=box].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=box].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=box].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=box].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=box].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=box].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoveron  Parent: <code>data[type=box]</code> Type: flaglist string.                      Any combination of \"boxes\", \"points\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"boxes\"</code>, <code>\"points\"</code>, <code>\"boxes+points\"</code>,                   Default: <code>\"boxes+points\"</code> <p>Do the hover effects highlight individual boxes  or sample points or both?</p> </li> <li>      hovertemplate  Parent: <code>data[type=box]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=box]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=box]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      jitter  Parent: <code>data[type=box]</code> Type: number less than or equal to 1 <p>Sets the amount of jitter in the sample points drawn. If \"0\", the sample points align along the distribution axis. If \"1\", the sample points are drawn in a random jitter of width equal to the width of the box(es).</p> </li> <li>      legend  Parent: <code>data[type=box]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=box]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=box]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=box].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=box].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=box].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=box].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=box].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=box].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=box].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=box].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=box].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=box].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=box].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=box]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=box]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=box]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=box].line</code> Type: color<p>Sets the color of line bounding the box(es).</p> </li> <li>      width  Parent: <code>data[type=box].line</code> Type: number                Default: <code>2</code> <p>Sets the width (in px) of line bounding the box(es).</p> </li> </ul> </li> <li>      lowerfence  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `lowerfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point below 1.5 times the IQR.</p> </li> <li>      marker  Parent: <code>data[type=box]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=box].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      color  Parent: <code>data[type=box].marker</code> Type: color<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      line  Parent: <code>data[type=box].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=box].marker.line</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      outliercolor  Parent: <code>data[type=box].marker.line</code> Type: color<p>Sets the border line color of the outlier sample points. Defaults to marker.color</p> </li> <li>      outlierwidth  Parent: <code>data[type=box].marker.line</code> Type: number                Default: <code>1</code> <p>Sets the border line width (in px) of the outlier sample points.</p> </li> <li>      width  Parent: <code>data[type=box].marker.line</code> Type: number<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=box].marker</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the marker opacity.</p> </li> <li>      outliercolor  Parent: <code>data[type=box].marker</code> Type: color                Default: <code>\"rgba(0, 0, 0, 0)\"</code> <p>Sets the color of the outlier sample points.</p> </li> <li>      size  Parent: <code>data[type=box].marker</code> Type: number                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      symbol  Parent: <code>data[type=box].marker</code> Type:                     enumerated                    , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      mean  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `mean` is not provided but a sample (in `y` or `x`) is set, we compute the mean for each box using the sample values.</p> </li> <li>      median  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the median values. There should be as many items as the number of boxes desired.</p> </li> <li>      meta  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=box]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical</p> </li> <li>      notched  Parent: <code>data[type=box]</code> Type: boolean<p>Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 \" IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to \"false\" unless `notchwidth` or `notchspan` is set.</p> </li> <li>      notchspan  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the notch span from the boxes' `median` values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `notchspan` is not provided but a sample (in `y` or `x`) is set, we compute it as 1.57 \" IQR / sqrt(N), where N is the sample size.</p> </li> <li>      notchwidth  Parent: <code>data[type=box]</code> Type: number less than or equal to 0.5                 Default: <code>0.25</code> <p>Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).</p> </li> <li>      offsetgroup  Parent: <code>data[type=box]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</p> </li> <li>      opacity  Parent: <code>data[type=box]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      orientation  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    ) <p>Sets the orientation of the box(es). If \"v\" (\"h\"), the distribution is visualized along the vertical (horizontal).</p> </li> <li>      pointpos  Parent: <code>data[type=box]</code> Type: number between or equal to -2 and 2 <p>Sets the position of the sample points in relation to the box(es). If \"0\", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes</p> </li> <li>      q1  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the Quartile 1 values. There should be as many items as the number of boxes desired.</p> </li> <li>      q3  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the Quartile 3 values. There should be as many items as the number of boxes desired.</p> </li> <li>      quartilemethod  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"exclusive\"</code>| <code>\"inclusive\"</code>                    )                 Default: <code>\"linear\"</code> <p>Sets the method used to compute the sample's Q1 and Q3 quartiles. The \"linear\" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The \"exclusive\" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The \"inclusive\" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</p> </li> <li>      sd  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `sd` is not provided but a sample (in `y` or `x`) is set, we compute the standard deviation for each box using the sample values.</p> </li> <li>      sdmultiple  Parent: <code>data[type=box]</code> Type: number                Default: <code>1</code> <p>Scales the box size when sizemode=sd Allowing boxes to be drawn across any stddev range For example 1-stddev, 3-stddev, 5-stddev</p> </li> <li>      selected  Parent: <code>data[type=box]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=box].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=box].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=box].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=box].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=box]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showwhiskers  Parent: <code>data[type=box]</code> Type: boolean<p>Determines whether or not whiskers are visible. Defaults to true for `sizemode` \"quartiles\", false for \"sd\".</p> </li> <li>      sizemode  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"quartiles\"</code>| <code>\"sd\"</code>                    )                 Default: <code>\"quartiles\"</code> <p>Sets the upper and lower bound for the boxes quartiles means box is drawn between Q1 and Q3 SD means the box is drawn between Mean +- Standard Deviation Argument sdmultiple (default 1) to scale the box size So it could be drawn 1-stddev, 3-stddev etc</p> </li> <li>      text  Parent: <code>data[type=box]</code> Type: string or array of strings<p>Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      type  Parent: <code>data[type=box]</code> Type: \"box\" </li> <li>      uid  Parent: <code>data[type=box]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=box]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=box].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=box].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=box].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=box].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      upperfence  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `upperfence` is not provided but a sample (in `y` or `x`) is set, we compute the upper as the last sample point above 1.5 times the IQR.</p> </li> <li>      visible  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      whiskerwidth  Parent: <code>data[type=box]</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</p> </li> <li>      width  Parent: <code>data[type=box]</code> Type: number<p>Sets the width of the box in data coordinate If \"0\" (default value) the width is automatically selected based on the positions of other box traces in the same subplot.</p> </li> <li>      x  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the x sample data or coordinates. See overview for more info.</p> </li> <li>      x0  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</p> </li> <li>      xaxis  Parent: <code>data[type=box]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=box]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      y  Parent: <code>data[type=box]</code> Type: data_array <p>Sets the y sample data or coordinates. See overview for more info.</p> </li> <li>      y0  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</p> </li> <li>      yaxis  Parent: <code>data[type=box]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ycalendar  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=box]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=box]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=box]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> <li>      zorder  Parent: <code>data[type=box]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/candlestick/","title":"candlestick","text":"A <code>candlestick</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"candlestick\"</code>   (i.e. <code>{\"type\": \"candlestick\"}</code>) and any of the keys listed below.   The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red. <ul> <li>      close  Parent: <code>data[type=candlestick]</code> Type: data_array <p>Sets the close values.</p> </li> <li>      customdata  Parent: <code>data[type=candlestick]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      decreasing  Parent: <code>data[type=candlestick]</code> Type: object containing one or more of the keys listed below. <ul> <li>      fillcolor  Parent: <code>data[type=candlestick].decreasing</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      line  Parent: <code>data[type=candlestick].decreasing</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=candlestick].decreasing.line</code> Type: color                Default: <code>\"#FF4136\"</code> <p>Sets the color of line bounding the box(es).</p> </li> <li>      width  Parent: <code>data[type=candlestick].decreasing.line</code> Type: number                Default: <code>2</code> <p>Sets the width (in px) of line bounding the box(es).</p> </li> </ul> </li> </ul> </li> <li>      high  Parent: <code>data[type=candlestick]</code> Type: data_array <p>Sets the high values.</p> </li> <li>      hoverinfo  Parent: <code>data[type=candlestick]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=candlestick]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=candlestick].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=candlestick].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=candlestick].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=candlestick].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=candlestick].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=candlestick].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> <li>      split  Parent: <code>data[type=candlestick].hoverlabel</code> Type: boolean<p>Show hover information (open, close, high, low) in separate labels.</p> </li> </ul> </li> <li>      hovertext  Parent: <code>data[type=candlestick]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=candlestick]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      increasing  Parent: <code>data[type=candlestick]</code> Type: object containing one or more of the keys listed below. <ul> <li>      fillcolor  Parent: <code>data[type=candlestick].increasing</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      line  Parent: <code>data[type=candlestick].increasing</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=candlestick].increasing.line</code> Type: color                Default: <code>\"#3D9970\"</code> <p>Sets the color of line bounding the box(es).</p> </li> <li>      width  Parent: <code>data[type=candlestick].increasing.line</code> Type: number                Default: <code>2</code> <p>Sets the width (in px) of line bounding the box(es).</p> </li> </ul> </li> </ul> </li> <li>      legend  Parent: <code>data[type=candlestick]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=candlestick]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=candlestick]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=candlestick].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=candlestick].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=candlestick].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=candlestick]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=candlestick]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=candlestick]</code> Type: object containing one or more of the keys listed below. <ul> <li>      width  Parent: <code>data[type=candlestick].line</code> Type: number                Default: <code>2</code> <p>Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.</p> </li> </ul> </li> <li>      low  Parent: <code>data[type=candlestick]</code> Type: data_array <p>Sets the low values.</p> </li> <li>      meta  Parent: <code>data[type=candlestick]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=candlestick]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=candlestick]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      open  Parent: <code>data[type=candlestick]</code> Type: data_array <p>Sets the open values.</p> </li> <li>      selectedpoints  Parent: <code>data[type=candlestick]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=candlestick]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=candlestick]</code> Type: string or array of strings<p>Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.</p> </li> <li>      type  Parent: <code>data[type=candlestick]</code> Type: \"candlestick\" </li> <li>      uid  Parent: <code>data[type=candlestick]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=candlestick]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=candlestick]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      whiskerwidth  Parent: <code>data[type=candlestick]</code> Type: number less than or equal to 1 <p>Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).</p> </li> <li>      x  Parent: <code>data[type=candlestick]</code> Type: data_array <p>Sets the x coordinates. If absent, linear coordinate will be generated.</p> </li> <li>      xaxis  Parent: <code>data[type=candlestick]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=candlestick]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=candlestick]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=candlestick]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=candlestick]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=candlestick]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      yaxis  Parent: <code>data[type=candlestick]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      yhoverformat  Parent: <code>data[type=candlestick]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      zorder  Parent: <code>data[type=candlestick]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/carpet/","title":"carpet","text":"A <code>carpet</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"carpet\"</code>   (i.e. <code>{\"type\": \"carpet\"}</code>) and any of the keys listed below.   The data describing carpet axis layout is set in `y` and (optionally) also `x`. If only `y` is present, `x` the plot is interpreted as a cheater plot and is filled in using the `y` values. `x` and `y` may either be 2D arrays matching with each dimension matching that of `a` and `b`, or they may be 1D arrays with total length equal to that of `a` and `b`. <ul> <li>      a  Parent: <code>data[type=carpet]</code> Type: data_array <p>An array containing values of the first parameter value</p> </li> <li>      a0  Parent: <code>data[type=carpet]</code> Type: number<p>Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.</p> </li> <li>      aaxis  Parent: <code>data[type=carpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      arraydtick  Parent: <code>data[type=carpet].aaxis</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>The stride between grid lines along the axis</p> </li> <li>      arraytick0  Parent: <code>data[type=carpet].aaxis</code> Type: integer<p>The starting index of grid lines along the axis</p> </li> <li>      autorange  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"reversed\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to \"false\".</p> </li> <li>      autotypenumbers  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"convert types\"</code>| <code>\"strict\"</code>                    )                 Default: <code>\"convert types\"</code> <p>Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</p> </li> <li>      categoryarray  Parent: <code>data[type=carpet].aaxis</code> Type: data_array <p>Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.</p> </li> <li>      categoryorder  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"trace\"</code>| <code>\"category ascending\"</code>| <code>\"category descending\"</code>| <code>\"array\"</code>                    )                 Default: <code>\"trace\"</code> <p>Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`.</p> </li> <li>      cheatertype  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"index\"</code>| <code>\"value\"</code>                    )                 Default: <code>\"value\"</code> </li> <li>      color  Parent: <code>data[type=carpet].aaxis</code> Type: color<p>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</p> </li> <li>      dtick  Parent: <code>data[type=carpet].aaxis</code> Type: number                Default: <code>1</code> <p>The stride between grid lines along the axis</p> </li> <li>      endline  Parent: <code>data[type=carpet].aaxis</code> Type: boolean<p>Determines whether or not a line is drawn at along the final value of this axis. If \"true\", the end line is drawn on top of the grid lines.</p> </li> <li>      endlinecolor  Parent: <code>data[type=carpet].aaxis</code> Type: color<p>Sets the line color of the end line.</p> </li> <li>      endlinewidth  Parent: <code>data[type=carpet].aaxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the end line.</p> </li> <li>      exponentformat  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      fixedrange  Parent: <code>data[type=carpet].aaxis</code> Type: boolean<p>Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</p> </li> <li>      gridcolor  Parent: <code>data[type=carpet].aaxis</code> Type: color<p>Sets the axis line color.</p> </li> <li>      griddash  Parent: <code>data[type=carpet].aaxis</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      gridwidth  Parent: <code>data[type=carpet].aaxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      labelalias  Parent: <code>data[type=carpet].aaxis</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      labelpadding  Parent: <code>data[type=carpet].aaxis</code> Type: integer                Default: <code>10</code> <p>Extra padding between label and the axis</p> </li> <li>      labelprefix  Parent: <code>data[type=carpet].aaxis</code> Type: string<p>Sets a axis label prefix.</p> </li> <li>      labelsuffix  Parent: <code>data[type=carpet].aaxis</code> Type: string<p>Sets a axis label suffix.</p> </li> <li>      linecolor  Parent: <code>data[type=carpet].aaxis</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      linewidth  Parent: <code>data[type=carpet].aaxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      minexponent  Parent: <code>data[type=carpet].aaxis</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number</p> </li> <li>      minorgridcolor  Parent: <code>data[type=carpet].aaxis</code> Type: color                Default: <code>\"#eee\"</code> <p>Sets the color of the grid lines.</p> </li> <li>      minorgridcount  Parent: <code>data[type=carpet].aaxis</code> Type: integer<p>Sets the number of minor grid ticks per major grid tick</p> </li> <li>      minorgriddash  Parent: <code>data[type=carpet].aaxis</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      minorgridwidth  Parent: <code>data[type=carpet].aaxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the grid lines.</p> </li> <li>      nticks  Parent: <code>data[type=carpet].aaxis</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      range  Parent: <code>data[type=carpet].aaxis</code>  {inner}Type: {array} <p>Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      rangemode  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"tozero\"</code>| <code>\"nonnegative\"</code>                    )                 Default: <code>\"normal\"</code> <p>If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data.</p> </li> <li>      separatethousands  Parent: <code>data[type=carpet].aaxis</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showgrid  Parent: <code>data[type=carpet].aaxis</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.</p> </li> <li>      showline  Parent: <code>data[type=carpet].aaxis</code> Type: boolean<p>Determines whether or not a line bounding this axis is drawn.</p> </li> <li>      showticklabels  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"end\"</code>| <code>\"both\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"start\"</code> <p>Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.</p> </li> <li>      showtickprefix  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      smoothing  Parent: <code>data[type=carpet].aaxis</code> Type: number less than or equal to 1.3                 Default: <code>1</code> </li> <li>      startline  Parent: <code>data[type=carpet].aaxis</code> Type: boolean<p>Determines whether or not a line is drawn at along the starting value of this axis. If \"true\", the start line is drawn on top of the grid lines.</p> </li> <li>      startlinecolor  Parent: <code>data[type=carpet].aaxis</code> Type: color<p>Sets the line color of the start line.</p> </li> <li>      startlinewidth  Parent: <code>data[type=carpet].aaxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the start line.</p> </li> <li>      tick0  Parent: <code>data[type=carpet].aaxis</code> Type: number<p>The starting index of grid lines along the axis</p> </li> <li>      tickangle  Parent: <code>data[type=carpet].aaxis</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickfont  Parent: <code>data[type=carpet].aaxis</code> Type: object containing one or more of the keys listed below. <p>Sets the tick font.</p> <ul> <li>      color  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=carpet].aaxis.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=carpet].aaxis</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=carpet].aaxis</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=carpet].aaxis.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=carpet].aaxis.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=carpet].aaxis.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=carpet].aaxis.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=carpet].aaxis.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      tickmode  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"array\"</code>                    )                 Default: <code>\"array\"</code> </li> <li>      tickprefix  Parent: <code>data[type=carpet].aaxis</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticksuffix  Parent: <code>data[type=carpet].aaxis</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=carpet].aaxis</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=carpet].aaxis</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      title  Parent: <code>data[type=carpet].aaxis</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=carpet].aaxis.title</code> Type: object containing one or more of the keys listed below. <p>Sets this axis' title font.</p> <ul> <li>      color  Parent: <code>data[type=carpet].aaxis.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=carpet].aaxis.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=carpet].aaxis.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=carpet].aaxis.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=carpet].aaxis.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=carpet].aaxis.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=carpet].aaxis.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=carpet].aaxis.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=carpet].aaxis.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      offset  Parent: <code>data[type=carpet].aaxis.title</code> Type: number                Default: <code>10</code> <p>An additional amount by which to offset the title from the tick labels, given in pixels.</p> </li> <li>      text  Parent: <code>data[type=carpet].aaxis.title</code> Type: string<p>Sets the title of this axis.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=carpet].aaxis</code> Type:                     enumerated                    , one of ( <code>\"-\"</code>| <code>\"linear\"</code>| <code>\"date\"</code>| <code>\"category\"</code>                    )                 Default: <code>\"-\"</code> <p>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</p> </li> </ul> </li> <li>      b  Parent: <code>data[type=carpet]</code> Type: data_array <p>A two dimensional array of y coordinates at each carpet point.</p> </li> <li>      b0  Parent: <code>data[type=carpet]</code> Type: number<p>Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.</p> </li> <li>      baxis  Parent: <code>data[type=carpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      arraydtick  Parent: <code>data[type=carpet].baxis</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>The stride between grid lines along the axis</p> </li> <li>      arraytick0  Parent: <code>data[type=carpet].baxis</code> Type: integer<p>The starting index of grid lines along the axis</p> </li> <li>      autorange  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"reversed\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to \"false\".</p> </li> <li>      autotypenumbers  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"convert types\"</code>| <code>\"strict\"</code>                    )                 Default: <code>\"convert types\"</code> <p>Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.</p> </li> <li>      categoryarray  Parent: <code>data[type=carpet].baxis</code> Type: data_array <p>Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.</p> </li> <li>      categoryorder  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"trace\"</code>| <code>\"category ascending\"</code>| <code>\"category descending\"</code>| <code>\"array\"</code>                    )                 Default: <code>\"trace\"</code> <p>Specifies the ordering logic for the case of categorical variables. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`.</p> </li> <li>      cheatertype  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"index\"</code>| <code>\"value\"</code>                    )                 Default: <code>\"value\"</code> </li> <li>      color  Parent: <code>data[type=carpet].baxis</code> Type: color<p>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</p> </li> <li>      dtick  Parent: <code>data[type=carpet].baxis</code> Type: number                Default: <code>1</code> <p>The stride between grid lines along the axis</p> </li> <li>      endline  Parent: <code>data[type=carpet].baxis</code> Type: boolean<p>Determines whether or not a line is drawn at along the final value of this axis. If \"true\", the end line is drawn on top of the grid lines.</p> </li> <li>      endlinecolor  Parent: <code>data[type=carpet].baxis</code> Type: color<p>Sets the line color of the end line.</p> </li> <li>      endlinewidth  Parent: <code>data[type=carpet].baxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the end line.</p> </li> <li>      exponentformat  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      fixedrange  Parent: <code>data[type=carpet].baxis</code> Type: boolean<p>Determines whether or not this axis is zoom-able. If true, then zoom is disabled.</p> </li> <li>      gridcolor  Parent: <code>data[type=carpet].baxis</code> Type: color<p>Sets the axis line color.</p> </li> <li>      griddash  Parent: <code>data[type=carpet].baxis</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      gridwidth  Parent: <code>data[type=carpet].baxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      labelalias  Parent: <code>data[type=carpet].baxis</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      labelpadding  Parent: <code>data[type=carpet].baxis</code> Type: integer                Default: <code>10</code> <p>Extra padding between label and the axis</p> </li> <li>      labelprefix  Parent: <code>data[type=carpet].baxis</code> Type: string<p>Sets a axis label prefix.</p> </li> <li>      labelsuffix  Parent: <code>data[type=carpet].baxis</code> Type: string<p>Sets a axis label suffix.</p> </li> <li>      linecolor  Parent: <code>data[type=carpet].baxis</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      linewidth  Parent: <code>data[type=carpet].baxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      minexponent  Parent: <code>data[type=carpet].baxis</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number</p> </li> <li>      minorgridcolor  Parent: <code>data[type=carpet].baxis</code> Type: color                Default: <code>\"#eee\"</code> <p>Sets the color of the grid lines.</p> </li> <li>      minorgridcount  Parent: <code>data[type=carpet].baxis</code> Type: integer<p>Sets the number of minor grid ticks per major grid tick</p> </li> <li>      minorgriddash  Parent: <code>data[type=carpet].baxis</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      minorgridwidth  Parent: <code>data[type=carpet].baxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the grid lines.</p> </li> <li>      nticks  Parent: <code>data[type=carpet].baxis</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      range  Parent: <code>data[type=carpet].baxis</code>  {inner}Type: {array} <p>Sets the range of this axis. If the axis `type` is \"log\", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is \"date\", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is \"category\", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      rangemode  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"tozero\"</code>| <code>\"nonnegative\"</code>                    )                 Default: <code>\"normal\"</code> <p>If \"normal\", the range is computed in relation to the extrema of the input data. If \"tozero\"`, the range extends to 0, regardless of the input data If \"nonnegative\", the range is non-negative, regardless of the input data.</p> </li> <li>      separatethousands  Parent: <code>data[type=carpet].baxis</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showgrid  Parent: <code>data[type=carpet].baxis</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not grid lines are drawn. If \"true\", the grid lines are drawn at every tick mark.</p> </li> <li>      showline  Parent: <code>data[type=carpet].baxis</code> Type: boolean<p>Determines whether or not a line bounding this axis is drawn.</p> </li> <li>      showticklabels  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"end\"</code>| <code>\"both\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"start\"</code> <p>Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.</p> </li> <li>      showtickprefix  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      smoothing  Parent: <code>data[type=carpet].baxis</code> Type: number less than or equal to 1.3                 Default: <code>1</code> </li> <li>      startline  Parent: <code>data[type=carpet].baxis</code> Type: boolean<p>Determines whether or not a line is drawn at along the starting value of this axis. If \"true\", the start line is drawn on top of the grid lines.</p> </li> <li>      startlinecolor  Parent: <code>data[type=carpet].baxis</code> Type: color<p>Sets the line color of the start line.</p> </li> <li>      startlinewidth  Parent: <code>data[type=carpet].baxis</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the start line.</p> </li> <li>      tick0  Parent: <code>data[type=carpet].baxis</code> Type: number<p>The starting index of grid lines along the axis</p> </li> <li>      tickangle  Parent: <code>data[type=carpet].baxis</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickfont  Parent: <code>data[type=carpet].baxis</code> Type: object containing one or more of the keys listed below. <p>Sets the tick font.</p> <ul> <li>      color  Parent: <code>data[type=carpet].baxis.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=carpet].baxis.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=carpet].baxis.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=carpet].baxis.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=carpet].baxis.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=carpet].baxis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=carpet].baxis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=carpet].baxis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=carpet].baxis.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=carpet].baxis</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=carpet].baxis</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=carpet].baxis.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=carpet].baxis.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=carpet].baxis.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=carpet].baxis.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=carpet].baxis.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      tickmode  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"array\"</code>                    )                 Default: <code>\"array\"</code> </li> <li>      tickprefix  Parent: <code>data[type=carpet].baxis</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticksuffix  Parent: <code>data[type=carpet].baxis</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=carpet].baxis</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=carpet].baxis</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      title  Parent: <code>data[type=carpet].baxis</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=carpet].baxis.title</code> Type: object containing one or more of the keys listed below. <p>Sets this axis' title font.</p> <ul> <li>      color  Parent: <code>data[type=carpet].baxis.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=carpet].baxis.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=carpet].baxis.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=carpet].baxis.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=carpet].baxis.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=carpet].baxis.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=carpet].baxis.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=carpet].baxis.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=carpet].baxis.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      offset  Parent: <code>data[type=carpet].baxis.title</code> Type: number                Default: <code>10</code> <p>An additional amount by which to offset the title from the tick labels, given in pixels.</p> </li> <li>      text  Parent: <code>data[type=carpet].baxis.title</code> Type: string<p>Sets the title of this axis.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=carpet].baxis</code> Type:                     enumerated                    , one of ( <code>\"-\"</code>| <code>\"linear\"</code>| <code>\"date\"</code>| <code>\"category\"</code>                    )                 Default: <code>\"-\"</code> <p>Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.</p> </li> </ul> </li> <li>      carpet  Parent: <code>data[type=carpet]</code> Type: string<p>An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie</p> </li> <li>      cheaterslope  Parent: <code>data[type=carpet]</code> Type: number                Default: <code>1</code> <p>The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.</p> </li> <li>      color  Parent: <code>data[type=carpet]</code> Type: color                Default: <code>\"#444\"</code> <p>Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.</p> </li> <li>      customdata  Parent: <code>data[type=carpet]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      da  Parent: <code>data[type=carpet]</code> Type: number                Default: <code>1</code> <p>Sets the a coordinate step. See `a0` for more info.</p> </li> <li>      db  Parent: <code>data[type=carpet]</code> Type: number                Default: <code>1</code> <p>Sets the b coordinate step. See `b0` for more info.</p> </li> <li>      font  Parent: <code>data[type=carpet]</code> Type: object containing one or more of the keys listed below. <p>The default font used for axis &amp; tick labels on this carpet</p> <ul> <li>      color  Parent: <code>data[type=carpet].font</code> Type: color                Default: <code>\"#444\"</code> </li> <li>      family  Parent: <code>data[type=carpet].font</code> Type: string                Default: <code>\"\"Open Sans\", verdana, arial, sans-serif\"</code> <p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=carpet].font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=carpet].font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=carpet].font</code> Type: number greater than or equal to 1                 Default: <code>12</code> </li> <li>      style  Parent: <code>data[type=carpet].font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=carpet].font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=carpet].font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=carpet].font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      ids  Parent: <code>data[type=carpet]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=carpet]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=carpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=carpet].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=carpet].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=carpet].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=carpet]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=carpet]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      meta  Parent: <code>data[type=carpet]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=carpet]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=carpet]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      type  Parent: <code>data[type=carpet]</code> Type: \"carpet\" </li> <li>      uid  Parent: <code>data[type=carpet]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=carpet]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=carpet]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=carpet]</code> Type: data_array <p>A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.</p> </li> <li>      xaxis  Parent: <code>data[type=carpet]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      y  Parent: <code>data[type=carpet]</code> Type: data_array <p>A two dimensional array of y coordinates at each carpet point.</p> </li> <li>      yaxis  Parent: <code>data[type=carpet]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      zorder  Parent: <code>data[type=carpet]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/choropleth/","title":"choropleth","text":"A <code>choropleth</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"choropleth\"</code>   (i.e. <code>{\"type\": \"choropleth\"}</code>) and any of the keys listed below.   The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`. <ul> <li>      autocolorscale  Parent: <code>data[type=choropleth]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      coloraxis  Parent: <code>data[type=choropleth]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=choropleth]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=choropleth].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=choropleth].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=choropleth].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=choropleth].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=choropleth].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=choropleth].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=choropleth].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=choropleth].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=choropleth].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=choropleth].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=choropleth].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=choropleth].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=choropleth].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choropleth].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=choropleth].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=choropleth].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=choropleth].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=choropleth].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=choropleth].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=choropleth].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=choropleth].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=choropleth].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=choropleth].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=choropleth].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=choropleth].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=choropleth].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=choropleth].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=choropleth].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choropleth].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=choropleth].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=choropleth].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=choropleth].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=choropleth].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=choropleth].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=choropleth].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=choropleth]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=choropleth]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      featureidkey  Parent: <code>data[type=choropleth]</code> Type: string                Default: <code>\"id\"</code> <p>Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example \"properties.name\".</p> </li> <li>      geo  Parent: <code>data[type=choropleth]</code> Type: subplotid                 Default: <code>geo</code> <p>Sets a reference between this trace's geospatial coordinates and a geographic map. If \"geo\" (the default value), the geospatial coordinates refer to `layout.geo`. If \"geo2\", the geospatial coordinates refer to `layout.geo2`, and so on.</p> </li> <li>      geojson  Parent: <code>data[type=choropleth]</code> Type: number or categorical coordinate string <p>Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \"FeatureCollection\" or \"Feature\" with geometries of type \"Polygon\" or \"MultiPolygon\".</p> </li> <li>      hoverinfo  Parent: <code>data[type=choropleth]</code> Type: flaglist string.                      Any combination of \"location\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"location\"</code>, <code>\"z\"</code>, <code>\"location+z\"</code>, <code>\"location+z+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=choropleth]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=choropleth].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=choropleth].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=choropleth].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=choropleth].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choropleth].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=choropleth].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=choropleth]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=choropleth]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=choropleth]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=choropleth]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=choropleth]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=choropleth]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=choropleth].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choropleth].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=choropleth].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=choropleth]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=choropleth]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      locationmode  Parent: <code>data[type=choropleth]</code> Type:                     enumerated                    , one of ( <code>\"ISO-3\"</code>| <code>\"USA-states\"</code>| <code>\"country names\"</code>| <code>\"geojson-id\"</code>                    )                 Default: <code>\"ISO-3\"</code> <p>Determines the set of locations used to match entries in `locations` to regions on the map. Values \"ISO-3\", \"USA-states\", \"country names\" correspond to features on the base map and value \"geojson-id\" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</p> </li> <li>      locations  Parent: <code>data[type=choropleth]</code> Type: data_array <p>Sets the coordinates via location IDs or names. See `locationmode` for more info.</p> </li> <li>      marker  Parent: <code>data[type=choropleth]</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=choropleth].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=choropleth].marker.line</code> Type: color or array of colors                Default: <code>\"#444\"</code> <p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      width  Parent: <code>data[type=choropleth].marker.line</code> Type: number or array of numbers                Default: <code>1</code> <p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=choropleth].marker</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the locations.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=choropleth]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=choropleth]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      reversescale  Parent: <code>data[type=choropleth]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      selected  Parent: <code>data[type=choropleth]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=choropleth].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=choropleth].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=choropleth]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=choropleth]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=choropleth]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      text  Parent: <code>data[type=choropleth]</code> Type: string or array of strings<p>Sets the text elements associated with each location.</p> </li> <li>      type  Parent: <code>data[type=choropleth]</code> Type: \"choropleth\" </li> <li>      uid  Parent: <code>data[type=choropleth]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=choropleth]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=choropleth]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=choropleth].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=choropleth].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=choropleth]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      z  Parent: <code>data[type=choropleth]</code> Type: data_array <p>Sets the color values.</p> </li> <li>      zauto  Parent: <code>data[type=choropleth]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zmax  Parent: <code>data[type=choropleth]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=choropleth]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=choropleth]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> </ul>"},{"location":"reference/choroplethmap/","title":"choroplethmap","text":"A <code>choroplethmap</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"choroplethmap\"</code>   (i.e. <code>{\"type\": \"choroplethmap\"}</code>) and any of the keys listed below.   GeoJSON features to be filled are set in `geojson` The data that describes the choropleth value-to-color mapping is set in `locations` and `z`. <ul> <li>      autocolorscale  Parent: <code>data[type=choroplethmap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      below  Parent: <code>data[type=choroplethmap]</code> Type: string<p>Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmap traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.</p> </li> <li>      coloraxis  Parent: <code>data[type=choroplethmap]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=choroplethmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=choroplethmap].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=choroplethmap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=choroplethmap].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=choroplethmap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=choroplethmap].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=choroplethmap].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=choroplethmap].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=choroplethmap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=choroplethmap].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmap].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=choroplethmap].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=choroplethmap].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=choroplethmap].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=choroplethmap].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=choroplethmap].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=choroplethmap].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=choroplethmap].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=choroplethmap].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=choroplethmap].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=choroplethmap].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=choroplethmap].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=choroplethmap].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=choroplethmap].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=choroplethmap].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmap].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=choroplethmap].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=choroplethmap].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=choroplethmap].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=choroplethmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=choroplethmap]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=choroplethmap]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      featureidkey  Parent: <code>data[type=choroplethmap]</code> Type: string                Default: <code>\"id\"</code> <p>Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example \"properties.name\".</p> </li> <li>      geojson  Parent: <code>data[type=choroplethmap]</code> Type: number or categorical coordinate string <p>Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \"FeatureCollection\" or \"Feature\" with geometries of type \"Polygon\" or \"MultiPolygon\".</p> </li> <li>      hoverinfo  Parent: <code>data[type=choroplethmap]</code> Type: flaglist string.                      Any combination of \"location\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"location\"</code>, <code>\"z\"</code>, <code>\"location+z\"</code>, <code>\"location+z+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=choroplethmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=choroplethmap].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=choroplethmap].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=choroplethmap].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=choroplethmap].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmap].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=choroplethmap].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=choroplethmap]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=choroplethmap]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=choroplethmap]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=choroplethmap]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=choroplethmap]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=choroplethmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=choroplethmap].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmap].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=choroplethmap].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=choroplethmap]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=choroplethmap]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      locations  Parent: <code>data[type=choroplethmap]</code> Type: data_array <p>Sets which features found in \"geojson\" to plot using their feature `id` field.</p> </li> <li>      marker  Parent: <code>data[type=choroplethmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=choroplethmap].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=choroplethmap].marker.line</code> Type: color or array of colors                Default: <code>\"#444\"</code> <p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      width  Parent: <code>data[type=choroplethmap].marker.line</code> Type: number or array of numbers                Default: <code>1</code> <p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=choroplethmap].marker</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the locations.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=choroplethmap]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=choroplethmap]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      reversescale  Parent: <code>data[type=choroplethmap]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      selected  Parent: <code>data[type=choroplethmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=choroplethmap].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=choroplethmap].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=choroplethmap]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=choroplethmap]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=choroplethmap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      subplot  Parent: <code>data[type=choroplethmap]</code> Type: subplotid                 Default: <code>map</code> <p>Sets a reference between this trace's data coordinates and a map subplot. If \"map\" (the default value), the data refer to `layout.map`. If \"map2\", the data refer to `layout.map2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=choroplethmap]</code> Type: string or array of strings<p>Sets the text elements associated with each location.</p> </li> <li>      type  Parent: <code>data[type=choroplethmap]</code> Type: \"choroplethmap\" </li> <li>      uid  Parent: <code>data[type=choroplethmap]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=choroplethmap]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=choroplethmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=choroplethmap].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=choroplethmap].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=choroplethmap]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      z  Parent: <code>data[type=choroplethmap]</code> Type: data_array <p>Sets the color values.</p> </li> <li>      zauto  Parent: <code>data[type=choroplethmap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zmax  Parent: <code>data[type=choroplethmap]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=choroplethmap]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=choroplethmap]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> </ul>"},{"location":"reference/choroplethmapbox/","title":"choroplethmapbox","text":"A <code>choroplethmapbox</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"choroplethmapbox\"</code>   (i.e. <code>{\"type\": \"choroplethmapbox\"}</code>) and any of the keys listed below.   \"choroplethmapbox\" trace is deprecated! Please consider switching to the \"choroplethmap\" trace type and `map` subplots. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ GeoJSON features to be filled are set in `geojson` The data that describes the choropleth value-to-color mapping is set in `locations` and `z`. <ul> <li>      autocolorscale  Parent: <code>data[type=choroplethmapbox]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      below  Parent: <code>data[type=choroplethmapbox]</code> Type: string<p>Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.</p> </li> <li>      coloraxis  Parent: <code>data[type=choroplethmapbox]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=choroplethmapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmapbox].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=choroplethmapbox].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=choroplethmapbox].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=choroplethmapbox].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=choroplethmapbox].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=choroplethmapbox].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=choroplethmapbox].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmapbox].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=choroplethmapbox].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=choroplethmapbox].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=choroplethmapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=choroplethmapbox]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=choroplethmapbox]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      featureidkey  Parent: <code>data[type=choroplethmapbox]</code> Type: string                Default: <code>\"id\"</code> <p>Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example \"properties.name\".</p> </li> <li>      geojson  Parent: <code>data[type=choroplethmapbox]</code> Type: number or categorical coordinate string <p>Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \"FeatureCollection\" or \"Feature\" with geometries of type \"Polygon\" or \"MultiPolygon\".</p> </li> <li>      hoverinfo  Parent: <code>data[type=choroplethmapbox]</code> Type: flaglist string.                      Any combination of \"location\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"location\"</code>, <code>\"z\"</code>, <code>\"location+z\"</code>, <code>\"location+z+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=choroplethmapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=choroplethmapbox].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=choroplethmapbox].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=choroplethmapbox].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=choroplethmapbox].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmapbox].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=choroplethmapbox].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=choroplethmapbox]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=choroplethmapbox]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=choroplethmapbox]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=choroplethmapbox]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=choroplethmapbox]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=choroplethmapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=choroplethmapbox].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=choroplethmapbox].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=choroplethmapbox].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=choroplethmapbox]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=choroplethmapbox]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      locations  Parent: <code>data[type=choroplethmapbox]</code> Type: data_array <p>Sets which features found in \"geojson\" to plot using their feature `id` field.</p> </li> <li>      marker  Parent: <code>data[type=choroplethmapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=choroplethmapbox].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=choroplethmapbox].marker.line</code> Type: color or array of colors                Default: <code>\"#444\"</code> <p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      width  Parent: <code>data[type=choroplethmapbox].marker.line</code> Type: number or array of numbers                Default: <code>1</code> <p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=choroplethmapbox].marker</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the locations.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=choroplethmapbox]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=choroplethmapbox]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      reversescale  Parent: <code>data[type=choroplethmapbox]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      selected  Parent: <code>data[type=choroplethmapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=choroplethmapbox].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=choroplethmapbox].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=choroplethmapbox]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=choroplethmapbox]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=choroplethmapbox]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      subplot  Parent: <code>data[type=choroplethmapbox]</code> Type: subplotid                 Default: <code>mapbox</code> <p>mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If \"mapbox\" (the default value), the data refer to `layout.mapbox`. If \"mapbox2\", the data refer to `layout.mapbox2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=choroplethmapbox]</code> Type: string or array of strings<p>Sets the text elements associated with each location.</p> </li> <li>      type  Parent: <code>data[type=choroplethmapbox]</code> Type: \"choroplethmapbox\" </li> <li>      uid  Parent: <code>data[type=choroplethmapbox]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=choroplethmapbox]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=choroplethmapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=choroplethmapbox].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=choroplethmapbox].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=choroplethmapbox]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      z  Parent: <code>data[type=choroplethmapbox]</code> Type: data_array <p>Sets the color values.</p> </li> <li>      zauto  Parent: <code>data[type=choroplethmapbox]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zmax  Parent: <code>data[type=choroplethmapbox]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=choroplethmapbox]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=choroplethmapbox]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> </ul>"},{"location":"reference/cone/","title":"cone","text":"A <code>cone</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"cone\"</code>   (i.e. <code>{\"type\": \"cone\"}</code>) and any of the keys listed below.   Use cone traces to visualize vector fields.  Specify a vector field using 6 1D arrays, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, `w`. The cones are drawn exactly at the positions given by `x`, `y` and `z`. <ul> <li>      anchor  Parent: <code>data[type=cone]</code> Type:                     enumerated                    , one of ( <code>\"tip\"</code>| <code>\"tail\"</code>| <code>\"cm\"</code>| <code>\"center\"</code>                    )                 Default: <code>\"cm\"</code> <p>Sets the cones' anchor with respect to their x/y/z positions. Note that \"cm\" denote the cone's center of mass which corresponds to 1/4 from the tail to tip.</p> </li> <li>      autocolorscale  Parent: <code>data[type=cone]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=cone]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=cone]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=cone]</code> Type: number<p>Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=cone]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=cone]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=cone]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=cone].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=cone].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=cone].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=cone].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=cone].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=cone].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=cone].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=cone].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=cone].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=cone].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=cone].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=cone].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=cone].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=cone].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=cone].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=cone].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=cone].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=cone].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=cone].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=cone].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=cone].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=cone].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=cone].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=cone].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=cone].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=cone].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=cone].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=cone].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=cone].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=cone].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=cone].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=cone].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=cone].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=cone].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=cone].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=cone].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=cone].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=cone].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=cone].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=cone].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=cone].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=cone].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=cone].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=cone].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=cone].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=cone].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=cone].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=cone].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=cone].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=cone].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=cone].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=cone]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=cone]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      hoverinfo  Parent: <code>data[type=cone]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"u\", \"v\", \"w\", \"norm\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"x+y+z+norm+text+name\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=cone]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=cone].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=cone].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=cone].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=cone].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=cone].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=cone].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=cone].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=cone].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=cone].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=cone].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=cone].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=cone].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=cone].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=cone].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=cone]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `norm` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=cone]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=cone]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=cone]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=cone]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=cone]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=cone].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=cone].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=cone].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=cone]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=cone]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lighting  Parent: <code>data[type=cone]</code> Type: object containing one or more of the keys listed below. <ul> <li>      ambient  Parent: <code>data[type=cone].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Ambient light increases overall color visibility but can wash out the image.</p> </li> <li>      diffuse  Parent: <code>data[type=cone].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Represents the extent that incident rays are reflected in a range of angles.</p> </li> <li>      facenormalsepsilon  Parent: <code>data[type=cone].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-06</code> <p>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</p> </li> <li>      fresnel  Parent: <code>data[type=cone].lighting</code> Type: number less than or equal to 5                 Default: <code>0.2</code> <p>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</p> </li> <li>      roughness  Parent: <code>data[type=cone].lighting</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</p> </li> <li>      specular  Parent: <code>data[type=cone].lighting</code> Type: number less than or equal to 2                 Default: <code>0.05</code> <p>Represents the level that incident rays are reflected in a single direction, causing shine.</p> </li> <li>      vertexnormalsepsilon  Parent: <code>data[type=cone].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-12</code> <p>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</p> </li> </ul> </li> <li>      lightposition  Parent: <code>data[type=cone]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=cone].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the X coordinate for each vertex.</p> </li> <li>      y  Parent: <code>data[type=cone].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the Y coordinate for each vertex.</p> </li> <li>      z  Parent: <code>data[type=cone].lightposition</code> Type: number between or equal to -100000 and 100000 <p>Numeric vector, representing the Z coordinate for each vertex.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=cone]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=cone]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=cone]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</p> </li> <li>      reversescale  Parent: <code>data[type=cone]</code> Type: boolean<p>Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</p> </li> <li>      scene  Parent: <code>data[type=cone]</code> Type: subplotid                 Default: <code>scene</code> <p>Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</p> </li> <li>      showlegend  Parent: <code>data[type=cone]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=cone]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      sizemode  Parent: <code>data[type=cone]</code> Type:                     enumerated                    , one of ( <code>\"scaled\"</code>| <code>\"absolute\"</code>| <code>\"raw\"</code>                    )                 Default: <code>\"scaled\"</code> <p>Determines whether `sizeref` is set as a \"scaled\" (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as \"absolute\" value (in the same units as the vector field). To display sizes in actual vector length use \"raw\".</p> </li> <li>      sizeref  Parent: <code>data[type=cone]</code> Type: number<p>Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum \"time\" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to \"raw\", its default value is \"1\". With `sizemode` set to \"scaled\", `sizeref` is unitless, its default value is \"0.5\". With `sizemode` set to \"absolute\", `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.</p> </li> <li>      text  Parent: <code>data[type=cone]</code> Type: string or array of strings<p>Sets the text elements associated with the cones. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      type  Parent: <code>data[type=cone]</code> Type: \"cone\" </li> <li>      u  Parent: <code>data[type=cone]</code> Type: data_array <p>Sets the x components of the vector field.</p> </li> <li>      uhoverformat  Parent: <code>data[type=cone]</code> Type: string<p>Sets the hover text formatting rulefor `u`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      uid  Parent: <code>data[type=cone]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=cone]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      v  Parent: <code>data[type=cone]</code> Type: data_array <p>Sets the y components of the vector field.</p> </li> <li>      vhoverformat  Parent: <code>data[type=cone]</code> Type: string<p>Sets the hover text formatting rulefor `v`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      visible  Parent: <code>data[type=cone]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      w  Parent: <code>data[type=cone]</code> Type: data_array <p>Sets the z components of the vector field.</p> </li> <li>      whoverformat  Parent: <code>data[type=cone]</code> Type: string<p>Sets the hover text formatting rulefor `w`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      x  Parent: <code>data[type=cone]</code> Type: data_array <p>Sets the x coordinates of the vector field and of the displayed cones.</p> </li> <li>      xhoverformat  Parent: <code>data[type=cone]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=cone]</code> Type: data_array <p>Sets the y coordinates of the vector field and of the displayed cones.</p> </li> <li>      yhoverformat  Parent: <code>data[type=cone]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=cone]</code> Type: data_array <p>Sets the z coordinates of the vector field and of the displayed cones.</p> </li> <li>      zhoverformat  Parent: <code>data[type=cone]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/contour/","title":"contour","text":"A <code>contour</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"contour\"</code>   (i.e. <code>{\"type\": \"contour\"}</code>) and any of the keys listed below.   The data from which contour lines are computed is set in `z`. Data in `z` must be a 2D array of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to \"true\", the above behavior is flipped. <ul> <li>      autocolorscale  Parent: <code>data[type=contour]</code> Type: boolean<p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      autocontour  Parent: <code>data[type=contour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the contour level attributes are picked by an algorithm. If \"true\", the number of contour levels can be set in `ncontours`. If \"false\", set the contour level attributes in `contours`.</p> </li> <li>      coloraxis  Parent: <code>data[type=contour]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=contour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=contour].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=contour].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=contour].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=contour].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=contour].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=contour].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=contour].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=contour].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=contour].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=contour].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=contour].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=contour].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=contour].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=contour].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=contour].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contour].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contour].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contour].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contour].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contour].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contour].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contour].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=contour].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=contour].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=contour].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=contour].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=contour].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=contour].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=contour].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=contour].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=contour].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=contour].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=contour].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=contour].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=contour].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=contour].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=contour].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=contour].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contour].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contour].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contour].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contour].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contour].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contour].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contour].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=contour].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=contour].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=contour].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=contour].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=contour].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=contour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=contour]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      connectgaps  Parent: <code>data[type=contour]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.</p> </li> <li>      contours  Parent: <code>data[type=contour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      coloring  Parent: <code>data[type=contour].contours</code> Type:                     enumerated                    , one of ( <code>\"fill\"</code>| <code>\"heatmap\"</code>| <code>\"lines\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"fill\"</code> <p>Determines the coloring method showing the contour values. If \"fill\", coloring is done evenly between each contour level If \"heatmap\", a heatmap gradient coloring is applied between each contour level. If \"lines\", coloring is done on the contour lines. If \"none\", no coloring is applied on this trace.</p> </li> <li>      end  Parent: <code>data[type=contour].contours</code> Type: number<p>Sets the end contour level value. Must be more than `contours.start`</p> </li> <li>      labelfont  Parent: <code>data[type=contour].contours</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.</p> <ul> <li>      color  Parent: <code>data[type=contour].contours.labelfont</code> Type: color</li> <li>      family  Parent: <code>data[type=contour].contours.labelfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contour].contours.labelfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contour].contours.labelfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contour].contours.labelfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contour].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contour].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contour].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contour].contours.labelfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      labelformat  Parent: <code>data[type=contour].contours</code> Type: string<p>Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> <li>      operation  Parent: <code>data[type=contour].contours</code> Type:                     enumerated                    , one of ( <code>\"=\"</code>| <code>\"&lt;\"</code>| <code>\"&gt;=\"</code>| <code>\"&gt;\"</code>| <code>\"&lt;=\"</code>| <code>\"[]\"</code>| <code>\"()\"</code>| <code>\"[)\"</code>| <code>\"(]\"</code>| <code>\"][\"</code>| <code>\")(\"</code>| <code>\"](\"</code>| <code>\")[\"</code>                    )                 Default: <code>\"=\"</code> <p>Sets the constraint operation. \"=\" keeps regions equal to `value` \"&lt;\" and \"&lt;=\" keep regions less than `value` \"&gt;\" and \"&gt;=\" keep regions greater than `value` \"[]\", \"()\", \"[)\", and \"(]\" keep regions inside `value[0]` to `value[1]` \"][\", \")(\", \"](\", \")[\" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</p> </li> <li>      showlabels  Parent: <code>data[type=contour].contours</code> Type: boolean<p>Determines whether to label the contour lines with their values.</p> </li> <li>      showlines  Parent: <code>data[type=contour].contours</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to \"fill\".</p> </li> <li>      size  Parent: <code>data[type=contour].contours</code> Type: number<p>Sets the step between each contour level. Must be positive.</p> </li> <li>      start  Parent: <code>data[type=contour].contours</code> Type: number<p>Sets the starting contour level value. Must be less than `contours.end`</p> </li> <li>      type  Parent: <code>data[type=contour].contours</code> Type:                     enumerated                    , one of ( <code>\"levels\"</code>| <code>\"constraint\"</code>                    )                 Default: <code>\"levels\"</code> <p>If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.</p> </li> <li>      value  Parent: <code>data[type=contour].contours</code> Type: number or categorical coordinate string <p>Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (`=,&lt;,&gt;=,&gt;,&lt;=`) \"value\" is expected to be a number. When `operation` is set to one of the interval values (`[],(),[),(],][,)(,](,)[`) \"value\" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=contour]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=contour]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      dy  Parent: <code>data[type=contour]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      fillcolor  Parent: <code>data[type=contour]</code> Type: color<p>Sets the fill color if `contours.type` is \"constraint\". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=contour]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=contour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=contour].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=contour].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=contour].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=contour].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=contour].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=contour].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contour].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contour].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contour].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contour].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contour].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contour].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contour].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=contour].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoverongaps  Parent: <code>data[type=contour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.</p> </li> <li>      hovertemplate  Parent: <code>data[type=contour]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=contour]</code> Type: data_array <p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=contour]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=contour]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=contour]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=contour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=contour].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contour].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=contour].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=contour]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=contour]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=contour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=contour].line</code> Type: color<p>Sets the color of the contour level. Has no effect if `contours.coloring` is set to \"lines\".</p> </li> <li>      dash  Parent: <code>data[type=contour].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      smoothing  Parent: <code>data[type=contour].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Sets the amount of smoothing for the contour lines, where \"0\" corresponds to no smoothing.</p> </li> <li>      width  Parent: <code>data[type=contour].line</code> Type: number<p>Sets the contour line width in (in px) Defaults to \"0.5\" when `contours.type` is \"levels\". Defaults to \"2\" when `contour.type` is \"constraint\".</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=contour]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      ncontours  Parent: <code>data[type=contour]</code> Type: integer greater than or equal to 1                 Default: <code>15</code> <p>Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is \"true\" or if `contours.size` is missing.</p> </li> <li>      opacity  Parent: <code>data[type=contour]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      reversescale  Parent: <code>data[type=contour]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      showlegend  Parent: <code>data[type=contour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=contour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      text  Parent: <code>data[type=contour]</code> Type: data_array <p>Sets the text elements associated with each z value.</p> </li> <li>      textfont  Parent: <code>data[type=contour]</code> Type: object containing one or more of the keys listed below. <p>For this trace it only has an effect if `coloring` is set to \"heatmap\". Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=contour].textfont</code> Type: color                Default: <code>\"auto\"</code> </li> <li>      family  Parent: <code>data[type=contour].textfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contour].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contour].textfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contour].textfont</code> Type: number greater than or equal to 1                 Default: <code>\"auto\"</code> </li> <li>      style  Parent: <code>data[type=contour].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contour].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contour].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contour].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      texttemplate  Parent: <code>data[type=contour]</code> Type: string<p>For this trace it only has an effect if `coloring` is set to \"heatmap\". Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.</p> </li> <li>      transpose  Parent: <code>data[type=contour]</code> Type: boolean<p>Transposes the z data.</p> </li> <li>      type  Parent: <code>data[type=contour]</code> Type: \"contour\" </li> <li>      uid  Parent: <code>data[type=contour]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=contour]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=contour]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      x0  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      xaxis  Parent: <code>data[type=contour]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=contour]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=contour]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=contour]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      xtype  Parent: <code>data[type=contour]</code> Type:                     enumerated                    , one of ( <code>\"array\"</code>| <code>\"scaled\"</code>                    ) <p>If \"array\", the heatmap's x coordinates are given by \"x\" (the default behavior when `x` is provided). If \"scaled\", the heatmap's x coordinates are given by \"x0\" and \"dx\" (the default behavior when `x` is not provided).</p> </li> <li>      y  Parent: <code>data[type=contour]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      y0  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      yaxis  Parent: <code>data[type=contour]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ycalendar  Parent: <code>data[type=contour]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=contour]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=contour]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=contour]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> <li>      ytype  Parent: <code>data[type=contour]</code> Type:                     enumerated                    , one of ( <code>\"array\"</code>| <code>\"scaled\"</code>                    ) <p>If \"array\", the heatmap's y coordinates are given by \"y\" (the default behavior when `y` is provided) If \"scaled\", the heatmap's y coordinates are given by \"y0\" and \"dy\" (the default behavior when `y` is not provided)</p> </li> <li>      z  Parent: <code>data[type=contour]</code> Type: data_array <p>Sets the z data.</p> </li> <li>      zauto  Parent: <code>data[type=contour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zhoverformat  Parent: <code>data[type=contour]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      zmax  Parent: <code>data[type=contour]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=contour]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=contour]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> <li>      zorder  Parent: <code>data[type=contour]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/contourcarpet/","title":"contourcarpet","text":"A <code>contourcarpet</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"contourcarpet\"</code>   (i.e. <code>{\"type\": \"contourcarpet\"}</code>) and any of the keys listed below.   Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis. <ul> <li>      a  Parent: <code>data[type=contourcarpet]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      a0  Parent: <code>data[type=contourcarpet]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      atype  Parent: <code>data[type=contourcarpet]</code> Type:                     enumerated                    , one of ( <code>\"array\"</code>| <code>\"scaled\"</code>                    ) <p>If \"array\", the heatmap's x coordinates are given by \"x\" (the default behavior when `x` is provided). If \"scaled\", the heatmap's x coordinates are given by \"x0\" and \"dx\" (the default behavior when `x` is not provided).</p> </li> <li>      autocolorscale  Parent: <code>data[type=contourcarpet]</code> Type: boolean<p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      autocontour  Parent: <code>data[type=contourcarpet]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the contour level attributes are picked by an algorithm. If \"true\", the number of contour levels can be set in `ncontours`. If \"false\", set the contour level attributes in `contours`.</p> </li> <li>      b  Parent: <code>data[type=contourcarpet]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      b0  Parent: <code>data[type=contourcarpet]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      btype  Parent: <code>data[type=contourcarpet]</code> Type:                     enumerated                    , one of ( <code>\"array\"</code>| <code>\"scaled\"</code>                    ) <p>If \"array\", the heatmap's y coordinates are given by \"y\" (the default behavior when `y` is provided) If \"scaled\", the heatmap's y coordinates are given by \"y0\" and \"dy\" (the default behavior when `y` is not provided)</p> </li> <li>      carpet  Parent: <code>data[type=contourcarpet]</code> Type: string<p>The `carpet` of the carpet axes on which this contour trace lies</p> </li> <li>      coloraxis  Parent: <code>data[type=contourcarpet]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=contourcarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=contourcarpet].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=contourcarpet].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=contourcarpet].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=contourcarpet].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=contourcarpet].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=contourcarpet].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=contourcarpet].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=contourcarpet].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=contourcarpet].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contourcarpet].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=contourcarpet].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=contourcarpet].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=contourcarpet].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=contourcarpet].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=contourcarpet].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=contourcarpet].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=contourcarpet].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=contourcarpet].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=contourcarpet].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=contourcarpet].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=contourcarpet].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=contourcarpet].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=contourcarpet].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=contourcarpet].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contourcarpet].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=contourcarpet].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=contourcarpet].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=contourcarpet].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=contourcarpet].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=contourcarpet]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      contours  Parent: <code>data[type=contourcarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      coloring  Parent: <code>data[type=contourcarpet].contours</code> Type:                     enumerated                    , one of ( <code>\"fill\"</code>| <code>\"lines\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"fill\"</code> <p>Determines the coloring method showing the contour values. If \"fill\", coloring is done evenly between each contour level If \"lines\", coloring is done on the contour lines. If \"none\", no coloring is applied on this trace.</p> </li> <li>      end  Parent: <code>data[type=contourcarpet].contours</code> Type: number<p>Sets the end contour level value. Must be more than `contours.start`</p> </li> <li>      labelfont  Parent: <code>data[type=contourcarpet].contours</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.</p> <ul> <li>      color  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type: color</li> <li>      family  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contourcarpet].contours.labelfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      labelformat  Parent: <code>data[type=contourcarpet].contours</code> Type: string<p>Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> <li>      operation  Parent: <code>data[type=contourcarpet].contours</code> Type:                     enumerated                    , one of ( <code>\"=\"</code>| <code>\"&lt;\"</code>| <code>\"&gt;=\"</code>| <code>\"&gt;\"</code>| <code>\"&lt;=\"</code>| <code>\"[]\"</code>| <code>\"()\"</code>| <code>\"[)\"</code>| <code>\"(]\"</code>| <code>\"][\"</code>| <code>\")(\"</code>| <code>\"](\"</code>| <code>\")[\"</code>                    )                 Default: <code>\"=\"</code> <p>Sets the constraint operation. \"=\" keeps regions equal to `value` \"&lt;\" and \"&lt;=\" keep regions less than `value` \"&gt;\" and \"&gt;=\" keep regions greater than `value` \"[]\", \"()\", \"[)\", and \"(]\" keep regions inside `value[0]` to `value[1]` \"][\", \")(\", \"](\", \")[\" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</p> </li> <li>      showlabels  Parent: <code>data[type=contourcarpet].contours</code> Type: boolean<p>Determines whether to label the contour lines with their values.</p> </li> <li>      showlines  Parent: <code>data[type=contourcarpet].contours</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to \"fill\".</p> </li> <li>      size  Parent: <code>data[type=contourcarpet].contours</code> Type: number<p>Sets the step between each contour level. Must be positive.</p> </li> <li>      start  Parent: <code>data[type=contourcarpet].contours</code> Type: number<p>Sets the starting contour level value. Must be less than `contours.end`</p> </li> <li>      type  Parent: <code>data[type=contourcarpet].contours</code> Type:                     enumerated                    , one of ( <code>\"levels\"</code>| <code>\"constraint\"</code>                    )                 Default: <code>\"levels\"</code> <p>If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.</p> </li> <li>      value  Parent: <code>data[type=contourcarpet].contours</code> Type: number or categorical coordinate string <p>Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (`=,&lt;,&gt;=,&gt;,&lt;=`) \"value\" is expected to be a number. When `operation` is set to one of the interval values (`[],(),[),(],][,)(,](,)[`) \"value\" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=contourcarpet]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      da  Parent: <code>data[type=contourcarpet]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      db  Parent: <code>data[type=contourcarpet]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      fillcolor  Parent: <code>data[type=contourcarpet]</code> Type: color<p>Sets the fill color if `contours.type` is \"constraint\". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hovertext  Parent: <code>data[type=contourcarpet]</code> Type: data_array <p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=contourcarpet]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=contourcarpet]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=contourcarpet]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=contourcarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=contourcarpet].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=contourcarpet].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=contourcarpet].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=contourcarpet]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=contourcarpet]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=contourcarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=contourcarpet].line</code> Type: color<p>Sets the color of the contour level. Has no effect if `contours.coloring` is set to \"lines\".</p> </li> <li>      dash  Parent: <code>data[type=contourcarpet].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      smoothing  Parent: <code>data[type=contourcarpet].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Sets the amount of smoothing for the contour lines, where \"0\" corresponds to no smoothing.</p> </li> <li>      width  Parent: <code>data[type=contourcarpet].line</code> Type: number<p>Sets the contour line width in (in px) Defaults to \"0.5\" when `contours.type` is \"levels\". Defaults to \"2\" when `contour.type` is \"constraint\".</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=contourcarpet]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=contourcarpet]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      ncontours  Parent: <code>data[type=contourcarpet]</code> Type: integer greater than or equal to 1                 Default: <code>15</code> <p>Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is \"true\" or if `contours.size` is missing.</p> </li> <li>      opacity  Parent: <code>data[type=contourcarpet]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      reversescale  Parent: <code>data[type=contourcarpet]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      showlegend  Parent: <code>data[type=contourcarpet]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=contourcarpet]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      text  Parent: <code>data[type=contourcarpet]</code> Type: data_array <p>Sets the text elements associated with each z value.</p> </li> <li>      transpose  Parent: <code>data[type=contourcarpet]</code> Type: boolean<p>Transposes the z data.</p> </li> <li>      type  Parent: <code>data[type=contourcarpet]</code> Type: \"contourcarpet\" </li> <li>      uid  Parent: <code>data[type=contourcarpet]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=contourcarpet]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=contourcarpet]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      xaxis  Parent: <code>data[type=contourcarpet]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      yaxis  Parent: <code>data[type=contourcarpet]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      z  Parent: <code>data[type=contourcarpet]</code> Type: data_array <p>Sets the z data.</p> </li> <li>      zauto  Parent: <code>data[type=contourcarpet]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zmax  Parent: <code>data[type=contourcarpet]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=contourcarpet]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=contourcarpet]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> <li>      zorder  Parent: <code>data[type=contourcarpet]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/densitymap/","title":"densitymap","text":"A <code>densitymap</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"densitymap\"</code>   (i.e. <code>{\"type\": \"densitymap\"}</code>) and any of the keys listed below.   Draws a bivariate kernel density estimation with a Gaussian kernel from `lon` and `lat` coordinates and optional `z` values using a colorscale. <ul> <li>      autocolorscale  Parent: <code>data[type=densitymap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      below  Parent: <code>data[type=densitymap]</code> Type: string<p>Determines if the densitymap trace will be inserted before the layer with the specified ID. By default, densitymap traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.</p> </li> <li>      coloraxis  Parent: <code>data[type=densitymap]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=densitymap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=densitymap].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=densitymap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=densitymap].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=densitymap].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=densitymap].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=densitymap].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=densitymap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=densitymap].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=densitymap].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=densitymap].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=densitymap].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=densitymap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=densitymap].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymap].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=densitymap].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=densitymap].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=densitymap].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=densitymap].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=densitymap].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=densitymap].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=densitymap].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=densitymap].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=densitymap].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=densitymap].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=densitymap].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=densitymap].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=densitymap].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=densitymap].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymap].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=densitymap].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=densitymap].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=densitymap].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=densitymap].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=densitymap].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=densitymap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=densitymap]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=densitymap]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      hoverinfo  Parent: <code>data[type=densitymap]</code> Type: flaglist string.                      Any combination of \"lon\", \"lat\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"lon\"</code>, <code>\"lat\"</code>, <code>\"lon+lat\"</code>, <code>\"lon+lat+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=densitymap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=densitymap].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=densitymap].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=densitymap].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=densitymap].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymap].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=densitymap].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=densitymap]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=densitymap]</code> Type: string or array of strings<p>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=densitymap]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      lat  Parent: <code>data[type=densitymap]</code> Type: data_array <p>Sets the latitude coordinates (in degrees North).</p> </li> <li>      legend  Parent: <code>data[type=densitymap]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=densitymap]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=densitymap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=densitymap].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymap].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=densitymap].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=densitymap]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=densitymap]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lon  Parent: <code>data[type=densitymap]</code> Type: data_array <p>Sets the longitude coordinates (in degrees East).</p> </li> <li>      meta  Parent: <code>data[type=densitymap]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=densitymap]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=densitymap]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      radius  Parent: <code>data[type=densitymap]</code> Type: number or array of numbers greater than or equal to 1                 Default: <code>30</code> <p>Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymap trace smoother, but less detailed.</p> </li> <li>      reversescale  Parent: <code>data[type=densitymap]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      showlegend  Parent: <code>data[type=densitymap]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=densitymap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      subplot  Parent: <code>data[type=densitymap]</code> Type: subplotid                 Default: <code>map</code> <p>Sets a reference between this trace's data coordinates and a map subplot. If \"map\" (the default value), the data refer to `layout.map`. If \"map2\", the data refer to `layout.map2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=densitymap]</code> Type: string or array of strings<p>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      type  Parent: <code>data[type=densitymap]</code> Type: \"densitymap\" </li> <li>      uid  Parent: <code>data[type=densitymap]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=densitymap]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=densitymap]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      z  Parent: <code>data[type=densitymap]</code> Type: data_array <p>Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot</p> </li> <li>      zauto  Parent: <code>data[type=densitymap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zmax  Parent: <code>data[type=densitymap]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=densitymap]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=densitymap]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> </ul>"},{"location":"reference/densitymapbox/","title":"densitymapbox","text":"A <code>densitymapbox</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"densitymapbox\"</code>   (i.e. <code>{\"type\": \"densitymapbox\"}</code>) and any of the keys listed below.   \"densitymapbox\" trace is deprecated! Please consider switching to the \"densitymap\" trace type and `map` subplots. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Draws a bivariate kernel density estimation with a Gaussian kernel from `lon` and `lat` coordinates and optional `z` values using a colorscale. <ul> <li>      autocolorscale  Parent: <code>data[type=densitymapbox]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      below  Parent: <code>data[type=densitymapbox]</code> Type: string<p>Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.</p> </li> <li>      coloraxis  Parent: <code>data[type=densitymapbox]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=densitymapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=densitymapbox].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=densitymapbox].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=densitymapbox].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=densitymapbox].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=densitymapbox].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=densitymapbox].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=densitymapbox].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=densitymapbox].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=densitymapbox].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymapbox].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=densitymapbox].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=densitymapbox].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=densitymapbox].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=densitymapbox].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=densitymapbox].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=densitymapbox].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=densitymapbox].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=densitymapbox].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=densitymapbox].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=densitymapbox].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=densitymapbox].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=densitymapbox].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=densitymapbox].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=densitymapbox].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymapbox].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=densitymapbox].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=densitymapbox].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=densitymapbox].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=densitymapbox].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=densitymapbox]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=densitymapbox]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      hoverinfo  Parent: <code>data[type=densitymapbox]</code> Type: flaglist string.                      Any combination of \"lon\", \"lat\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"lon\"</code>, <code>\"lat\"</code>, <code>\"lon+lat\"</code>, <code>\"lon+lat+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=densitymapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=densitymapbox].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=densitymapbox].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=densitymapbox].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=densitymapbox].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymapbox].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=densitymapbox].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=densitymapbox]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=densitymapbox]</code> Type: string or array of strings<p>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=densitymapbox]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      lat  Parent: <code>data[type=densitymapbox]</code> Type: data_array <p>Sets the latitude coordinates (in degrees North).</p> </li> <li>      legend  Parent: <code>data[type=densitymapbox]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=densitymapbox]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=densitymapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=densitymapbox].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=densitymapbox].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=densitymapbox].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=densitymapbox]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=densitymapbox]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lon  Parent: <code>data[type=densitymapbox]</code> Type: data_array <p>Sets the longitude coordinates (in degrees East).</p> </li> <li>      meta  Parent: <code>data[type=densitymapbox]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=densitymapbox]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=densitymapbox]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      radius  Parent: <code>data[type=densitymapbox]</code> Type: number or array of numbers greater than or equal to 1                 Default: <code>30</code> <p>Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.</p> </li> <li>      reversescale  Parent: <code>data[type=densitymapbox]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      showlegend  Parent: <code>data[type=densitymapbox]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=densitymapbox]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      subplot  Parent: <code>data[type=densitymapbox]</code> Type: subplotid                 Default: <code>mapbox</code> <p>mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If \"mapbox\" (the default value), the data refer to `layout.mapbox`. If \"mapbox2\", the data refer to `layout.mapbox2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=densitymapbox]</code> Type: string or array of strings<p>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      type  Parent: <code>data[type=densitymapbox]</code> Type: \"densitymapbox\" </li> <li>      uid  Parent: <code>data[type=densitymapbox]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=densitymapbox]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=densitymapbox]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      z  Parent: <code>data[type=densitymapbox]</code> Type: data_array <p>Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot</p> </li> <li>      zauto  Parent: <code>data[type=densitymapbox]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zmax  Parent: <code>data[type=densitymapbox]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=densitymapbox]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=densitymapbox]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> </ul>"},{"location":"reference/funnel/","title":"funnel","text":"A <code>funnel</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"funnel\"</code>   (i.e. <code>{\"type\": \"funnel\"}</code>) and any of the keys listed below.   Visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a \"drop-off\" representation wherein each item appears in each stage it traversed. See also the \"funnelarea\" trace type for a different approach to visualizing funnel data. <ul> <li>      alignmentgroup  Parent: <code>data[type=funnel]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</p> </li> <li>      cliponaxis  Parent: <code>data[type=funnel]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      connector  Parent: <code>data[type=funnel]</code> Type: object containing one or more of the keys listed below. <ul> <li>      fillcolor  Parent: <code>data[type=funnel].connector</code> Type: color<p>Sets the fill color.</p> </li> <li>      line  Parent: <code>data[type=funnel].connector</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=funnel].connector.line</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=funnel].connector.line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>data[type=funnel].connector.line</code> Type: number<p>Sets the line width (in px).</p> </li> </ul> </li> <li>      visible  Parent: <code>data[type=funnel].connector</code> Type: boolean                Default: <code>true</code> <p>Determines if connector regions and lines are drawn.</p> </li> </ul> </li> <li>      constraintext  Parent: <code>data[type=funnel]</code> Type:                     enumerated                    , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"both\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"both\"</code> <p>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</p> </li> <li>      customdata  Parent: <code>data[type=funnel]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=funnel]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      dy  Parent: <code>data[type=funnel]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      hoverinfo  Parent: <code>data[type=funnel]</code> Type: flaglist string.                      Any combination of \"name\", \"x\", \"y\", \"text\", \"percent initial\", \"percent previous\", \"percent total\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"name\"</code>, <code>\"x\"</code>, <code>\"name+x\"</code>, <code>\"name+x+y\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=funnel]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=funnel].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=funnel].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=funnel].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=funnel].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=funnel].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnel].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnel].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnel].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnel].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnel].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnel].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnel].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnel].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=funnel].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=funnel]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious` and `percentTotal`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=funnel]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=funnel]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextanchor  Parent: <code>data[type=funnel]</code> Type:                     enumerated                    , one of ( <code>\"end\"</code>| <code>\"middle\"</code>| <code>\"start\"</code>                    )                 Default: <code>\"middle\"</code> <p>Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.</p> </li> <li>      insidetextfont  Parent: <code>data[type=funnel]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying inside the bar.</p> <ul> <li>      color  Parent: <code>data[type=funnel].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnel].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnel].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnel].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnel].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnel].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnel].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnel].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnel].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      legend  Parent: <code>data[type=funnel]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=funnel]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=funnel]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=funnel].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnel].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=funnel].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=funnel]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=funnel]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=funnel]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=funnel].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=funnel].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=funnel].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=funnel].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=funnel].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=funnel].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=funnel].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=funnel].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=funnel].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=funnel].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=funnel].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=funnel].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=funnel].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=funnel].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=funnel].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=funnel].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=funnel].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnel].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=funnel].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=funnel].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=funnel].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=funnel].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=funnel].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=funnel].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=funnel].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=funnel].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=funnel].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=funnel].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=funnel].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=funnel].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=funnel].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=funnel].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnel].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=funnel].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=funnel].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=funnel].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=funnel].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=funnel].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=funnel].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=funnel].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=funnel].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=funnel].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=funnel].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=funnel].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=funnel].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=funnel].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=funnel].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=funnel].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=funnel].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=funnel].marker</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the bars.</p> </li> <li>      reversescale  Parent: <code>data[type=funnel].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=funnel].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=funnel]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      offset  Parent: <code>data[type=funnel]</code> Type: number<p>Shifts the position where the bar is drawn (in position axis units). In \"group\" barmode, traces that set \"offset\" will be excluded and drawn in \"overlay\" mode instead.</p> </li> <li>      offsetgroup  Parent: <code>data[type=funnel]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</p> </li> <li>      opacity  Parent: <code>data[type=funnel]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      orientation  Parent: <code>data[type=funnel]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    ) <p>Sets the orientation of the funnels. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only \"y\" array is presented or orientation is set to \"v\". Also regarding graphs including only 'horizontal' funnels, \"autorange\" on the \"y-axis\" are set to \"reversed\".</p> </li> <li>      outsidetextfont  Parent: <code>data[type=funnel]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying outside the bar.</p> <ul> <li>      color  Parent: <code>data[type=funnel].outsidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnel].outsidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnel].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnel].outsidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnel].outsidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnel].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnel].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnel].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnel].outsidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=funnel]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=funnel]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textangle  Parent: <code>data[type=funnel]</code> Type: angle <p>Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.</p> </li> <li>      textfont  Parent: <code>data[type=funnel]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text`.</p> <ul> <li>      color  Parent: <code>data[type=funnel].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnel].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnel].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnel].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnel].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnel].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnel].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnel].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnel].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textinfo  Parent: <code>data[type=funnel]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"percent initial\", \"percent previous\", \"percent total\", \"value\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+percent initial\"</code>, <code>\"none\"</code> <p>Determines which trace information appear on the graph. In the case of having multiple funnels, percentages &amp; totals are computed separately (per trace).</p> </li> <li>      textposition  Parent: <code>data[type=funnel]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"auto\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"auto\"</code> <p>Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.</p> </li> <li>      texttemplate  Parent: <code>data[type=funnel]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious`, `percentTotal`, `label` and `value`.</p> </li> <li>      type  Parent: <code>data[type=funnel]</code> Type: \"funnel\" </li> <li>      uid  Parent: <code>data[type=funnel]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=funnel]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      width  Parent: <code>data[type=funnel]</code> Type: number<p>Sets the bar width (in position axis units).</p> </li> <li>      x  Parent: <code>data[type=funnel]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      x0  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      xaxis  Parent: <code>data[type=funnel]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xhoverformat  Parent: <code>data[type=funnel]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=funnel]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      y  Parent: <code>data[type=funnel]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      y0  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      yaxis  Parent: <code>data[type=funnel]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      yhoverformat  Parent: <code>data[type=funnel]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=funnel]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=funnel]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> <li>      zorder  Parent: <code>data[type=funnel]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/funnelarea/","title":"funnelarea","text":"A <code>funnelarea</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"funnelarea\"</code>   (i.e. <code>{\"type\": \"funnelarea\"}</code>) and any of the keys listed below.   Visualize stages in a process using area-encoded trapezoids. This trace can be used to show data in a part-to-whole representation similar to a \"pie\" trace, wherein each item appears in a single stage. See also the \"funnel\" trace type for a different approach to visualizing funnel data. <ul> <li>      aspectratio  Parent: <code>data[type=funnelarea]</code> Type: number                Default: <code>1</code> <p>Sets the ratio between height and width</p> </li> <li>      baseratio  Parent: <code>data[type=funnelarea]</code> Type: number less than or equal to 1                 Default: <code>0.333</code> <p>Sets the ratio between bottom length and maximum top length.</p> </li> <li>      customdata  Parent: <code>data[type=funnelarea]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dlabel  Parent: <code>data[type=funnelarea]</code> Type: number                Default: <code>1</code> <p>Sets the label step. See `label0` for more info.</p> </li> <li>      domain  Parent: <code>data[type=funnelarea]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=funnelarea].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .</p> </li> <li>      row  Parent: <code>data[type=funnelarea].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .</p> </li> <li>      x  Parent: <code>data[type=funnelarea].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this funnelarea trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=funnelarea].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this funnelarea trace (in plot fraction).</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=funnelarea]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"percent\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=funnelarea]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=funnelarea].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=funnelarea].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=funnelarea].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=funnelarea].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnelarea].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=funnelarea].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=funnelarea]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=funnelarea]</code> Type: string or array of strings<p>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=funnelarea]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextfont  Parent: <code>data[type=funnelarea]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying inside the sector.</p> <ul> <li>      color  Parent: <code>data[type=funnelarea].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnelarea].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnelarea].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnelarea].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnelarea].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnelarea].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnelarea].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnelarea].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnelarea].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      label0  Parent: <code>data[type=funnelarea]</code> Type: number<p>Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.</p> </li> <li>      labels  Parent: <code>data[type=funnelarea]</code> Type: data_array <p>Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.</p> </li> <li>      legend  Parent: <code>data[type=funnelarea]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=funnelarea]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=funnelarea]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=funnelarea].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnelarea].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=funnelarea].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=funnelarea]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=funnelarea]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=funnelarea]</code> Type: object containing one or more of the keys listed below. <ul> <li>      colors  Parent: <code>data[type=funnelarea].marker</code> Type: data_array <p>Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</p> </li> <li>      line  Parent: <code>data[type=funnelarea].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=funnelarea].marker.line</code> Type: color or array of colors<p>Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.</p> </li> <li>      width  Parent: <code>data[type=funnelarea].marker.line</code> Type: number or array of numbers                Default: <code>1</code> <p>Sets the width (in px) of the line enclosing each sector.</p> </li> </ul> </li> <li>      pattern  Parent: <code>data[type=funnelarea].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=funnelarea].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=funnelarea].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=funnelarea].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=funnelarea].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=funnelarea].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=funnelarea].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=funnelarea].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=funnelarea].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> </ul> </li> <li>      meta  Parent: <code>data[type=funnelarea]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=funnelarea]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=funnelarea]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      scalegroup  Parent: <code>data[type=funnelarea]</code> Type: string<p>If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.</p> </li> <li>      showlegend  Parent: <code>data[type=funnelarea]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=funnelarea]</code> Type: data_array <p>Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=funnelarea]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo`.</p> <ul> <li>      color  Parent: <code>data[type=funnelarea].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnelarea].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnelarea].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnelarea].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnelarea].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnelarea].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnelarea].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnelarea].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnelarea].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textinfo  Parent: <code>data[type=funnelarea]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"percent\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"none\"</code> <p>Determines which trace information appear on the graph.</p> </li> <li>      textposition  Parent: <code>data[type=funnelarea]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"inside\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"inside\"</code> <p>Specifies the location of the `textinfo`.</p> </li> <li>      texttemplate  Parent: <code>data[type=funnelarea]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`.</p> </li> <li>      title  Parent: <code>data[type=funnelarea]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=funnelarea].title</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `title`.</p> <ul> <li>      color  Parent: <code>data[type=funnelarea].title.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=funnelarea].title.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=funnelarea].title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=funnelarea].title.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=funnelarea].title.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=funnelarea].title.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=funnelarea].title.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=funnelarea].title.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=funnelarea].title.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      position  Parent: <code>data[type=funnelarea].title</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>                    )                 Default: <code>\"top center\"</code> <p>Specifies the location of the `title`.</p> </li> <li>      text  Parent: <code>data[type=funnelarea].title</code> Type: string<p>Sets the title of the chart. If it is empty, no title is displayed.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=funnelarea]</code> Type: \"funnelarea\" </li> <li>      uid  Parent: <code>data[type=funnelarea]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=funnelarea]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      values  Parent: <code>data[type=funnelarea]</code> Type: data_array <p>Sets the values of the sectors. If omitted, we count occurrences of each label.</p> </li> <li>      visible  Parent: <code>data[type=funnelarea]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/heatmap/","title":"heatmap","text":"A <code>heatmap</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"heatmap\"</code>   (i.e. <code>{\"type\": \"heatmap\"}</code>) and any of the keys listed below.   The data that describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a 2D array of values (ragged or not) or a 1D array of values. In the case where `z` is a 2D array, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements. If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D array, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets. <ul> <li>      autocolorscale  Parent: <code>data[type=heatmap]</code> Type: boolean<p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      coloraxis  Parent: <code>data[type=heatmap]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=heatmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=heatmap].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=heatmap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=heatmap].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=heatmap].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=heatmap].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=heatmap].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=heatmap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=heatmap].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=heatmap].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=heatmap].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=heatmap].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=heatmap].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=heatmap].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=heatmap].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=heatmap].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=heatmap].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=heatmap].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=heatmap].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=heatmap].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=heatmap].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=heatmap].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=heatmap].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=heatmap].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=heatmap].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=heatmap].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=heatmap].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=heatmap].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=heatmap].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=heatmap].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=heatmap].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=heatmap].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=heatmap].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=heatmap].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=heatmap].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=heatmap].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=heatmap]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      connectgaps  Parent: <code>data[type=heatmap]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array and `zsmooth` is not false; otherwise it is defaulted to false.</p> </li> <li>      customdata  Parent: <code>data[type=heatmap]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=heatmap]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      dy  Parent: <code>data[type=heatmap]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      hoverinfo  Parent: <code>data[type=heatmap]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=heatmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=heatmap].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=heatmap].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=heatmap].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=heatmap].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=heatmap].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=heatmap].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoverongaps  Parent: <code>data[type=heatmap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.</p> </li> <li>      hovertemplate  Parent: <code>data[type=heatmap]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=heatmap]</code> Type: data_array <p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=heatmap]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=heatmap]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=heatmap]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=heatmap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=heatmap].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=heatmap].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=heatmap].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=heatmap]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=heatmap]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      meta  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=heatmap]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=heatmap]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      reversescale  Parent: <code>data[type=heatmap]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      showlegend  Parent: <code>data[type=heatmap]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=heatmap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      text  Parent: <code>data[type=heatmap]</code> Type: data_array <p>Sets the text elements associated with each z value.</p> </li> <li>      textfont  Parent: <code>data[type=heatmap]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=heatmap].textfont</code> Type: color                Default: <code>\"auto\"</code> </li> <li>      family  Parent: <code>data[type=heatmap].textfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=heatmap].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=heatmap].textfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=heatmap].textfont</code> Type: number greater than or equal to 1                 Default: <code>\"auto\"</code> </li> <li>      style  Parent: <code>data[type=heatmap].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=heatmap].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=heatmap].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=heatmap].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      texttemplate  Parent: <code>data[type=heatmap]</code> Type: string<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.</p> </li> <li>      transpose  Parent: <code>data[type=heatmap]</code> Type: boolean<p>Transposes the z data.</p> </li> <li>      type  Parent: <code>data[type=heatmap]</code> Type: \"heatmap\" </li> <li>      uid  Parent: <code>data[type=heatmap]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=heatmap]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      x0  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      xaxis  Parent: <code>data[type=heatmap]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xgap  Parent: <code>data[type=heatmap]</code> Type: number<p>Sets the horizontal gap (in pixels) between bricks.</p> </li> <li>      xhoverformat  Parent: <code>data[type=heatmap]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      xtype  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>\"array\"</code>| <code>\"scaled\"</code>                    ) <p>If \"array\", the heatmap's x coordinates are given by \"x\" (the default behavior when `x` is provided). If \"scaled\", the heatmap's x coordinates are given by \"x0\" and \"dx\" (the default behavior when `x` is not provided).</p> </li> <li>      y  Parent: <code>data[type=heatmap]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      y0  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      yaxis  Parent: <code>data[type=heatmap]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ycalendar  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      ygap  Parent: <code>data[type=heatmap]</code> Type: number<p>Sets the vertical gap (in pixels) between bricks.</p> </li> <li>      yhoverformat  Parent: <code>data[type=heatmap]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=heatmap]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> <li>      ytype  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>\"array\"</code>| <code>\"scaled\"</code>                    ) <p>If \"array\", the heatmap's y coordinates are given by \"y\" (the default behavior when `y` is provided) If \"scaled\", the heatmap's y coordinates are given by \"y0\" and \"dy\" (the default behavior when `y` is not provided)</p> </li> <li>      z  Parent: <code>data[type=heatmap]</code> Type: data_array <p>Sets the z data.</p> </li> <li>      zauto  Parent: <code>data[type=heatmap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zhoverformat  Parent: <code>data[type=heatmap]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      zmax  Parent: <code>data[type=heatmap]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=heatmap]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=heatmap]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> <li>      zorder  Parent: <code>data[type=heatmap]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> <li>      zsmooth  Parent: <code>data[type=heatmap]</code> Type:                     enumerated                    , one of ( <code>\"fast\"</code>| <code>\"best\"</code>| <code>false</code>                    ) <p>Picks a smoothing algorithm use to smooth `z` data.</p> </li> </ul>"},{"location":"reference/histogram/","title":"histogram","text":"A <code>histogram</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"histogram\"</code>   (i.e. <code>{\"type\": \"histogram\"}</code>) and any of the keys listed below.   The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided. <ul> <li>      alignmentgroup  Parent: <code>data[type=histogram]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</p> </li> <li>      autobinx  Parent: <code>data[type=histogram]</code> Type: boolean<p>Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.</p> </li> <li>      autobiny  Parent: <code>data[type=histogram]</code> Type: boolean<p>Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.</p> </li> <li>      bingroup  Parent: <code>data[type=histogram]</code> Type: string<p>Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same \"orientation\" under `barmode` \"stack\", \"relative\" and \"group\" are forced into the same bingroup, Using `bingroup`, traces under `barmode` \"overlay\" and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d\" trace can share the same `bingroup`</p> </li> <li>      cliponaxis  Parent: <code>data[type=histogram]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      constraintext  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"both\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"both\"</code> <p>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</p> </li> <li>      cumulative  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      currentbin  Parent: <code>data[type=histogram].cumulative</code> Type:                     enumerated                    , one of ( <code>\"include\"</code>| <code>\"exclude\"</code>| <code>\"half\"</code>                    )                 Default: <code>\"include\"</code> <p>Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. \"include\" is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. \"exclude\" makes the opposite half-bin bias, and \"half\" removes it.</p> </li> <li>      direction  Parent: <code>data[type=histogram].cumulative</code> Type:                     enumerated                    , one of ( <code>\"increasing\"</code>| <code>\"decreasing\"</code>                    )                 Default: <code>\"increasing\"</code> <p>Only applies if cumulative is enabled. If \"increasing\" (default) we sum all prior bins, so the result increases from left to right. If \"decreasing\" we sum later bins so the result decreases from left to right.</p> </li> <li>      enabled  Parent: <code>data[type=histogram].cumulative</code> Type: boolean<p>If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the \"density\" `histnorm` settings behave the same as their equivalents without \"density\": \"\" and \"density\" both rise to the number of data points, and \"probability\" and \"probability density\" both rise to the number of sample points.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=histogram]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      error_x  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=histogram].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=histogram].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=histogram].error_x</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      copy_ystyle  Parent: <code>data[type=histogram].error_x</code> Type: boolean</li> <li>      symmetric  Parent: <code>data[type=histogram].error_x</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=histogram].error_x</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=histogram].error_x</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=histogram].error_x</code> Type: integer</li> <li>      type  Parent: <code>data[type=histogram].error_x</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=histogram].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=histogram].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=histogram].error_x</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=histogram].error_x</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      error_y  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=histogram].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=histogram].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=histogram].error_y</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      symmetric  Parent: <code>data[type=histogram].error_y</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=histogram].error_y</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=histogram].error_y</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=histogram].error_y</code> Type: integer</li> <li>      type  Parent: <code>data[type=histogram].error_y</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=histogram].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=histogram].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=histogram].error_y</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=histogram].error_y</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      histfunc  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"count\"</code>| <code>\"sum\"</code>| <code>\"avg\"</code>| <code>\"min\"</code>| <code>\"max\"</code>                    )                 Default: <code>\"count\"</code> <p>Specifies the binning function used for this histogram trace. If \"count\", the histogram values are computed by counting the number of values lying inside each bin. If \"sum\", \"avg\", \"min\", \"max\", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</p> </li> <li>      histnorm  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"\"</code>| <code>\"percent\"</code>| <code>\"probability\"</code>| <code>\"density\"</code>| <code>\"probability density\"</code>                    ) <p>Specifies the type of normalization used for this histogram trace. If \"\", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If \"percent\" / \"probability\", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If \"density\", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If \"probability density\", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</p> </li> <li>      hoverinfo  Parent: <code>data[type=histogram]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=histogram].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=histogram].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=histogram].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=histogram].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=histogram].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=histogram].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=histogram].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=histogram]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `binNumber` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=histogram]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=histogram]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextanchor  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"end\"</code>| <code>\"middle\"</code>| <code>\"start\"</code>                    )                 Default: <code>\"end\"</code> <p>Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.</p> </li> <li>      insidetextfont  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying inside the bar.</p> <ul> <li>      color  Parent: <code>data[type=histogram].insidetextfont</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram].insidetextfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram].insidetextfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram].insidetextfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram].insidetextfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram].insidetextfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram].insidetextfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram].insidetextfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      legend  Parent: <code>data[type=histogram]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=histogram]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=histogram].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=histogram].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=histogram]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=histogram]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=histogram].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=histogram].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=histogram].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=histogram].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=histogram].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=histogram].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=histogram].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=histogram].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=histogram].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=histogram].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=histogram].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=histogram].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=histogram].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=histogram].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=histogram].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=histogram].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=histogram].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=histogram].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=histogram].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=histogram].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=histogram].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=histogram].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=histogram].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=histogram].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=histogram].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=histogram].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=histogram].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=histogram].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=histogram].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=histogram].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=histogram].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=histogram].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=histogram].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=histogram].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=histogram].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=histogram].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      cornerradius  Parent: <code>data[type=histogram].marker</code> Type: number or categorical coordinate string <p>Sets the rounding of corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %). Defaults to `layout.barcornerradius`. In stack or relative barmode, the first trace to set cornerradius is used for the whole stack.</p> </li> <li>      line  Parent: <code>data[type=histogram].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=histogram].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=histogram].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=histogram].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=histogram].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=histogram].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=histogram].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=histogram].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=histogram].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=histogram].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=histogram].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=histogram].marker</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the bars.</p> </li> <li>      pattern  Parent: <code>data[type=histogram].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=histogram].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=histogram].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=histogram].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=histogram].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=histogram].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=histogram].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=histogram].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=histogram].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> <li>      reversescale  Parent: <code>data[type=histogram].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=histogram].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=histogram]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=histogram]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      nbinsx  Parent: <code>data[type=histogram]</code> Type: integer<p>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</p> </li> <li>      nbinsy  Parent: <code>data[type=histogram]</code> Type: integer<p>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</p> </li> <li>      offsetgroup  Parent: <code>data[type=histogram]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</p> </li> <li>      opacity  Parent: <code>data[type=histogram]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      orientation  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    ) <p>Sets the orientation of the bars. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal).</p> </li> <li>      outsidetextfont  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying outside the bar.</p> <ul> <li>      color  Parent: <code>data[type=histogram].outsidetextfont</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram].outsidetextfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram].outsidetextfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram].outsidetextfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram].outsidetextfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram].outsidetextfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram].outsidetextfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram].outsidetextfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      selected  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=histogram].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=histogram].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=histogram].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=histogram].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=histogram].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=histogram]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=histogram]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=histogram]</code> Type: string or array of strings<p>Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.</p> </li> <li>      textangle  Parent: <code>data[type=histogram]</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.</p> </li> <li>      textfont  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=histogram].textfont</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram].textfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram].textfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram].textfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"auto\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"auto\"</code> <p>Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.</p> </li> <li>      texttemplate  Parent: <code>data[type=histogram]</code> Type: string<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label` and `value`.</p> </li> <li>      type  Parent: <code>data[type=histogram]</code> Type: \"histogram\" </li> <li>      uid  Parent: <code>data[type=histogram]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=histogram]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=histogram].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=histogram].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=histogram].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=histogram].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=histogram].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=histogram]</code> Type: data_array <p>Sets the sample data to be binned on the x axis.</p> </li> <li>      xaxis  Parent: <code>data[type=histogram]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xbins  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      end  Parent: <code>data[type=histogram].xbins</code> Type: number or categorical coordinate string <p>Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.</p> </li> <li>      size  Parent: <code>data[type=histogram].xbins</code> Type: number or categorical coordinate string <p>Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M&lt;n&gt;\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.</p> </li> <li>      start  Parent: <code>data[type=histogram].xbins</code> Type: number or categorical coordinate string <p>Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.</p> </li> </ul> </li> <li>      xcalendar  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=histogram]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=histogram]</code> Type: data_array <p>Sets the sample data to be binned on the y axis.</p> </li> <li>      yaxis  Parent: <code>data[type=histogram]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ybins  Parent: <code>data[type=histogram]</code> Type: object containing one or more of the keys listed below. <ul> <li>      end  Parent: <code>data[type=histogram].ybins</code> Type: number or categorical coordinate string <p>Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.</p> </li> <li>      size  Parent: <code>data[type=histogram].ybins</code> Type: number or categorical coordinate string <p>Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M&lt;n&gt;\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.</p> </li> <li>      start  Parent: <code>data[type=histogram].ybins</code> Type: number or categorical coordinate string <p>Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.</p> </li> </ul> </li> <li>      ycalendar  Parent: <code>data[type=histogram]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=histogram]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      zorder  Parent: <code>data[type=histogram]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/histogram2d/","title":"histogram2d","text":"A <code>histogram2d</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"histogram2d\"</code>   (i.e. <code>{\"type\": \"histogram2d\"}</code>) and any of the keys listed below.   The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap. <ul> <li>      autobinx  Parent: <code>data[type=histogram2d]</code> Type: boolean<p>Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.</p> </li> <li>      autobiny  Parent: <code>data[type=histogram2d]</code> Type: boolean<p>Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.</p> </li> <li>      autocolorscale  Parent: <code>data[type=histogram2d]</code> Type: boolean<p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      bingroup  Parent: <code>data[type=histogram2d]</code> Type: string<p>Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of \"1\" on two histogram2d traces will make them their x-bins and y-bins match separately.</p> </li> <li>      coloraxis  Parent: <code>data[type=histogram2d]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=histogram2d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=histogram2d].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=histogram2d].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=histogram2d].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=histogram2d].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=histogram2d].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=histogram2d].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=histogram2d].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=histogram2d].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=histogram2d].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=histogram2d].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=histogram2d].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=histogram2d].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=histogram2d].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2d].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=histogram2d].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=histogram2d].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=histogram2d].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=histogram2d].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=histogram2d].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=histogram2d].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=histogram2d].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=histogram2d].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=histogram2d].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=histogram2d].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=histogram2d].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=histogram2d].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=histogram2d].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=histogram2d].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2d].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=histogram2d].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=histogram2d].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=histogram2d].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=histogram2d].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=histogram2d].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=histogram2d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=histogram2d]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=histogram2d]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      histfunc  Parent: <code>data[type=histogram2d]</code> Type:                     enumerated                    , one of ( <code>\"count\"</code>| <code>\"sum\"</code>| <code>\"avg\"</code>| <code>\"min\"</code>| <code>\"max\"</code>                    )                 Default: <code>\"count\"</code> <p>Specifies the binning function used for this histogram trace. If \"count\", the histogram values are computed by counting the number of values lying inside each bin. If \"sum\", \"avg\", \"min\", \"max\", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</p> </li> <li>      histnorm  Parent: <code>data[type=histogram2d]</code> Type:                     enumerated                    , one of ( <code>\"\"</code>| <code>\"percent\"</code>| <code>\"probability\"</code>| <code>\"density\"</code>| <code>\"probability density\"</code>                    ) <p>Specifies the type of normalization used for this histogram trace. If \"\", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If \"percent\" / \"probability\", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If \"density\", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If \"probability density\", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</p> </li> <li>      hoverinfo  Parent: <code>data[type=histogram2d]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=histogram2d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=histogram2d].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=histogram2d].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=histogram2d].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=histogram2d].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2d].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=histogram2d].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=histogram2d]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      ids  Parent: <code>data[type=histogram2d]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=histogram2d]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=histogram2d]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=histogram2d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=histogram2d].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2d].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=histogram2d].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=histogram2d]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=histogram2d]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=histogram2d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=histogram2d].marker</code> Type: data_array <p>Sets the aggregation data.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=histogram2d]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=histogram2d]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      nbinsx  Parent: <code>data[type=histogram2d]</code> Type: integer<p>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</p> </li> <li>      nbinsy  Parent: <code>data[type=histogram2d]</code> Type: integer<p>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</p> </li> <li>      opacity  Parent: <code>data[type=histogram2d]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      reversescale  Parent: <code>data[type=histogram2d]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      showlegend  Parent: <code>data[type=histogram2d]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=histogram2d]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      textfont  Parent: <code>data[type=histogram2d]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=histogram2d].textfont</code> Type: color                Default: <code>\"auto\"</code> </li> <li>      family  Parent: <code>data[type=histogram2d].textfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2d].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2d].textfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2d].textfont</code> Type: number greater than or equal to 1                 Default: <code>\"auto\"</code> </li> <li>      style  Parent: <code>data[type=histogram2d].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2d].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2d].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2d].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      texttemplate  Parent: <code>data[type=histogram2d]</code> Type: string<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z`</p> </li> <li>      type  Parent: <code>data[type=histogram2d]</code> Type: \"histogram2d\" </li> <li>      uid  Parent: <code>data[type=histogram2d]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=histogram2d]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=histogram2d]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=histogram2d]</code> Type: data_array <p>Sets the sample data to be binned on the x axis.</p> </li> <li>      xaxis  Parent: <code>data[type=histogram2d]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xbingroup  Parent: <code>data[type=histogram2d]</code> Type: string<p>Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`</p> </li> <li>      xbins  Parent: <code>data[type=histogram2d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      end  Parent: <code>data[type=histogram2d].xbins</code> Type: number or categorical coordinate string <p>Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.</p> </li> <li>      size  Parent: <code>data[type=histogram2d].xbins</code> Type: number or categorical coordinate string <p>Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M&lt;n&gt;\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). </p> </li> <li>      start  Parent: <code>data[type=histogram2d].xbins</code> Type: number or categorical coordinate string <p>Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. </p> </li> </ul> </li> <li>      xcalendar  Parent: <code>data[type=histogram2d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xgap  Parent: <code>data[type=histogram2d]</code> Type: number<p>Sets the horizontal gap (in pixels) between bricks.</p> </li> <li>      xhoverformat  Parent: <code>data[type=histogram2d]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=histogram2d]</code> Type: data_array <p>Sets the sample data to be binned on the y axis.</p> </li> <li>      yaxis  Parent: <code>data[type=histogram2d]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ybingroup  Parent: <code>data[type=histogram2d]</code> Type: string<p>Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`</p> </li> <li>      ybins  Parent: <code>data[type=histogram2d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      end  Parent: <code>data[type=histogram2d].ybins</code> Type: number or categorical coordinate string <p>Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.</p> </li> <li>      size  Parent: <code>data[type=histogram2d].ybins</code> Type: number or categorical coordinate string <p>Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M&lt;n&gt;\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). </p> </li> <li>      start  Parent: <code>data[type=histogram2d].ybins</code> Type: number or categorical coordinate string <p>Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. </p> </li> </ul> </li> <li>      ycalendar  Parent: <code>data[type=histogram2d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      ygap  Parent: <code>data[type=histogram2d]</code> Type: number<p>Sets the vertical gap (in pixels) between bricks.</p> </li> <li>      yhoverformat  Parent: <code>data[type=histogram2d]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=histogram2d]</code> Type: data_array <p>Sets the aggregation data.</p> </li> <li>      zauto  Parent: <code>data[type=histogram2d]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zhoverformat  Parent: <code>data[type=histogram2d]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      zmax  Parent: <code>data[type=histogram2d]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=histogram2d]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=histogram2d]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> <li>      zsmooth  Parent: <code>data[type=histogram2d]</code> Type:                     enumerated                    , one of ( <code>\"fast\"</code>| <code>\"best\"</code>| <code>false</code>                    ) <p>Picks a smoothing algorithm use to smooth `z` data.</p> </li> </ul>"},{"location":"reference/histogram2dcontour/","title":"histogram2dcontour","text":"A <code>histogram2dcontour</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"histogram2dcontour\"</code>   (i.e. <code>{\"type\": \"histogram2dcontour\"}</code>) and any of the keys listed below.   The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot. <ul> <li>      autobinx  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean<p>Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.</p> </li> <li>      autobiny  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean<p>Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.</p> </li> <li>      autocolorscale  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      autocontour  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the contour level attributes are picked by an algorithm. If \"true\", the number of contour levels can be set in `ncontours`. If \"false\", set the contour level attributes in `contours`.</p> </li> <li>      bingroup  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of \"1\" on two histogram2d traces will make them their x-bins and y-bins match separately.</p> </li> <li>      coloraxis  Parent: <code>data[type=histogram2dcontour]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2dcontour].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=histogram2dcontour].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=histogram2dcontour].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=histogram2dcontour].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=histogram2dcontour].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=histogram2dcontour].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=histogram2dcontour].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2dcontour].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=histogram2dcontour].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=histogram2dcontour].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=histogram2dcontour].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=histogram2dcontour]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      contours  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      coloring  Parent: <code>data[type=histogram2dcontour].contours</code> Type:                     enumerated                    , one of ( <code>\"fill\"</code>| <code>\"heatmap\"</code>| <code>\"lines\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"fill\"</code> <p>Determines the coloring method showing the contour values. If \"fill\", coloring is done evenly between each contour level If \"heatmap\", a heatmap gradient coloring is applied between each contour level. If \"lines\", coloring is done on the contour lines. If \"none\", no coloring is applied on this trace.</p> </li> <li>      end  Parent: <code>data[type=histogram2dcontour].contours</code> Type: number<p>Sets the end contour level value. Must be more than `contours.start`</p> </li> <li>      labelfont  Parent: <code>data[type=histogram2dcontour].contours</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.</p> <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2dcontour].contours.labelfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      labelformat  Parent: <code>data[type=histogram2dcontour].contours</code> Type: string<p>Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> <li>      operation  Parent: <code>data[type=histogram2dcontour].contours</code> Type:                     enumerated                    , one of ( <code>\"=\"</code>| <code>\"&lt;\"</code>| <code>\"&gt;=\"</code>| <code>\"&gt;\"</code>| <code>\"&lt;=\"</code>| <code>\"[]\"</code>| <code>\"()\"</code>| <code>\"[)\"</code>| <code>\"(]\"</code>| <code>\"][\"</code>| <code>\")(\"</code>| <code>\"](\"</code>| <code>\")[\"</code>                    )                 Default: <code>\"=\"</code> <p>Sets the constraint operation. \"=\" keeps regions equal to `value` \"&lt;\" and \"&lt;=\" keep regions less than `value` \"&gt;\" and \"&gt;=\" keep regions greater than `value` \"[]\", \"()\", \"[)\", and \"(]\" keep regions inside `value[0]` to `value[1]` \"][\", \")(\", \"](\", \")[\" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.</p> </li> <li>      showlabels  Parent: <code>data[type=histogram2dcontour].contours</code> Type: boolean<p>Determines whether to label the contour lines with their values.</p> </li> <li>      showlines  Parent: <code>data[type=histogram2dcontour].contours</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to \"fill\".</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].contours</code> Type: number<p>Sets the step between each contour level. Must be positive.</p> </li> <li>      start  Parent: <code>data[type=histogram2dcontour].contours</code> Type: number<p>Sets the starting contour level value. Must be less than `contours.end`</p> </li> <li>      type  Parent: <code>data[type=histogram2dcontour].contours</code> Type:                     enumerated                    , one of ( <code>\"levels\"</code>| <code>\"constraint\"</code>                    )                 Default: <code>\"levels\"</code> <p>If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.</p> </li> <li>      value  Parent: <code>data[type=histogram2dcontour].contours</code> Type: number or categorical coordinate string <p>Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (`=,&lt;,&gt;=,&gt;,&lt;=`) \"value\" is expected to be a number. When `operation` is set to one of the interval values (`[],(),[),(],][,)(,](,)[`) \"value\" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=histogram2dcontour]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      histfunc  Parent: <code>data[type=histogram2dcontour]</code> Type:                     enumerated                    , one of ( <code>\"count\"</code>| <code>\"sum\"</code>| <code>\"avg\"</code>| <code>\"min\"</code>| <code>\"max\"</code>                    )                 Default: <code>\"count\"</code> <p>Specifies the binning function used for this histogram trace. If \"count\", the histogram values are computed by counting the number of values lying inside each bin. If \"sum\", \"avg\", \"min\", \"max\", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.</p> </li> <li>      histnorm  Parent: <code>data[type=histogram2dcontour]</code> Type:                     enumerated                    , one of ( <code>\"\"</code>| <code>\"percent\"</code>| <code>\"probability\"</code>| <code>\"density\"</code>| <code>\"probability density\"</code>                    ) <p>Specifies the type of normalization used for this histogram trace. If \"\", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If \"percent\" / \"probability\", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If \"density\", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If \"probability density\", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).</p> </li> <li>      hoverinfo  Parent: <code>data[type=histogram2dcontour]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=histogram2dcontour].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=histogram2dcontour].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=histogram2dcontour].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=histogram2dcontour].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2dcontour].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=histogram2dcontour].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=histogram2dcontour]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      ids  Parent: <code>data[type=histogram2dcontour]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=histogram2dcontour]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=histogram2dcontour].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2dcontour].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=histogram2dcontour].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=histogram2dcontour]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=histogram2dcontour]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].line</code> Type: color<p>Sets the color of the contour level. Has no effect if `contours.coloring` is set to \"lines\".</p> </li> <li>      dash  Parent: <code>data[type=histogram2dcontour].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      smoothing  Parent: <code>data[type=histogram2dcontour].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Sets the amount of smoothing for the contour lines, where \"0\" corresponds to no smoothing.</p> </li> <li>      width  Parent: <code>data[type=histogram2dcontour].line</code> Type: number                Default: <code>0.5</code> <p>Sets the contour line width in (in px)</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].marker</code> Type: data_array <p>Sets the aggregation data.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=histogram2dcontour]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      nbinsx  Parent: <code>data[type=histogram2dcontour]</code> Type: integer<p>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.</p> </li> <li>      nbinsy  Parent: <code>data[type=histogram2dcontour]</code> Type: integer<p>Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.</p> </li> <li>      ncontours  Parent: <code>data[type=histogram2dcontour]</code> Type: integer greater than or equal to 1                 Default: <code>15</code> <p>Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is \"true\" or if `contours.size` is missing.</p> </li> <li>      opacity  Parent: <code>data[type=histogram2dcontour]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      reversescale  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean<p>Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.</p> </li> <li>      showlegend  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      textfont  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <p>For this trace it only has an effect if `coloring` is set to \"heatmap\". Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=histogram2dcontour].textfont</code> Type: color                Default: <code>\"auto\"</code> </li> <li>      family  Parent: <code>data[type=histogram2dcontour].textfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=histogram2dcontour].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=histogram2dcontour].textfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].textfont</code> Type: number greater than or equal to 1                 Default: <code>\"auto\"</code> </li> <li>      style  Parent: <code>data[type=histogram2dcontour].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=histogram2dcontour].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=histogram2dcontour].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=histogram2dcontour].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      texttemplate  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>For this trace it only has an effect if `coloring` is set to \"heatmap\". Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.</p> </li> <li>      type  Parent: <code>data[type=histogram2dcontour]</code> Type: \"histogram2dcontour\" </li> <li>      uid  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=histogram2dcontour]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=histogram2dcontour]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=histogram2dcontour]</code> Type: data_array <p>Sets the sample data to be binned on the x axis.</p> </li> <li>      xaxis  Parent: <code>data[type=histogram2dcontour]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xbingroup  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`</p> </li> <li>      xbins  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      end  Parent: <code>data[type=histogram2dcontour].xbins</code> Type: number or categorical coordinate string <p>Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].xbins</code> Type: number or categorical coordinate string <p>Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M&lt;n&gt;\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). </p> </li> <li>      start  Parent: <code>data[type=histogram2dcontour].xbins</code> Type: number or categorical coordinate string <p>Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. </p> </li> </ul> </li> <li>      xcalendar  Parent: <code>data[type=histogram2dcontour]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=histogram2dcontour]</code> Type: data_array <p>Sets the sample data to be binned on the y axis.</p> </li> <li>      yaxis  Parent: <code>data[type=histogram2dcontour]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ybingroup  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces  (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`</p> </li> <li>      ybins  Parent: <code>data[type=histogram2dcontour]</code> Type: object containing one or more of the keys listed below. <ul> <li>      end  Parent: <code>data[type=histogram2dcontour].ybins</code> Type: number or categorical coordinate string <p>Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.</p> </li> <li>      size  Parent: <code>data[type=histogram2dcontour].ybins</code> Type: number or categorical coordinate string <p>Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or \"M&lt;n&gt;\" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). </p> </li> <li>      start  Parent: <code>data[type=histogram2dcontour].ybins</code> Type: number or categorical coordinate string <p>Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. </p> </li> </ul> </li> <li>      ycalendar  Parent: <code>data[type=histogram2dcontour]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=histogram2dcontour]</code> Type: data_array <p>Sets the aggregation data.</p> </li> <li>      zauto  Parent: <code>data[type=histogram2dcontour]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.</p> </li> <li>      zhoverformat  Parent: <code>data[type=histogram2dcontour]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      zmax  Parent: <code>data[type=histogram2dcontour]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.</p> </li> <li>      zmid  Parent: <code>data[type=histogram2dcontour]</code> Type: number<p>Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.</p> </li> <li>      zmin  Parent: <code>data[type=histogram2dcontour]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.</p> </li> </ul>"},{"location":"reference/icicle/","title":"icicle","text":"A <code>icicle</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"icicle\"</code>   (i.e. <code>{\"type\": \"icicle\"}</code>) and any of the keys listed below.   Visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles. The icicle sectors are determined by the entries in \"labels\" or \"ids\" and in \"parents\". <ul> <li>      branchvalues  Parent: <code>data[type=icicle]</code> Type:                     enumerated                    , one of ( <code>\"remainder\"</code>| <code>\"total\"</code>                    )                 Default: <code>\"remainder\"</code> <p>Determines how the items in `values` are summed. When set to \"total\", items in `values` are taken to be value of all its descendants. When set to \"remainder\", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</p> </li> <li>      count  Parent: <code>data[type=icicle]</code> Type: flaglist string.                      Any combination of \"branches\", \"leaves\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"branches\"</code>, <code>\"leaves\"</code>, <code>\"branches+leaves\"</code>,                   Default: <code>\"leaves\"</code> <p>Determines default for `values` when it is not provided, by inferring a 1 for each of the \"leaves\" and/or \"branches\", otherwise 0.</p> </li> <li>      customdata  Parent: <code>data[type=icicle]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      domain  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=icicle].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this icicle trace .</p> </li> <li>      row  Parent: <code>data[type=icicle].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this icicle trace .</p> </li> <li>      x  Parent: <code>data[type=icicle].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this icicle trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=icicle].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this icicle trace (in plot fraction).</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=icicle]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"name\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"all\"</code> Default: <code>\"label+text+value+name\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=icicle].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=icicle].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=icicle].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=icicle].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=icicle].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=icicle].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=icicle].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=icicle]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=icicle]</code> Type: string or array of strings<p>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=icicle]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextfont  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying inside the sector.</p> <ul> <li>      color  Parent: <code>data[type=icicle].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=icicle].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      labels  Parent: <code>data[type=icicle]</code> Type: data_array <p>Sets the labels of each of the sectors.</p> </li> <li>      leaf  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=icicle].leaf</code> Type: number less than or equal to 1 <p>Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7</p> </li> </ul> </li> <li>      legend  Parent: <code>data[type=icicle]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=icicle].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=icicle].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=icicle]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=icicle]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      level  Parent: <code>data[type=icicle]</code> Type: number or categorical coordinate string <p>Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</p> </li> <li>      marker  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=icicle].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=icicle].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=icicle].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=icicle].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=icicle].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=icicle].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=icicle].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=icicle].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=icicle].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=icicle].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=icicle].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=icicle].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=icicle].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=icicle].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=icicle].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=icicle].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=icicle].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=icicle].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=icicle].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=icicle].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=icicle].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=icicle].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=icicle].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=icicle].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=icicle].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=icicle].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=icicle].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=icicle].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=icicle].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=icicle].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=icicle].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=icicle].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=icicle].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=icicle].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colors  Parent: <code>data[type=icicle].marker</code> Type: data_array <p>Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.</p> </li> <li>      colorscale  Parent: <code>data[type=icicle].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=icicle].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=icicle].marker.line</code> Type: color or array of colors<p>Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.</p> </li> <li>      width  Parent: <code>data[type=icicle].marker.line</code> Type: number or array of numbers                Default: <code>1</code> <p>Sets the width (in px) of the line enclosing each sector.</p> </li> </ul> </li> <li>      pattern  Parent: <code>data[type=icicle].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=icicle].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=icicle].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=icicle].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=icicle].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=icicle].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=icicle].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=icicle].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=icicle].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> <li>      reversescale  Parent: <code>data[type=icicle].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=icicle].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.</p> </li> </ul> </li> <li>      maxdepth  Parent: <code>data[type=icicle]</code> Type: integer                Default: <code>-1</code> <p>Sets the number of rendered sectors from any given `level`. Set `maxdepth` to \"-1\" to render all the levels in the hierarchy.</p> </li> <li>      meta  Parent: <code>data[type=icicle]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=icicle]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=icicle]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      outsidetextfont  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.</p> <ul> <li>      color  Parent: <code>data[type=icicle].outsidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=icicle].outsidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].outsidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].outsidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].outsidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      parents  Parent: <code>data[type=icicle]</code> Type: data_array <p>Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</p> </li> <li>      pathbar  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      edgeshape  Parent: <code>data[type=icicle].pathbar</code> Type:                     enumerated                    , one of ( <code>\"&gt;\"</code>| <code>\"&lt;\"</code>| <code>\"|\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>                    )                 Default: <code>\"&gt;\"</code> <p>Determines which shape is used for edges between `barpath` labels.</p> </li> <li>      side  Parent: <code>data[type=icicle].pathbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"bottom\"</code>                    )                 Default: <code>\"top\"</code> <p>Determines on which side of the the treemap the `pathbar` should be presented.</p> </li> <li>      textfont  Parent: <code>data[type=icicle].pathbar</code> Type: object containing one or more of the keys listed below. <p>Sets the font used inside `pathbar`.</p> <ul> <li>      color  Parent: <code>data[type=icicle].pathbar.textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=icicle].pathbar.textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].pathbar.textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].pathbar.textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].pathbar.textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].pathbar.textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].pathbar.textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].pathbar.textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].pathbar.textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      thickness  Parent: <code>data[type=icicle].pathbar</code> Type: number greater than or equal to 12 <p>Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.</p> </li> <li>      visible  Parent: <code>data[type=icicle].pathbar</code> Type: boolean                Default: <code>true</code> <p>Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.</p> </li> </ul> </li> <li>      root  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=icicle].root</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.</p> </li> </ul> </li> <li>      sort  Parent: <code>data[type=icicle]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the sectors are reordered from largest to smallest.</p> </li> <li>      text  Parent: <code>data[type=icicle]</code> Type: data_array <p>Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo`.</p> <ul> <li>      color  Parent: <code>data[type=icicle].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=icicle].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=icicle].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=icicle].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=icicle].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=icicle].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=icicle].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=icicle].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=icicle].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textinfo  Parent: <code>data[type=icicle]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"none\"</code> <p>Determines which trace information appear on the graph.</p> </li> <li>      textposition  Parent: <code>data[type=icicle]</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"top left\"</code> <p>Sets the positions of the `text` elements.</p> </li> <li>      texttemplate  Parent: <code>data[type=icicle]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.</p> </li> <li>      tiling  Parent: <code>data[type=icicle]</code> Type: object containing one or more of the keys listed below. <ul> <li>      flip  Parent: <code>data[type=icicle].tiling</code> Type: flaglist string.                      Any combination of \"x\", \"y\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>,   <p>Determines if the positions obtained from solver are flipped on each axis.</p> </li> <li>      orientation  Parent: <code>data[type=icicle].tiling</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    )                 Default: <code>\"h\"</code> <p>When set in conjunction with `tiling.flip`, determines on which side the root nodes are drawn in the chart. If `tiling.orientation` is \"v\" and `tiling.flip` is \"\", the root nodes appear at the top. If `tiling.orientation` is \"v\" and `tiling.flip` is \"y\", the root nodes appear at the bottom. If `tiling.orientation` is \"h\" and `tiling.flip` is \"\", the root nodes appear at the left. If `tiling.orientation` is \"h\" and `tiling.flip` is \"x\", the root nodes appear at the right.</p> </li> <li>      pad  Parent: <code>data[type=icicle].tiling</code> Type: number<p>Sets the inner padding (in px).</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=icicle]</code> Type: \"icicle\" </li> <li>      uid  Parent: <code>data[type=icicle]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=icicle]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      values  Parent: <code>data[type=icicle]</code> Type: data_array <p>Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.</p> </li> <li>      visible  Parent: <code>data[type=icicle]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/image/","title":"image","text":"A <code>image</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"image\"</code>   (i.e. <code>{\"type\": \"image\"}</code>) and any of the keys listed below.   Display an image, i.e. data on a 2D regular raster. By default, when an image is displayed in a subplot, its y axis will be reversed (ie. `autorange: 'reversed'`), constrained to the domain (ie. `constrain: 'domain'`) and it will have the same scale as its x axis (ie. `scaleanchor: 'x,`) in order for pixels to be rendered as squares. <ul> <li>      colormodel  Parent: <code>data[type=image]</code> Type:                     enumerated                    , one of ( <code>\"rgb\"</code>| <code>\"rgba\"</code>| <code>\"rgba256\"</code>| <code>\"hsl\"</code>| <code>\"hsla\"</code>                    ) <p>Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.</p> </li> <li>      customdata  Parent: <code>data[type=image]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=image]</code> Type: number                Default: <code>1</code> <p>Set the pixel's horizontal size.</p> </li> <li>      dy  Parent: <code>data[type=image]</code> Type: number                Default: <code>1</code> <p>Set the pixel's vertical size</p> </li> <li>      hoverinfo  Parent: <code>data[type=image]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"color\", \"name\", \"text\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"x+y+z+text+name\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=image]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=image].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=image].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=image].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=image].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=image].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=image].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=image].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=image].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=image].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=image].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=image].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=image].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=image].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=image].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=image]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `z`, `color` and `colormodel`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=image]</code> Type: data_array <p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=image]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=image]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=image]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=image].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=image].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=image].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=image].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=image].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=image].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=image].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=image].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=image].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=image].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=image].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=image]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=image]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      meta  Parent: <code>data[type=image]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=image]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=image]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      source  Parent: <code>data[type=image]</code> Type: string<p>Specifies the data URI of the image to be visualized. The URI consists of \"data:image/[&lt;media subtype\\\\&gt;][;base64\\\\],&lt;data\\\\&gt;\"</p> </li> <li>      text  Parent: <code>data[type=image]</code> Type: data_array <p>Sets the text elements associated with each z value.</p> </li> <li>      type  Parent: <code>data[type=image]</code> Type: \"image\" </li> <li>      uid  Parent: <code>data[type=image]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=image]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=image]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x0  Parent: <code>data[type=image]</code> Type: number or categorical coordinate string <p>Set the image's x position. The left edge of the image (or the right edge if the x axis is reversed or dx is negative) will be found at xmin=x0-dx/2</p> </li> <li>      xaxis  Parent: <code>data[type=image]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      y0  Parent: <code>data[type=image]</code> Type: number or categorical coordinate string <p>Set the image's y position. The top edge of the image (or the bottom edge if the y axis is NOT reversed or if dy is negative) will be found at ymin=y0-dy/2. By default when an image trace is included, the y axis will be reversed so that the image is right-side-up, but you can disable this by setting yaxis.autorange=true or by providing an explicit y axis range.</p> </li> <li>      yaxis  Parent: <code>data[type=image]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      z  Parent: <code>data[type=image]</code> Type: data_array <p>A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.</p> </li> <li>      zmax  Parent: <code>data[type=image]</code>  {inner}Type: {array} <p>Array defining the higher bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [255, 255, 255]. For the `rgba` colormodel, it is [255, 255, 255, 1]. For the `rgba256` colormodel, it is [255, 255, 255, 255]. For the `hsl` colormodel, it is [360, 100, 100]. For the `hsla` colormodel, it is [360, 100, 100, 1].</p> </li> <li>      zmin  Parent: <code>data[type=image]</code>  {inner}Type: {array} <p>Array defining the lower bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [0, 0, 0]. For the `rgba` colormodel, it is [0, 0, 0, 0]. For the `rgba256` colormodel, it is [0, 0, 0, 0]. For the `hsl` colormodel, it is [0, 0, 0]. For the `hsla` colormodel, it is [0, 0, 0, 0].</p> </li> <li>      zorder  Parent: <code>data[type=image]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> <li>      zsmooth  Parent: <code>data[type=image]</code> Type:                     enumerated                    , one of ( <code>\"fast\"</code>| <code>false</code>                    ) <p>Picks a smoothing algorithm used to smooth `z` data. This only applies for image traces that use the `source` attribute.</p> </li> </ul>"},{"location":"reference/indicator/","title":"indicator","text":"A <code>indicator</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"indicator\"</code>   (i.e. <code>{\"type\": \"indicator\"}</code>) and any of the keys listed below.   An indicator is used to visualize a single `value` along with some contextual information such as `steps` or a `threshold`, using a combination of three visual elements: a number, a delta, and/or a gauge. Deltas are taken with respect to a `reference`. Gauges can be either angular or bullet (aka linear) gauges. <ul> <li>      align  Parent: <code>data[type=indicator]</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered</p> </li> <li>      customdata  Parent: <code>data[type=indicator]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      delta  Parent: <code>data[type=indicator]</code> Type: object containing one or more of the keys listed below. <ul> <li>      decreasing  Parent: <code>data[type=indicator].delta</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=indicator].delta.decreasing</code> Type: color                Default: <code>\"#FF4136\"</code> <p>Sets the color for increasing value.</p> </li> <li>      symbol  Parent: <code>data[type=indicator].delta.decreasing</code> Type: string                Default: <code>\"\u25bc\"</code> <p>Sets the symbol to display for increasing value</p> </li> </ul> </li> <li>      font  Parent: <code>data[type=indicator].delta</code> Type: object containing one or more of the keys listed below. <p>Set the font used to display the delta</p> <ul> <li>      color  Parent: <code>data[type=indicator].delta.font</code> Type: color</li> <li>      family  Parent: <code>data[type=indicator].delta.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=indicator].delta.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=indicator].delta.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=indicator].delta.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=indicator].delta.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=indicator].delta.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=indicator].delta.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=indicator].delta.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      increasing  Parent: <code>data[type=indicator].delta</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=indicator].delta.increasing</code> Type: color                Default: <code>\"#3D9970\"</code> <p>Sets the color for increasing value.</p> </li> <li>      symbol  Parent: <code>data[type=indicator].delta.increasing</code> Type: string                Default: <code>\"\u25b2\"</code> <p>Sets the symbol to display for increasing value</p> </li> </ul> </li> <li>      position  Parent: <code>data[type=indicator].delta</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"bottom\"</code>| <code>\"left\"</code>| <code>\"right\"</code>                    )                 Default: <code>\"bottom\"</code> <p>Sets the position of delta with respect to the number.</p> </li> <li>      prefix  Parent: <code>data[type=indicator].delta</code> Type: string<p>Sets a prefix appearing before the delta.</p> </li> <li>      reference  Parent: <code>data[type=indicator].delta</code> Type: number<p>Sets the reference value to compute the delta. By default, it is set to the current value.</p> </li> <li>      relative  Parent: <code>data[type=indicator].delta</code> Type: boolean<p>Show relative change</p> </li> <li>      suffix  Parent: <code>data[type=indicator].delta</code> Type: string<p>Sets a suffix appearing next to the delta.</p> </li> <li>      valueformat  Parent: <code>data[type=indicator].delta</code> Type: string<p>Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> </ul> </li> <li>      domain  Parent: <code>data[type=indicator]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=indicator].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this indicator trace .</p> </li> <li>      row  Parent: <code>data[type=indicator].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this indicator trace .</p> </li> <li>      x  Parent: <code>data[type=indicator].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this indicator trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=indicator].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this indicator trace (in plot fraction).</p> </li> </ul> </li> <li>      gauge  Parent: <code>data[type=indicator]</code> Type: object containing one or more of the keys listed below. <p>The gauge of the Indicator plot.</p> <ul> <li>      axis  Parent: <code>data[type=indicator].gauge</code> Type: object containing one or more of the keys listed below. <ul> <li>      dtick  Parent: <code>data[type=indicator].gauge.axis</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=indicator].gauge.axis</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=indicator].gauge.axis</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      minexponent  Parent: <code>data[type=indicator].gauge.axis</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=indicator].gauge.axis</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      range  Parent: <code>data[type=indicator].gauge.axis</code>  {inner}Type: {array} <p>Sets the range of this axis.</p> </li> <li>      separatethousands  Parent: <code>data[type=indicator].gauge.axis</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=indicator].gauge.axis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=indicator].gauge.axis</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=indicator].gauge.axis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=indicator].gauge.axis</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      tick0  Parent: <code>data[type=indicator].gauge.axis</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=indicator].gauge.axis</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=indicator].gauge.axis</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=indicator].gauge.axis</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=indicator].gauge.axis.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=indicator].gauge.axis</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=indicator].gauge.axis</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=indicator].gauge.axis.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=indicator].gauge.axis.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=indicator].gauge.axis.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=indicator].gauge.axis.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=indicator].gauge.axis.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabelstep  Parent: <code>data[type=indicator].gauge.axis</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=indicator].gauge.axis</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=indicator].gauge.axis</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=indicator].gauge.axis</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=indicator].gauge.axis</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=indicator].gauge.axis</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=indicator].gauge.axis</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=indicator].gauge.axis</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=indicator].gauge.axis</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      visible  Parent: <code>data[type=indicator].gauge.axis</code> Type: boolean                Default: <code>true</code> <p>A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false</p> </li> </ul> </li> <li>      bar  Parent: <code>data[type=indicator].gauge</code> Type: object containing one or more of the keys listed below. <p>Set the appearance of the gauge's value</p> <ul> <li>      color  Parent: <code>data[type=indicator].gauge.bar</code> Type: color                Default: <code>\"green\"</code> <p>Sets the background color of the arc.</p> </li> <li>      line  Parent: <code>data[type=indicator].gauge.bar</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=indicator].gauge.bar.line</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the line enclosing each sector.</p> </li> <li>      width  Parent: <code>data[type=indicator].gauge.bar.line</code> Type: number<p>Sets the width (in px) of the line enclosing each sector.</p> </li> </ul> </li> <li>      thickness  Parent: <code>data[type=indicator].gauge.bar</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the thickness of the bar as a fraction of the total thickness of the gauge.</p> </li> </ul> </li> <li>      bgcolor  Parent: <code>data[type=indicator].gauge</code> Type: color<p>Sets the gauge background color.</p> </li> <li>      bordercolor  Parent: <code>data[type=indicator].gauge</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the border enclosing the gauge.</p> </li> <li>      borderwidth  Parent: <code>data[type=indicator].gauge</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the border enclosing the gauge.</p> </li> <li>      shape  Parent: <code>data[type=indicator].gauge</code> Type:                     enumerated                    , one of ( <code>\"angular\"</code>| <code>\"bullet\"</code>                    )                 Default: <code>\"angular\"</code> <p>Set the shape of the gauge</p> </li> <li>      steps  Parent: <code>data[type=indicator].gauge</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=indicator].gauge.steps</code> Type: color<p>Sets the background color of the arc.</p> </li> <li>      line  Parent: <code>data[type=indicator].gauge.steps</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=indicator].gauge.steps.line</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the line enclosing each sector.</p> </li> <li>      width  Parent: <code>data[type=indicator].gauge.steps.line</code> Type: number<p>Sets the width (in px) of the line enclosing each sector.</p> </li> </ul> </li> <li>      name  Parent: <code>data[type=indicator].gauge.steps</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      range  Parent: <code>data[type=indicator].gauge.steps</code>  {inner}Type: {array} <p>Sets the range of this axis.</p> </li> <li>      templateitemname  Parent: <code>data[type=indicator].gauge.steps</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      thickness  Parent: <code>data[type=indicator].gauge.steps</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the thickness of the bar as a fraction of the total thickness of the gauge.</p> </li> </ul> </li> <li>      threshold  Parent: <code>data[type=indicator].gauge</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=indicator].gauge.threshold</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=indicator].gauge.threshold.line</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the threshold line.</p> </li> <li>      width  Parent: <code>data[type=indicator].gauge.threshold.line</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the threshold line.</p> </li> </ul> </li> <li>      thickness  Parent: <code>data[type=indicator].gauge.threshold</code> Type: number less than or equal to 1                 Default: <code>0.85</code> <p>Sets the thickness of the threshold line as a fraction of the thickness of the gauge.</p> </li> <li>      value  Parent: <code>data[type=indicator].gauge.threshold</code> Type: number<p>Sets a treshold value drawn as a line.</p> </li> </ul> </li> </ul> </li> <li>      ids  Parent: <code>data[type=indicator]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=indicator]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=indicator]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=indicator].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=indicator].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=indicator].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=indicator]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=indicator]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      meta  Parent: <code>data[type=indicator]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=indicator]</code> Type: flaglist string.                      Any combination of \"number\", \"delta\", \"gauge\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"number\"</code>, <code>\"delta\"</code>, <code>\"number+delta\"</code>, <code>\"number+delta+gauge\"</code>,                   Default: <code>\"number\"</code> <p>Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.</p> </li> <li>      name  Parent: <code>data[type=indicator]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      number  Parent: <code>data[type=indicator]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=indicator].number</code> Type: object containing one or more of the keys listed below. <p>Set the font used to display main number</p> <ul> <li>      color  Parent: <code>data[type=indicator].number.font</code> Type: color</li> <li>      family  Parent: <code>data[type=indicator].number.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=indicator].number.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=indicator].number.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=indicator].number.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=indicator].number.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=indicator].number.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=indicator].number.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=indicator].number.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      prefix  Parent: <code>data[type=indicator].number</code> Type: string<p>Sets a prefix appearing before the number.</p> </li> <li>      suffix  Parent: <code>data[type=indicator].number</code> Type: string<p>Sets a suffix appearing next to the number.</p> </li> <li>      valueformat  Parent: <code>data[type=indicator].number</code> Type: string<p>Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> </ul> </li> <li>      title  Parent: <code>data[type=indicator]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=indicator].title</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets the horizontal alignment of the title. It defaults to `center` except for bullet charts for which it defaults to right.</p> </li> <li>      font  Parent: <code>data[type=indicator].title</code> Type: object containing one or more of the keys listed below. <p>Set the font used to display the title</p> <ul> <li>      color  Parent: <code>data[type=indicator].title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=indicator].title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=indicator].title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=indicator].title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=indicator].title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=indicator].title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=indicator].title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=indicator].title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=indicator].title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=indicator].title</code> Type: string<p>Sets the title of this indicator.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=indicator]</code> Type: \"indicator\" </li> <li>      uid  Parent: <code>data[type=indicator]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=indicator]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      value  Parent: <code>data[type=indicator]</code> Type: number<p>Sets the number to be displayed.</p> </li> <li>      visible  Parent: <code>data[type=indicator]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/isosurface/","title":"isosurface","text":"A <code>isosurface</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"isosurface\"</code>   (i.e. <code>{\"type\": \"isosurface\"}</code>) and any of the keys listed below.   Draws isosurfaces between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid. Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace. <ul> <li>      autocolorscale  Parent: <code>data[type=isosurface]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      caps  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=isosurface].caps</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=isosurface].caps.x</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      show  Parent: <code>data[type=isosurface].caps.x</code> Type: boolean                Default: <code>true</code> <p>Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> </ul> </li> <li>      y  Parent: <code>data[type=isosurface].caps</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=isosurface].caps.y</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      show  Parent: <code>data[type=isosurface].caps.y</code> Type: boolean                Default: <code>true</code> <p>Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> </ul> </li> <li>      z  Parent: <code>data[type=isosurface].caps</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=isosurface].caps.z</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      show  Parent: <code>data[type=isosurface].caps.z</code> Type: boolean                Default: <code>true</code> <p>Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> </ul> </li> </ul> </li> <li>      cauto  Parent: <code>data[type=isosurface]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=isosurface]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=isosurface]</code> Type: number<p>Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=isosurface]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=isosurface]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=isosurface].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=isosurface].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=isosurface].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=isosurface].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=isosurface].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=isosurface].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=isosurface].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=isosurface].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=isosurface].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=isosurface].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=isosurface].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=isosurface].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=isosurface].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=isosurface].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=isosurface].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=isosurface].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=isosurface].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=isosurface].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=isosurface].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=isosurface].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=isosurface].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=isosurface].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=isosurface].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=isosurface].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=isosurface].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=isosurface].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=isosurface].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=isosurface].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=isosurface].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=isosurface].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=isosurface].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=isosurface].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=isosurface].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=isosurface].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=isosurface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=isosurface]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      contour  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=isosurface].contour</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the contour lines.</p> </li> <li>      show  Parent: <code>data[type=isosurface].contour</code> Type: boolean<p>Sets whether or not dynamic contours are shown on hover</p> </li> <li>      width  Parent: <code>data[type=isosurface].contour</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the contour lines.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=isosurface]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      flatshading  Parent: <code>data[type=isosurface]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</p> </li> <li>      hoverinfo  Parent: <code>data[type=isosurface]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=isosurface].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=isosurface].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=isosurface].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=isosurface].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=isosurface].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=isosurface].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=isosurface]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=isosurface]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=isosurface]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      isomax  Parent: <code>data[type=isosurface]</code> Type: number<p>Sets the maximum boundary for iso-surface plot.</p> </li> <li>      isomin  Parent: <code>data[type=isosurface]</code> Type: number<p>Sets the minimum boundary for iso-surface plot.</p> </li> <li>      legend  Parent: <code>data[type=isosurface]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=isosurface]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=isosurface].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=isosurface].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=isosurface].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=isosurface]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=isosurface]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lighting  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      ambient  Parent: <code>data[type=isosurface].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Ambient light increases overall color visibility but can wash out the image.</p> </li> <li>      diffuse  Parent: <code>data[type=isosurface].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Represents the extent that incident rays are reflected in a range of angles.</p> </li> <li>      facenormalsepsilon  Parent: <code>data[type=isosurface].lighting</code> Type: number less than or equal to 1 <p>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</p> </li> <li>      fresnel  Parent: <code>data[type=isosurface].lighting</code> Type: number less than or equal to 5                 Default: <code>0.2</code> <p>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</p> </li> <li>      roughness  Parent: <code>data[type=isosurface].lighting</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</p> </li> <li>      specular  Parent: <code>data[type=isosurface].lighting</code> Type: number less than or equal to 2                 Default: <code>0.05</code> <p>Represents the level that incident rays are reflected in a single direction, causing shine.</p> </li> <li>      vertexnormalsepsilon  Parent: <code>data[type=isosurface].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-12</code> <p>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</p> </li> </ul> </li> <li>      lightposition  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=isosurface].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the X coordinate for each vertex.</p> </li> <li>      y  Parent: <code>data[type=isosurface].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the Y coordinate for each vertex.</p> </li> <li>      z  Parent: <code>data[type=isosurface].lightposition</code> Type: number between or equal to -100000 and 100000 <p>Numeric vector, representing the Z coordinate for each vertex.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=isosurface]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=isosurface]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=isosurface]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</p> </li> <li>      reversescale  Parent: <code>data[type=isosurface]</code> Type: boolean<p>Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</p> </li> <li>      scene  Parent: <code>data[type=isosurface]</code> Type: subplotid                 Default: <code>scene</code> <p>Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</p> </li> <li>      showlegend  Parent: <code>data[type=isosurface]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=isosurface]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      slices  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=isosurface].slices</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=isosurface].slices.x</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      locations  Parent: <code>data[type=isosurface].slices.x</code> Type: data_array <p>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.</p> </li> <li>      show  Parent: <code>data[type=isosurface].slices.x</code> Type: boolean<p>Determines whether or not slice planes about the x dimension are drawn.</p> </li> </ul> </li> <li>      y  Parent: <code>data[type=isosurface].slices</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=isosurface].slices.y</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      locations  Parent: <code>data[type=isosurface].slices.y</code> Type: data_array <p>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.</p> </li> <li>      show  Parent: <code>data[type=isosurface].slices.y</code> Type: boolean<p>Determines whether or not slice planes about the y dimension are drawn.</p> </li> </ul> </li> <li>      z  Parent: <code>data[type=isosurface].slices</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=isosurface].slices.z</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      locations  Parent: <code>data[type=isosurface].slices.z</code> Type: data_array <p>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.</p> </li> <li>      show  Parent: <code>data[type=isosurface].slices.z</code> Type: boolean<p>Determines whether or not slice planes about the z dimension are drawn.</p> </li> </ul> </li> </ul> </li> <li>      spaceframe  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=isosurface].spaceframe</code> Type: number less than or equal to 1                 Default: <code>0.15</code> <p>Sets the fill ratio of the `spaceframe` elements. The default fill value is 0.15 meaning that only 15% of the area of every faces of tetras would be shaded. Applying a greater `fill` ratio would allow the creation of stronger elements or could be sued to have entirely closed areas (in case of using 1).</p> </li> <li>      show  Parent: <code>data[type=isosurface].spaceframe</code> Type: boolean<p>Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.</p> </li> </ul> </li> <li>      surface  Parent: <code>data[type=isosurface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      count  Parent: <code>data[type=isosurface].surface</code> Type: integer greater than or equal to 1                 Default: <code>2</code> <p>Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.</p> </li> <li>      fill  Parent: <code>data[type=isosurface].surface</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      pattern  Parent: <code>data[type=isosurface].surface</code> Type: flaglist string.                      Any combination of \"A\", \"B\", \"C\", \"D\", \"E\" joined with a <code>\"+\"</code>                     OR \"all\", \"odd\", \"even\".                      Examples: <code>\"A\"</code>, <code>\"B\"</code>, <code>\"A+B\"</code>, <code>\"A+B+C\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.</p> </li> <li>      show  Parent: <code>data[type=isosurface].surface</code> Type: boolean                Default: <code>true</code> <p>Hides/displays surfaces between minimum and maximum iso-values.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=isosurface]</code> Type: string or array of strings<p>Sets the text elements associated with the vertices. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      type  Parent: <code>data[type=isosurface]</code> Type: \"isosurface\" </li> <li>      uid  Parent: <code>data[type=isosurface]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=isosurface]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      value  Parent: <code>data[type=isosurface]</code> Type: data_array <p>Sets the 4th dimension (value) of the vertices.</p> </li> <li>      valuehoverformat  Parent: <code>data[type=isosurface]</code> Type: string<p>Sets the hover text formatting rulefor `value`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      visible  Parent: <code>data[type=isosurface]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=isosurface]</code> Type: data_array <p>Sets the X coordinates of the vertices on X axis.</p> </li> <li>      xhoverformat  Parent: <code>data[type=isosurface]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=isosurface]</code> Type: data_array <p>Sets the Y coordinates of the vertices on Y axis.</p> </li> <li>      yhoverformat  Parent: <code>data[type=isosurface]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=isosurface]</code> Type: data_array <p>Sets the Z coordinates of the vertices on Z axis.</p> </li> <li>      zhoverformat  Parent: <code>data[type=isosurface]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/layout/","title":"layout","text":"<ul> <li>      activeselection  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      fillcolor  Parent: <code>layout.activeselection</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color filling the active selection' interior.</p> </li> <li>      opacity  Parent: <code>layout.activeselection</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Sets the opacity of the active selection.</p> </li> </ul> </li> <li>      activeshape  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      fillcolor  Parent: <code>layout.activeshape</code> Type: color                Default: <code>\"rgb(255,0,255)\"</code> <p>Sets the color filling the active shape' interior.</p> </li> <li>      opacity  Parent: <code>layout.activeshape</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Sets the opacity of the active shape.</p> </li> </ul> </li> <li>      autosize  Parent: <code>layout</code> Type: boolean<p>Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.</p> </li> <li>      autotypenumbers  Parent: <code>layout</code> Type:                     enumerated                    , one of ( <code>\"convert types\"</code>| <code>\"strict\"</code>                    )                 Default: <code>\"convert types\"</code> <p>Using \"strict\" a numeric string in trace data is not converted to a number. Using \"convert types\" a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.</p> </li> <li>      calendar  Parent: <code>layout</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the default calendar system to use for interpreting and displaying dates throughout the plot.</p> </li> <li>      clickmode  Parent: <code>layout</code> Type: flaglist string.                      Any combination of \"event\", \"select\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"event\"</code>, <code>\"select\"</code>, <code>\"event+select\"</code>, <code>\"none\"</code> Default: <code>\"event\"</code> <p>Determines the mode of single click interactions. \"event\" is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes \"lasso\" and \"select\", but with no event data attached (kept for compatibility reasons). The \"select\" flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. \"select\" with `hovermode`: \"x\" can be confusing, consider explicitly setting `hovermode`: \"closest\" when using this feature. Selection events are sent accordingly as long as \"event\" flag is set as well. When the \"event\" flag is missing, `plotly_click` and `plotly_selected` events are not fired.</p> </li> <li>      colorscale  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      diverging  Parent: <code>layout.colorscale</code> Type: colorscale                 Default: <code>[[[, 0, ,,  , ', r, g, b, (, 5, ,, 1, 0, ,, 1, 7, 2, ), ', ]], [[, 0, ., 3, 5, ,,  , ', r, g, b, (, 1, 0, 6, ,, 1, 3, 7, ,, 2, 4, 7, ), ', ]], [[, 0, ., 5, ,,  , ', r, g, b, (, 1, 9, 0, ,, 1, 9, 0, ,, 1, 9, 0, ), ', ]], [[, 0, ., 6, ,,  , ', r, g, b, (, 2, 2, 0, ,, 1, 7, 0, ,, 1, 3, 2, ), ', ]], [[, 0, ., 7, ,,  , ', r, g, b, (, 2, 3, 0, ,, 1, 4, 5, ,, 9, 0, ), ', ]], [[, 1, ,,  , ', r, g, b, (, 1, 7, 8, ,, 1, 0, ,, 2, 8, ), ', ]]]</code> <p>Sets the default diverging colorscale. Note that `autocolorscale` must be true for this attribute to work.</p> </li> <li>      sequential  Parent: <code>layout.colorscale</code> Type: colorscale                 Default: <code>[[[, 0, ,,  , ', r, g, b, (, 2, 2, 0, ,, 2, 2, 0, ,, 2, 2, 0, ), ', ]], [[, 0, ., 2, ,,  , ', r, g, b, (, 2, 4, 5, ,, 1, 9, 5, ,, 1, 5, 7, ), ', ]], [[, 0, ., 4, ,,  , ', r, g, b, (, 2, 4, 5, ,, 1, 6, 0, ,, 1, 0, 5, ), ', ]], [[, 1, ,,  , ', r, g, b, (, 1, 7, 8, ,, 1, 0, ,, 2, 8, ), ', ]]]</code> <p>Sets the default sequential colorscale for positive values. Note that `autocolorscale` must be true for this attribute to work.</p> </li> <li>      sequentialminus  Parent: <code>layout.colorscale</code> Type: colorscale                 Default: <code>[[[, 0, ,,  , ', r, g, b, (, 5, ,, 1, 0, ,, 1, 7, 2, ), ', ]], [[, 0, ., 3, 5, ,,  , ', r, g, b, (, 4, 0, ,, 6, 0, ,, 1, 9, 0, ), ', ]], [[, 0, ., 5, ,,  , ', r, g, b, (, 7, 0, ,, 1, 0, 0, ,, 2, 4, 5, ), ', ]], [[, 0, ., 6, ,,  , ', r, g, b, (, 9, 0, ,, 1, 2, 0, ,, 2, 4, 5, ), ', ]], [[, 0, ., 7, ,,  , ', r, g, b, (, 1, 0, 6, ,, 1, 3, 7, ,, 2, 4, 7, ), ', ]], [[, 1, ,,  , ', r, g, b, (, 2, 2, 0, ,, 2, 2, 0, ,, 2, 2, 0, ), ', ]]]</code> <p>Sets the default sequential colorscale for negative values. Note that `autocolorscale` must be true for this attribute to work.</p> </li> </ul> </li> <li>      colorway  Parent: <code>layout</code> Type: colorlist                 Default: <code>[#1f77b4, #ff7f0e, #2ca02c, #d62728, #9467bd, #8c564b, #e377c2, #7f7f7f, #bcbd22, #17becf]</code> <p>Sets the default trace colors.</p> </li> <li>      computed  Parent: <code>layout</code> Type: number or categorical coordinate string <p>Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in \"full-json\" mode.</p> </li> <li>      datarevision  Parent: <code>layout</code> Type: number or categorical coordinate string <p>If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.</p> </li> <li>      dragmode  Parent: <code>layout</code> Type:                     enumerated                    , one of ( <code>\"zoom\"</code>| <code>\"pan\"</code>| <code>\"select\"</code>| <code>\"lasso\"</code>| <code>\"drawclosedpath\"</code>| <code>\"drawopenpath\"</code>| <code>\"drawline\"</code>| <code>\"drawrect\"</code>| <code>\"drawcircle\"</code>| <code>\"orbit\"</code>| <code>\"turntable\"</code>| <code>false</code>                    )                 Default: <code>\"zoom\"</code> <p>Determines the mode of drag interactions. \"select\" and \"lasso\" apply only to scatter traces with markers or text. \"orbit\" and \"turntable\" apply only to 3D scenes.</p> </li> <li>      editrevision  Parent: <code>layout</code> Type: number or categorical coordinate string <p>Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.</p> </li> <li>      font  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <p>Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.</p> <ul> <li>      color  Parent: <code>layout.font</code> Type: color                Default: <code>\"#444\"</code> </li> <li>      family  Parent: <code>layout.font</code> Type: string                Default: <code>\"\"Open Sans\", verdana, arial, sans-serif\"</code> <p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.font</code> Type: number greater than or equal to 1                 Default: <code>12</code> </li> <li>      style  Parent: <code>layout.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      grid  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      columns  Parent: <code>layout.grid</code> Type: integer greater than or equal to 1 <p>The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</p> </li> <li>      domain  Parent: <code>layout.grid</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>layout.grid.domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</p> </li> <li>      y  Parent: <code>layout.grid.domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.</p> </li> </ul> </li> <li>      pattern  Parent: <code>layout.grid</code> Type:                     enumerated                    , one of ( <code>\"independent\"</code>| <code>\"coupled\"</code>                    )                 Default: <code>\"coupled\"</code> <p>If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: \"coupled\" gives one x axis per column and one y axis per row. \"independent\" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.</p> </li> <li>      roworder  Parent: <code>layout.grid</code> Type:                     enumerated                    , one of ( <code>\"top to bottom\"</code>| <code>\"bottom to top\"</code>                    )                 Default: <code>\"top to bottom\"</code> <p>Is the first row the top or the bottom? Note that columns are always enumerated from left to right.</p> </li> <li>      rows  Parent: <code>layout.grid</code> Type: integer greater than or equal to 1 <p>The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.</p> </li> <li>      subplots  Parent: <code>layout.grid</code>  {inner}Type: {array} <p>Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like \"xy\" or \"x3y2\", or \"\" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.</p> </li> <li>      xaxes  Parent: <code>layout.grid</code>  {inner}Type: {array} <p>Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like \"x\", \"x2\", etc., or \"\" to not put an x axis in that column. Entries other than \"\" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.</p> </li> <li>      xgap  Parent: <code>layout.grid</code> Type: number less than or equal to 1 <p>Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.</p> </li> <li>      xside  Parent: <code>layout.grid</code> Type:                     enumerated                    , one of ( <code>\"bottom\"</code>| <code>\"bottom plot\"</code>| <code>\"top plot\"</code>| <code>\"top\"</code>                    )                 Default: <code>\"bottom plot\"</code> <p>Sets where the x axis labels and titles go. \"bottom\" means the very bottom of the grid. \"bottom plot\" is the lowest plot that each x axis is used in. \"top\" and \"top plot\" are similar.</p> </li> <li>      yaxes  Parent: <code>layout.grid</code>  {inner}Type: {array} <p>Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like \"y\", \"y2\", etc., or \"\" to not put a y axis in that row. Entries other than \"\" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.</p> </li> <li>      ygap  Parent: <code>layout.grid</code> Type: number less than or equal to 1 <p>Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.</p> </li> <li>      yside  Parent: <code>layout.grid</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"left plot\"</code>| <code>\"right plot\"</code>| <code>\"right\"</code>                    )                 Default: <code>\"left plot\"</code> <p>Sets where the y axis labels and titles go. \"left\" means the very left edge of the grid. \"left plot\" is the leftmost plot that each y axis is used in. \"right\" and \"right plot\" are similar.</p> </li> </ul> </li> <li>      height  Parent: <code>layout</code> Type: number greater than or equal to 10                 Default: <code>450</code> <p>Sets the plot's height (in px).</p> </li> <li>      hidesources  Parent: <code>layout</code> Type: boolean<p>Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).</p> </li> <li>      hoverdistance  Parent: <code>layout</code> Type: integer greater than or equal to -1                 Default: <code>20</code> <p>Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.</p> </li> <li>      hoverlabel  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>layout.hoverlabel</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>layout.hoverlabel</code> Type: color<p>Sets the background color of all hover labels on graph</p> </li> <li>      bordercolor  Parent: <code>layout.hoverlabel</code> Type: color<p>Sets the border color of all hover labels on graph.</p> </li> <li>      font  Parent: <code>layout.hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the default hover label font used by all traces on the graph.</p> <ul> <li>      color  Parent: <code>layout.hoverlabel.font</code> Type: color</li> <li>      family  Parent: <code>layout.hoverlabel.font</code> Type: string                Default: <code>\"Arial, sans-serif\"</code> <p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.hoverlabel.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.hoverlabel.font</code> Type: number greater than or equal to 1                 Default: <code>13</code> </li> <li>      style  Parent: <code>layout.hoverlabel.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.hoverlabel.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.hoverlabel.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.hoverlabel.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      grouptitlefont  Parent: <code>layout.hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font for group titles in hover (unified modes). Defaults to `hoverlabel.font`.</p> <ul> <li>      color  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type: color</li> <li>      family  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.hoverlabel.grouptitlefont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>layout.hoverlabel</code> Type: integer greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovermode  Parent: <code>layout</code> Type:                     enumerated                    , one of ( <code>\"x\"</code>| <code>\"y\"</code>| <code>\"closest\"</code>| <code>false</code>| <code>\"x unified\"</code>| <code>\"y unified\"</code>                    )                 Default: <code>\"closest\"</code> <p>Determines the mode of hover interactions. If \"closest\", a single hoverlabel will appear for the \"closest\" point within the `hoverdistance`. If \"x\" (or \"y\"), multiple hoverlabels will appear for multiple points at the \"closest\" x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If \"x unified\" (or \"y unified\"), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.</p> </li> <li>      hoversubplots  Parent: <code>layout</code> Type:                     enumerated                    , one of ( <code>\"single\"</code>| <code>\"overlaying\"</code>| <code>\"axis\"</code>                    )                 Default: <code>\"overlaying\"</code> <p>Determines expansion of hover effects to other subplots If \"single\" just the axis pair of the primary point is included without overlaying subplots. If \"overlaying\" all subplots using the main axis and occupying the same space are included. If \"axis\", also include stacked subplots using the same axis when `hovermode` is set to \"x\", \"x unified\", \"y\" or \"y unified\".</p> </li> <li>      legend  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>layout.legend</code> Type: color<p>Sets the legend background color. Defaults to `layout.paper_bgcolor`.</p> </li> <li>      bordercolor  Parent: <code>layout.legend</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the border enclosing the legend.</p> </li> <li>      borderwidth  Parent: <code>layout.legend</code> Type: number<p>Sets the width (in px) of the border enclosing the legend.</p> </li> <li>      entrywidth  Parent: <code>layout.legend</code> Type: number<p>Sets the width (in px or fraction) of the legend. Use 0 to size the entry based on the text width, when `entrywidthmode` is set to \"pixels\".</p> </li> <li>      entrywidthmode  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines what entrywidth means.</p> </li> <li>      font  Parent: <code>layout.legend</code> Type: object containing one or more of the keys listed below. <p>Sets the font used to text the legend items.</p> <ul> <li>      color  Parent: <code>layout.legend.font</code> Type: color</li> <li>      family  Parent: <code>layout.legend.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.legend.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.legend.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.legend.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.legend.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.legend.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.legend.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.legend.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      groupclick  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"toggleitem\"</code>| <code>\"togglegroup\"</code>                    )                 Default: <code>\"togglegroup\"</code> <p>Determines the behavior on legend group item click. \"toggleitem\" toggles the visibility of the individual item clicked on the graph. \"togglegroup\" toggles the visibility of all items in the same legendgroup as the item clicked on the graph.</p> </li> <li>      grouptitlefont  Parent: <code>layout.legend</code> Type: object containing one or more of the keys listed below. <p>Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.</p> <ul> <li>      color  Parent: <code>layout.legend.grouptitlefont</code> Type: color</li> <li>      family  Parent: <code>layout.legend.grouptitlefont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.legend.grouptitlefont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.legend.grouptitlefont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.legend.grouptitlefont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.legend.grouptitlefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.legend.grouptitlefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.legend.grouptitlefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.legend.grouptitlefont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      indentation  Parent: <code>layout.legend</code> Type: number greater than or equal to -15 <p>Sets the indentation (in px) of the legend entries.</p> </li> <li>      itemclick  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"toggle\"</code>| <code>\"toggleothers\"</code>| <code>false</code>                    )                 Default: <code>\"toggle\"</code> <p>Determines the behavior on legend item click. \"toggle\" toggles the visibility of the item clicked on the graph. \"toggleothers\" makes the clicked item the sole visible item on the graph. \"false\" disables legend item click interactions.</p> </li> <li>      itemdoubleclick  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"toggle\"</code>| <code>\"toggleothers\"</code>| <code>false</code>                    )                 Default: <code>\"toggleothers\"</code> <p>Determines the behavior on legend item double-click. \"toggle\" toggles the visibility of the item clicked on the graph. \"toggleothers\" makes the clicked item the sole visible item on the graph. \"false\" disables legend item double-click interactions.</p> </li> <li>      itemsizing  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"trace\"</code>| <code>\"constant\"</code>                    )                 Default: <code>\"trace\"</code> <p>Determines if the legend items symbols scale with their corresponding \"trace\" attributes or remain \"constant\" independent of the symbol size on the graph.</p> </li> <li>      itemwidth  Parent: <code>layout.legend</code> Type: number greater than or equal to 30                 Default: <code>30</code> <p>Sets the width (in px) of the legend item symbols (the part other than the title.text).</p> </li> <li>      maxheight  Parent: <code>layout.legend</code> Type: number<p>Sets the max height (in px) of the legend, or max height ratio (reference height \" ratio) if less than one. Default value is: 0.5 for horizontal legends; 1 for vertical legends. The minimum allowed height is 30px. For a ratio of 0.5, the legend will take up to 50% of the reference height before displaying a scrollbar. The reference height is the full layout height except for vertically oriented legends with a `yref` of `\"paper\"`, where the reference height is the plot height.</p> </li> <li>      orientation  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the legend.</p> </li> <li>      title  Parent: <code>layout.legend</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>layout.legend.title</code> Type: object containing one or more of the keys listed below. <p>Sets this legend's title font. Defaults to `legend.font` with its size increased about 20%.</p> <ul> <li>      color  Parent: <code>layout.legend.title.font</code> Type: color</li> <li>      family  Parent: <code>layout.legend.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.legend.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.legend.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.legend.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.legend.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.legend.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.legend.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.legend.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>layout.legend.title</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"left\"</code>| <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>                    ) <p>Determines the location of legend's title with respect to the legend items. Defaulted to \"top\" with `orientation` is \"h\". Defaulted to \"left\" with `orientation` is \"v\". The \"top left\" options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.</p> </li> <li>      text  Parent: <code>layout.legend.title</code> Type: string<p>Sets the title of the legend.</p> </li> </ul> </li> <li>      tracegroupgap  Parent: <code>layout.legend</code> Type: number                Default: <code>10</code> <p>Sets the amount of vertical space (in px) between legend groups.</p> </li> <li>      traceorder  Parent: <code>layout.legend</code> Type: flaglist string.                      Any combination of \"reversed\", \"grouped\" joined with a <code>\"+\"</code>                     OR \"normal\".                      Examples: <code>\"reversed\"</code>, <code>\"grouped\"</code>, <code>\"reversed+grouped\"</code>, <code>\"normal\"</code> <p>Determines the order at which the legend items are displayed. If \"normal\", the items are displayed top-to-bottom in the same order as the input data. If \"reversed\", the items are displayed in the opposite order as \"normal\". If \"grouped\", the items are displayed in groups (when a trace `legendgroup` is provided). if \"grouped+reversed\", the items are displayed in the opposite order as \"grouped\".</p> </li> <li>      uirevision  Parent: <code>layout.legend</code> Type: number or categorical coordinate string <p>Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.</p> </li> <li>      valign  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    )                 Default: <code>\"middle\"</code> <p>Sets the vertical alignment of the symbols with respect to their associated text.</p> </li> <li>      visible  Parent: <code>layout.legend</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this legend is visible.</p> </li> <li>      x  Parent: <code>layout.legend</code> Type: number<p>Sets the x position with respect to `xref` (in normalized coordinates) of the legend. When `xref` is \"paper\", defaults to \"1.02\" for vertical legends and defaults to \"0\" for horizontal legends. When `xref` is \"container\", defaults to \"1\" for vertical legends and defaults to \"0\" for horizontal legends. Must be between \"0\" and \"1\" if `xref` is \"container\". and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    )                 Default: <code>\"left\"</code> <p>Sets the legend's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the legend. Value \"auto\" anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.</p> </li> <li>      xref  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>layout.legend</code> Type: number<p>Sets the y position with respect to `yref` (in normalized coordinates) of the legend. When `yref` is \"paper\", defaults to \"1\" for vertical legends, defaults to \"-0.1\" for horizontal legends on graphs w/o range sliders and defaults to \"1.1\" for horizontal legends on graph with one or multiple range sliders. When `yref` is \"container\", defaults to \"1\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets the legend's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the legend. Value \"auto\" anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.</p> </li> <li>      yref  Parent: <code>layout.legend</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      map  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      bearing  Parent: <code>layout.map</code> Type: number<p>Sets the bearing angle of the map in degrees counter-clockwise from North (map.bearing).</p> </li> <li>      bounds  Parent: <code>layout.map</code> Type: object containing one or more of the keys listed below. <ul> <li>      east  Parent: <code>layout.map.bounds</code> Type: number<p>Sets the maximum longitude of the map (in degrees East) if `west`, `south` and `north` are declared.</p> </li> <li>      north  Parent: <code>layout.map.bounds</code> Type: number<p>Sets the maximum latitude of the map (in degrees North) if `east`, `west` and `south` are declared.</p> </li> <li>      south  Parent: <code>layout.map.bounds</code> Type: number<p>Sets the minimum latitude of the map (in degrees North) if `east`, `west` and `north` are declared.</p> </li> <li>      west  Parent: <code>layout.map.bounds</code> Type: number<p>Sets the minimum longitude of the map (in degrees East) if `east`, `south` and `north` are declared.</p> </li> </ul> </li> <li>      center  Parent: <code>layout.map</code> Type: object containing one or more of the keys listed below. <ul> <li>      lat  Parent: <code>layout.map.center</code> Type: number<p>Sets the latitude of the center of the map (in degrees North).</p> </li> <li>      lon  Parent: <code>layout.map.center</code> Type: number<p>Sets the longitude of the center of the map (in degrees East).</p> </li> </ul> </li> <li>      domain  Parent: <code>layout.map</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>layout.map.domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this map subplot .</p> </li> <li>      row  Parent: <code>layout.map.domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this map subplot .</p> </li> <li>      x  Parent: <code>layout.map.domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this map subplot (in plot fraction).</p> </li> <li>      y  Parent: <code>layout.map.domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this map subplot (in plot fraction).</p> </li> </ul> </li> <li>      layers  Parent: <code>layout.map</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      below  Parent: <code>layout.map.layers</code> Type: string<p>Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.</p> </li> <li>      circle  Parent: <code>layout.map.layers</code> Type: object containing one or more of the keys listed below. <ul> <li>      radius  Parent: <code>layout.map.layers.circle</code> Type: number                Default: <code>15</code> <p>Sets the circle radius (map.layer.paint.circle-radius). Has an effect only when `type` is set to \"circle\".</p> </li> </ul> </li> <li>      color  Parent: <code>layout.map.layers</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the primary layer color. If `type` is \"circle\", color corresponds to the circle color (map.layer.paint.circle-color) If `type` is \"line\", color corresponds to the line color (map.layer.paint.line-color) If `type` is \"fill\", color corresponds to the fill color (map.layer.paint.fill-color) If `type` is \"symbol\", color corresponds to the icon color (map.layer.paint.icon-color)</p> </li> <li>      coordinates  Parent: <code>layout.map.layers</code> Type: number or categorical coordinate string <p>Sets the coordinates array contains [longitude, latitude] pairs for the image corners listed in clockwise order: top left, top right, bottom right, bottom left. Only has an effect for \"image\" `sourcetype`.</p> </li> <li>      fill  Parent: <code>layout.map.layers</code> Type: object containing one or more of the keys listed below. <ul> <li>      outlinecolor  Parent: <code>layout.map.layers.fill</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the fill outline color (map.layer.paint.fill-outline-color). Has an effect only when `type` is set to \"fill\".</p> </li> </ul> </li> <li>      line  Parent: <code>layout.map.layers</code> Type: object containing one or more of the keys listed below. <ul> <li>      dash  Parent: <code>layout.map.layers.line</code> Type: data_array <p>Sets the length of dashes and gaps (map.layer.paint.line-dasharray). Has an effect only when `type` is set to \"line\".</p> </li> <li>      width  Parent: <code>layout.map.layers.line</code> Type: number                Default: <code>2</code> <p>Sets the line width (map.layer.paint.line-width). Has an effect only when `type` is set to \"line\".</p> </li> </ul> </li> <li>      maxzoom  Parent: <code>layout.map.layers</code> Type: number less than or equal to 24                 Default: <code>24</code> <p>Sets the maximum zoom level (map.layer.maxzoom). At zoom levels equal to or greater than the maxzoom, the layer will be hidden.</p> </li> <li>      minzoom  Parent: <code>layout.map.layers</code> Type: number less than or equal to 24 <p>Sets the minimum zoom level (map.layer.minzoom). At zoom levels less than the minzoom, the layer will be hidden.</p> </li> <li>      name  Parent: <code>layout.map.layers</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      opacity  Parent: <code>layout.map.layers</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the layer. If `type` is \"circle\", opacity corresponds to the circle opacity (map.layer.paint.circle-opacity) If `type` is \"line\", opacity corresponds to the line opacity (map.layer.paint.line-opacity) If `type` is \"fill\", opacity corresponds to the fill opacity (map.layer.paint.fill-opacity) If `type` is \"symbol\", opacity corresponds to the icon/text opacity (map.layer.paint.text-opacity)</p> </li> <li>      source  Parent: <code>layout.map.layers</code> Type: number or categorical coordinate string <p>Sets the source data for this layer (map.layer.source). When `sourcetype` is set to \"geojson\", `source` can be a URL to a GeoJSON or a GeoJSON object. When `sourcetype` is set to \"vector\" or \"raster\", `source` can be a URL or an array of tile URLs. When `sourcetype` is set to \"image\", `source` can be a URL to an image.</p> </li> <li>      sourceattribution  Parent: <code>layout.map.layers</code> Type: string<p>Sets the attribution for this source.</p> </li> <li>      sourcelayer  Parent: <code>layout.map.layers</code> Type: string<p>Specifies the layer to use from a vector tile source (map.layer.source-layer). Required for \"vector\" source type that supports multiple layers.</p> </li> <li>      sourcetype  Parent: <code>layout.map.layers</code> Type:                     enumerated                    , one of ( <code>\"geojson\"</code>| <code>\"vector\"</code>| <code>\"raster\"</code>| <code>\"image\"</code>                    )                 Default: <code>\"geojson\"</code> <p>Sets the source type for this layer, that is the type of the layer data.</p> </li> <li>      symbol  Parent: <code>layout.map.layers</code> Type: object containing one or more of the keys listed below. <ul> <li>      icon  Parent: <code>layout.map.layers.symbol</code> Type: string                Default: <code>\"marker\"</code> <p>Sets the symbol icon image (map.layer.layout.icon-image). Full list: https://www.mapbox.com/maki-icons/</p> </li> <li>      iconsize  Parent: <code>layout.map.layers.symbol</code> Type: number                Default: <code>10</code> <p>Sets the symbol icon size (map.layer.layout.icon-size). Has an effect only when `type` is set to \"symbol\".</p> </li> <li>      placement  Parent: <code>layout.map.layers.symbol</code> Type:                     enumerated                    , one of ( <code>\"point\"</code>| <code>\"line\"</code>| <code>\"line-center\"</code>                    )                 Default: <code>\"point\"</code> <p>Sets the symbol and/or text placement (map.layer.layout.symbol-placement). If `placement` is \"point\", the label is placed where the geometry is located If `placement` is \"line\", the label is placed along the line of the geometry If `placement` is \"line-center\", the label is placed on the center of the geometry</p> </li> <li>      text  Parent: <code>layout.map.layers.symbol</code> Type: string<p>Sets the symbol text (map.layer.layout.text-field).</p> </li> <li>      textfont  Parent: <code>layout.map.layers.symbol</code> Type: object containing one or more of the keys listed below. <p>Sets the icon text font (color=map.layer.paint.text-color, size=map.layer.layout.text-size). Has an effect only when `type` is set to \"symbol\".</p> <ul> <li>      color  Parent: <code>layout.map.layers.symbol.textfont</code> Type: color</li> <li>      family  Parent: <code>layout.map.layers.symbol.textfont</code> Type: string                Default: <code>\"Open Sans Regular, Arial Unicode MS Regular\"</code> <p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      size  Parent: <code>layout.map.layers.symbol.textfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.map.layers.symbol.textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      weight  Parent: <code>layout.map.layers.symbol.textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>layout.map.layers.symbol</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> </ul> </li> <li>      templateitemname  Parent: <code>layout.map.layers</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      type  Parent: <code>layout.map.layers</code> Type:                     enumerated                    , one of ( <code>\"circle\"</code>| <code>\"line\"</code>| <code>\"fill\"</code>| <code>\"symbol\"</code>| <code>\"raster\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the layer type, that is the how the layer data set in `source` will be rendered With `sourcetype` set to \"geojson\", the following values are allowed: \"circle\", \"line\", \"fill\" and \"symbol\". but note that \"line\" and \"fill\" are not compatible with Point GeoJSON geometries. With `sourcetype` set to \"vector\", the following values are allowed:  \"circle\", \"line\", \"fill\" and \"symbol\". With `sourcetype` set to \"raster\" or \"image\", only the \"raster\" value is allowed.</p> </li> <li>      visible  Parent: <code>layout.map.layers</code> Type: boolean                Default: <code>true</code> <p>Determines whether this layer is displayed</p> </li> </ul> </li> <li>      pitch  Parent: <code>layout.map</code> Type: number<p>Sets the pitch angle of the map (in degrees, where \"0\" means perpendicular to the surface of the map) (map.pitch).</p> </li> <li>      style  Parent: <code>layout.map</code> Type: number or categorical coordinate string                 Default: <code>basic</code> <p>Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.map.layers`.  These layers can be defined either explicitly as a Map Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes or by using a custom style URL  Map Style objects are of the form described in the MapLibre GL JS documentation available at https://maplibre.org/maplibre-style-spec/  The built-in plotly.js styles objects are: basic, carto-darkmatter, carto-darkmatter-nolabels, carto-positron, carto-positron-nolabels, carto-voyager, carto-voyager-nolabels, dark, light, open-street-map, outdoors, satellite, satellite-streets, streets, white-bg.</p> </li> <li>      uirevision  Parent: <code>layout.map</code> Type: number or categorical coordinate string <p>Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.</p> </li> <li>      zoom  Parent: <code>layout.map</code> Type: number                Default: <code>1</code> <p>Sets the zoom level of the map (map.zoom).</p> </li> </ul> </li> <li>      margin  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      autoexpand  Parent: <code>layout.margin</code> Type: boolean                Default: <code>true</code> <p>Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.</p> </li> <li>      b  Parent: <code>layout.margin</code> Type: number                Default: <code>80</code> <p>Sets the bottom margin (in px).</p> </li> <li>      l  Parent: <code>layout.margin</code> Type: number                Default: <code>80</code> <p>Sets the left margin (in px).</p> </li> <li>      pad  Parent: <code>layout.margin</code> Type: number<p>Sets the amount of padding (in px) between the plotting area and the axis lines</p> </li> <li>      r  Parent: <code>layout.margin</code> Type: number                Default: <code>80</code> <p>Sets the right margin (in px).</p> </li> <li>      t  Parent: <code>layout.margin</code> Type: number                Default: <code>100</code> <p>Sets the top margin (in px).</p> </li> </ul> </li> <li>      meta  Parent: <code>layout</code> Type: number or categorical coordinate string <p>Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.</p> </li> <li>      minreducedheight  Parent: <code>layout</code> Type: number greater than or equal to 2                 Default: <code>64</code> <p>Minimum height of the plot with margin.automargin applied (in px)</p> </li> <li>      minreducedwidth  Parent: <code>layout</code> Type: number greater than or equal to 2                 Default: <code>64</code> <p>Minimum width of the plot with margin.automargin applied (in px)</p> </li> <li>      modebar  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      activecolor  Parent: <code>layout.modebar</code> Type: color<p>Sets the color of the active or hovered on icons in the modebar.</p> </li> <li>      add  Parent: <code>layout.modebar</code> Type: string or array of strings<p>Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to `config.modeBarButtonsToAdd` option. This may include \"v1hovermode\", \"hoverclosest\", \"hovercompare\", \"togglehover\", \"togglespikelines\", \"drawline\", \"drawopenpath\", \"drawclosedpath\", \"drawcircle\", \"drawrect\", \"eraseshape\".</p> </li> <li>      bgcolor  Parent: <code>layout.modebar</code> Type: color<p>Sets the background color of the modebar.</p> </li> <li>      color  Parent: <code>layout.modebar</code> Type: color<p>Sets the color of the icons in the modebar.</p> </li> <li>      orientation  Parent: <code>layout.modebar</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    )                 Default: <code>\"h\"</code> <p>Sets the orientation of the modebar.</p> </li> <li>      remove  Parent: <code>layout.modebar</code> Type: string or array of strings<p>Determines which predefined modebar buttons to remove. Similar to `config.modeBarButtonsToRemove` option. This may include \"autoScale2d\", \"autoscale\", \"editInChartStudio\", \"editinchartstudio\", \"hoverCompareCartesian\", \"hovercompare\", \"lasso\", \"lasso2d\", \"orbitRotation\", \"orbitrotation\", \"pan\", \"pan2d\", \"pan3d\", \"reset\", \"resetCameraDefault3d\", \"resetCameraLastSave3d\", \"resetGeo\", \"resetSankeyGroup\", \"resetScale2d\", \"resetViewMap\", \"resetViewMapbox\", \"resetViews\", \"resetcameradefault\", \"resetcameralastsave\", \"resetsankeygroup\", \"resetscale\", \"resetview\", \"resetviews\", \"select\", \"select2d\", \"sendDataToCloud\", \"senddatatocloud\", \"tableRotation\", \"tablerotation\", \"toImage\", \"toggleHover\", \"toggleSpikelines\", \"togglehover\", \"togglespikelines\", \"toimage\", \"zoom\", \"zoom2d\", \"zoom3d\", \"zoomIn2d\", \"zoomInGeo\", \"zoomInMap\", \"zoomInMapbox\", \"zoomOut2d\", \"zoomOutGeo\", \"zoomOutMap\", \"zoomOutMapbox\", \"zoomin\", \"zoomout\".</p> </li> <li>      uirevision  Parent: <code>layout.modebar</code> Type: number or categorical coordinate string <p>Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`.</p> </li> </ul> </li> <li>      newselection  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>layout.newselection</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>layout.newselection.line</code> Type: color<p>Sets the line color. By default uses either dark grey or white to increase contrast with background color.</p> </li> <li>      dash  Parent: <code>layout.newselection.line</code> Type: string                Default: <code>\"dot\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>layout.newselection.line</code> Type: number greater than or equal to 1                 Default: <code>1</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      mode  Parent: <code>layout.newselection</code> Type:                     enumerated                    , one of ( <code>\"immediate\"</code>| <code>\"gradual\"</code>                    )                 Default: <code>\"immediate\"</code> <p>Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.</p> </li> </ul> </li> <li>      newshape  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      drawdirection  Parent: <code>layout.newshape</code> Type:                     enumerated                    , one of ( <code>\"ortho\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"diagonal\"</code>                    )                 Default: <code>\"diagonal\"</code> <p>When `dragmode` is set to \"drawrect\", \"drawline\" or \"drawcircle\" this limits the drag to be horizontal, vertical or diagonal. Using \"diagonal\" there is no limit e.g. in drawing lines in any direction. \"ortho\" limits the draw to be either horizontal or vertical. \"horizontal\" allows horizontal extend. \"vertical\" allows vertical extend.</p> </li> <li>      fillcolor  Parent: <code>layout.newshape</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.</p> </li> <li>      fillrule  Parent: <code>layout.newshape</code> Type:                     enumerated                    , one of ( <code>\"evenodd\"</code>| <code>\"nonzero\"</code>                    )                 Default: <code>\"evenodd\"</code> <p>Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule</p> </li> <li>      label  Parent: <code>layout.newshape</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>layout.newshape.label</code> Type: object containing one or more of the keys listed below. <p>Sets the new shape label text font.</p> <ul> <li>      color  Parent: <code>layout.newshape.label.font</code> Type: color</li> <li>      family  Parent: <code>layout.newshape.label.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.newshape.label.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.newshape.label.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.newshape.label.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.newshape.label.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.newshape.label.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.newshape.label.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.newshape.label.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      padding  Parent: <code>layout.newshape.label</code> Type: number                Default: <code>3</code> <p>Sets padding (in px) between edge of label and edge of new shape.</p> </li> <li>      text  Parent: <code>layout.newshape.label</code> Type: string<p>Sets the text to display with the new shape. It is also used for legend item if `name` is not provided.</p> </li> <li>      textangle  Parent: <code>layout.newshape.label</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle \"auto\" is the same angle as the line. For all other shapes, angle \"auto\" is horizontal.</p> </li> <li>      textposition  Parent: <code>layout.newshape.label</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>| <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    ) <p>Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are \"top left\", \"top center\", \"top right\", \"middle left\", \"middle center\", \"middle right\", \"bottom left\", \"bottom center\", and \"bottom right\". Supported values for lines are \"start\", \"middle\", and \"end\". Default: \"middle center\" for rectangles, circles, and paths; \"middle\" for lines.</p> </li> <li>      texttemplate  Parent: <code>layout.newshape.label</code> Type: string<p>Template string used for rendering the new shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example \"x0: %{x0}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{x0:$.2f}\". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{x0|%m %b %Y}\". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example \"Length in cm: %{x0\"2.54}\", \"%{slope\"60:.1f} meters per second.\" For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.</p> </li> <li>      xanchor  Parent: <code>layout.newshape.label</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the \"left\", \"center\" or \"right\" of the label text. For example, if `textposition` is set to \"top right\" and `xanchor` to \"right\" then the right-most portion of the label text lines up with the right-most edge of the new shape.</p> </li> <li>      yanchor  Parent: <code>layout.newshape.label</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets the label's vertical position anchor This anchor binds the specified `textposition` to the \"top\", \"middle\" or \"bottom\" of the label text. For example, if `textposition` is set to \"top right\" and `yanchor` to \"top\" then the top-most portion of the label text lines up with the top-most edge of the new shape.</p> </li> </ul> </li> <li>      layer  Parent: <code>layout.newshape</code> Type:                     enumerated                    , one of ( <code>\"below\"</code>| <code>\"above\"</code>| <code>\"between\"</code>                    )                 Default: <code>\"above\"</code> <p>Specifies whether new shapes are drawn below gridlines (\"below\"), between gridlines and traces (\"between\") or above traces (\"above\").</p> </li> <li>      legend  Parent: <code>layout.newshape</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show new shape in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>layout.newshape</code> Type: string<p>Sets the legend group for new shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>layout.newshape</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>layout.newshape.legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.newshape.legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>layout.newshape.legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>layout.newshape</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for new shape. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.</p> </li> <li>      legendwidth  Parent: <code>layout.newshape</code> Type: number<p>Sets the width (in px or fraction) of the legend for new shape.</p> </li> <li>      line  Parent: <code>layout.newshape</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>layout.newshape.line</code> Type: color<p>Sets the line color. By default uses either dark grey or white to increase contrast with background color.</p> </li> <li>      dash  Parent: <code>layout.newshape.line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>layout.newshape.line</code> Type: number                Default: <code>4</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      name  Parent: <code>layout.newshape</code> Type: string<p>Sets new shape name. The name appears as the legend item.</p> </li> <li>      opacity  Parent: <code>layout.newshape</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of new shapes.</p> </li> <li>      showlegend  Parent: <code>layout.newshape</code> Type: boolean<p>Determines whether or not new shape is shown in the legend.</p> </li> <li>      visible  Parent: <code>layout.newshape</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not new shape is visible. If \"legendonly\", the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul> </li> <li>      paper_bgcolor  Parent: <code>layout</code> Type: color                Default: <code>\"#fff\"</code> <p>Sets the background color of the paper where the graph is drawn.</p> </li> <li>      plot_bgcolor  Parent: <code>layout</code> Type: color                Default: <code>\"#fff\"</code> <p>Sets the background color of the plotting area in-between x and y axes.</p> </li> <li>      selectdirection  Parent: <code>layout</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>| <code>\"d\"</code>| <code>\"any\"</code>                    )                 Default: <code>\"any\"</code> <p>When `dragmode` is set to \"select\", this limits the selection of the drag to horizontal, vertical or diagonal. \"h\" only allows horizontal selection, \"v\" only vertical, \"d\" only diagonal and \"any\" sets no limit.</p> </li> <li>      selectionrevision  Parent: <code>layout</code> Type: number or categorical coordinate string <p>Controls persistence of user-driven changes in selected points from all traces.</p> </li> <li>      selections  Parent: <code>layout</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      line  Parent: <code>layout.selections</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>layout.selections.line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>layout.selections.line</code> Type: string                Default: <code>\"dot\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>layout.selections.line</code> Type: number greater than or equal to 1                 Default: <code>1</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      name  Parent: <code>layout.selections</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      opacity  Parent: <code>layout.selections</code> Type: number less than or equal to 1                 Default: <code>0.7</code> <p>Sets the opacity of the selection.</p> </li> <li>      path  Parent: <code>layout.selections</code> Type: string<p>For `type` \"path\" - a valid SVG path similar to `shapes.path` in data coordinates. Allowed segments are: M, L and Z.</p> </li> <li>      templateitemname  Parent: <code>layout.selections</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      type  Parent: <code>layout.selections</code> Type:                     enumerated                    , one of ( <code>\"rect\"</code>| <code>\"path\"</code>                    ) <p>Specifies the selection type to be drawn. If \"rect\", a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`) and (`x0`,`y1`). If \"path\", draw a custom SVG path using `path`.</p> </li> <li>      x0  Parent: <code>layout.selections</code> Type: number or categorical coordinate string <p>Sets the selection's starting x position.</p> </li> <li>      x1  Parent: <code>layout.selections</code> Type: number or categorical coordinate string <p>Sets the selection's end x position.</p> </li> <li>      xref  Parent: <code>layout.selections</code> Type:                     enumerated                    , one of ( <code>\"paper\"</code>| <code>\"/^x([2-9]|[1-9][0-9]+)?( domain)?$/\"</code>                    ) <p>Sets the selection's x coordinate axis. If set to a x axis id (e.g. \"x\" or \"x2\"), the `x` position refers to a x coordinate. If set to \"paper\", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the left (right). If set to a x axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., \"x2 domain\" refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.</p> </li> <li>      y0  Parent: <code>layout.selections</code> Type: number or categorical coordinate string <p>Sets the selection's starting y position.</p> </li> <li>      y1  Parent: <code>layout.selections</code> Type: number or categorical coordinate string <p>Sets the selection's end y position.</p> </li> <li>      yref  Parent: <code>layout.selections</code> Type:                     enumerated                    , one of ( <code>\"paper\"</code>| <code>\"/^y([2-9]|[1-9][0-9]+)?( domain)?$/\"</code>                    ) <p>Sets the selection's x coordinate axis. If set to a y axis id (e.g. \"y\" or \"y2\"), the `y` position refers to a y coordinate. If set to \"paper\", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where \"0\" (\"1\") corresponds to the bottom (top). If set to a y axis ID followed by \"domain\" (separated by a space), the position behaves like for \"paper\", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., \"y2 domain\" refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.</p> </li> </ul> </li> <li>      separators  Parent: <code>layout</code> Type: string<p>Sets the decimal and thousand separators. For example, \". \" puts a '.' before decimals and a space between thousands. In English locales, dflt is \".,\" but other locales may alter this default.</p> </li> <li>      showlegend  Parent: <code>layout</code> Type: boolean<p>Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.</p> </li> <li>      spikedistance  Parent: <code>layout</code> Type: integer greater than or equal to -1                 Default: <code>-1</code> <p>Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.</p> </li> <li>      template  Parent: <code>layout</code> Type: number or categorical coordinate string <p>Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace.  Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.</p> </li> <li>      title  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      automargin  Parent: <code>layout.title</code> Type: boolean<p>Determines whether the title can automatically push the figure margins. If `yref='paper'` then the margin will expand to ensure that the title doesn\u2019t overlap with the edges of the container. If `yref='container'` then the margins will ensure that the title doesn\u2019t overlap with the plot area, tick labels, and axis titles. If `automargin=true` and the margins need to be expanded, then y will be set to a default 1 and yanchor will be set to an appropriate default to ensure that minimal margin space is needed. Note that when `yref='paper'`, only 1 or 0 are allowed y values. Invalid values will be reset to the default 1.</p> </li> <li>      font  Parent: <code>layout.title</code> Type: object containing one or more of the keys listed below. <p>Sets the title font.</p> <ul> <li>      color  Parent: <code>layout.title.font</code> Type: color</li> <li>      family  Parent: <code>layout.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      pad  Parent: <code>layout.title</code> Type: object containing one or more of the keys listed below. <p>Sets the padding of the title. Each padding value only applies when the corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left padding to take effect, `xanchor` must be set to \"left\". The same rule applies if `xanchor`/`yanchor` is determined automatically. Padding is muted if the respective anchor value is \"middle\"/\"center\".</p> <ul> <li>      b  Parent: <code>layout.title.pad</code> Type: number<p>The amount of padding (in px) along the bottom of the component.</p> </li> <li>      l  Parent: <code>layout.title.pad</code> Type: number<p>The amount of padding (in px) on the left side of the component.</p> </li> <li>      r  Parent: <code>layout.title.pad</code> Type: number<p>The amount of padding (in px) on the right side of the component.</p> </li> <li>      t  Parent: <code>layout.title.pad</code> Type: number<p>The amount of padding (in px) along the top of the component.</p> </li> </ul> </li> <li>      subtitle  Parent: <code>layout.title</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>layout.title.subtitle</code> Type: object containing one or more of the keys listed below. <p>Sets the subtitle font.</p> <ul> <li>      color  Parent: <code>layout.title.subtitle.font</code> Type: color</li> <li>      family  Parent: <code>layout.title.subtitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>layout.title.subtitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>layout.title.subtitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>layout.title.subtitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>layout.title.subtitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>layout.title.subtitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>layout.title.subtitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>layout.title.subtitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>layout.title.subtitle</code> Type: string<p>Sets the plot's subtitle.</p> </li> </ul> </li> <li>      text  Parent: <code>layout.title</code> Type: string<p>Sets the plot's title.</p> </li> <li>      x  Parent: <code>layout.title</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Sets the x position with respect to `xref` in normalized coordinates from \"0\" (left) to \"1\" (right).</p> </li> <li>      xanchor  Parent: <code>layout.title</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the title's horizontal alignment with respect to its x position. \"left\" means that the title starts at x, \"right\" means that the title ends at x and \"center\" means that the title's center is at x. \"auto\" divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.</p> </li> <li>      xref  Parent: <code>layout.title</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"container\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>layout.title</code> Type: number less than or equal to 1                 Default: <code>\"auto\"</code> <p>Sets the y position with respect to `yref` in normalized coordinates from \"0\" (bottom) to \"1\" (top). \"auto\" places the baseline of the title onto the vertical center of the top margin.</p> </li> <li>      yanchor  Parent: <code>layout.title</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the title's vertical alignment with respect to its y position. \"top\" means that the title's cap line is at y, \"bottom\" means that the title's baseline is at y and \"middle\" means that the title's midline is at y. \"auto\" divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.</p> </li> <li>      yref  Parent: <code>layout.title</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"container\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      transition  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <p>Sets transition options used during Plotly.react updates.</p> <ul> <li>      duration  Parent: <code>layout.transition</code> Type: number                Default: <code>500</code> <p>The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.</p> </li> <li>      easing  Parent: <code>layout.transition</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"quad\"</code>| <code>\"cubic\"</code>| <code>\"sin\"</code>| <code>\"exp\"</code>| <code>\"circle\"</code>| <code>\"elastic\"</code>| <code>\"back\"</code>| <code>\"bounce\"</code>| <code>\"linear-in\"</code>| <code>\"quad-in\"</code>| <code>\"cubic-in\"</code>| <code>\"sin-in\"</code>| <code>\"exp-in\"</code>| <code>\"circle-in\"</code>| <code>\"elastic-in\"</code>| <code>\"back-in\"</code>| <code>\"bounce-in\"</code>| <code>\"linear-out\"</code>| <code>\"quad-out\"</code>| <code>\"cubic-out\"</code>| <code>\"sin-out\"</code>| <code>\"exp-out\"</code>| <code>\"circle-out\"</code>| <code>\"elastic-out\"</code>| <code>\"back-out\"</code>| <code>\"bounce-out\"</code>| <code>\"linear-in-out\"</code>| <code>\"quad-in-out\"</code>| <code>\"cubic-in-out\"</code>| <code>\"sin-in-out\"</code>| <code>\"exp-in-out\"</code>| <code>\"circle-in-out\"</code>| <code>\"elastic-in-out\"</code>| <code>\"back-in-out\"</code>| <code>\"bounce-in-out\"</code>                    )                 Default: <code>\"cubic-in-out\"</code> <p>The easing function used for the transition</p> </li> <li>      ordering  Parent: <code>layout.transition</code> Type:                     enumerated                    , one of ( <code>\"layout first\"</code>| <code>\"traces first\"</code>                    )                 Default: <code>\"layout first\"</code> <p>Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.</p> </li> </ul> </li> <li>      uirevision  Parent: <code>layout</code> Type: number or categorical coordinate string <p>Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision=\"time\"` and `yaxis.uirevision=\"cost\"`. Then if only the y data is changed, you can update `yaxis.uirevision=\"quantity\"` and the y axis range will reset but the x axis range will retain any user-driven zoom.</p> </li> <li>      uniformtext  Parent: <code>layout</code> Type: object containing one or more of the keys listed below. <ul> <li>      minsize  Parent: <code>layout.uniformtext</code> Type: number<p>Sets the minimum text size between traces of the same type.</p> </li> <li>      mode  Parent: <code>layout.uniformtext</code> Type:                     enumerated                    , one of ( <code>false</code>| <code>\"hide\"</code>| <code>\"show\"</code>                    ) <p>Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using \"hide\" option hides the text; and using \"show\" option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.</p> </li> </ul> </li> <li>      width  Parent: <code>layout</code> Type: number greater than or equal to 10                 Default: <code>700</code> <p>Sets the plot's width (in px).</p> </li> </ul>"},{"location":"reference/mesh3d/","title":"mesh3d","text":"A <code>mesh3d</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"mesh3d\"</code>   (i.e. <code>{\"type\": \"mesh3d\"}</code>) and any of the keys listed below.   Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm <ul> <li>      alphahull  Parent: <code>data[type=mesh3d]</code> Type: number                Default: <code>-1</code> <p>Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If \"-1\", Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If \"&gt;0\", the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If \"0\",  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.</p> </li> <li>      autocolorscale  Parent: <code>data[type=mesh3d]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=mesh3d]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=mesh3d]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=mesh3d]</code> Type: number<p>Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=mesh3d]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=mesh3d]</code> Type: color<p>Sets the color of the whole mesh</p> </li> <li>      coloraxis  Parent: <code>data[type=mesh3d]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=mesh3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=mesh3d].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=mesh3d].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=mesh3d].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=mesh3d].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=mesh3d].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=mesh3d].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=mesh3d].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=mesh3d].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=mesh3d].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=mesh3d].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=mesh3d].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=mesh3d].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=mesh3d].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=mesh3d].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=mesh3d].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=mesh3d].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=mesh3d].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=mesh3d].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=mesh3d].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=mesh3d].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=mesh3d].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=mesh3d].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=mesh3d].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=mesh3d].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=mesh3d].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=mesh3d].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=mesh3d].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=mesh3d].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=mesh3d].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=mesh3d].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=mesh3d].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=mesh3d].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=mesh3d].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=mesh3d].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=mesh3d].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=mesh3d]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      contour  Parent: <code>data[type=mesh3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=mesh3d].contour</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the contour lines.</p> </li> <li>      show  Parent: <code>data[type=mesh3d].contour</code> Type: boolean<p>Sets whether or not dynamic contours are shown on hover</p> </li> <li>      width  Parent: <code>data[type=mesh3d].contour</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the contour lines.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      delaunayaxis  Parent: <code>data[type=mesh3d]</code> Type:                     enumerated                    , one of ( <code>\"x\"</code>| <code>\"y\"</code>| <code>\"z\"</code>                    )                 Default: <code>\"z\"</code> <p>Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.</p> </li> <li>      facecolor  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Sets the color of each face Overrides \"color\" and \"vertexcolor\".</p> </li> <li>      flatshading  Parent: <code>data[type=mesh3d]</code> Type: boolean<p>Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</p> </li> <li>      hoverinfo  Parent: <code>data[type=mesh3d]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=mesh3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=mesh3d].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=mesh3d].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=mesh3d].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=mesh3d].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=mesh3d].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=mesh3d].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=mesh3d]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=mesh3d]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      i  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the \"first\" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.</p> </li> <li>      ids  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      intensity  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.</p> </li> <li>      intensitymode  Parent: <code>data[type=mesh3d]</code> Type:                     enumerated                    , one of ( <code>\"vertex\"</code>| <code>\"cell\"</code>                    )                 Default: <code>\"vertex\"</code> <p>Determines the source of `intensity` values.</p> </li> <li>      j  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the \"second\" vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.</p> </li> <li>      k  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the \"third\" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.</p> </li> <li>      legend  Parent: <code>data[type=mesh3d]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=mesh3d]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=mesh3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=mesh3d].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=mesh3d].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=mesh3d].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=mesh3d]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=mesh3d]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lighting  Parent: <code>data[type=mesh3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      ambient  Parent: <code>data[type=mesh3d].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Ambient light increases overall color visibility but can wash out the image.</p> </li> <li>      diffuse  Parent: <code>data[type=mesh3d].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Represents the extent that incident rays are reflected in a range of angles.</p> </li> <li>      facenormalsepsilon  Parent: <code>data[type=mesh3d].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-06</code> <p>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</p> </li> <li>      fresnel  Parent: <code>data[type=mesh3d].lighting</code> Type: number less than or equal to 5                 Default: <code>0.2</code> <p>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</p> </li> <li>      roughness  Parent: <code>data[type=mesh3d].lighting</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</p> </li> <li>      specular  Parent: <code>data[type=mesh3d].lighting</code> Type: number less than or equal to 2                 Default: <code>0.05</code> <p>Represents the level that incident rays are reflected in a single direction, causing shine.</p> </li> <li>      vertexnormalsepsilon  Parent: <code>data[type=mesh3d].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-12</code> <p>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</p> </li> </ul> </li> <li>      lightposition  Parent: <code>data[type=mesh3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=mesh3d].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the X coordinate for each vertex.</p> </li> <li>      y  Parent: <code>data[type=mesh3d].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the Y coordinate for each vertex.</p> </li> <li>      z  Parent: <code>data[type=mesh3d].lightposition</code> Type: number between or equal to -100000 and 100000 <p>Numeric vector, representing the Z coordinate for each vertex.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=mesh3d]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=mesh3d]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=mesh3d]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</p> </li> <li>      reversescale  Parent: <code>data[type=mesh3d]</code> Type: boolean<p>Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</p> </li> <li>      scene  Parent: <code>data[type=mesh3d]</code> Type: subplotid                 Default: <code>scene</code> <p>Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</p> </li> <li>      showlegend  Parent: <code>data[type=mesh3d]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=mesh3d]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      text  Parent: <code>data[type=mesh3d]</code> Type: string or array of strings<p>Sets the text elements associated with the vertices. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      type  Parent: <code>data[type=mesh3d]</code> Type: \"mesh3d\" </li> <li>      uid  Parent: <code>data[type=mesh3d]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=mesh3d]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      vertexcolor  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Sets the color of each vertex Overrides \"color\". While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.</p> </li> <li>      visible  Parent: <code>data[type=mesh3d]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</p> </li> <li>      xcalendar  Parent: <code>data[type=mesh3d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=mesh3d]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</p> </li> <li>      ycalendar  Parent: <code>data[type=mesh3d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=mesh3d]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=mesh3d]</code> Type: data_array <p>Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.</p> </li> <li>      zcalendar  Parent: <code>data[type=mesh3d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `z` date data.</p> </li> <li>      zhoverformat  Parent: <code>data[type=mesh3d]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/ohlc/","title":"ohlc","text":"A <code>ohlc</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"ohlc\"</code>   (i.e. <code>{\"type\": \"ohlc\"}</code>) and any of the keys listed below.   The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red. <ul> <li>      close  Parent: <code>data[type=ohlc]</code> Type: data_array <p>Sets the close values.</p> </li> <li>      customdata  Parent: <code>data[type=ohlc]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      decreasing  Parent: <code>data[type=ohlc]</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=ohlc].decreasing</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=ohlc].decreasing.line</code> Type: color                Default: <code>\"#FF4136\"</code> <p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=ohlc].decreasing.line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>data[type=ohlc].decreasing.line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> </ul> </li> <li>      high  Parent: <code>data[type=ohlc]</code> Type: data_array <p>Sets the high values.</p> </li> <li>      hoverinfo  Parent: <code>data[type=ohlc]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=ohlc]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=ohlc].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=ohlc].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=ohlc].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=ohlc].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=ohlc].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=ohlc].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> <li>      split  Parent: <code>data[type=ohlc].hoverlabel</code> Type: boolean<p>Show hover information (open, close, high, low) in separate labels.</p> </li> </ul> </li> <li>      hovertext  Parent: <code>data[type=ohlc]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=ohlc]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      increasing  Parent: <code>data[type=ohlc]</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=ohlc].increasing</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=ohlc].increasing.line</code> Type: color                Default: <code>\"#3D9970\"</code> <p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=ohlc].increasing.line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>data[type=ohlc].increasing.line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> </ul> </li> <li>      legend  Parent: <code>data[type=ohlc]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=ohlc]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=ohlc]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=ohlc].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=ohlc].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=ohlc].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=ohlc]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=ohlc]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=ohlc]</code> Type: object containing one or more of the keys listed below. <ul> <li>      dash  Parent: <code>data[type=ohlc].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\"). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.</p> </li> <li>      width  Parent: <code>data[type=ohlc].line</code> Type: number                Default: <code>2</code> <p>[object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.</p> </li> </ul> </li> <li>      low  Parent: <code>data[type=ohlc]</code> Type: data_array <p>Sets the low values.</p> </li> <li>      meta  Parent: <code>data[type=ohlc]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=ohlc]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=ohlc]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      open  Parent: <code>data[type=ohlc]</code> Type: data_array <p>Sets the open values.</p> </li> <li>      selectedpoints  Parent: <code>data[type=ohlc]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=ohlc]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=ohlc]</code> Type: string or array of strings<p>Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.</p> </li> <li>      tickwidth  Parent: <code>data[type=ohlc]</code> Type: number less than or equal to 0.5                 Default: <code>0.3</code> <p>Sets the width of the open/close tick marks relative to the \"x\" minimal interval.</p> </li> <li>      type  Parent: <code>data[type=ohlc]</code> Type: \"ohlc\" </li> <li>      uid  Parent: <code>data[type=ohlc]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=ohlc]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=ohlc]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=ohlc]</code> Type: data_array <p>Sets the x coordinates. If absent, linear coordinate will be generated.</p> </li> <li>      xaxis  Parent: <code>data[type=ohlc]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=ohlc]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=ohlc]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=ohlc]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=ohlc]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=ohlc]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      yaxis  Parent: <code>data[type=ohlc]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      yhoverformat  Parent: <code>data[type=ohlc]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      zorder  Parent: <code>data[type=ohlc]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/parcats/","title":"parcats","text":"A <code>parcats</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"parcats\"</code>   (i.e. <code>{\"type\": \"parcats\"}</code>) and any of the keys listed below.   Parallel categories diagram for multidimensional categorical data. <ul> <li>      arrangement  Parent: <code>data[type=parcats]</code> Type:                     enumerated                    , one of ( <code>\"perpendicular\"</code>| <code>\"freeform\"</code>| <code>\"fixed\"</code>                    )                 Default: <code>\"perpendicular\"</code> <p>Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.</p> </li> <li>      bundlecolors  Parent: <code>data[type=parcats]</code> Type: boolean                Default: <code>true</code> <p>Sort paths so that like colors are bundled together within each category.</p> </li> <li>      counts  Parent: <code>data[type=parcats]</code> Type: number or array of numbers                Default: <code>1</code> <p>The number of observations represented by each state. Defaults to 1 so that each state represents one observation</p> </li> <li>      dimensions  Parent: <code>data[type=parcats]</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      categoryarray  Parent: <code>data[type=parcats].dimensions</code> Type: data_array <p>Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to \"array\". Used with `categoryorder`.</p> </li> <li>      categoryorder  Parent: <code>data[type=parcats].dimensions</code> Type:                     enumerated                    , one of ( <code>\"trace\"</code>| <code>\"category ascending\"</code>| <code>\"category descending\"</code>| <code>\"array\"</code>                    )                 Default: <code>\"trace\"</code> <p>Specifies the ordering logic for the categories in the dimension. By default, plotly uses \"trace\", which specifies the order that is present in the data supplied. Set `categoryorder` to \"category ascending\" or \"category descending\" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to \"array\" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the \"trace\" mode. The unspecified categories will follow the categories in `categoryarray`.</p> </li> <li>      displayindex  Parent: <code>data[type=parcats].dimensions</code> Type: integer<p>The display index of dimension, from left to right, zero indexed, defaults to dimension index.</p> </li> <li>      label  Parent: <code>data[type=parcats].dimensions</code> Type: string<p>The shown name of the dimension.</p> </li> <li>      ticktext  Parent: <code>data[type=parcats].dimensions</code> Type: data_array <p>Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to \"array\". Should be an array the same length as `categoryarray` Used with `categoryorder`.</p> </li> <li>      values  Parent: <code>data[type=parcats].dimensions</code> Type: data_array <p>Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).</p> </li> <li>      visible  Parent: <code>data[type=parcats].dimensions</code> Type: boolean                Default: <code>true</code> <p>Shows the dimension when set to `true` (the default). Hides the dimension for `false`.</p> </li> </ul> </li> <li>      domain  Parent: <code>data[type=parcats]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=parcats].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this parcats trace .</p> </li> <li>      row  Parent: <code>data[type=parcats].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this parcats trace .</p> </li> <li>      x  Parent: <code>data[type=parcats].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this parcats trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=parcats].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this parcats trace (in plot fraction).</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=parcats]</code> Type: flaglist string.                      Any combination of \"count\", \"probability\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"count\"</code>, <code>\"probability\"</code>, <code>\"count+probability\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoveron  Parent: <code>data[type=parcats]</code> Type:                     enumerated                    , one of ( <code>\"category\"</code>| <code>\"color\"</code>| <code>\"dimension\"</code>                    )                 Default: <code>\"category\"</code> <p>Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.</p> </li> <li>      hovertemplate  Parent: <code>data[type=parcats]</code> Type: string<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  This value here applies when hovering over dimensions. Note that \"categorycount\", \"colorcount\" and \"bandcolorcount\" are only available when `hoveron` contains the \"color\" flag. Finally, the template string has access to variables `count`, `probability`, `category`, `categorycount`, `colorcount` and `bandcolorcount`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      labelfont  Parent: <code>data[type=parcats]</code> Type: object containing one or more of the keys listed below. <p>Sets the font for the `dimension` labels.</p> <ul> <li>      color  Parent: <code>data[type=parcats].labelfont</code> Type: color</li> <li>      family  Parent: <code>data[type=parcats].labelfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcats].labelfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcats].labelfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcats].labelfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcats].labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcats].labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcats].labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcats].labelfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      legendgrouptitle  Parent: <code>data[type=parcats]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=parcats].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcats].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=parcats].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendwidth  Parent: <code>data[type=parcats]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=parcats]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=parcats].line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=parcats].line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=parcats].line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=parcats].line</code> Type: number<p>Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=parcats].line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=parcats].line</code> Type: color or array of colors<p>Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=parcats].line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=parcats].line</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=parcats].line.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=parcats].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=parcats].line.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=parcats].line.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=parcats].line.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=parcats].line.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=parcats].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=parcats].line.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=parcats].line.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=parcats].line.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=parcats].line.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=parcats].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=parcats].line.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcats].line.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=parcats].line.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=parcats].line.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=parcats].line.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=parcats].line.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=parcats].line.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=parcats].line.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=parcats].line.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=parcats].line.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=parcats].line.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=parcats].line.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=parcats].line.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=parcats].line.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=parcats].line.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=parcats].line.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcats].line.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=parcats].line.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=parcats].line.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=parcats].line.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=parcats].line.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=parcats].line.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=parcats].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=parcats].line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      hovertemplate  Parent: <code>data[type=parcats].line</code> Type: string<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  This value here applies when hovering over lines.Finally, the template string has access to variables `count` and `probability`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      reversescale  Parent: <code>data[type=parcats].line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.</p> </li> <li>      shape  Parent: <code>data[type=parcats].line</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"hspline\"</code>                    )                 Default: <code>\"linear\"</code> <p>Sets the shape of the paths. If `linear`, paths are composed of straight lines. If `hspline`, paths are composed of horizontal curved splines</p> </li> <li>      showscale  Parent: <code>data[type=parcats].line</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=parcats]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=parcats]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      sortpaths  Parent: <code>data[type=parcats]</code> Type:                     enumerated                    , one of ( <code>\"forward\"</code>| <code>\"backward\"</code>                    )                 Default: <code>\"forward\"</code> <p>Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.</p> </li> <li>      tickfont  Parent: <code>data[type=parcats]</code> Type: object containing one or more of the keys listed below. <p>Sets the font for the `category` labels.</p> <ul> <li>      color  Parent: <code>data[type=parcats].tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=parcats].tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcats].tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcats].tickfont</code> Type: string                Default: <code>\"auto\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcats].tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcats].tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcats].tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcats].tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcats].tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=parcats]</code> Type: \"parcats\" </li> <li>      uid  Parent: <code>data[type=parcats]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=parcats]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=parcats]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/parcoords/","title":"parcoords","text":"A <code>parcoords</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"parcoords\"</code>   (i.e. <code>{\"type\": \"parcoords\"}</code>) and any of the keys listed below.   Parallel coordinates for multidimensional exploratory data analysis. The samples are specified in `dimensions`. The colors are set in `line.color`. <ul> <li>      customdata  Parent: <code>data[type=parcoords]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dimensions  Parent: <code>data[type=parcoords]</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      constraintrange  Parent: <code>data[type=parcoords].dimensions</code>  {inner}Type: {array} <p>The domain range to which the filter on the dimension is constrained. Must be an array of `[fromValue, toValue]` with `fromValue &lt;= toValue`, or if `multiselect` is not disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.</p> </li> <li>      label  Parent: <code>data[type=parcoords].dimensions</code> Type: string<p>The shown name of the dimension.</p> </li> <li>      multiselect  Parent: <code>data[type=parcoords].dimensions</code> Type: boolean                Default: <code>true</code> <p>Do we allow multiple selection ranges or just a single range?</p> </li> <li>      name  Parent: <code>data[type=parcoords].dimensions</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      range  Parent: <code>data[type=parcoords].dimensions</code>  {inner}Type: {array} <p>The domain range that represents the full, shown axis extent. Defaults to the `values` extent. Must be an array of `[fromValue, toValue]` with finite numbers as elements.</p> </li> <li>      templateitemname  Parent: <code>data[type=parcoords].dimensions</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      tickformat  Parent: <code>data[type=parcoords].dimensions</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      ticktext  Parent: <code>data[type=parcoords].dimensions</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=parcoords].dimensions</code> Type: data_array <p>Sets the values at which ticks on this axis appear.</p> </li> <li>      values  Parent: <code>data[type=parcoords].dimensions</code> Type: data_array <p>Dimension values. `values[n]` represents the value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated). Each value must be a finite number.</p> </li> <li>      visible  Parent: <code>data[type=parcoords].dimensions</code> Type: boolean                Default: <code>true</code> <p>Shows the dimension when set to `true` (the default). Hides the dimension for `false`.</p> </li> </ul> </li> <li>      domain  Parent: <code>data[type=parcoords]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=parcoords].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this parcoords trace .</p> </li> <li>      row  Parent: <code>data[type=parcoords].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this parcoords trace .</p> </li> <li>      x  Parent: <code>data[type=parcoords].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this parcoords trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=parcoords].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this parcoords trace (in plot fraction).</p> </li> </ul> </li> <li>      ids  Parent: <code>data[type=parcoords]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      labelangle  Parent: <code>data[type=parcoords]</code> Type: angle <p>Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with \"labelangle\" may be positioned better inside margins when `labelposition` is set to \"bottom\".</p> </li> <li>      labelfont  Parent: <code>data[type=parcoords]</code> Type: object containing one or more of the keys listed below. <p>Sets the font for the `dimension` labels.</p> <ul> <li>      color  Parent: <code>data[type=parcoords].labelfont</code> Type: color</li> <li>      family  Parent: <code>data[type=parcoords].labelfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcoords].labelfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcoords].labelfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcoords].labelfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcoords].labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcoords].labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcoords].labelfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcoords].labelfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      labelside  Parent: <code>data[type=parcoords]</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"bottom\"</code>                    )                 Default: <code>\"top\"</code> <p>Specifies the location of the `label`. \"top\" positions labels above, next to the title \"bottom\" positions labels below the graph Tilted labels with \"labelangle\" may be positioned better inside margins when `labelposition` is set to \"bottom\".</p> </li> <li>      legend  Parent: <code>data[type=parcoords]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=parcoords]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=parcoords].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcoords].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=parcoords].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=parcoords]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=parcoords]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=parcoords]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=parcoords].line</code> Type: boolean<p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=parcoords].line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=parcoords].line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=parcoords].line</code> Type: number<p>Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=parcoords].line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=parcoords].line</code> Type: color or array of colors<p>Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=parcoords].line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=parcoords].line</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=parcoords].line.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=parcoords].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=parcoords].line.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=parcoords].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=parcoords].line.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=parcoords].line.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=parcoords].line.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=parcoords].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=parcoords].line.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcoords].line.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=parcoords].line.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=parcoords].line.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=parcoords].line.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=parcoords].line.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=parcoords].line.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=parcoords].line.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=parcoords].line.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=parcoords].line.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=parcoords].line.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=parcoords].line.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=parcoords].line.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=parcoords].line.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=parcoords].line.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=parcoords].line.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcoords].line.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=parcoords].line.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=parcoords].line.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=parcoords].line.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=parcoords].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=parcoords].line</code> Type: colorscale                 Default: <code>[[[, 0, ,,  , ', #, 4, 4, 0, 1, 5, 4, ', ]], [[, 0, ., 0, 6, 2, 7, 4, 5, 0, 9, 8, 0, 3, 9, 2, 1, 5, 6, 9, ,,  , ', #, 4, 8, 1, 8, 6, a, ', ]], [[, 0, ., 1, 2, 5, 4, 9, 0, 1, 9, 6, 0, 7, 8, 4, 3, 1, 3, 7, ,,  , ', #, 4, 7, 2, d, 7, b, ', ]], [[, 0, ., 1, 8, 8, 2, 3, 5, 2, 9, 4, 1, 1, 7, 6, 4, 7, 0, 6, ,,  , ', #, 4, 2, 4, 0, 8, 6, ', ]], [[, 0, ., 2, 5, 0, 9, 8, 0, 3, 9, 2, 1, 5, 6, 8, 6, 2, 7, 4, ,,  , ', #, 3, b, 5, 2, 8, b, ', ]], [[, 0, ., 3, 1, 3, 7, 2, 5, 4, 9, 0, 1, 9, 6, 0, 7, 8, 4, ,,  , ', #, 3, 3, 6, 3, 8, d, ', ]], [[, 0, ., 3, 7, 6, 4, 7, 0, 5, 8, 8, 2, 3, 5, 2, 9, 4, 1, ,,  , ', #, 2, c, 7, 2, 8, e, ', ]], [[, 0, ., 4, 3, 9, 2, 1, 5, 6, 8, 6, 2, 7, 4, 5, 0, 9, 8, ,,  , ', #, 2, 6, 8, 2, 8, e, ', ]], [[, 0, ., 5, 0, 1, 9, 6, 0, 7, 8, 4, 3, 1, 3, 7, 2, 5, 5, ,,  , ', #, 2, 1, 9, 1, 8, c, ', ]], [[, 0, ., 5, 6, 4, 7, 0, 5, 8, 8, 2, 3, 5, 2, 9, 4, 1, 2, ,,  , ', #, 1, f, a, 0, 8, 8, ', ]], [[, 0, ., 6, 2, 7, 4, 5, 0, 9, 8, 0, 3, 9, 2, 1, 5, 6, 9, ,,  , ', #, 2, 8, a, e, 8, 0, ', ]], [[, 0, ., 6, 9, 0, 1, 9, 6, 0, 7, 8, 4, 3, 1, 3, 7, 2, 5, ,,  , ', #, 3, f, b, c, 7, 3, ', ]], [[, 0, ., 7, 5, 2, 9, 4, 1, 1, 7, 6, 4, 7, 0, 5, 8, 8, 2, ,,  , ', #, 5, e, c, 9, 6, 2, ', ]], [[, 0, ., 8, 1, 5, 6, 8, 6, 2, 7, 4, 5, 0, 9, 8, 0, 3, 9, ,,  , ', #, 8, 4, d, 4, 4, b, ', ]], [[, 0, ., 8, 7, 8, 4, 3, 1, 3, 7, 2, 5, 4, 9, 0, 1, 9, 6, ,,  , ', #, a, d, d, c, 3, 0, ', ]], [[, 0, ., 9, 4, 1, 1, 7, 6, 4, 7, 0, 5, 8, 8, 2, 3, 5, 3, ,,  , ', #, d, 8, e, 2, 1, 9, ', ]], [[, 1, ,,  , ', #, f, d, e, 7, 2, 5, ', ]]]</code> <p>Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=parcoords].line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=parcoords].line</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=parcoords]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=parcoords]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      rangefont  Parent: <code>data[type=parcoords]</code> Type: object containing one or more of the keys listed below. <p>Sets the font for the `dimension` range values.</p> <ul> <li>      color  Parent: <code>data[type=parcoords].rangefont</code> Type: color</li> <li>      family  Parent: <code>data[type=parcoords].rangefont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcoords].rangefont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcoords].rangefont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcoords].rangefont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcoords].rangefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcoords].rangefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcoords].rangefont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcoords].rangefont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickfont  Parent: <code>data[type=parcoords]</code> Type: object containing one or more of the keys listed below. <p>Sets the font for the `dimension` tick values.</p> <ul> <li>      color  Parent: <code>data[type=parcoords].tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=parcoords].tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=parcoords].tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=parcoords].tickfont</code> Type: string                Default: <code>\"auto\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=parcoords].tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=parcoords].tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=parcoords].tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=parcoords].tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=parcoords].tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=parcoords]</code> Type: \"parcoords\" </li> <li>      uid  Parent: <code>data[type=parcoords]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=parcoords]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=parcoords]</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=parcoords].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=parcoords].unselected.line</code> Type: color                Default: <code>\"#7f7f7f\"</code> <p>Sets the base color of unselected lines. in connection with `unselected.line.opacity`.</p> </li> <li>      opacity  Parent: <code>data[type=parcoords].unselected.line</code> Type: number less than or equal to 1                 Default: <code>\"auto\"</code> <p>Sets the opacity of unselected lines. The default \"auto\" decreases the opacity smoothly as the number of lines increases. Use \"1\" to achieve exact `unselected.line.color`.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=parcoords]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/pie/","title":"pie","text":"A <code>pie</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"pie\"</code>   (i.e. <code>{\"type\": \"pie\"}</code>) and any of the keys listed below.   A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors` <ul> <li>      automargin  Parent: <code>data[type=pie]</code> Type: boolean<p>Determines whether outside text labels can push the margins.</p> </li> <li>      customdata  Parent: <code>data[type=pie]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      direction  Parent: <code>data[type=pie]</code> Type:                     enumerated                    , one of ( <code>\"clockwise\"</code>| <code>\"counterclockwise\"</code>                    )                 Default: <code>\"counterclockwise\"</code> <p>Specifies the direction at which succeeding sectors follow one another.</p> </li> <li>      dlabel  Parent: <code>data[type=pie]</code> Type: number                Default: <code>1</code> <p>Sets the label step. See `label0` for more info.</p> </li> <li>      domain  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=pie].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this pie trace .</p> </li> <li>      row  Parent: <code>data[type=pie].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this pie trace .</p> </li> <li>      x  Parent: <code>data[type=pie].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this pie trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=pie].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this pie trace (in plot fraction).</p> </li> </ul> </li> <li>      hole  Parent: <code>data[type=pie]</code> Type: number less than or equal to 1 <p>Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.</p> </li> <li>      hoverinfo  Parent: <code>data[type=pie]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"percent\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=pie].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=pie].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=pie].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=pie].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=pie].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=pie].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=pie].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=pie].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=pie].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=pie].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=pie].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=pie].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=pie].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=pie].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=pie]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=pie]</code> Type: string or array of strings<p>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=pie]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextfont  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying inside the sector.</p> <ul> <li>      color  Parent: <code>data[type=pie].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=pie].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=pie].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=pie].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=pie].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=pie].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=pie].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=pie].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=pie].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      insidetextorientation  Parent: <code>data[type=pie]</code> Type:                     enumerated                    , one of ( <code>\"horizontal\"</code>| <code>\"radial\"</code>| <code>\"tangential\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Controls the orientation of the text inside chart sectors. When set to \"auto\", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The \"horizontal\" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The \"radial\" option orients text along the radius of the sector. The \"tangential\" option orients text perpendicular to the radius of the sector.</p> </li> <li>      label0  Parent: <code>data[type=pie]</code> Type: number<p>Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.</p> </li> <li>      labels  Parent: <code>data[type=pie]</code> Type: data_array <p>Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.</p> </li> <li>      legend  Parent: <code>data[type=pie]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=pie]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=pie].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=pie].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=pie].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=pie]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=pie]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <ul> <li>      colors  Parent: <code>data[type=pie].marker</code> Type: data_array <p>Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.</p> </li> <li>      line  Parent: <code>data[type=pie].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=pie].marker.line</code> Type: color or array of colors                Default: <code>\"#444\"</code> <p>Sets the color of the line enclosing each sector.</p> </li> <li>      width  Parent: <code>data[type=pie].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the line enclosing each sector.</p> </li> </ul> </li> <li>      pattern  Parent: <code>data[type=pie].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=pie].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=pie].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=pie].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=pie].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=pie].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=pie].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=pie].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=pie].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> </ul> </li> <li>      meta  Parent: <code>data[type=pie]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=pie]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=pie]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      outsidetextfont  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying outside the sector.</p> <ul> <li>      color  Parent: <code>data[type=pie].outsidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=pie].outsidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=pie].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=pie].outsidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=pie].outsidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=pie].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=pie].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=pie].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=pie].outsidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      pull  Parent: <code>data[type=pie]</code> Type: number or array of numbers less than or equal to 1 <p>Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.</p> </li> <li>      rotation  Parent: <code>data[type=pie]</code> Type: angle <p>Instead of the first slice starting at 12 o'clock, rotate to some other angle.</p> </li> <li>      scalegroup  Parent: <code>data[type=pie]</code> Type: string<p>If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.</p> </li> <li>      showlegend  Parent: <code>data[type=pie]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      sort  Parent: <code>data[type=pie]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the sectors are reordered from largest to smallest.</p> </li> <li>      text  Parent: <code>data[type=pie]</code> Type: data_array <p>Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo`.</p> <ul> <li>      color  Parent: <code>data[type=pie].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=pie].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=pie].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=pie].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=pie].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=pie].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=pie].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=pie].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=pie].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textinfo  Parent: <code>data[type=pie]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"percent\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"none\"</code> <p>Determines which trace information appear on the graph.</p> </li> <li>      textposition  Parent: <code>data[type=pie]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"auto\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"auto\"</code> <p>Specifies the location of the `textinfo`.</p> </li> <li>      texttemplate  Parent: <code>data[type=pie]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`.</p> </li> <li>      title  Parent: <code>data[type=pie]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=pie].title</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `title`.</p> <ul> <li>      color  Parent: <code>data[type=pie].title.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=pie].title.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=pie].title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=pie].title.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=pie].title.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=pie].title.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=pie].title.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=pie].title.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=pie].title.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      position  Parent: <code>data[type=pie].title</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle center\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    ) <p>Specifies the location of the `title`.</p> </li> <li>      text  Parent: <code>data[type=pie].title</code> Type: string<p>Sets the title of the chart. If it is empty, no title is displayed.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=pie]</code> Type: \"pie\" </li> <li>      uid  Parent: <code>data[type=pie]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=pie]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      values  Parent: <code>data[type=pie]</code> Type: data_array <p>Sets the values of the sectors. If omitted, we count occurrences of each label.</p> </li> <li>      visible  Parent: <code>data[type=pie]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/sankey/","title":"sankey","text":"A <code>sankey</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"sankey\"</code>   (i.e. <code>{\"type\": \"sankey\"}</code>) and any of the keys listed below.   Sankey plots for network flow data analysis. The nodes are specified in `nodes` and the links between sources and targets in `links`. The colors are set in `nodes[i].color` and `links[i].color`, otherwise defaults are used. <ul> <li>      arrangement  Parent: <code>data[type=sankey]</code> Type:                     enumerated                    , one of ( <code>\"snap\"</code>| <code>\"perpendicular\"</code>| <code>\"freeform\"</code>| <code>\"fixed\"</code>                    )                 Default: <code>\"snap\"</code> <p>If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.</p> </li> <li>      customdata  Parent: <code>data[type=sankey]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      domain  Parent: <code>data[type=sankey]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=sankey].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this sankey trace .</p> </li> <li>      row  Parent: <code>data[type=sankey].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this sankey trace .</p> </li> <li>      x  Parent: <code>data[type=sankey].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this sankey trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=sankey].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this sankey trace (in plot fraction).</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=sankey]</code> Type: flaglist string.                  Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired. Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo` for nodes and links respectively.</p> </li> <li>      hoverlabel  Parent: <code>data[type=sankey]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=sankey].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=sankey].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=sankey].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=sankey].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=sankey].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=sankey].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sankey].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sankey].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sankey].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sankey].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sankey].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sankey].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sankey].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=sankey].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      ids  Parent: <code>data[type=sankey]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=sankey]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=sankey]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=sankey].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sankey].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=sankey].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=sankey]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=sankey]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      link  Parent: <code>data[type=sankey]</code> Type: object containing one or more of the keys listed below. <p>The links of the Sankey plot.</p> <ul> <li>      arrowlen  Parent: <code>data[type=sankey].link</code> Type: number<p>Sets the length (in px) of the links arrow, if 0 no arrow will be drawn.</p> </li> <li>      color  Parent: <code>data[type=sankey].link</code> Type: color or array of colors<p>Sets the `link` color. It can be a single value, or an array for specifying color for each `link`. If `link.color` is omitted, then by default, a translucent grey link will be used.</p> </li> <li>      colorscales  Parent: <code>data[type=sankey].link</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      cmax  Parent: <code>data[type=sankey].link.colorscales</code> Type: number                Default: <code>1</code> <p>Sets the upper bound of the color domain.</p> </li> <li>      cmin  Parent: <code>data[type=sankey].link.colorscales</code> Type: number<p>Sets the lower bound of the color domain.</p> </li> <li>      colorscale  Parent: <code>data[type=sankey].link.colorscales</code> Type: colorscale                 Default: <code>[[[, 0, ,,  , ', w, h, i, t, e, ', ]], [[, 1, ,,  , ', b, l, a, c, k, ', ]]]</code> <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      label  Parent: <code>data[type=sankey].link.colorscales</code> Type: string<p>The label of the links to color based on their concentration within a flow.</p> </li> <li>      name  Parent: <code>data[type=sankey].link.colorscales</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=sankey].link.colorscales</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=sankey].link</code> Type: data_array <p>Assigns extra data to each link.</p> </li> <li>      hovercolor  Parent: <code>data[type=sankey].link</code> Type: color or array of colors<p>Sets the `link` hover color. It can be a single value, or an array for specifying hover colors for each `link`. If `link.hovercolor` is omitted, then by default, links will become slightly more opaque when hovered over.</p> </li> <li>      hoverinfo  Parent: <code>data[type=sankey].link</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"none\"</code>| <code>\"skip\"</code>                    )                 Default: <code>\"all\"</code> <p>Determines which trace information appear when hovering links. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=sankey].link</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=sankey].link.hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=sankey].link.hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=sankey].link.hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=sankey].link.hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sankey].link.hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=sankey].link.hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=sankey].link</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Variables `source` and `target` are node objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      label  Parent: <code>data[type=sankey].link</code> Type: data_array <p>The shown name of the link.</p> </li> <li>      line  Parent: <code>data[type=sankey].link</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=sankey].link.line</code> Type: color or array of colors                Default: <code>\"#444\"</code> <p>Sets the color of the `line` around each `link`.</p> </li> <li>      width  Parent: <code>data[type=sankey].link.line</code> Type: number or array of numbers<p>Sets the width (in px) of the `line` around each `link`.</p> </li> </ul> </li> <li>      source  Parent: <code>data[type=sankey].link</code> Type: data_array <p>An integer number `[0..nodes.length - 1]` that represents the source node.</p> </li> <li>      target  Parent: <code>data[type=sankey].link</code> Type: data_array <p>An integer number `[0..nodes.length - 1]` that represents the target node.</p> </li> <li>      value  Parent: <code>data[type=sankey].link</code> Type: data_array <p>A numeric value representing the flow volume value.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=sankey]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=sankey]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      node  Parent: <code>data[type=sankey]</code> Type: object containing one or more of the keys listed below. <p>The nodes of the Sankey plot.</p> <ul> <li>      align  Parent: <code>data[type=sankey].node</code> Type:                     enumerated                    , one of ( <code>\"justify\"</code>| <code>\"left\"</code>| <code>\"right\"</code>| <code>\"center\"</code>                    )                 Default: <code>\"justify\"</code> <p>Sets the alignment method used to position the nodes along the horizontal axis.</p> </li> <li>      color  Parent: <code>data[type=sankey].node</code> Type: color or array of colors<p>Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.</p> </li> <li>      customdata  Parent: <code>data[type=sankey].node</code> Type: data_array <p>Assigns extra data to each node.</p> </li> <li>      groups  Parent: <code>data[type=sankey].node</code>  {inner}Type: {array} <p>Groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.</p> </li> <li>      hoverinfo  Parent: <code>data[type=sankey].node</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"none\"</code>| <code>\"skip\"</code>                    )                 Default: <code>\"all\"</code> <p>Determines which trace information appear when hovering nodes. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=sankey].node</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=sankey].node.hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=sankey].node.hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=sankey].node.hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=sankey].node.hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sankey].node.hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=sankey].node.hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=sankey].node</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Variables `sourceLinks` and `targetLinks` are arrays of link objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      label  Parent: <code>data[type=sankey].node</code> Type: data_array <p>The shown name of the node.</p> </li> <li>      line  Parent: <code>data[type=sankey].node</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=sankey].node.line</code> Type: color or array of colors                Default: <code>\"#444\"</code> <p>Sets the color of the `line` around each `node`.</p> </li> <li>      width  Parent: <code>data[type=sankey].node.line</code> Type: number or array of numbers                Default: <code>0.5</code> <p>Sets the width (in px) of the `line` around each `node`.</p> </li> </ul> </li> <li>      pad  Parent: <code>data[type=sankey].node</code> Type: number                Default: <code>20</code> <p>Sets the padding (in px) between the `nodes`.</p> </li> <li>      thickness  Parent: <code>data[type=sankey].node</code> Type: number greater than or equal to 1                 Default: <code>20</code> <p>Sets the thickness (in px) of the `nodes`.</p> </li> <li>      x  Parent: <code>data[type=sankey].node</code> Type: data_array <p>The normalized horizontal position of the node.</p> </li> <li>      y  Parent: <code>data[type=sankey].node</code> Type: data_array <p>The normalized vertical position of the node.</p> </li> </ul> </li> <li>      orientation  Parent: <code>data[type=sankey]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    )                 Default: <code>\"h\"</code> <p>Sets the orientation of the Sankey diagram.</p> </li> <li>      selectedpoints  Parent: <code>data[type=sankey]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      textfont  Parent: <code>data[type=sankey]</code> Type: object containing one or more of the keys listed below. <p>Sets the font for node labels</p> <ul> <li>      color  Parent: <code>data[type=sankey].textfont</code> Type: color</li> <li>      family  Parent: <code>data[type=sankey].textfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sankey].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sankey].textfont</code> Type: string                Default: <code>\"auto\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sankey].textfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sankey].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sankey].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sankey].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sankey].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=sankey]</code> Type: \"sankey\" </li> <li>      uid  Parent: <code>data[type=sankey]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=sankey]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      valueformat  Parent: <code>data[type=sankey]</code> Type: string                Default: <code>\".3s\"</code> <p>Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> <li>      valuesuffix  Parent: <code>data[type=sankey]</code> Type: string<p>Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.</p> </li> <li>      visible  Parent: <code>data[type=sankey]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/scatter/","title":"scatter","text":"A <code>scatter</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scatter\"</code>   (i.e. <code>{\"type\": \"scatter\"}</code>) and any of the keys listed below.   The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts. The data visualized as scatter point or lines is set in `x` and `y`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. <ul> <li>      alignmentgroup  Parent: <code>data[type=scatter]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</p> </li> <li>      cliponaxis  Parent: <code>data[type=scatter]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      connectgaps  Parent: <code>data[type=scatter]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scatter]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=scatter]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      dy  Parent: <code>data[type=scatter]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      error_x  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=scatter].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=scatter].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=scatter].error_x</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      copy_ystyle  Parent: <code>data[type=scatter].error_x</code> Type: boolean</li> <li>      symmetric  Parent: <code>data[type=scatter].error_x</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=scatter].error_x</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=scatter].error_x</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=scatter].error_x</code> Type: integer</li> <li>      type  Parent: <code>data[type=scatter].error_x</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=scatter].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=scatter].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=scatter].error_x</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=scatter].error_x</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      error_y  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=scatter].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=scatter].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=scatter].error_y</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      symmetric  Parent: <code>data[type=scatter].error_y</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=scatter].error_y</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=scatter].error_y</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=scatter].error_y</code> Type: integer</li> <li>      type  Parent: <code>data[type=scatter].error_y</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=scatter].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=scatter].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=scatter].error_y</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=scatter].error_y</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      fill  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"tozeroy\"</code>| <code>\"tozerox\"</code>| <code>\"tonexty\"</code>| <code>\"tonextx\"</code>| <code>\"toself\"</code>| <code>\"tonext\"</code>                    ) <p>Sets the area to fill with a solid color. Defaults to \"none\" unless this trace is stacked, then it gets \"tonexty\" (\"tonextx\") if `orientation` is \"v\" (\"h\") Use with `fillcolor` if not \"none\". \"tozerox\" and \"tozeroy\" fill to x=0 and y=0 respectively. \"tonextx\" and \"tonexty\" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like \"tozerox\" and \"tozeroy\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</p> </li> <li>      fillcolor  Parent: <code>data[type=scatter]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available. If fillgradient is specified, fillcolor is ignored except for setting the background color of the hover label, if any.</p> </li> <li>      fillgradient  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <p>Sets a fill gradient. If not specified, the fillcolor is used instead.</p> <ul> <li>      colorscale  Parent: <code>data[type=scatter].fillgradient</code> Type: colorscale <p>Sets the fill gradient colors as a color scale. The color scale is interpreted as a gradient applied in the direction specified by \"orientation\", from the lowest to the highest value of the scatter plot along that axis, or from the center to the most distant point from it, if orientation is \"radial\".</p> </li> <li>      start  Parent: <code>data[type=scatter].fillgradient</code> Type: number<p>Sets the gradient start value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is \"horizontal\", the gradient will be horizontal and start from the x-position given by start. If omitted, the gradient starts at the lowest value of the trace along the respective axis. Ignored if orientation is \"radial\".</p> </li> <li>      stop  Parent: <code>data[type=scatter].fillgradient</code> Type: number<p>Sets the gradient end value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is \"horizontal\", the gradient will be horizontal and end at the x-position given by end. If omitted, the gradient ends at the highest value of the trace along the respective axis. Ignored if orientation is \"radial\".</p> </li> <li>      type  Parent: <code>data[type=scatter].fillgradient</code> Type:                     enumerated                    , one of ( <code>\"radial\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the type/orientation of the color gradient for the fill. Defaults to \"none\".</p> </li> </ul> </li> <li>      fillpattern  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=scatter].fillpattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=scatter].fillpattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=scatter].fillpattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=scatter].fillpattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=scatter].fillpattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=scatter].fillpattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=scatter].fillpattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=scatter].fillpattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> <li>      groupnorm  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"\"</code>| <code>\"fraction\"</code>| <code>\"percent\"</code>                    ) <p>Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is \"legendonly\" but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With \"fraction\", the value of each trace at each location is divided by the sum of all trace values at that location. \"percent\" is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scatter]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scatter].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scatter].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scatter].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scatter].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scatter].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatter].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scatter].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoveron  Parent: <code>data[type=scatter]</code> Type: flaglist string.                      Any combination of \"points\", \"fills\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"points\"</code>, <code>\"fills\"</code>, <code>\"points+fills\"</code>,   <p>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is \"toself\" or \"tonext\" and there are no markers or text, then the default is \"fills\", otherwise it is \"points\".</p> </li> <li>      hovertemplate  Parent: <code>data[type=scatter]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scatter]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scatter]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=scatter]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scatter]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatter].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scatter].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scatter]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scatter]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      backoff  Parent: <code>data[type=scatter].line</code> Type: number or array of numbers                Default: <code>\"auto\"</code> <p>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".</p> </li> <li>      color  Parent: <code>data[type=scatter].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scatter].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      shape  Parent: <code>data[type=scatter].line</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"spline\"</code>| <code>\"hv\"</code>| <code>\"vh\"</code>| <code>\"hvh\"</code>| <code>\"vhv\"</code>                    )                 Default: <code>\"linear\"</code> <p>Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</p> </li> <li>      simplify  Parent: <code>data[type=scatter].line</code> Type: boolean                Default: <code>true</code> <p>Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.</p> </li> <li>      smoothing  Parent: <code>data[type=scatter].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).</p> </li> <li>      width  Parent: <code>data[type=scatter].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scatter].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      angleref  Parent: <code>data[type=scatter].marker</code> Type:                     enumerated                    , one of ( <code>\"previous\"</code>| <code>\"up\"</code>                    )                 Default: <code>\"up\"</code> <p>Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scatter].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatter].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatter].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatter].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatter].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatter].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatter].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scatter].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scatter].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scatter].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scatter].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scatter].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scatter].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scatter].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scatter].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scatter].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scatter].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scatter].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scatter].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scatter].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scatter].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scatter].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scatter].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scatter].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scatter].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scatter].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scatter].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scatter].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scatter].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scatter].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatter].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scatter].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scatter].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scatter].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scatter].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scatter].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      gradient  Parent: <code>data[type=scatter].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatter].marker.gradient</code> Type: color or array of colors<p>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</p> </li> <li>      type  Parent: <code>data[type=scatter].marker.gradient</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"radial\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the type of gradient used to fill the markers</p> </li> </ul> </li> <li>      line  Parent: <code>data[type=scatter].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scatter].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatter].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatter].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatter].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatter].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatter].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatter].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scatter].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scatter].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scatter].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      maxdisplayed  Parent: <code>data[type=scatter].marker</code> Type: number<p>Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.</p> </li> <li>      opacity  Parent: <code>data[type=scatter].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scatter].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scatter].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scatter].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scatter].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scatter].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scatter].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      standoff  Parent: <code>data[type=scatter].marker</code> Type: number or array of numbers<p>Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</p> </li> <li>      symbol  Parent: <code>data[type=scatter].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scatter]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scatter]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      offsetgroup  Parent: <code>data[type=scatter]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</p> </li> <li>      opacity  Parent: <code>data[type=scatter]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      orientation  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    ) <p>Only relevant in the following cases: 1. when `scattermode` is set to \"group\". 2. when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is \"legendonly\" but not if it is `false`. Sets the stacking direction. With \"v\" (\"h\"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.</p> </li> <li>      selected  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatter].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatter].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scatter].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scatter].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatter].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatter].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scatter]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      stackgaps  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"infer zero\"</code>| <code>\"interpolate\"</code>                    )                 Default: <code>\"infer zero\"</code> <p>Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is \"legendonly\" but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With \"infer zero\" we insert a zero at these locations. With \"interpolate\" we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.</p> </li> <li>      stackgroup  Parent: <code>data[type=scatter]</code> Type: string<p>Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is \"h\"). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using \"tonexty\" (\"tonextx\") if `orientation` is \"h\" (\"v\") and sets the default `mode` to \"lines\" irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</p> </li> <li>      text  Parent: <code>data[type=scatter]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scatter].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatter].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scatter]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scatter]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. </p> </li> <li>      type  Parent: <code>data[type=scatter]</code> Type: \"scatter\" </li> <li>      uid  Parent: <code>data[type=scatter]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scatter]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatter].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatter].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scatter].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scatter].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatter].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatter].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=scatter]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      x0  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      xaxis  Parent: <code>data[type=scatter]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=scatter]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      y  Parent: <code>data[type=scatter]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      y0  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      yaxis  Parent: <code>data[type=scatter]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ycalendar  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=scatter]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=scatter]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=scatter]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> <li>      zorder  Parent: <code>data[type=scatter]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/scatter3d/","title":"scatter3d","text":"A <code>scatter3d</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scatter3d\"</code>   (i.e. <code>{\"type\": \"scatter3d\"}</code>) and any of the keys listed below.   The data visualized as scatter point or lines in 3D dimension is set in `x`, `y`, `z`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` Projections are achieved via `projection`. Surface fills are achieved via `surfaceaxis`. <ul> <li>      connectgaps  Parent: <code>data[type=scatter3d]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scatter3d]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      error_x  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=scatter3d].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=scatter3d].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=scatter3d].error_x</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      copy_zstyle  Parent: <code>data[type=scatter3d].error_x</code> Type: boolean</li> <li>      symmetric  Parent: <code>data[type=scatter3d].error_x</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=scatter3d].error_x</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=scatter3d].error_x</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=scatter3d].error_x</code> Type: integer</li> <li>      type  Parent: <code>data[type=scatter3d].error_x</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=scatter3d].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=scatter3d].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=scatter3d].error_x</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=scatter3d].error_x</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      error_y  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=scatter3d].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=scatter3d].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=scatter3d].error_y</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      copy_zstyle  Parent: <code>data[type=scatter3d].error_y</code> Type: boolean</li> <li>      symmetric  Parent: <code>data[type=scatter3d].error_y</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=scatter3d].error_y</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=scatter3d].error_y</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=scatter3d].error_y</code> Type: integer</li> <li>      type  Parent: <code>data[type=scatter3d].error_y</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=scatter3d].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=scatter3d].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=scatter3d].error_y</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=scatter3d].error_y</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      error_z  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=scatter3d].error_z</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=scatter3d].error_z</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=scatter3d].error_z</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      symmetric  Parent: <code>data[type=scatter3d].error_z</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=scatter3d].error_z</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=scatter3d].error_z</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=scatter3d].error_z</code> Type: integer</li> <li>      type  Parent: <code>data[type=scatter3d].error_z</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=scatter3d].error_z</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=scatter3d].error_z</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=scatter3d].error_z</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=scatter3d].error_z</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=scatter3d]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scatter3d].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scatter3d].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scatter3d].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scatter3d].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter3d].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scatter3d].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=scatter3d]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scatter3d]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scatter3d]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=scatter3d]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scatter3d]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatter3d].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter3d].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scatter3d].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scatter3d]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scatter3d]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scatter3d].line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatter3d].line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatter3d].line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatter3d].line</code> Type: number<p>Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatter3d].line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatter3d].line</code> Type: color or array of colors<p>Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatter3d].line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scatter3d].line</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter3d].line.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scatter3d].line.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scatter3d].line.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scatter3d].line.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scatter3d].line.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scatter3d].line.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatter3d].line.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter3d].line.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scatter3d].line.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scatter3d].line.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scatter3d].line.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scatter3d].line.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scatter3d].line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      dash  Parent: <code>data[type=scatter3d].line</code> Type:                     enumerated                    , one of ( <code>\"dash\"</code>| <code>\"dashdot\"</code>| <code>\"dot\"</code>| <code>\"longdash\"</code>| <code>\"longdashdot\"</code>| <code>\"solid\"</code>                    )                 Default: <code>\"solid\"</code> <p>Sets the dash style of the lines.</p> </li> <li>      reversescale  Parent: <code>data[type=scatter3d].line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scatter3d].line</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.</p> </li> <li>      width  Parent: <code>data[type=scatter3d].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scatter3d].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatter3d].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatter3d].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatter3d].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatter3d].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatter3d].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatter3d].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scatter3d].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter3d].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scatter3d].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scatter3d].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scatter3d].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scatter3d].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scatter3d].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatter3d].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter3d].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scatter3d].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scatter3d].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scatter3d].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scatter3d].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=scatter3d].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scatter3d].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatter3d].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatter3d].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatter3d].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatter3d].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatter3d].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatter3d].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scatter3d].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scatter3d].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scatter3d].marker.line</code> Type: number<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=scatter3d].marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set \"marker.color\" to an rgba color and use its alpha channel.</p> </li> <li>      reversescale  Parent: <code>data[type=scatter3d].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scatter3d].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].marker</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scatter3d].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scatter3d].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scatter3d].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      symbol  Parent: <code>data[type=scatter3d].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"circle\"</code>| <code>\"circle-open\"</code>| <code>\"cross\"</code>| <code>\"diamond\"</code>| <code>\"diamond-open\"</code>| <code>\"square\"</code>| <code>\"square-open\"</code>| <code>\"x\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scatter3d]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scatter3d]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> Default: <code>\"lines+markers\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scatter3d]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scatter3d]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      projection  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=scatter3d].projection</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=scatter3d].projection.x</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the projection color.</p> </li> <li>      scale  Parent: <code>data[type=scatter3d].projection.x</code> Type: number less than or equal to 10                 Default: <code>0.6666666666666666</code> <p>Sets the scale factor determining the size of the projection marker points.</p> </li> <li>      show  Parent: <code>data[type=scatter3d].projection.x</code> Type: boolean<p>Sets whether or not projections are shown along the x axis.</p> </li> </ul> </li> <li>      y  Parent: <code>data[type=scatter3d].projection</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=scatter3d].projection.y</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the projection color.</p> </li> <li>      scale  Parent: <code>data[type=scatter3d].projection.y</code> Type: number less than or equal to 10                 Default: <code>0.6666666666666666</code> <p>Sets the scale factor determining the size of the projection marker points.</p> </li> <li>      show  Parent: <code>data[type=scatter3d].projection.y</code> Type: boolean<p>Sets whether or not projections are shown along the y axis.</p> </li> </ul> </li> <li>      z  Parent: <code>data[type=scatter3d].projection</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=scatter3d].projection.z</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the projection color.</p> </li> <li>      scale  Parent: <code>data[type=scatter3d].projection.z</code> Type: number less than or equal to 10                 Default: <code>0.6666666666666666</code> <p>Sets the scale factor determining the size of the projection marker points.</p> </li> <li>      show  Parent: <code>data[type=scatter3d].projection.z</code> Type: boolean<p>Sets whether or not projections are shown along the z axis.</p> </li> </ul> </li> </ul> </li> <li>      scene  Parent: <code>data[type=scatter3d]</code> Type: subplotid                 Default: <code>scene</code> <p>Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</p> </li> <li>      showlegend  Parent: <code>data[type=scatter3d]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      surfaceaxis  Parent: <code>data[type=scatter3d]</code> Type:                     enumerated                    , one of ( <code>\"-1\"</code>| <code>\"0\"</code>| <code>\"1\"</code>| <code>\"2\"</code>                    )                 Default: <code>\"-1\"</code> <p>If \"-1\", the scatter points are not fill with a surface If \"0\", \"1\", \"2\", the scatter points are filled with a Delaunay surface about the x, y, z respectively.</p> </li> <li>      surfacecolor  Parent: <code>data[type=scatter3d]</code> Type: color<p>Sets the surface fill color.</p> </li> <li>      text  Parent: <code>data[type=scatter3d]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scatter3d]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scatter3d].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatter3d].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      size  Parent: <code>data[type=scatter3d].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatter3d].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      variant  Parent: <code>data[type=scatter3d].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatter3d].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scatter3d]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"top center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scatter3d]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. </p> </li> <li>      type  Parent: <code>data[type=scatter3d]</code> Type: \"scatter3d\" </li> <li>      uid  Parent: <code>data[type=scatter3d]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scatter3d]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=scatter3d]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=scatter3d]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      xcalendar  Parent: <code>data[type=scatter3d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=scatter3d]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=scatter3d]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      ycalendar  Parent: <code>data[type=scatter3d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=scatter3d]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=scatter3d]</code> Type: data_array <p>Sets the z coordinates.</p> </li> <li>      zcalendar  Parent: <code>data[type=scatter3d]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `z` date data.</p> </li> <li>      zhoverformat  Parent: <code>data[type=scatter3d]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/scattercarpet/","title":"scattercarpet","text":"A <code>scattercarpet</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scattercarpet\"</code>   (i.e. <code>{\"type\": \"scattercarpet\"}</code>) and any of the keys listed below.   Plots a scatter trace on either the first carpet axis or the carpet axis with a matching `carpet` attribute. <ul> <li>      a  Parent: <code>data[type=scattercarpet]</code> Type: data_array <p>Sets the a-axis coordinates.</p> </li> <li>      b  Parent: <code>data[type=scattercarpet]</code> Type: data_array <p>Sets the b-axis coordinates.</p> </li> <li>      carpet  Parent: <code>data[type=scattercarpet]</code> Type: string<p>An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie</p> </li> <li>      connectgaps  Parent: <code>data[type=scattercarpet]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scattercarpet]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      fill  Parent: <code>data[type=scattercarpet]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"toself\"</code>| <code>\"tonext\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scatterternary has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.</p> </li> <li>      fillcolor  Parent: <code>data[type=scattercarpet]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scattercarpet]</code> Type: flaglist string.                      Any combination of \"a\", \"b\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"a\"</code>, <code>\"b\"</code>, <code>\"a+b\"</code>, <code>\"a+b+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scattercarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scattercarpet].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scattercarpet].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scattercarpet].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scattercarpet].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattercarpet].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scattercarpet].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoveron  Parent: <code>data[type=scattercarpet]</code> Type: flaglist string.                      Any combination of \"points\", \"fills\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"points\"</code>, <code>\"fills\"</code>, <code>\"points+fills\"</code>,   <p>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is \"toself\" or \"tonext\" and there are no markers or text, then the default is \"fills\", otherwise it is \"points\".</p> </li> <li>      hovertemplate  Parent: <code>data[type=scattercarpet]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scattercarpet]</code> Type: string or array of strings<p>Sets hover text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scattercarpet]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=scattercarpet]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scattercarpet]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scattercarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattercarpet].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattercarpet].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scattercarpet].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scattercarpet]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scattercarpet]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scattercarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      backoff  Parent: <code>data[type=scattercarpet].line</code> Type: number or array of numbers                Default: <code>\"auto\"</code> <p>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".</p> </li> <li>      color  Parent: <code>data[type=scattercarpet].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scattercarpet].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      shape  Parent: <code>data[type=scattercarpet].line</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"spline\"</code>                    )                 Default: <code>\"linear\"</code> <p>Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</p> </li> <li>      smoothing  Parent: <code>data[type=scattercarpet].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).</p> </li> <li>      width  Parent: <code>data[type=scattercarpet].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scattercarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scattercarpet].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      angleref  Parent: <code>data[type=scattercarpet].marker</code> Type:                     enumerated                    , one of ( <code>\"previous\"</code>| <code>\"up\"</code>                    )                 Default: <code>\"up\"</code> <p>Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scattercarpet].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattercarpet].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattercarpet].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattercarpet].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattercarpet].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattercarpet].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattercarpet].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scattercarpet].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattercarpet].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scattercarpet].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scattercarpet].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scattercarpet].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scattercarpet].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scattercarpet].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattercarpet].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattercarpet].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scattercarpet].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scattercarpet].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scattercarpet].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scattercarpet].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      gradient  Parent: <code>data[type=scattercarpet].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattercarpet].marker.gradient</code> Type: color or array of colors<p>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</p> </li> <li>      type  Parent: <code>data[type=scattercarpet].marker.gradient</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"radial\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the type of gradient used to fill the markers</p> </li> </ul> </li> <li>      line  Parent: <code>data[type=scattercarpet].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scattercarpet].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattercarpet].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattercarpet].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattercarpet].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattercarpet].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattercarpet].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattercarpet].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scattercarpet].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scattercarpet].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scattercarpet].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      maxdisplayed  Parent: <code>data[type=scattercarpet].marker</code> Type: number<p>Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.</p> </li> <li>      opacity  Parent: <code>data[type=scattercarpet].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scattercarpet].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scattercarpet].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scattercarpet].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scattercarpet].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scattercarpet].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      standoff  Parent: <code>data[type=scattercarpet].marker</code> Type: number or array of numbers<p>Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</p> </li> <li>      symbol  Parent: <code>data[type=scattercarpet].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scattercarpet]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scattercarpet]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> Default: <code>\"markers\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scattercarpet]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scattercarpet]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      selected  Parent: <code>data[type=scattercarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattercarpet].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattercarpet].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scattercarpet].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattercarpet].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattercarpet].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scattercarpet]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scattercarpet]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=scattercarpet]</code> Type: string or array of strings<p>Sets text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scattercarpet]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scattercarpet].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattercarpet].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattercarpet].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattercarpet].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattercarpet].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattercarpet].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattercarpet].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattercarpet].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scattercarpet]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scattercarpet]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b` and `text`.</p> </li> <li>      type  Parent: <code>data[type=scattercarpet]</code> Type: \"scattercarpet\" </li> <li>      uid  Parent: <code>data[type=scattercarpet]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scattercarpet]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scattercarpet]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattercarpet].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattercarpet].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scattercarpet].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scattercarpet].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattercarpet].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattercarpet].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scattercarpet]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      xaxis  Parent: <code>data[type=scattercarpet]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      yaxis  Parent: <code>data[type=scattercarpet]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      zorder  Parent: <code>data[type=scattercarpet]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/scattergeo/","title":"scattergeo","text":"A <code>scattergeo</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scattergeo\"</code>   (i.e. <code>{\"type\": \"scattergeo\"}</code>) and any of the keys listed below.   The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`. <ul> <li>      connectgaps  Parent: <code>data[type=scattergeo]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scattergeo]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      featureidkey  Parent: <code>data[type=scattergeo]</code> Type: string                Default: <code>\"id\"</code> <p>Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example \"properties.name\".</p> </li> <li>      fill  Parent: <code>data[type=scattergeo]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"toself\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</p> </li> <li>      fillcolor  Parent: <code>data[type=scattergeo]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      geo  Parent: <code>data[type=scattergeo]</code> Type: subplotid                 Default: <code>geo</code> <p>Sets a reference between this trace's geospatial coordinates and a geographic map. If \"geo\" (the default value), the geospatial coordinates refer to `layout.geo`. If \"geo2\", the geospatial coordinates refer to `layout.geo2`, and so on.</p> </li> <li>      geojson  Parent: <code>data[type=scattergeo]</code> Type: number or categorical coordinate string <p>Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when `locations` is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type \"FeatureCollection\" or \"Feature\" with geometries of type \"Polygon\" or \"MultiPolygon\".</p> </li> <li>      hoverinfo  Parent: <code>data[type=scattergeo]</code> Type: flaglist string.                      Any combination of \"lon\", \"lat\", \"location\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"lon\"</code>, <code>\"lat\"</code>, <code>\"lon+lat\"</code>, <code>\"lon+lat+location\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scattergeo]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scattergeo].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scattergeo].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scattergeo].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scattergeo].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergeo].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scattergeo].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=scattergeo]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scattergeo]</code> Type: string or array of strings<p>Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scattergeo]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      lat  Parent: <code>data[type=scattergeo]</code> Type: data_array <p>Sets the latitude coordinates (in degrees North).</p> </li> <li>      legend  Parent: <code>data[type=scattergeo]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scattergeo]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scattergeo]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattergeo].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergeo].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scattergeo].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scattergeo]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scattergeo]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scattergeo]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergeo].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scattergeo].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>data[type=scattergeo].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      locationmode  Parent: <code>data[type=scattergeo]</code> Type:                     enumerated                    , one of ( <code>\"ISO-3\"</code>| <code>\"USA-states\"</code>| <code>\"country names\"</code>| <code>\"geojson-id\"</code>                    )                 Default: <code>\"ISO-3\"</code> <p>Determines the set of locations used to match entries in `locations` to regions on the map. Values \"ISO-3\", \"USA-states\", \"country names\" correspond to features on the base map and value \"geojson-id\" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.</p> </li> <li>      locations  Parent: <code>data[type=scattergeo]</code> Type: data_array <p>Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.</p> </li> <li>      lon  Parent: <code>data[type=scattergeo]</code> Type: data_array <p>Sets the longitude coordinates (in degrees East).</p> </li> <li>      marker  Parent: <code>data[type=scattergeo]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scattergeo].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      angleref  Parent: <code>data[type=scattergeo].marker</code> Type:                     enumerated                    , one of ( <code>\"previous\"</code>| <code>\"up\"</code>| <code>\"north\"</code>                    )                 Default: <code>\"up\"</code> <p>Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen. With \"north\", angle 0 points north based on the current map projection.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scattergeo].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattergeo].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattergeo].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattergeo].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattergeo].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattergeo].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattergeo].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scattergeo].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergeo].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scattergeo].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scattergeo].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scattergeo].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scattergeo].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scattergeo].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattergeo].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergeo].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scattergeo].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scattergeo].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scattergeo].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scattergeo].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      gradient  Parent: <code>data[type=scattergeo].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergeo].marker.gradient</code> Type: color or array of colors<p>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</p> </li> <li>      type  Parent: <code>data[type=scattergeo].marker.gradient</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"radial\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the type of gradient used to fill the markers</p> </li> </ul> </li> <li>      line  Parent: <code>data[type=scattergeo].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scattergeo].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattergeo].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattergeo].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattergeo].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattergeo].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattergeo].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattergeo].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scattergeo].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scattergeo].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scattergeo].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=scattergeo].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scattergeo].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scattergeo].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scattergeo].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scattergeo].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scattergeo].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      standoff  Parent: <code>data[type=scattergeo].marker</code> Type: number or array of numbers<p>Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</p> </li> <li>      symbol  Parent: <code>data[type=scattergeo].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scattergeo]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scattergeo]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> Default: <code>\"markers\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scattergeo]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scattergeo]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      selected  Parent: <code>data[type=scattergeo]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattergeo].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergeo].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scattergeo].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattergeo].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergeo].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scattergeo]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scattergeo]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=scattergeo]</code> Type: string or array of strings<p>Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scattergeo]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scattergeo].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattergeo].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergeo].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergeo].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergeo].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergeo].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergeo].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergeo].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scattergeo]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scattergeo]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon`, `location` and `text`.</p> </li> <li>      type  Parent: <code>data[type=scattergeo]</code> Type: \"scattergeo\" </li> <li>      uid  Parent: <code>data[type=scattergeo]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scattergeo]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scattergeo]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattergeo].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergeo].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scattergeo].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scattergeo].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattergeo].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergeo].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scattergeo]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/scattergl/","title":"scattergl","text":"A <code>scattergl</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scattergl\"</code>   (i.e. <code>{\"type\": \"scattergl\"}</code>) and any of the keys listed below.   The data visualized as scatter point or lines is set in `x` and `y` using the WebGL plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays. <ul> <li>      connectgaps  Parent: <code>data[type=scattergl]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scattergl]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dx  Parent: <code>data[type=scattergl]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      dy  Parent: <code>data[type=scattergl]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      error_x  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=scattergl].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=scattergl].error_x</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=scattergl].error_x</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      copy_ystyle  Parent: <code>data[type=scattergl].error_x</code> Type: boolean</li> <li>      symmetric  Parent: <code>data[type=scattergl].error_x</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=scattergl].error_x</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=scattergl].error_x</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=scattergl].error_x</code> Type: integer</li> <li>      type  Parent: <code>data[type=scattergl].error_x</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=scattergl].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=scattergl].error_x</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=scattergl].error_x</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=scattergl].error_x</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      error_y  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      array  Parent: <code>data[type=scattergl].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.</p> </li> <li>      arrayminus  Parent: <code>data[type=scattergl].error_y</code> Type: data_array <p>Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.</p> </li> <li>      color  Parent: <code>data[type=scattergl].error_y</code> Type: color<p>Sets the stroke color of the error bars.</p> </li> <li>      symmetric  Parent: <code>data[type=scattergl].error_y</code> Type: boolean<p>Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.</p> </li> <li>      thickness  Parent: <code>data[type=scattergl].error_y</code> Type: number                Default: <code>2</code> <p>Sets the thickness (in px) of the error bars.</p> </li> <li>      traceref  Parent: <code>data[type=scattergl].error_y</code> Type: integer</li> <li>      tracerefminus  Parent: <code>data[type=scattergl].error_y</code> Type: integer</li> <li>      type  Parent: <code>data[type=scattergl].error_y</code> Type:                     enumerated                    , one of ( <code>\"percent\"</code>| <code>\"constant\"</code>| <code>\"sqrt\"</code>| <code>\"data\"</code>                    ) <p>Determines the rule used to generate the error bars. If \"constant\", the bar lengths are of a constant value. Set this constant in `value`. If \"percent\", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If \"sqrt\", the bar lengths correspond to the square of the underlying data. If \"data\", the bar lengths are set with data set `array`.</p> </li> <li>      value  Parent: <code>data[type=scattergl].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars.</p> </li> <li>      valueminus  Parent: <code>data[type=scattergl].error_y</code> Type: number                Default: <code>10</code> <p>Sets the value of either the percentage (if `type` is set to \"percent\") or the constant (if `type` is set to \"constant\") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars</p> </li> <li>      visible  Parent: <code>data[type=scattergl].error_y</code> Type: boolean<p>Determines whether or not this set of error bars is visible.</p> </li> <li>      width  Parent: <code>data[type=scattergl].error_y</code> Type: number<p>Sets the width (in px) of the cross-bar at both ends of the error bars.</p> </li> </ul> </li> <li>      fill  Parent: <code>data[type=scattergl]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"tozeroy\"</code>| <code>\"tozerox\"</code>| <code>\"tonexty\"</code>| <code>\"tonextx\"</code>| <code>\"toself\"</code>| <code>\"tonext\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Defaults to \"none\" unless this trace is stacked, then it gets \"tonexty\" (\"tonextx\") if `orientation` is \"v\" (\"h\") Use with `fillcolor` if not \"none\". \"tozerox\" and \"tozeroy\" fill to x=0 and y=0 respectively. \"tonextx\" and \"tonexty\" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like \"tozerox\" and \"tozeroy\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</p> </li> <li>      fillcolor  Parent: <code>data[type=scattergl]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scattergl]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scattergl].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scattergl].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scattergl].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scattergl].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergl].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scattergl].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=scattergl]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scattergl]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scattergl]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=scattergl]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scattergl]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattergl].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergl].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scattergl].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scattergl]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scattergl]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergl].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scattergl].line</code> Type:                     enumerated                    , one of ( <code>\"dash\"</code>| <code>\"dashdot\"</code>| <code>\"dot\"</code>| <code>\"longdash\"</code>| <code>\"longdashdot\"</code>| <code>\"solid\"</code>                    )                 Default: <code>\"solid\"</code> <p>Sets the style of the lines.</p> </li> <li>      shape  Parent: <code>data[type=scattergl].line</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"hv\"</code>| <code>\"vh\"</code>| <code>\"hvh\"</code>| <code>\"vhv\"</code>                    )                 Default: <code>\"linear\"</code> <p>Determines the line shape. The values correspond to step-wise line shapes.</p> </li> <li>      width  Parent: <code>data[type=scattergl].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scattergl].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scattergl].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattergl].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattergl].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattergl].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattergl].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattergl].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattergl].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scattergl].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergl].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scattergl].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scattergl].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scattergl].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scattergl].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scattergl].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattergl].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergl].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scattergl].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scattergl].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scattergl].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scattergl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scattergl].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=scattergl].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scattergl].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattergl].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattergl].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattergl].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattergl].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattergl].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattergl].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scattergl].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scattergl].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scattergl].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=scattergl].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scattergl].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scattergl].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scattergl].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scattergl].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scattergl].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scattergl].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      symbol  Parent: <code>data[type=scattergl].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scattergl]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> <p>Determines the drawing mode for this scatter trace.</p> </li> <li>      name  Parent: <code>data[type=scattergl]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scattergl]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      selected  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattergl].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergl].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scattergl].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scattergl].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattergl].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergl].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scattergl]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=scattergl]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scattergl].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattergl].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      size  Parent: <code>data[type=scattergl].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattergl].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      variant  Parent: <code>data[type=scattergl].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattergl].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"bold\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scattergl]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scattergl]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. </p> </li> <li>      type  Parent: <code>data[type=scattergl]</code> Type: \"scattergl\" </li> <li>      uid  Parent: <code>data[type=scattergl]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scattergl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattergl].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergl].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scattergl].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scattergl].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattergl].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattergl].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scattergl]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=scattergl]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      x0  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      xaxis  Parent: <code>data[type=scattergl]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xcalendar  Parent: <code>data[type=scattergl]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=scattergl]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=scattergl]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      y  Parent: <code>data[type=scattergl]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      y0  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      yaxis  Parent: <code>data[type=scattergl]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      ycalendar  Parent: <code>data[type=scattergl]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=scattergl]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=scattergl]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=scattergl]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> </ul>"},{"location":"reference/scattermap/","title":"scattermap","text":"A <code>scattermap</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scattermap\"</code>   (i.e. <code>{\"type\": \"scattermap\"}</code>) and any of the keys listed below.   The data visualized as scatter point, lines or marker symbols on a MapLibre GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`. <ul> <li>      below  Parent: <code>data[type=scattermap]</code> Type: string<p>Determines if this scattermap trace's layers are to be inserted before the layer with the specified ID. By default, scattermap layers are inserted above all the base layers. To place the scattermap layers above every other layer, set `below` to \"''\".</p> </li> <li>      cluster  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermap].cluster</code> Type: color or array of colors<p>Sets the color for each cluster step.</p> </li> <li>      enabled  Parent: <code>data[type=scattermap].cluster</code> Type: boolean<p>Determines whether clustering is enabled or disabled.</p> </li> <li>      maxzoom  Parent: <code>data[type=scattermap].cluster</code> Type: number less than or equal to 24                 Default: <code>24</code> <p>Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.</p> </li> <li>      opacity  Parent: <code>data[type=scattermap].cluster</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the marker opacity.</p> </li> <li>      size  Parent: <code>data[type=scattermap].cluster</code> Type: number or array of numbers                Default: <code>20</code> <p>Sets the size for each cluster step.</p> </li> <li>      step  Parent: <code>data[type=scattermap].cluster</code> Type: number or array of numbers greater than or equal to -1                 Default: <code>-1</code> <p>Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for `size` and / or `color`. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.</p> </li> </ul> </li> <li>      connectgaps  Parent: <code>data[type=scattermap]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scattermap]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      fill  Parent: <code>data[type=scattermap]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"toself\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</p> </li> <li>      fillcolor  Parent: <code>data[type=scattermap]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scattermap]</code> Type: flaglist string.                      Any combination of \"lon\", \"lat\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"lon\"</code>, <code>\"lat\"</code>, <code>\"lon+lat\"</code>, <code>\"lon+lat+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scattermap].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scattermap].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scattermap].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scattermap].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermap].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scattermap].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=scattermap]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scattermap]</code> Type: string or array of strings<p>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scattermap]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      lat  Parent: <code>data[type=scattermap]</code> Type: data_array <p>Sets the latitude coordinates (in degrees North).</p> </li> <li>      legend  Parent: <code>data[type=scattermap]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scattermap]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattermap].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermap].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scattermap].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scattermap]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scattermap]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermap].line</code> Type: color<p>Sets the line color.</p> </li> <li>      width  Parent: <code>data[type=scattermap].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      lon  Parent: <code>data[type=scattermap]</code> Type: data_array <p>Sets the longitude coordinates (in degrees East).</p> </li> <li>      marker  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      allowoverlap  Parent: <code>data[type=scattermap].marker</code> Type: boolean<p>Flag to draw all symbols, even if they overlap.</p> </li> <li>      angle  Parent: <code>data[type=scattermap].marker</code> Type: number or array of numbers                Default: <code>\"auto\"</code> <p>Sets the marker orientation from true North, in degrees clockwise. When using the \"auto\" default, no rotation would be applied in perspective views which is different from using a zero angle.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scattermap].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattermap].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattermap].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattermap].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattermap].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattermap].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattermap].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scattermap].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermap].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scattermap].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scattermap].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scattermap].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scattermap].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scattermap].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattermap].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermap].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scattermap].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scattermap].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scattermap].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scattermap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scattermap].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      opacity  Parent: <code>data[type=scattermap].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scattermap].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scattermap].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scattermap].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scattermap].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scattermap].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scattermap].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      symbol  Parent: <code>data[type=scattermap].marker</code> Type: string or array of strings                Default: <code>\"circle\"</code> <p>Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for \"circle\" symbols.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scattermap]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scattermap]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> Default: <code>\"markers\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.</p> </li> <li>      name  Parent: <code>data[type=scattermap]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scattermap]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      selected  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattermap].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermap].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scattermap].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scattermap].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scattermap]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scattermap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      subplot  Parent: <code>data[type=scattermap]</code> Type: subplotid                 Default: <code>map</code> <p>Sets a reference between this trace's data coordinates and a map subplot. If \"map\" (the default value), the data refer to `layout.map`. If \"map2\", the data refer to `layout.map2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=scattermap]</code> Type: string or array of strings<p>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <p>Sets the icon text font (color=map.layer.paint.text-color, size=map.layer.layout.text-size). Has an effect only when `type` is set to \"symbol\".</p> <ul> <li>      color  Parent: <code>data[type=scattermap].textfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermap].textfont</code> Type: string                Default: <code>\"Open Sans Regular, Arial Unicode MS Regular\"</code> <p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      size  Parent: <code>data[type=scattermap].textfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermap].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      weight  Parent: <code>data[type=scattermap].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scattermap]</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scattermap]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon` and `text`.</p> </li> <li>      type  Parent: <code>data[type=scattermap]</code> Type: \"scattermap\" </li> <li>      uid  Parent: <code>data[type=scattermap]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scattermap]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scattermap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattermap].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermap].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scattermap].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scattermap].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scattermap]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/scattermapbox/","title":"scattermapbox","text":"A <code>scattermapbox</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scattermapbox\"</code>   (i.e. <code>{\"type\": \"scattermapbox\"}</code>) and any of the keys listed below.   \"scattermapbox\" trace is deprecated! Please consider switching to the \"scattermap\" trace type and `map` subplots. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ The data visualized as scatter point, lines or marker symbols on a Mapbox GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`. <ul> <li>      below  Parent: <code>data[type=scattermapbox]</code> Type: string<p>Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to \"''\".</p> </li> <li>      cluster  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermapbox].cluster</code> Type: color or array of colors<p>Sets the color for each cluster step.</p> </li> <li>      enabled  Parent: <code>data[type=scattermapbox].cluster</code> Type: boolean<p>Determines whether clustering is enabled or disabled.</p> </li> <li>      maxzoom  Parent: <code>data[type=scattermapbox].cluster</code> Type: number less than or equal to 24                 Default: <code>24</code> <p>Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.</p> </li> <li>      opacity  Parent: <code>data[type=scattermapbox].cluster</code> Type: number or array of numbers less than or equal to 1                 Default: <code>1</code> <p>Sets the marker opacity.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].cluster</code> Type: number or array of numbers                Default: <code>20</code> <p>Sets the size for each cluster step.</p> </li> <li>      step  Parent: <code>data[type=scattermapbox].cluster</code> Type: number or array of numbers greater than or equal to -1                 Default: <code>-1</code> <p>Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for `size` and / or `color`. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.</p> </li> </ul> </li> <li>      connectgaps  Parent: <code>data[type=scattermapbox]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scattermapbox]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      fill  Parent: <code>data[type=scattermapbox]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"toself\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.</p> </li> <li>      fillcolor  Parent: <code>data[type=scattermapbox]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scattermapbox]</code> Type: flaglist string.                      Any combination of \"lon\", \"lat\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"lon\"</code>, <code>\"lat\"</code>, <code>\"lon+lat\"</code>, <code>\"lon+lat+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scattermapbox].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scattermapbox].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scattermapbox].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scattermapbox].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermapbox].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scattermapbox].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=scattermapbox]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scattermapbox]</code> Type: string or array of strings<p>Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scattermapbox]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      lat  Parent: <code>data[type=scattermapbox]</code> Type: data_array <p>Sets the latitude coordinates (in degrees North).</p> </li> <li>      legend  Parent: <code>data[type=scattermapbox]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scattermapbox]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattermapbox].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermapbox].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scattermapbox].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scattermapbox]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scattermapbox]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermapbox].line</code> Type: color<p>Sets the line color.</p> </li> <li>      width  Parent: <code>data[type=scattermapbox].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      lon  Parent: <code>data[type=scattermapbox]</code> Type: data_array <p>Sets the longitude coordinates (in degrees East).</p> </li> <li>      marker  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      allowoverlap  Parent: <code>data[type=scattermapbox].marker</code> Type: boolean<p>Flag to draw all symbols, even if they overlap.</p> </li> <li>      angle  Parent: <code>data[type=scattermapbox].marker</code> Type: number or array of numbers                Default: <code>\"auto\"</code> <p>Sets the marker orientation from true North, in degrees clockwise. When using the \"auto\" default, no rotation would be applied in perspective views which is different from using a zero angle.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scattermapbox].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattermapbox].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattermapbox].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattermapbox].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattermapbox].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattermapbox].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattermapbox].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scattermapbox].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermapbox].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scattermapbox].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scattermapbox].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scattermapbox].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scattermapbox].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scattermapbox].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattermapbox].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattermapbox].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scattermapbox].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scattermapbox].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scattermapbox].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scattermapbox].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      opacity  Parent: <code>data[type=scattermapbox].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scattermapbox].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scattermapbox].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scattermapbox].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scattermapbox].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scattermapbox].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      symbol  Parent: <code>data[type=scattermapbox].marker</code> Type: string or array of strings                Default: <code>\"circle\"</code> <p>Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for \"circle\" symbols.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scattermapbox]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scattermapbox]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> Default: <code>\"markers\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.</p> </li> <li>      name  Parent: <code>data[type=scattermapbox]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scattermapbox]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      selected  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattermapbox].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermapbox].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scattermapbox].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scattermapbox]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scattermapbox]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      subplot  Parent: <code>data[type=scattermapbox]</code> Type: subplotid                 Default: <code>mapbox</code> <p>mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If \"mapbox\" (the default value), the data refer to `layout.mapbox`. If \"mapbox2\", the data refer to `layout.mapbox2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=scattermapbox]</code> Type: string or array of strings<p>Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <p>Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to \"symbol\".</p> <ul> <li>      color  Parent: <code>data[type=scattermapbox].textfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattermapbox].textfont</code> Type: string                Default: <code>\"Open Sans Regular, Arial Unicode MS Regular\"</code> <p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].textfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattermapbox].textfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      weight  Parent: <code>data[type=scattermapbox].textfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scattermapbox]</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scattermapbox]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon` and `text`.</p> </li> <li>      type  Parent: <code>data[type=scattermapbox]</code> Type: \"scattermapbox\" </li> <li>      uid  Parent: <code>data[type=scattermapbox]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scattermapbox]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scattermapbox]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattermapbox].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattermapbox].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scattermapbox].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scattermapbox].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scattermapbox]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/scatterpolar/","title":"scatterpolar","text":"A <code>scatterpolar</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scatterpolar\"</code>   (i.e. <code>{\"type\": \"scatterpolar\"}</code>) and any of the keys listed below.   The scatterpolar trace type encompasses line charts, scatter charts, text charts, and bubble charts in polar coordinates. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. <ul> <li>      cliponaxis  Parent: <code>data[type=scatterpolar]</code> Type: boolean<p>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      connectgaps  Parent: <code>data[type=scatterpolar]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scatterpolar]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dr  Parent: <code>data[type=scatterpolar]</code> Type: number                Default: <code>1</code> <p>Sets the r coordinate step.</p> </li> <li>      dtheta  Parent: <code>data[type=scatterpolar]</code> Type: number<p>Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.</p> </li> <li>      fill  Parent: <code>data[type=scatterpolar]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"toself\"</code>| <code>\"tonext\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scatterpolar has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.</p> </li> <li>      fillcolor  Parent: <code>data[type=scatterpolar]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scatterpolar]</code> Type: flaglist string.                      Any combination of \"r\", \"theta\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"r\"</code>, <code>\"theta\"</code>, <code>\"r+theta\"</code>, <code>\"r+theta+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scatterpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scatterpolar].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scatterpolar].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scatterpolar].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scatterpolar].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolar].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scatterpolar].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoveron  Parent: <code>data[type=scatterpolar]</code> Type: flaglist string.                      Any combination of \"points\", \"fills\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"points\"</code>, <code>\"fills\"</code>, <code>\"points+fills\"</code>,   <p>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is \"toself\" or \"tonext\" and there are no markers or text, then the default is \"fills\", otherwise it is \"points\".</p> </li> <li>      hovertemplate  Parent: <code>data[type=scatterpolar]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scatterpolar]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scatterpolar]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=scatterpolar]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scatterpolar]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scatterpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatterpolar].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolar].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scatterpolar].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scatterpolar]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scatterpolar]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scatterpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      backoff  Parent: <code>data[type=scatterpolar].line</code> Type: number or array of numbers                Default: <code>\"auto\"</code> <p>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".</p> </li> <li>      color  Parent: <code>data[type=scatterpolar].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scatterpolar].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      shape  Parent: <code>data[type=scatterpolar].line</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"spline\"</code>                    )                 Default: <code>\"linear\"</code> <p>Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</p> </li> <li>      smoothing  Parent: <code>data[type=scatterpolar].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).</p> </li> <li>      width  Parent: <code>data[type=scatterpolar].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scatterpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scatterpolar].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      angleref  Parent: <code>data[type=scatterpolar].marker</code> Type:                     enumerated                    , one of ( <code>\"previous\"</code>| <code>\"up\"</code>                    )                 Default: <code>\"up\"</code> <p>Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scatterpolar].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatterpolar].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatterpolar].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatterpolar].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatterpolar].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatterpolar].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatterpolar].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scatterpolar].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolar].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scatterpolar].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scatterpolar].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scatterpolar].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scatterpolar].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scatterpolar].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatterpolar].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolar].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scatterpolar].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scatterpolar].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scatterpolar].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scatterpolar].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      gradient  Parent: <code>data[type=scatterpolar].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolar].marker.gradient</code> Type: color or array of colors<p>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</p> </li> <li>      type  Parent: <code>data[type=scatterpolar].marker.gradient</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"radial\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the type of gradient used to fill the markers</p> </li> </ul> </li> <li>      line  Parent: <code>data[type=scatterpolar].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scatterpolar].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatterpolar].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatterpolar].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatterpolar].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatterpolar].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatterpolar].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatterpolar].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scatterpolar].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scatterpolar].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scatterpolar].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      maxdisplayed  Parent: <code>data[type=scatterpolar].marker</code> Type: number<p>Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.</p> </li> <li>      opacity  Parent: <code>data[type=scatterpolar].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scatterpolar].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scatterpolar].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scatterpolar].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scatterpolar].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scatterpolar].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      standoff  Parent: <code>data[type=scatterpolar].marker</code> Type: number or array of numbers<p>Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</p> </li> <li>      symbol  Parent: <code>data[type=scatterpolar].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scatterpolar]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scatterpolar]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scatterpolar]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scatterpolar]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      r  Parent: <code>data[type=scatterpolar]</code> Type: data_array <p>Sets the radial coordinates</p> </li> <li>      r0  Parent: <code>data[type=scatterpolar]</code> Type: number or categorical coordinate string <p>Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.</p> </li> <li>      selected  Parent: <code>data[type=scatterpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatterpolar].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolar].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scatterpolar].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatterpolar].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolar].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scatterpolar]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scatterpolar]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      subplot  Parent: <code>data[type=scatterpolar]</code> Type: subplotid                 Default: <code>polar</code> <p>Sets a reference between this trace's data coordinates and a polar subplot. If \"polar\" (the default value), the data refer to `layout.polar`. If \"polar2\", the data refer to `layout.polar2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=scatterpolar]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scatterpolar]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolar].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatterpolar].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolar].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolar].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolar].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolar].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolar].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolar].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scatterpolar]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scatterpolar]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.</p> </li> <li>      theta  Parent: <code>data[type=scatterpolar]</code> Type: data_array <p>Sets the angular coordinates</p> </li> <li>      theta0  Parent: <code>data[type=scatterpolar]</code> Type: number or categorical coordinate string <p>Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.</p> </li> <li>      thetaunit  Parent: <code>data[type=scatterpolar]</code> Type:                     enumerated                    , one of ( <code>\"radians\"</code>| <code>\"degrees\"</code>| <code>\"gradians\"</code>                    )                 Default: <code>\"degrees\"</code> <p>Sets the unit of input \"theta\" values. Has an effect only when on \"linear\" angular axes.</p> </li> <li>      type  Parent: <code>data[type=scatterpolar]</code> Type: \"scatterpolar\" </li> <li>      uid  Parent: <code>data[type=scatterpolar]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scatterpolar]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scatterpolar]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatterpolar].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolar].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scatterpolar].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scatterpolar].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatterpolar].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolar].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scatterpolar]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/scatterpolargl/","title":"scatterpolargl","text":"A <code>scatterpolargl</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scatterpolargl\"</code>   (i.e. <code>{\"type\": \"scatterpolargl\"}</code>) and any of the keys listed below.   The scatterpolargl trace type encompasses line charts, scatter charts, and bubble charts in polar coordinates using the WebGL plotting engine. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. <ul> <li>      connectgaps  Parent: <code>data[type=scatterpolargl]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scatterpolargl]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      dr  Parent: <code>data[type=scatterpolargl]</code> Type: number                Default: <code>1</code> <p>Sets the r coordinate step.</p> </li> <li>      dtheta  Parent: <code>data[type=scatterpolargl]</code> Type: number<p>Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.</p> </li> <li>      fill  Parent: <code>data[type=scatterpolargl]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"tozeroy\"</code>| <code>\"tozerox\"</code>| <code>\"tonexty\"</code>| <code>\"tonextx\"</code>| <code>\"toself\"</code>| <code>\"tonext\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Defaults to \"none\" unless this trace is stacked, then it gets \"tonexty\" (\"tonextx\") if `orientation` is \"v\" (\"h\") Use with `fillcolor` if not \"none\". \"tozerox\" and \"tozeroy\" fill to x=0 and y=0 respectively. \"tonextx\" and \"tonexty\" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like \"tozerox\" and \"tozeroy\". \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.</p> </li> <li>      fillcolor  Parent: <code>data[type=scatterpolargl]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scatterpolargl]</code> Type: flaglist string.                      Any combination of \"r\", \"theta\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"r\"</code>, <code>\"theta\"</code>, <code>\"r+theta\"</code>, <code>\"r+theta+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scatterpolargl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scatterpolargl].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scatterpolargl].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scatterpolargl].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scatterpolargl].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolargl].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scatterpolargl].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=scatterpolargl]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scatterpolargl]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scatterpolargl]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=scatterpolargl]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scatterpolargl]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scatterpolargl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatterpolargl].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolargl].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scatterpolargl].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scatterpolargl]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scatterpolargl]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scatterpolargl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolargl].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scatterpolargl].line</code> Type:                     enumerated                    , one of ( <code>\"dash\"</code>| <code>\"dashdot\"</code>| <code>\"dot\"</code>| <code>\"longdash\"</code>| <code>\"longdashdot\"</code>| <code>\"solid\"</code>                    )                 Default: <code>\"solid\"</code> <p>Sets the style of the lines.</p> </li> <li>      width  Parent: <code>data[type=scatterpolargl].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scatterpolargl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scatterpolargl].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scatterpolargl].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatterpolargl].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatterpolargl].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatterpolargl].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatterpolargl].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatterpolargl].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatterpolargl].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scatterpolargl].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scatterpolargl].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatterpolargl].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolargl].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scatterpolargl].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scatterpolargl].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scatterpolargl].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scatterpolargl].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=scatterpolargl].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scatterpolargl].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=scatterpolargl].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scatterpolargl].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scatterpolargl].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scatterpolargl].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scatterpolargl].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scatterpolargl].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      symbol  Parent: <code>data[type=scatterpolargl].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scatterpolargl]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scatterpolargl]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scatterpolargl]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scatterpolargl]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      r  Parent: <code>data[type=scatterpolargl]</code> Type: data_array <p>Sets the radial coordinates</p> </li> <li>      r0  Parent: <code>data[type=scatterpolargl]</code> Type: number or categorical coordinate string <p>Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.</p> </li> <li>      selected  Parent: <code>data[type=scatterpolargl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatterpolargl].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolargl].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scatterpolargl].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatterpolargl].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolargl].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scatterpolargl]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scatterpolargl]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      subplot  Parent: <code>data[type=scatterpolargl]</code> Type: subplotid                 Default: <code>polar</code> <p>Sets a reference between this trace's data coordinates and a polar subplot. If \"polar\" (the default value), the data refer to `layout.polar`. If \"polar2\", the data refer to `layout.polar2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=scatterpolargl]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scatterpolargl]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scatterpolargl].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatterpolargl].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterpolargl].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      variant  Parent: <code>data[type=scatterpolargl].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterpolargl].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"bold\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scatterpolargl]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scatterpolargl]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.</p> </li> <li>      theta  Parent: <code>data[type=scatterpolargl]</code> Type: data_array <p>Sets the angular coordinates</p> </li> <li>      theta0  Parent: <code>data[type=scatterpolargl]</code> Type: number or categorical coordinate string <p>Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.</p> </li> <li>      thetaunit  Parent: <code>data[type=scatterpolargl]</code> Type:                     enumerated                    , one of ( <code>\"radians\"</code>| <code>\"degrees\"</code>| <code>\"gradians\"</code>                    )                 Default: <code>\"degrees\"</code> <p>Sets the unit of input \"theta\" values. Has an effect only when on \"linear\" angular axes.</p> </li> <li>      type  Parent: <code>data[type=scatterpolargl]</code> Type: \"scatterpolargl\" </li> <li>      uid  Parent: <code>data[type=scatterpolargl]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scatterpolargl]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scatterpolargl]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatterpolargl].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolargl].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scatterpolargl].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scatterpolargl].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatterpolargl].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterpolargl].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scatterpolargl]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/scattersmith/","title":"scattersmith","text":"A <code>scattersmith</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scattersmith\"</code>   (i.e. <code>{\"type\": \"scattersmith\"}</code>) and any of the keys listed below.   The scattersmith trace type encompasses line charts, scatter charts, text charts, and bubble charts in smith coordinates. The data visualized as scatter point or lines is set in `real` and `imag` (imaginary) coordinates Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. <ul> <li>      cliponaxis  Parent: <code>data[type=scattersmith]</code> Type: boolean<p>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      connectgaps  Parent: <code>data[type=scattersmith]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scattersmith]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      fill  Parent: <code>data[type=scattersmith]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"toself\"</code>| <code>\"tonext\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scattersmith has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.</p> </li> <li>      fillcolor  Parent: <code>data[type=scattersmith]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scattersmith]</code> Type: flaglist string.                      Any combination of \"real\", \"imag\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"real\"</code>, <code>\"imag\"</code>, <code>\"real+imag\"</code>, <code>\"real+imag+text\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scattersmith]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scattersmith].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scattersmith].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scattersmith].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scattersmith].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattersmith].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scattersmith].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoveron  Parent: <code>data[type=scattersmith]</code> Type: flaglist string.                      Any combination of \"points\", \"fills\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"points\"</code>, <code>\"fills\"</code>, <code>\"points+fills\"</code>,   <p>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is \"toself\" or \"tonext\" and there are no markers or text, then the default is \"fills\", otherwise it is \"points\".</p> </li> <li>      hovertemplate  Parent: <code>data[type=scattersmith]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scattersmith]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scattersmith]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      imag  Parent: <code>data[type=scattersmith]</code> Type: data_array <p>Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</p> </li> <li>      legend  Parent: <code>data[type=scattersmith]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scattersmith]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scattersmith]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattersmith].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattersmith].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scattersmith].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scattersmith]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scattersmith]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scattersmith]</code> Type: object containing one or more of the keys listed below. <ul> <li>      backoff  Parent: <code>data[type=scattersmith].line</code> Type: number or array of numbers                Default: <code>\"auto\"</code> <p>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".</p> </li> <li>      color  Parent: <code>data[type=scattersmith].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scattersmith].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      shape  Parent: <code>data[type=scattersmith].line</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"spline\"</code>                    )                 Default: <code>\"linear\"</code> <p>Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</p> </li> <li>      smoothing  Parent: <code>data[type=scattersmith].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).</p> </li> <li>      width  Parent: <code>data[type=scattersmith].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scattersmith]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scattersmith].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      angleref  Parent: <code>data[type=scattersmith].marker</code> Type:                     enumerated                    , one of ( <code>\"previous\"</code>| <code>\"up\"</code>                    )                 Default: <code>\"up\"</code> <p>Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scattersmith].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattersmith].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattersmith].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattersmith].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattersmith].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattersmith].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattersmith].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scattersmith].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattersmith].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scattersmith].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scattersmith].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scattersmith].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scattersmith].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scattersmith].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scattersmith].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattersmith].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scattersmith].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scattersmith].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scattersmith].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scattersmith].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      gradient  Parent: <code>data[type=scattersmith].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattersmith].marker.gradient</code> Type: color or array of colors<p>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</p> </li> <li>      type  Parent: <code>data[type=scattersmith].marker.gradient</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"radial\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the type of gradient used to fill the markers</p> </li> </ul> </li> <li>      line  Parent: <code>data[type=scattersmith].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scattersmith].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scattersmith].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scattersmith].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scattersmith].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scattersmith].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scattersmith].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scattersmith].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scattersmith].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scattersmith].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scattersmith].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      maxdisplayed  Parent: <code>data[type=scattersmith].marker</code> Type: number<p>Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.</p> </li> <li>      opacity  Parent: <code>data[type=scattersmith].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scattersmith].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scattersmith].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scattersmith].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scattersmith].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scattersmith].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      standoff  Parent: <code>data[type=scattersmith].marker</code> Type: number or array of numbers<p>Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</p> </li> <li>      symbol  Parent: <code>data[type=scattersmith].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scattersmith]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scattersmith]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scattersmith]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scattersmith]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      real  Parent: <code>data[type=scattersmith]</code> Type: data_array <p>Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.</p> </li> <li>      selected  Parent: <code>data[type=scattersmith]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattersmith].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattersmith].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scattersmith].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattersmith].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattersmith].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scattersmith]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scattersmith]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      subplot  Parent: <code>data[type=scattersmith]</code> Type: subplotid                 Default: <code>smith</code> <p>Sets a reference between this trace's data coordinates and a smith subplot. If \"smith\" (the default value), the data refer to `layout.smith`. If \"smith2\", the data refer to `layout.smith2`, and so on.</p> </li> <li>      text  Parent: <code>data[type=scattersmith]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scattersmith]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scattersmith].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scattersmith].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scattersmith].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scattersmith].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scattersmith].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scattersmith].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scattersmith].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scattersmith].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scattersmith]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scattersmith]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `real`, `imag` and `text`.</p> </li> <li>      type  Parent: <code>data[type=scattersmith]</code> Type: \"scattersmith\" </li> <li>      uid  Parent: <code>data[type=scattersmith]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scattersmith]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scattersmith]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scattersmith].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattersmith].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scattersmith].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scattersmith].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scattersmith].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scattersmith].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scattersmith]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/scatterternary/","title":"scatterternary","text":"A <code>scatterternary</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"scatterternary\"</code>   (i.e. <code>{\"type\": \"scatterternary\"}</code>) and any of the keys listed below.   Provides similar functionality to the \"scatter\" type but on a ternary phase diagram. The data is provided by at least two arrays out of `a`, `b`, `c` triplets. <ul> <li>      a  Parent: <code>data[type=scatterternary]</code> Type: data_array <p>Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</p> </li> <li>      b  Parent: <code>data[type=scatterternary]</code> Type: data_array <p>Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</p> </li> <li>      c  Parent: <code>data[type=scatterternary]</code> Type: data_array <p>Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary&lt;i&gt;.sum`.</p> </li> <li>      cliponaxis  Parent: <code>data[type=scatterternary]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      connectgaps  Parent: <code>data[type=scatterternary]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.</p> </li> <li>      customdata  Parent: <code>data[type=scatterternary]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      fill  Parent: <code>data[type=scatterternary]</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"toself\"</code>| <code>\"tonext\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the area to fill with a solid color. Use with `fillcolor` if not \"none\". scatterternary has a subset of the options available to scatter. \"toself\" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. \"tonext\" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like \"toself\" if there is no trace before it. \"tonext\" should not be used if one trace does not enclose the other.</p> </li> <li>      fillcolor  Parent: <code>data[type=scatterternary]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=scatterternary]</code> Type: flaglist string.                      Any combination of \"a\", \"b\", \"c\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"a\"</code>, <code>\"b\"</code>, <code>\"a+b\"</code>, <code>\"a+b+c\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=scatterternary]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=scatterternary].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=scatterternary].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=scatterternary].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=scatterternary].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterternary].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=scatterternary].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoveron  Parent: <code>data[type=scatterternary]</code> Type: flaglist string.                      Any combination of \"points\", \"fills\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"points\"</code>, <code>\"fills\"</code>, <code>\"points+fills\"</code>,   <p>Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is \"toself\" or \"tonext\" and there are no markers or text, then the default is \"fills\", otherwise it is \"points\".</p> </li> <li>      hovertemplate  Parent: <code>data[type=scatterternary]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=scatterternary]</code> Type: string or array of strings<p>Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=scatterternary]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=scatterternary]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=scatterternary]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=scatterternary]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatterternary].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterternary].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=scatterternary].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=scatterternary]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=scatterternary]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=scatterternary]</code> Type: object containing one or more of the keys listed below. <ul> <li>      backoff  Parent: <code>data[type=scatterternary].line</code> Type: number or array of numbers                Default: <code>\"auto\"</code> <p>Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With \"auto\" the lines would trim before markers if `marker.angleref` is set to \"previous\".</p> </li> <li>      color  Parent: <code>data[type=scatterternary].line</code> Type: color<p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=scatterternary].line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      shape  Parent: <code>data[type=scatterternary].line</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"spline\"</code>                    )                 Default: <code>\"linear\"</code> <p>Determines the line shape. With \"spline\" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.</p> </li> <li>      smoothing  Parent: <code>data[type=scatterternary].line</code> Type: number less than or equal to 1.3                 Default: <code>1</code> <p>Has an effect only if `shape` is set to \"spline\" Sets the amount of smoothing. \"0\" corresponds to no smoothing (equivalent to a \"linear\" shape).</p> </li> <li>      width  Parent: <code>data[type=scatterternary].line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=scatterternary]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=scatterternary].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      angleref  Parent: <code>data[type=scatterternary].marker</code> Type:                     enumerated                    , one of ( <code>\"previous\"</code>| <code>\"up\"</code>                    )                 Default: <code>\"up\"</code> <p>Sets the reference for marker angle. With \"previous\", angle 0 points along the line from the previous point to this one. With \"up\", angle 0 points toward the top of the screen.</p> </li> <li>      autocolorscale  Parent: <code>data[type=scatterternary].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatterternary].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatterternary].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatterternary].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatterternary].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatterternary].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatterternary].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=scatterternary].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterternary].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=scatterternary].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=scatterternary].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=scatterternary].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=scatterternary].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=scatterternary].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=scatterternary].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterternary].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=scatterternary].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=scatterternary].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=scatterternary].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=scatterternary].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      gradient  Parent: <code>data[type=scatterternary].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterternary].marker.gradient</code> Type: color or array of colors<p>Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.</p> </li> <li>      type  Parent: <code>data[type=scatterternary].marker.gradient</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"radial\"</code>| <code>\"horizontal\"</code>| <code>\"vertical\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"none\"</code> <p>Sets the type of gradient used to fill the markers</p> </li> </ul> </li> <li>      line  Parent: <code>data[type=scatterternary].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=scatterternary].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=scatterternary].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=scatterternary].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=scatterternary].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=scatterternary].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=scatterternary].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=scatterternary].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=scatterternary].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=scatterternary].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=scatterternary].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      maxdisplayed  Parent: <code>data[type=scatterternary].marker</code> Type: number<p>Sets a maximum number of points to be drawn on the graph. \"0\" corresponds to no limit.</p> </li> <li>      opacity  Parent: <code>data[type=scatterternary].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=scatterternary].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=scatterternary].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=scatterternary].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=scatterternary].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=scatterternary].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      standoff  Parent: <code>data[type=scatterternary].marker</code> Type: number or array of numbers<p>Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.</p> </li> <li>      symbol  Parent: <code>data[type=scatterternary].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=scatterternary]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      mode  Parent: <code>data[type=scatterternary]</code> Type: flaglist string.                      Any combination of \"lines\", \"markers\", \"text\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"lines\"</code>, <code>\"markers\"</code>, <code>\"lines+markers\"</code>, <code>\"lines+markers+text\"</code>, <code>\"none\"</code> Default: <code>\"markers\"</code> <p>Determines the drawing mode for this scatter trace. If the provided `mode` includes \"text\" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is \"lines+markers\". Otherwise, \"lines\".</p> </li> <li>      name  Parent: <code>data[type=scatterternary]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=scatterternary]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      selected  Parent: <code>data[type=scatterternary]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatterternary].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterternary].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=scatterternary].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatterternary].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterternary].selected.textfont</code> Type: color<p>Sets the text font color of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=scatterternary]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=scatterternary]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      subplot  Parent: <code>data[type=scatterternary]</code> Type: subplotid                 Default: <code>ternary</code> <p>Sets a reference between this trace's data coordinates and a ternary subplot. If \"ternary\" (the default value), the data refer to `layout.ternary`. If \"ternary2\", the data refer to `layout.ternary2`, and so on.</p> </li> <li>      sum  Parent: <code>data[type=scatterternary]</code> Type: number<p>The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary&lt;i&gt;.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary&lt;i&gt;.sum</p> </li> <li>      text  Parent: <code>data[type=scatterternary]</code> Type: string or array of strings<p>Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=scatterternary]</code> Type: object containing one or more of the keys listed below. <p>Sets the text font.</p> <ul> <li>      color  Parent: <code>data[type=scatterternary].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=scatterternary].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=scatterternary].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=scatterternary].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=scatterternary].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=scatterternary].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=scatterternary].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=scatterternary].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textposition  Parent: <code>data[type=scatterternary]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"middle center\"</code> <p>Sets the positions of the `text` elements with respects to the (x,y) coordinates.</p> </li> <li>      texttemplate  Parent: <code>data[type=scatterternary]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b`, `c` and `text`.</p> </li> <li>      type  Parent: <code>data[type=scatterternary]</code> Type: \"scatterternary\" </li> <li>      uid  Parent: <code>data[type=scatterternary]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=scatterternary]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=scatterternary]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=scatterternary].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterternary].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=scatterternary].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=scatterternary].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> <li>      textfont  Parent: <code>data[type=scatterternary].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=scatterternary].unselected.textfont</code> Type: color<p>Sets the text font color of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=scatterternary]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/splom/","title":"splom","text":"A <code>splom</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"splom\"</code>   (i.e. <code>{\"type\": \"splom\"}</code>) and any of the keys listed below.   Splom traces generate scatter plot matrix visualizations. Each splom `dimensions` items correspond to a generated axis. Values for each of those dimensions are set in `dimensions[i].values`. Splom traces support all `scattergl` marker style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style.  <ul> <li>      customdata  Parent: <code>data[type=splom]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      diagonal  Parent: <code>data[type=splom]</code> Type: object containing one or more of the keys listed below. <ul> <li>      visible  Parent: <code>data[type=splom].diagonal</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not subplots on the diagonal are displayed.</p> </li> </ul> </li> <li>      dimensions  Parent: <code>data[type=splom]</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      axis  Parent: <code>data[type=splom].dimensions</code> Type: object containing one or more of the keys listed below. <ul> <li>      matches  Parent: <code>data[type=splom].dimensions.axis</code> Type: boolean<p>Determines whether or not the x &amp; y axes generated by this dimension match. Equivalent to setting the `matches` axis attribute in the layout with the correct axis id.</p> </li> <li>      type  Parent: <code>data[type=splom].dimensions.axis</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"log\"</code>| <code>\"date\"</code>| <code>\"category\"</code>                    ) <p>Sets the axis type for this dimension's generated x and y axes. Note that the axis `type` values set in layout take precedence over this attribute.</p> </li> </ul> </li> <li>      label  Parent: <code>data[type=splom].dimensions</code> Type: string<p>Sets the label corresponding to this splom dimension.</p> </li> <li>      name  Parent: <code>data[type=splom].dimensions</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=splom].dimensions</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      values  Parent: <code>data[type=splom].dimensions</code> Type: data_array <p>Sets the dimension values to be plotted.</p> </li> <li>      visible  Parent: <code>data[type=splom].dimensions</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this dimension is shown on the graph. Note that even visible false dimension contribute to the default grid generate by this splom trace.</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=splom]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=splom]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=splom].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=splom].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=splom].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=splom].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=splom].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=splom].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=splom].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=splom].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=splom].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=splom].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=splom].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=splom].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=splom].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=splom].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=splom]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=splom]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=splom]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=splom]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=splom]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=splom]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=splom].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=splom].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=splom].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=splom]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=splom]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      marker  Parent: <code>data[type=splom]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=splom].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      autocolorscale  Parent: <code>data[type=splom].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=splom].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=splom].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=splom].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=splom].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=splom].marker</code> Type: color or array of colors<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=splom].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=splom].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=splom].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=splom].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=splom].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=splom].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=splom].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=splom].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=splom].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=splom].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=splom].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=splom].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=splom].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=splom].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=splom].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=splom].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=splom].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=splom].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=splom].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=splom].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=splom].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=splom].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=splom].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=splom].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=splom].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=splom].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=splom].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=splom].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=splom].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=splom].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=splom].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=splom].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=splom].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=splom].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=splom].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=splom].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=splom].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=splom].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=splom].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=splom].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=splom].marker.line</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=splom].marker.line</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=splom].marker.line</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=splom].marker.line</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.</p> </li> <li>      color  Parent: <code>data[type=splom].marker.line</code> Type: color or array of colors<p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      coloraxis  Parent: <code>data[type=splom].marker.line</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorscale  Parent: <code>data[type=splom].marker.line</code> Type: colorscale <p>Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      reversescale  Parent: <code>data[type=splom].marker.line</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.</p> </li> <li>      width  Parent: <code>data[type=splom].marker.line</code> Type: number or array of numbers<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=splom].marker</code> Type: number or array of numbers less than or equal to 1 <p>Sets the marker opacity.</p> </li> <li>      reversescale  Parent: <code>data[type=splom].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=splom].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.</p> </li> <li>      size  Parent: <code>data[type=splom].marker</code> Type: number or array of numbers                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      sizemin  Parent: <code>data[type=splom].marker</code> Type: number<p>Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.</p> </li> <li>      sizemode  Parent: <code>data[type=splom].marker</code> Type:                     enumerated                    , one of ( <code>\"diameter\"</code>| <code>\"area\"</code>                    )                 Default: <code>\"diameter\"</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.</p> </li> <li>      sizeref  Parent: <code>data[type=splom].marker</code> Type: number                Default: <code>1</code> <p>Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.</p> </li> <li>      symbol  Parent: <code>data[type=splom].marker</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=splom]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=splom]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=splom]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      selected  Parent: <code>data[type=splom]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=splom].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=splom].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=splom].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=splom].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=splom]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=splom]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showlowerhalf  Parent: <code>data[type=splom]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not subplots on the lower half from the diagonal are displayed.</p> </li> <li>      showupperhalf  Parent: <code>data[type=splom]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not subplots on the upper half from the diagonal are displayed.</p> </li> <li>      text  Parent: <code>data[type=splom]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.</p> </li> <li>      type  Parent: <code>data[type=splom]</code> Type: \"splom\" </li> <li>      uid  Parent: <code>data[type=splom]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=splom]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=splom]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=splom].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=splom].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=splom].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=splom].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=splom]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      xaxes  Parent: <code>data[type=splom]</code>  {inner}Type: {array} <p>Sets the list of x axes corresponding to dimensions of this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.</p> </li> <li>      xhoverformat  Parent: <code>data[type=splom]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      yaxes  Parent: <code>data[type=splom]</code>  {inner}Type: {array} <p>Sets the list of y axes corresponding to dimensions of this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.</p> </li> <li>      yhoverformat  Parent: <code>data[type=splom]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/streamtube/","title":"streamtube","text":"A <code>streamtube</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"streamtube\"</code>   (i.e. <code>{\"type\": \"streamtube\"}</code>) and any of the keys listed below.   Use a streamtube trace to visualize flow in a vector field.  Specify a vector field using 6 1D arrays of equal length, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, and `w`.  By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value. To specify your own starting position, use attributes `starts.x`, `starts.y` and `starts.z`. The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w). <ul> <li>      autocolorscale  Parent: <code>data[type=streamtube]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=streamtube]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=streamtube]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=streamtube]</code> Type: number<p>Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=streamtube]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=streamtube]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=streamtube]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=streamtube].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=streamtube].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=streamtube].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=streamtube].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=streamtube].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=streamtube].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=streamtube].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=streamtube].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=streamtube].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=streamtube].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=streamtube].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=streamtube].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=streamtube].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=streamtube].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=streamtube].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=streamtube].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=streamtube].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=streamtube].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=streamtube].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=streamtube].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=streamtube].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=streamtube].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=streamtube].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=streamtube].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=streamtube].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=streamtube].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=streamtube].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=streamtube].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=streamtube].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=streamtube].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=streamtube].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=streamtube].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=streamtube].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=streamtube].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=streamtube].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=streamtube]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      customdata  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      hoverinfo  Parent: <code>data[type=streamtube]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"u\", \"v\", \"w\", \"norm\", \"divergence\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"x+y+z+norm+text+name\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=streamtube]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=streamtube].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=streamtube].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=streamtube].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=streamtube].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=streamtube].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=streamtube].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=streamtube]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `tubex`, `tubey`, `tubez`, `tubeu`, `tubev`, `tubew`, `norm` and `divergence`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=streamtube]</code> Type: string<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=streamtube]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=streamtube]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=streamtube].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=streamtube].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=streamtube].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=streamtube]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=streamtube]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lighting  Parent: <code>data[type=streamtube]</code> Type: object containing one or more of the keys listed below. <ul> <li>      ambient  Parent: <code>data[type=streamtube].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Ambient light increases overall color visibility but can wash out the image.</p> </li> <li>      diffuse  Parent: <code>data[type=streamtube].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Represents the extent that incident rays are reflected in a range of angles.</p> </li> <li>      facenormalsepsilon  Parent: <code>data[type=streamtube].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-06</code> <p>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</p> </li> <li>      fresnel  Parent: <code>data[type=streamtube].lighting</code> Type: number less than or equal to 5                 Default: <code>0.2</code> <p>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</p> </li> <li>      roughness  Parent: <code>data[type=streamtube].lighting</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</p> </li> <li>      specular  Parent: <code>data[type=streamtube].lighting</code> Type: number less than or equal to 2                 Default: <code>0.05</code> <p>Represents the level that incident rays are reflected in a single direction, causing shine.</p> </li> <li>      vertexnormalsepsilon  Parent: <code>data[type=streamtube].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-12</code> <p>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</p> </li> </ul> </li> <li>      lightposition  Parent: <code>data[type=streamtube]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=streamtube].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the X coordinate for each vertex.</p> </li> <li>      y  Parent: <code>data[type=streamtube].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the Y coordinate for each vertex.</p> </li> <li>      z  Parent: <code>data[type=streamtube].lightposition</code> Type: number between or equal to -100000 and 100000 <p>Numeric vector, representing the Z coordinate for each vertex.</p> </li> </ul> </li> <li>      maxdisplayed  Parent: <code>data[type=streamtube]</code> Type: integer                Default: <code>1000</code> <p>The maximum number of displayed segments in a streamtube.</p> </li> <li>      meta  Parent: <code>data[type=streamtube]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=streamtube]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</p> </li> <li>      reversescale  Parent: <code>data[type=streamtube]</code> Type: boolean<p>Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</p> </li> <li>      scene  Parent: <code>data[type=streamtube]</code> Type: subplotid                 Default: <code>scene</code> <p>Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</p> </li> <li>      showlegend  Parent: <code>data[type=streamtube]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=streamtube]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      sizeref  Parent: <code>data[type=streamtube]</code> Type: number                Default: <code>1</code> <p>The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.</p> </li> <li>      starts  Parent: <code>data[type=streamtube]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=streamtube].starts</code> Type: data_array <p>Sets the x components of the starting position of the streamtubes</p> </li> <li>      y  Parent: <code>data[type=streamtube].starts</code> Type: data_array <p>Sets the y components of the starting position of the streamtubes</p> </li> <li>      z  Parent: <code>data[type=streamtube].starts</code> Type: data_array <p>Sets the z components of the starting position of the streamtubes</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets a text element associated with this trace. If trace `hoverinfo` contains a \"text\" flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.</p> </li> <li>      type  Parent: <code>data[type=streamtube]</code> Type: \"streamtube\" </li> <li>      u  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Sets the x components of the vector field.</p> </li> <li>      uhoverformat  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the hover text formatting rulefor `u`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      uid  Parent: <code>data[type=streamtube]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=streamtube]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      v  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Sets the y components of the vector field.</p> </li> <li>      vhoverformat  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the hover text formatting rulefor `v`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      visible  Parent: <code>data[type=streamtube]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      w  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Sets the z components of the vector field.</p> </li> <li>      whoverformat  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the hover text formatting rulefor `w`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      x  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Sets the x coordinates of the vector field.</p> </li> <li>      xhoverformat  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Sets the y coordinates of the vector field.</p> </li> <li>      yhoverformat  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=streamtube]</code> Type: data_array <p>Sets the z coordinates of the vector field.</p> </li> <li>      zhoverformat  Parent: <code>data[type=streamtube]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/sunburst/","title":"sunburst","text":"A <code>sunburst</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"sunburst\"</code>   (i.e. <code>{\"type\": \"sunburst\"}</code>) and any of the keys listed below.   Visualize hierarchal data spanning outward radially from root to leaves. The sunburst sectors are determined by the entries in \"labels\" or \"ids\" and in \"parents\". <ul> <li>      branchvalues  Parent: <code>data[type=sunburst]</code> Type:                     enumerated                    , one of ( <code>\"remainder\"</code>| <code>\"total\"</code>                    )                 Default: <code>\"remainder\"</code> <p>Determines how the items in `values` are summed. When set to \"total\", items in `values` are taken to be value of all its descendants. When set to \"remainder\", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</p> </li> <li>      count  Parent: <code>data[type=sunburst]</code> Type: flaglist string.                      Any combination of \"branches\", \"leaves\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"branches\"</code>, <code>\"leaves\"</code>, <code>\"branches+leaves\"</code>,                   Default: <code>\"leaves\"</code> <p>Determines default for `values` when it is not provided, by inferring a 1 for each of the \"leaves\" and/or \"branches\", otherwise 0.</p> </li> <li>      customdata  Parent: <code>data[type=sunburst]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      domain  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=sunburst].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this sunburst trace .</p> </li> <li>      row  Parent: <code>data[type=sunburst].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this sunburst trace .</p> </li> <li>      x  Parent: <code>data[type=sunburst].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this sunburst trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=sunburst].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this sunburst trace (in plot fraction).</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=sunburst]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"name\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"all\"</code> Default: <code>\"label+text+value+name\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=sunburst].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=sunburst].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=sunburst].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=sunburst].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sunburst].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=sunburst].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=sunburst]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=sunburst]</code> Type: string or array of strings<p>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=sunburst]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextfont  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying inside the sector.</p> <ul> <li>      color  Parent: <code>data[type=sunburst].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=sunburst].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sunburst].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sunburst].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sunburst].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sunburst].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sunburst].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sunburst].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sunburst].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      insidetextorientation  Parent: <code>data[type=sunburst]</code> Type:                     enumerated                    , one of ( <code>\"horizontal\"</code>| <code>\"radial\"</code>| <code>\"tangential\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Controls the orientation of the text inside chart sectors. When set to \"auto\", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The \"horizontal\" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The \"radial\" option orients text along the radius of the sector. The \"tangential\" option orients text perpendicular to the radius of the sector.</p> </li> <li>      labels  Parent: <code>data[type=sunburst]</code> Type: data_array <p>Sets the labels of each of the sectors.</p> </li> <li>      leaf  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <ul> <li>      opacity  Parent: <code>data[type=sunburst].leaf</code> Type: number less than or equal to 1 <p>Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7</p> </li> </ul> </li> <li>      legend  Parent: <code>data[type=sunburst]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=sunburst].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sunburst].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=sunburst].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=sunburst]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=sunburst]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      level  Parent: <code>data[type=sunburst]</code> Type: number or categorical coordinate string <p>Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</p> </li> <li>      marker  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=sunburst].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=sunburst].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=sunburst].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=sunburst].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=sunburst].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=sunburst].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=sunburst].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sunburst].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=sunburst].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=sunburst].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=sunburst].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=sunburst].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=sunburst].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=sunburst].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sunburst].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=sunburst].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=sunburst].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=sunburst].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=sunburst].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colors  Parent: <code>data[type=sunburst].marker</code> Type: data_array <p>Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.</p> </li> <li>      colorscale  Parent: <code>data[type=sunburst].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      line  Parent: <code>data[type=sunburst].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=sunburst].marker.line</code> Type: color or array of colors<p>Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.</p> </li> <li>      width  Parent: <code>data[type=sunburst].marker.line</code> Type: number or array of numbers                Default: <code>1</code> <p>Sets the width (in px) of the line enclosing each sector.</p> </li> </ul> </li> <li>      pattern  Parent: <code>data[type=sunburst].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=sunburst].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=sunburst].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=sunburst].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=sunburst].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=sunburst].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=sunburst].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=sunburst].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=sunburst].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> <li>      reversescale  Parent: <code>data[type=sunburst].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=sunburst].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.</p> </li> </ul> </li> <li>      maxdepth  Parent: <code>data[type=sunburst]</code> Type: integer                Default: <code>-1</code> <p>Sets the number of rendered sectors from any given `level`. Set `maxdepth` to \"-1\" to render all the levels in the hierarchy.</p> </li> <li>      meta  Parent: <code>data[type=sunburst]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=sunburst]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=sunburst]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      outsidetextfont  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented at the center of a sunburst graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.</p> <ul> <li>      color  Parent: <code>data[type=sunburst].outsidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=sunburst].outsidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sunburst].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sunburst].outsidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sunburst].outsidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sunburst].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sunburst].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sunburst].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sunburst].outsidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      parents  Parent: <code>data[type=sunburst]</code> Type: data_array <p>Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</p> </li> <li>      root  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=sunburst].root</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.</p> </li> </ul> </li> <li>      rotation  Parent: <code>data[type=sunburst]</code> Type: angle <p>Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.</p> </li> <li>      sort  Parent: <code>data[type=sunburst]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the sectors are reordered from largest to smallest.</p> </li> <li>      text  Parent: <code>data[type=sunburst]</code> Type: data_array <p>Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=sunburst]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo`.</p> <ul> <li>      color  Parent: <code>data[type=sunburst].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=sunburst].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=sunburst].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=sunburst].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=sunburst].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=sunburst].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=sunburst].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=sunburst].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=sunburst].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textinfo  Parent: <code>data[type=sunburst]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"none\"</code> <p>Determines which trace information appear on the graph.</p> </li> <li>      texttemplate  Parent: <code>data[type=sunburst]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.</p> </li> <li>      type  Parent: <code>data[type=sunburst]</code> Type: \"sunburst\" </li> <li>      uid  Parent: <code>data[type=sunburst]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=sunburst]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      values  Parent: <code>data[type=sunburst]</code> Type: data_array <p>Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.</p> </li> <li>      visible  Parent: <code>data[type=sunburst]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/surface/","title":"surface","text":"A <code>surface</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"surface\"</code>   (i.e. <code>{\"type\": \"surface\"}</code>) and any of the keys listed below.   The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a 2D array. Coordinates in `x` and `y` can either be 1D arrays or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a 2D array, where its bounds can be controlled using `cmin` and `cmax`. <ul> <li>      autocolorscale  Parent: <code>data[type=surface]</code> Type: boolean<p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=surface]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=surface]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=surface]</code> Type: number<p>Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=surface]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=surface]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=surface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=surface].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=surface].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=surface].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=surface].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=surface].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=surface].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=surface].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=surface].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=surface].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=surface].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=surface].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=surface].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=surface].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=surface].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=surface].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=surface].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=surface].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=surface].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=surface].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=surface].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=surface].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=surface].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=surface].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=surface].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=surface].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=surface].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=surface].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=surface].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=surface].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=surface].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=surface].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=surface].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=surface].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=surface].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=surface].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=surface].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=surface].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=surface].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=surface].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=surface].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=surface].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=surface].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=surface].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=surface].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=surface].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=surface].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=surface].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=surface].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=surface].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=surface].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=surface].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=surface]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      connectgaps  Parent: <code>data[type=surface]</code> Type: boolean<p>Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.</p> </li> <li>      contours  Parent: <code>data[type=surface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=surface].contours</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=surface].contours.x</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the contour lines.</p> </li> <li>      end  Parent: <code>data[type=surface].contours.x</code> Type: number<p>Sets the end contour level value. Must be more than `contours.start`</p> </li> <li>      highlight  Parent: <code>data[type=surface].contours.x</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not contour lines about the x dimension are highlighted on hover.</p> </li> <li>      highlightcolor  Parent: <code>data[type=surface].contours.x</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the highlighted contour lines.</p> </li> <li>      highlightwidth  Parent: <code>data[type=surface].contours.x</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the highlighted contour lines.</p> </li> <li>      project  Parent: <code>data[type=surface].contours.x</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=surface].contours.x.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> <li>      y  Parent: <code>data[type=surface].contours.x.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> <li>      z  Parent: <code>data[type=surface].contours.x.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> </ul> </li> <li>      show  Parent: <code>data[type=surface].contours.x</code> Type: boolean<p>Determines whether or not contour lines about the x dimension are drawn.</p> </li> <li>      size  Parent: <code>data[type=surface].contours.x</code> Type: number<p>Sets the step between each contour level. Must be positive.</p> </li> <li>      start  Parent: <code>data[type=surface].contours.x</code> Type: number<p>Sets the starting contour level value. Must be less than `contours.end`</p> </li> <li>      usecolormap  Parent: <code>data[type=surface].contours.x</code> Type: boolean<p>An alternate to \"color\". Determines whether or not the contour lines are colored using the trace \"colorscale\".</p> </li> <li>      width  Parent: <code>data[type=surface].contours.x</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the contour lines.</p> </li> </ul> </li> <li>      y  Parent: <code>data[type=surface].contours</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=surface].contours.y</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the contour lines.</p> </li> <li>      end  Parent: <code>data[type=surface].contours.y</code> Type: number<p>Sets the end contour level value. Must be more than `contours.start`</p> </li> <li>      highlight  Parent: <code>data[type=surface].contours.y</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not contour lines about the y dimension are highlighted on hover.</p> </li> <li>      highlightcolor  Parent: <code>data[type=surface].contours.y</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the highlighted contour lines.</p> </li> <li>      highlightwidth  Parent: <code>data[type=surface].contours.y</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the highlighted contour lines.</p> </li> <li>      project  Parent: <code>data[type=surface].contours.y</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=surface].contours.y.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> <li>      y  Parent: <code>data[type=surface].contours.y.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> <li>      z  Parent: <code>data[type=surface].contours.y.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> </ul> </li> <li>      show  Parent: <code>data[type=surface].contours.y</code> Type: boolean<p>Determines whether or not contour lines about the y dimension are drawn.</p> </li> <li>      size  Parent: <code>data[type=surface].contours.y</code> Type: number<p>Sets the step between each contour level. Must be positive.</p> </li> <li>      start  Parent: <code>data[type=surface].contours.y</code> Type: number<p>Sets the starting contour level value. Must be less than `contours.end`</p> </li> <li>      usecolormap  Parent: <code>data[type=surface].contours.y</code> Type: boolean<p>An alternate to \"color\". Determines whether or not the contour lines are colored using the trace \"colorscale\".</p> </li> <li>      width  Parent: <code>data[type=surface].contours.y</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the contour lines.</p> </li> </ul> </li> <li>      z  Parent: <code>data[type=surface].contours</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=surface].contours.z</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the contour lines.</p> </li> <li>      end  Parent: <code>data[type=surface].contours.z</code> Type: number<p>Sets the end contour level value. Must be more than `contours.start`</p> </li> <li>      highlight  Parent: <code>data[type=surface].contours.z</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not contour lines about the z dimension are highlighted on hover.</p> </li> <li>      highlightcolor  Parent: <code>data[type=surface].contours.z</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the highlighted contour lines.</p> </li> <li>      highlightwidth  Parent: <code>data[type=surface].contours.z</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the highlighted contour lines.</p> </li> <li>      project  Parent: <code>data[type=surface].contours.z</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=surface].contours.z.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> <li>      y  Parent: <code>data[type=surface].contours.z.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> <li>      z  Parent: <code>data[type=surface].contours.z.project</code> Type: boolean<p>Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to \"true\" (the default), the projected lines are shown on hover. If `show` is set to \"true\", the projected lines are shown in permanence.</p> </li> </ul> </li> <li>      show  Parent: <code>data[type=surface].contours.z</code> Type: boolean<p>Determines whether or not contour lines about the z dimension are drawn.</p> </li> <li>      size  Parent: <code>data[type=surface].contours.z</code> Type: number<p>Sets the step between each contour level. Must be positive.</p> </li> <li>      start  Parent: <code>data[type=surface].contours.z</code> Type: number<p>Sets the starting contour level value. Must be less than `contours.end`</p> </li> <li>      usecolormap  Parent: <code>data[type=surface].contours.z</code> Type: boolean<p>An alternate to \"color\". Determines whether or not the contour lines are colored using the trace \"colorscale\".</p> </li> <li>      width  Parent: <code>data[type=surface].contours.z</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the contour lines.</p> </li> </ul> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=surface]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      hidesurface  Parent: <code>data[type=surface]</code> Type: boolean<p>Determines whether or not a surface is drawn. For example, set `hidesurface` to \"false\" `contours.x.show` to \"true\" and `contours.y.show` to \"true\" to draw a wire frame plot.</p> </li> <li>      hoverinfo  Parent: <code>data[type=surface]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=surface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=surface].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=surface].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=surface].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=surface].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=surface].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=surface].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=surface].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=surface].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=surface].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=surface].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=surface].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=surface].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=surface].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=surface].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=surface]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=surface]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=surface]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=surface]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=surface]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=surface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=surface].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=surface].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=surface].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=surface]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=surface]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lighting  Parent: <code>data[type=surface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      ambient  Parent: <code>data[type=surface].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Ambient light increases overall color visibility but can wash out the image.</p> </li> <li>      diffuse  Parent: <code>data[type=surface].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Represents the extent that incident rays are reflected in a range of angles.</p> </li> <li>      fresnel  Parent: <code>data[type=surface].lighting</code> Type: number less than or equal to 5                 Default: <code>0.2</code> <p>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</p> </li> <li>      roughness  Parent: <code>data[type=surface].lighting</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</p> </li> <li>      specular  Parent: <code>data[type=surface].lighting</code> Type: number less than or equal to 2                 Default: <code>0.05</code> <p>Represents the level that incident rays are reflected in a single direction, causing shine.</p> </li> </ul> </li> <li>      lightposition  Parent: <code>data[type=surface]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=surface].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>10</code> <p>Numeric vector, representing the X coordinate for each vertex.</p> </li> <li>      y  Parent: <code>data[type=surface].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>10000</code> <p>Numeric vector, representing the Y coordinate for each vertex.</p> </li> <li>      z  Parent: <code>data[type=surface].lightposition</code> Type: number between or equal to -100000 and 100000 <p>Numeric vector, representing the Z coordinate for each vertex.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=surface]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=surface]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=surface]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</p> </li> <li>      opacityscale  Parent: <code>data[type=surface]</code> Type: number or categorical coordinate string <p>Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.</p> </li> <li>      reversescale  Parent: <code>data[type=surface]</code> Type: boolean<p>Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</p> </li> <li>      scene  Parent: <code>data[type=surface]</code> Type: subplotid                 Default: <code>scene</code> <p>Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</p> </li> <li>      showlegend  Parent: <code>data[type=surface]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=surface]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      surfacecolor  Parent: <code>data[type=surface]</code> Type: data_array <p>Sets the surface color values, used for setting a color scale independent of `z`.</p> </li> <li>      text  Parent: <code>data[type=surface]</code> Type: string or array of strings<p>Sets the text elements associated with each z value. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      type  Parent: <code>data[type=surface]</code> Type: \"surface\" </li> <li>      uid  Parent: <code>data[type=surface]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=surface]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=surface]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=surface]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      xcalendar  Parent: <code>data[type=surface]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `x` date data.</p> </li> <li>      xhoverformat  Parent: <code>data[type=surface]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=surface]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      ycalendar  Parent: <code>data[type=surface]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `y` date data.</p> </li> <li>      yhoverformat  Parent: <code>data[type=surface]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=surface]</code> Type: data_array <p>Sets the z coordinates.</p> </li> <li>      zcalendar  Parent: <code>data[type=surface]</code> Type:                     enumerated                    , one of ( <code>\"chinese\"</code>| <code>\"coptic\"</code>| <code>\"discworld\"</code>| <code>\"ethiopian\"</code>| <code>\"gregorian\"</code>| <code>\"hebrew\"</code>| <code>\"islamic\"</code>| <code>\"jalali\"</code>| <code>\"julian\"</code>| <code>\"mayan\"</code>| <code>\"nanakshahi\"</code>| <code>\"nepali\"</code>| <code>\"persian\"</code>| <code>\"taiwan\"</code>| <code>\"thai\"</code>| <code>\"ummalqura\"</code>                    )                 Default: <code>\"gregorian\"</code> <p>Sets the calendar system to use with `z` date data.</p> </li> <li>      zhoverformat  Parent: <code>data[type=surface]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/table/","title":"table","text":"A <code>table</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"table\"</code>   (i.e. <code>{\"type\": \"table\"}</code>) and any of the keys listed below.   Table view for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a column-major order, ie. the grid is represented as a vector of column vectors. <ul> <li>      cells  Parent: <code>data[type=table]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=table].cells</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    )                 Default: <code>\"center\"</code> <p>Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more &lt;br&gt; HTML tags) or if an explicit width is set to override the text width.</p> </li> <li>      fill  Parent: <code>data[type=table].cells</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=table].cells.fill</code> Type: color or array of colors                Default: <code>\"white\"</code> <p>Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.</p> </li> </ul> </li> <li>      font  Parent: <code>data[type=table].cells</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=table].cells.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=table].cells.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=table].cells.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=table].cells.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=table].cells.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=table].cells.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=table].cells.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=table].cells.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=table].cells.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      format  Parent: <code>data[type=table].cells</code> Type: data_array <p>Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> <li>      height  Parent: <code>data[type=table].cells</code> Type: number                Default: <code>20</code> <p>The height of cells.</p> </li> <li>      line  Parent: <code>data[type=table].cells</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=table].cells.line</code> Type: color or array of colors                Default: <code>\"grey\"</code> </li> <li>      width  Parent: <code>data[type=table].cells.line</code> Type: number or array of numbers                Default: <code>1</code> </li> </ul> </li> <li>      prefix  Parent: <code>data[type=table].cells</code> Type: string or array of strings<p>Prefix for cell values.</p> </li> <li>      suffix  Parent: <code>data[type=table].cells</code> Type: string or array of strings<p>Suffix for cell values.</p> </li> <li>      values  Parent: <code>data[type=table].cells</code> Type: data_array <p>Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.</p> </li> </ul> </li> <li>      columnorder  Parent: <code>data[type=table]</code> Type: data_array <p>Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.</p> </li> <li>      columnwidth  Parent: <code>data[type=table]</code> Type: number or array of numbers<p>The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.</p> </li> <li>      customdata  Parent: <code>data[type=table]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      domain  Parent: <code>data[type=table]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=table].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this table trace .</p> </li> <li>      row  Parent: <code>data[type=table].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this table trace .</p> </li> <li>      x  Parent: <code>data[type=table].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this table trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=table].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this table trace (in plot fraction).</p> </li> </ul> </li> <li>      header  Parent: <code>data[type=table]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=table].header</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    )                 Default: <code>\"center\"</code> <p>Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more &lt;br&gt; HTML tags) or if an explicit width is set to override the text width.</p> </li> <li>      fill  Parent: <code>data[type=table].header</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=table].header.fill</code> Type: color or array of colors                Default: <code>\"white\"</code> <p>Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.</p> </li> </ul> </li> <li>      font  Parent: <code>data[type=table].header</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=table].header.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=table].header.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=table].header.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=table].header.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=table].header.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=table].header.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=table].header.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=table].header.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=table].header.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      format  Parent: <code>data[type=table].header</code> Type: data_array <p>Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.</p> </li> <li>      height  Parent: <code>data[type=table].header</code> Type: number                Default: <code>28</code> <p>The height of cells.</p> </li> <li>      line  Parent: <code>data[type=table].header</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=table].header.line</code> Type: color or array of colors                Default: <code>\"grey\"</code> </li> <li>      width  Parent: <code>data[type=table].header.line</code> Type: number or array of numbers                Default: <code>1</code> </li> </ul> </li> <li>      prefix  Parent: <code>data[type=table].header</code> Type: string or array of strings<p>Prefix for cell values.</p> </li> <li>      suffix  Parent: <code>data[type=table].header</code> Type: string or array of strings<p>Suffix for cell values.</p> </li> <li>      values  Parent: <code>data[type=table].header</code> Type: data_array <p>Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=table]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=table]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=table].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=table].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=table].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=table].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=table].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=table].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=table].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=table].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=table].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=table].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=table].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=table].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=table].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=table].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      ids  Parent: <code>data[type=table]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      legend  Parent: <code>data[type=table]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=table]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=table].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=table].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=table].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=table].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=table].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=table].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=table].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=table].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=table].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=table].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=table].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=table]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=table]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      meta  Parent: <code>data[type=table]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=table]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      type  Parent: <code>data[type=table]</code> Type: \"table\" </li> <li>      uid  Parent: <code>data[type=table]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=table]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=table]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/treemap/","title":"treemap","text":"A <code>treemap</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"treemap\"</code>   (i.e. <code>{\"type\": \"treemap\"}</code>) and any of the keys listed below.   Visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles. The treemap sectors are determined by the entries in \"labels\" or \"ids\" and in \"parents\". <ul> <li>      branchvalues  Parent: <code>data[type=treemap]</code> Type:                     enumerated                    , one of ( <code>\"remainder\"</code>| <code>\"total\"</code>                    )                 Default: <code>\"remainder\"</code> <p>Determines how the items in `values` are summed. When set to \"total\", items in `values` are taken to be value of all its descendants. When set to \"remainder\", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.</p> </li> <li>      count  Parent: <code>data[type=treemap]</code> Type: flaglist string.                      Any combination of \"branches\", \"leaves\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"branches\"</code>, <code>\"leaves\"</code>, <code>\"branches+leaves\"</code>,                   Default: <code>\"leaves\"</code> <p>Determines default for `values` when it is not provided, by inferring a 1 for each of the \"leaves\" and/or \"branches\", otherwise 0.</p> </li> <li>      customdata  Parent: <code>data[type=treemap]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      domain  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      column  Parent: <code>data[type=treemap].domain</code> Type: integer<p>If there is a layout grid, use the domain for this column in the grid for this treemap trace .</p> </li> <li>      row  Parent: <code>data[type=treemap].domain</code> Type: integer<p>If there is a layout grid, use the domain for this row in the grid for this treemap trace .</p> </li> <li>      x  Parent: <code>data[type=treemap].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the horizontal domain of this treemap trace (in plot fraction).</p> </li> <li>      y  Parent: <code>data[type=treemap].domain</code>  {inner}Type: {array}                 Default: <code>[0, 1]</code> <p>Sets the vertical domain of this treemap trace (in plot fraction).</p> </li> </ul> </li> <li>      hoverinfo  Parent: <code>data[type=treemap]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"name\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"all\"</code> Default: <code>\"label+text+value+name\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=treemap].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=treemap].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=treemap].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=treemap].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=treemap].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=treemap].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=treemap].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=treemap]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=treemap]</code> Type: string or array of strings<p>Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=treemap]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      insidetextfont  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying inside the sector.</p> <ul> <li>      color  Parent: <code>data[type=treemap].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=treemap].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      labels  Parent: <code>data[type=treemap]</code> Type: data_array <p>Sets the labels of each of the sectors.</p> </li> <li>      legend  Parent: <code>data[type=treemap]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=treemap].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=treemap].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=treemap]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=treemap]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      level  Parent: <code>data[type=treemap]</code> Type: number or categorical coordinate string <p>Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.</p> </li> <li>      marker  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      autocolorscale  Parent: <code>data[type=treemap].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      cauto  Parent: <code>data[type=treemap].marker</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=treemap].marker</code> Type: number<p>Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=treemap].marker</code> Type: number<p>Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=treemap].marker</code> Type: number<p>Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=treemap].marker</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=treemap].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=treemap].marker.colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=treemap].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=treemap].marker.colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=treemap].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=treemap].marker.colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=treemap].marker.colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=treemap].marker.colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=treemap].marker.colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=treemap].marker.colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].marker.colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=treemap].marker.colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=treemap].marker.colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=treemap].marker.colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=treemap].marker.colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=treemap].marker.colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=treemap].marker.colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=treemap].marker.colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=treemap].marker.colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=treemap].marker.colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=treemap].marker.colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=treemap].marker.colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=treemap].marker.colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=treemap].marker.colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=treemap].marker.colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].marker.colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=treemap].marker.colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=treemap].marker.colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=treemap].marker.colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=treemap].marker.colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colors  Parent: <code>data[type=treemap].marker</code> Type: data_array <p>Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.</p> </li> <li>      colorscale  Parent: <code>data[type=treemap].marker</code> Type: colorscale <p>Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      cornerradius  Parent: <code>data[type=treemap].marker</code> Type: number<p>Sets the maximum rounding of corners (in px).</p> </li> <li>      depthfade  Parent: <code>data[type=treemap].marker</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"reversed\"</code>                    ) <p>Determines if the sector colors are faded towards the background from the leaves up to the headers. This option is unavailable when a `colorscale` is present, defaults to false when `marker.colors` is set, but otherwise defaults to true. When set to \"reversed\", the fading direction is inverted, that is the top elements within hierarchy are drawn with fully saturated colors while the leaves are faded towards the background color.</p> </li> <li>      line  Parent: <code>data[type=treemap].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=treemap].marker.line</code> Type: color or array of colors<p>Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.</p> </li> <li>      width  Parent: <code>data[type=treemap].marker.line</code> Type: number or array of numbers                Default: <code>1</code> <p>Sets the width (in px) of the line enclosing each sector.</p> </li> </ul> </li> <li>      pad  Parent: <code>data[type=treemap].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      b  Parent: <code>data[type=treemap].marker.pad</code> Type: number<p>Sets the padding form the bottom (in px).</p> </li> <li>      l  Parent: <code>data[type=treemap].marker.pad</code> Type: number<p>Sets the padding form the left (in px).</p> </li> <li>      r  Parent: <code>data[type=treemap].marker.pad</code> Type: number<p>Sets the padding form the right (in px).</p> </li> <li>      t  Parent: <code>data[type=treemap].marker.pad</code> Type: number<p>Sets the padding form the top (in px).</p> </li> </ul> </li> <li>      pattern  Parent: <code>data[type=treemap].marker</code> Type: object containing one or more of the keys listed below. <p>Sets the pattern within the marker.</p> <ul> <li>      bgcolor  Parent: <code>data[type=treemap].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is \"overlay\". Otherwise, defaults to a transparent background.</p> </li> <li>      fgcolor  Parent: <code>data[type=treemap].marker.pattern</code> Type: color or array of colors<p>When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is \"replace\". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.</p> </li> <li>      fgopacity  Parent: <code>data[type=treemap].marker.pattern</code> Type: number less than or equal to 1 <p>Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is \"overlay\". Otherwise, defaults to 1.</p> </li> <li>      fillmode  Parent: <code>data[type=treemap].marker.pattern</code> Type:                     enumerated                    , one of ( <code>\"replace\"</code>| <code>\"overlay\"</code>                    )                 Default: <code>\"replace\"</code> <p>Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.</p> </li> <li>      path  Parent: <code>data[type=treemap].marker.pattern</code> Type: string or array of strings<p>Sets a custom path for pattern fill. Use with no `shape` or `solidity`, provide an SVG path string for the regions of the square from (0,0) to (`size`,`size`) to color.</p> </li> <li>      shape  Parent: <code>data[type=treemap].marker.pattern</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>| <code>\"x\"</code>| <code>\"-\"</code>| <code>\"|\"</code>| <code>\"+\"</code>| <code>\".\"</code>                    ) <p>Sets the shape of the pattern fill. By default, no pattern is used for filling the area.</p> </li> <li>      size  Parent: <code>data[type=treemap].marker.pattern</code> Type: number or array of numbers                Default: <code>8</code> <p>Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.</p> </li> <li>      solidity  Parent: <code>data[type=treemap].marker.pattern</code> Type: number or array of numbers less than or equal to 1                 Default: <code>0.3</code> <p>Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.</p> </li> </ul> </li> <li>      reversescale  Parent: <code>data[type=treemap].marker</code> Type: boolean<p>Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.</p> </li> <li>      showscale  Parent: <code>data[type=treemap].marker</code> Type: boolean<p>Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.</p> </li> </ul> </li> <li>      maxdepth  Parent: <code>data[type=treemap]</code> Type: integer                Default: <code>-1</code> <p>Sets the number of rendered sectors from any given `level`. Set `maxdepth` to \"-1\" to render all the levels in the hierarchy.</p> </li> <li>      meta  Parent: <code>data[type=treemap]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=treemap]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=treemap]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      outsidetextfont  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.</p> <ul> <li>      color  Parent: <code>data[type=treemap].outsidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=treemap].outsidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].outsidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].outsidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].outsidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      parents  Parent: <code>data[type=treemap]</code> Type: data_array <p>Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be \"ids\" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.</p> </li> <li>      pathbar  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      edgeshape  Parent: <code>data[type=treemap].pathbar</code> Type:                     enumerated                    , one of ( <code>\"&gt;\"</code>| <code>\"&lt;\"</code>| <code>\"|\"</code>| <code>\"/\"</code>| <code>\"\\\"</code>                    )                 Default: <code>\"&gt;\"</code> <p>Determines which shape is used for edges between `barpath` labels.</p> </li> <li>      side  Parent: <code>data[type=treemap].pathbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"bottom\"</code>                    )                 Default: <code>\"top\"</code> <p>Determines on which side of the the treemap the `pathbar` should be presented.</p> </li> <li>      textfont  Parent: <code>data[type=treemap].pathbar</code> Type: object containing one or more of the keys listed below. <p>Sets the font used inside `pathbar`.</p> <ul> <li>      color  Parent: <code>data[type=treemap].pathbar.textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=treemap].pathbar.textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].pathbar.textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].pathbar.textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].pathbar.textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].pathbar.textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].pathbar.textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].pathbar.textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].pathbar.textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      thickness  Parent: <code>data[type=treemap].pathbar</code> Type: number greater than or equal to 12 <p>Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.</p> </li> <li>      visible  Parent: <code>data[type=treemap].pathbar</code> Type: boolean                Default: <code>true</code> <p>Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.</p> </li> </ul> </li> <li>      root  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=treemap].root</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.</p> </li> </ul> </li> <li>      sort  Parent: <code>data[type=treemap]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the sectors are reordered from largest to smallest.</p> </li> <li>      text  Parent: <code>data[type=treemap]</code> Type: data_array <p>Sets text elements associated with each sector. If trace `textinfo` contains a \"text\" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textfont  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `textinfo`.</p> <ul> <li>      color  Parent: <code>data[type=treemap].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=treemap].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=treemap].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=treemap].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=treemap].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=treemap].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=treemap].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=treemap].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=treemap].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textinfo  Parent: <code>data[type=treemap]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"value\", \"current path\", \"percent root\", \"percent entry\", \"percent parent\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+value\"</code>, <code>\"none\"</code> <p>Determines which trace information appear on the graph.</p> </li> <li>      textposition  Parent: <code>data[type=treemap]</code> Type:                     enumerated                    , one of ( <code>\"top left\"</code>| <code>\"top center\"</code>| <code>\"top right\"</code>| <code>\"middle left\"</code>| <code>\"middle center\"</code>| <code>\"middle right\"</code>| <code>\"bottom left\"</code>| <code>\"bottom center\"</code>| <code>\"bottom right\"</code>                    )                 Default: <code>\"top left\"</code> <p>Sets the positions of the `text` elements.</p> </li> <li>      texttemplate  Parent: <code>data[type=treemap]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.</p> </li> <li>      tiling  Parent: <code>data[type=treemap]</code> Type: object containing one or more of the keys listed below. <ul> <li>      flip  Parent: <code>data[type=treemap].tiling</code> Type: flaglist string.                      Any combination of \"x\", \"y\" joined with a <code>\"+\"</code>                     OR .                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>,   <p>Determines if the positions obtained from solver are flipped on each axis.</p> </li> <li>      packing  Parent: <code>data[type=treemap].tiling</code> Type:                     enumerated                    , one of ( <code>\"squarify\"</code>| <code>\"binary\"</code>| <code>\"dice\"</code>| <code>\"slice\"</code>| <code>\"slice-dice\"</code>| <code>\"dice-slice\"</code>                    )                 Default: <code>\"squarify\"</code> <p>Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling</p> </li> <li>      pad  Parent: <code>data[type=treemap].tiling</code> Type: number                Default: <code>3</code> <p>Sets the inner padding (in px).</p> </li> <li>      squarifyratio  Parent: <code>data[type=treemap].tiling</code> Type: number greater than or equal to 1                 Default: <code>1</code> <p>When using \"squarify\" `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/v3.1.1/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using \"squarify\", unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.</p> </li> </ul> </li> <li>      type  Parent: <code>data[type=treemap]</code> Type: \"treemap\" </li> <li>      uid  Parent: <code>data[type=treemap]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=treemap]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      values  Parent: <code>data[type=treemap]</code> Type: data_array <p>Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.</p> </li> <li>      visible  Parent: <code>data[type=treemap]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> </ul>"},{"location":"reference/violin/","title":"violin","text":"A <code>violin</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"violin\"</code>   (i.e. <code>{\"type\": \"violin\"}</code>) and any of the keys listed below.   In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) array is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided. <ul> <li>      alignmentgroup  Parent: <code>data[type=violin]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</p> </li> <li>      bandwidth  Parent: <code>data[type=violin]</code> Type: number<p>Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.</p> </li> <li>      box  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      fillcolor  Parent: <code>data[type=violin].box</code> Type: color<p>Sets the inner box plot fill color.</p> </li> <li>      line  Parent: <code>data[type=violin].box</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=violin].box.line</code> Type: color<p>Sets the inner box plot bounding line color.</p> </li> <li>      width  Parent: <code>data[type=violin].box.line</code> Type: number<p>Sets the inner box plot bounding line width.</p> </li> </ul> </li> <li>      visible  Parent: <code>data[type=violin].box</code> Type: boolean<p>Determines if an miniature box plot is drawn inside the violins. </p> </li> <li>      width  Parent: <code>data[type=violin].box</code> Type: number less than or equal to 1                 Default: <code>0.25</code> <p>Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=violin]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      fillcolor  Parent: <code>data[type=violin]</code> Type: color<p>Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.</p> </li> <li>      hoverinfo  Parent: <code>data[type=violin]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=violin].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=violin].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=violin].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=violin].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=violin].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=violin].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=violin].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=violin].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=violin].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=violin].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=violin].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=violin].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=violin].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=violin].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hoveron  Parent: <code>data[type=violin]</code> Type: flaglist string.                      Any combination of \"violins\", \"points\", \"kde\" joined with a <code>\"+\"</code>                     OR \"all\".                      Examples: <code>\"violins\"</code>, <code>\"points\"</code>, <code>\"violins+points\"</code>, <code>\"violins+points+kde\"</code>, <code>\"all\"</code> Default: <code>\"violins+points+kde\"</code> <p>Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?</p> </li> <li>      hovertemplate  Parent: <code>data[type=violin]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=violin]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=violin]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      jitter  Parent: <code>data[type=violin]</code> Type: number less than or equal to 1 <p>Sets the amount of jitter in the sample points drawn. If \"0\", the sample points align along the distribution axis. If \"1\", the sample points are drawn in a random jitter of width equal to the width of the violins.</p> </li> <li>      legend  Parent: <code>data[type=violin]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=violin]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=violin].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=violin].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=violin].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=violin]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=violin]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      line  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=violin].line</code> Type: color<p>Sets the color of line bounding the violin(s).</p> </li> <li>      width  Parent: <code>data[type=violin].line</code> Type: number                Default: <code>2</code> <p>Sets the width (in px) of line bounding the violin(s).</p> </li> </ul> </li> <li>      marker  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      angle  Parent: <code>data[type=violin].marker</code> Type: angle <p>Sets the marker angle in respect to `angleref`.</p> </li> <li>      color  Parent: <code>data[type=violin].marker</code> Type: color<p>Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.</p> </li> <li>      line  Parent: <code>data[type=violin].marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=violin].marker.line</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.</p> </li> <li>      outliercolor  Parent: <code>data[type=violin].marker.line</code> Type: color<p>Sets the border line color of the outlier sample points. Defaults to marker.color</p> </li> <li>      outlierwidth  Parent: <code>data[type=violin].marker.line</code> Type: number                Default: <code>1</code> <p>Sets the border line width (in px) of the outlier sample points.</p> </li> <li>      width  Parent: <code>data[type=violin].marker.line</code> Type: number<p>Sets the width (in px) of the lines bounding the marker points.</p> </li> </ul> </li> <li>      opacity  Parent: <code>data[type=violin].marker</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the marker opacity.</p> </li> <li>      outliercolor  Parent: <code>data[type=violin].marker</code> Type: color                Default: <code>\"rgba(0, 0, 0, 0)\"</code> <p>Sets the color of the outlier sample points.</p> </li> <li>      size  Parent: <code>data[type=violin].marker</code> Type: number                Default: <code>6</code> <p>Sets the marker size (in px).</p> </li> <li>      symbol  Parent: <code>data[type=violin].marker</code> Type:                     enumerated                    , one of ( <code>\"0\"</code>| <code>\"0\"</code>| <code>\"circle\"</code>| <code>\"100\"</code>| <code>\"100\"</code>| <code>\"circle-open\"</code>| <code>\"200\"</code>| <code>\"200\"</code>| <code>\"circle-dot\"</code>| <code>\"300\"</code>| <code>\"300\"</code>| <code>\"circle-open-dot\"</code>| <code>\"1\"</code>| <code>\"1\"</code>| <code>\"square\"</code>| <code>\"101\"</code>| <code>\"101\"</code>| <code>\"square-open\"</code>| <code>\"201\"</code>| <code>\"201\"</code>| <code>\"square-dot\"</code>| <code>\"301\"</code>| <code>\"301\"</code>| <code>\"square-open-dot\"</code>| <code>\"2\"</code>| <code>\"2\"</code>| <code>\"diamond\"</code>| <code>\"102\"</code>| <code>\"102\"</code>| <code>\"diamond-open\"</code>| <code>\"202\"</code>| <code>\"202\"</code>| <code>\"diamond-dot\"</code>| <code>\"302\"</code>| <code>\"302\"</code>| <code>\"diamond-open-dot\"</code>| <code>\"3\"</code>| <code>\"3\"</code>| <code>\"cross\"</code>| <code>\"103\"</code>| <code>\"103\"</code>| <code>\"cross-open\"</code>| <code>\"203\"</code>| <code>\"203\"</code>| <code>\"cross-dot\"</code>| <code>\"303\"</code>| <code>\"303\"</code>| <code>\"cross-open-dot\"</code>| <code>\"4\"</code>| <code>\"4\"</code>| <code>\"x\"</code>| <code>\"104\"</code>| <code>\"104\"</code>| <code>\"x-open\"</code>| <code>\"204\"</code>| <code>\"204\"</code>| <code>\"x-dot\"</code>| <code>\"304\"</code>| <code>\"304\"</code>| <code>\"x-open-dot\"</code>| <code>\"5\"</code>| <code>\"5\"</code>| <code>\"triangle-up\"</code>| <code>\"105\"</code>| <code>\"105\"</code>| <code>\"triangle-up-open\"</code>| <code>\"205\"</code>| <code>\"205\"</code>| <code>\"triangle-up-dot\"</code>| <code>\"305\"</code>| <code>\"305\"</code>| <code>\"triangle-up-open-dot\"</code>| <code>\"6\"</code>| <code>\"6\"</code>| <code>\"triangle-down\"</code>| <code>\"106\"</code>| <code>\"106\"</code>| <code>\"triangle-down-open\"</code>| <code>\"206\"</code>| <code>\"206\"</code>| <code>\"triangle-down-dot\"</code>| <code>\"306\"</code>| <code>\"306\"</code>| <code>\"triangle-down-open-dot\"</code>| <code>\"7\"</code>| <code>\"7\"</code>| <code>\"triangle-left\"</code>| <code>\"107\"</code>| <code>\"107\"</code>| <code>\"triangle-left-open\"</code>| <code>\"207\"</code>| <code>\"207\"</code>| <code>\"triangle-left-dot\"</code>| <code>\"307\"</code>| <code>\"307\"</code>| <code>\"triangle-left-open-dot\"</code>| <code>\"8\"</code>| <code>\"8\"</code>| <code>\"triangle-right\"</code>| <code>\"108\"</code>| <code>\"108\"</code>| <code>\"triangle-right-open\"</code>| <code>\"208\"</code>| <code>\"208\"</code>| <code>\"triangle-right-dot\"</code>| <code>\"308\"</code>| <code>\"308\"</code>| <code>\"triangle-right-open-dot\"</code>| <code>\"9\"</code>| <code>\"9\"</code>| <code>\"triangle-ne\"</code>| <code>\"109\"</code>| <code>\"109\"</code>| <code>\"triangle-ne-open\"</code>| <code>\"209\"</code>| <code>\"209\"</code>| <code>\"triangle-ne-dot\"</code>| <code>\"309\"</code>| <code>\"309\"</code>| <code>\"triangle-ne-open-dot\"</code>| <code>\"10\"</code>| <code>\"10\"</code>| <code>\"triangle-se\"</code>| <code>\"110\"</code>| <code>\"110\"</code>| <code>\"triangle-se-open\"</code>| <code>\"210\"</code>| <code>\"210\"</code>| <code>\"triangle-se-dot\"</code>| <code>\"310\"</code>| <code>\"310\"</code>| <code>\"triangle-se-open-dot\"</code>| <code>\"11\"</code>| <code>\"11\"</code>| <code>\"triangle-sw\"</code>| <code>\"111\"</code>| <code>\"111\"</code>| <code>\"triangle-sw-open\"</code>| <code>\"211\"</code>| <code>\"211\"</code>| <code>\"triangle-sw-dot\"</code>| <code>\"311\"</code>| <code>\"311\"</code>| <code>\"triangle-sw-open-dot\"</code>| <code>\"12\"</code>| <code>\"12\"</code>| <code>\"triangle-nw\"</code>| <code>\"112\"</code>| <code>\"112\"</code>| <code>\"triangle-nw-open\"</code>| <code>\"212\"</code>| <code>\"212\"</code>| <code>\"triangle-nw-dot\"</code>| <code>\"312\"</code>| <code>\"312\"</code>| <code>\"triangle-nw-open-dot\"</code>| <code>\"13\"</code>| <code>\"13\"</code>| <code>\"pentagon\"</code>| <code>\"113\"</code>| <code>\"113\"</code>| <code>\"pentagon-open\"</code>| <code>\"213\"</code>| <code>\"213\"</code>| <code>\"pentagon-dot\"</code>| <code>\"313\"</code>| <code>\"313\"</code>| <code>\"pentagon-open-dot\"</code>| <code>\"14\"</code>| <code>\"14\"</code>| <code>\"hexagon\"</code>| <code>\"114\"</code>| <code>\"114\"</code>| <code>\"hexagon-open\"</code>| <code>\"214\"</code>| <code>\"214\"</code>| <code>\"hexagon-dot\"</code>| <code>\"314\"</code>| <code>\"314\"</code>| <code>\"hexagon-open-dot\"</code>| <code>\"15\"</code>| <code>\"15\"</code>| <code>\"hexagon2\"</code>| <code>\"115\"</code>| <code>\"115\"</code>| <code>\"hexagon2-open\"</code>| <code>\"215\"</code>| <code>\"215\"</code>| <code>\"hexagon2-dot\"</code>| <code>\"315\"</code>| <code>\"315\"</code>| <code>\"hexagon2-open-dot\"</code>| <code>\"16\"</code>| <code>\"16\"</code>| <code>\"octagon\"</code>| <code>\"116\"</code>| <code>\"116\"</code>| <code>\"octagon-open\"</code>| <code>\"216\"</code>| <code>\"216\"</code>| <code>\"octagon-dot\"</code>| <code>\"316\"</code>| <code>\"316\"</code>| <code>\"octagon-open-dot\"</code>| <code>\"17\"</code>| <code>\"17\"</code>| <code>\"star\"</code>| <code>\"117\"</code>| <code>\"117\"</code>| <code>\"star-open\"</code>| <code>\"217\"</code>| <code>\"217\"</code>| <code>\"star-dot\"</code>| <code>\"317\"</code>| <code>\"317\"</code>| <code>\"star-open-dot\"</code>| <code>\"18\"</code>| <code>\"18\"</code>| <code>\"hexagram\"</code>| <code>\"118\"</code>| <code>\"118\"</code>| <code>\"hexagram-open\"</code>| <code>\"218\"</code>| <code>\"218\"</code>| <code>\"hexagram-dot\"</code>| <code>\"318\"</code>| <code>\"318\"</code>| <code>\"hexagram-open-dot\"</code>| <code>\"19\"</code>| <code>\"19\"</code>| <code>\"star-triangle-up\"</code>| <code>\"119\"</code>| <code>\"119\"</code>| <code>\"star-triangle-up-open\"</code>| <code>\"219\"</code>| <code>\"219\"</code>| <code>\"star-triangle-up-dot\"</code>| <code>\"319\"</code>| <code>\"319\"</code>| <code>\"star-triangle-up-open-dot\"</code>| <code>\"20\"</code>| <code>\"20\"</code>| <code>\"star-triangle-down\"</code>| <code>\"120\"</code>| <code>\"120\"</code>| <code>\"star-triangle-down-open\"</code>| <code>\"220\"</code>| <code>\"220\"</code>| <code>\"star-triangle-down-dot\"</code>| <code>\"320\"</code>| <code>\"320\"</code>| <code>\"star-triangle-down-open-dot\"</code>| <code>\"21\"</code>| <code>\"21\"</code>| <code>\"star-square\"</code>| <code>\"121\"</code>| <code>\"121\"</code>| <code>\"star-square-open\"</code>| <code>\"221\"</code>| <code>\"221\"</code>| <code>\"star-square-dot\"</code>| <code>\"321\"</code>| <code>\"321\"</code>| <code>\"star-square-open-dot\"</code>| <code>\"22\"</code>| <code>\"22\"</code>| <code>\"star-diamond\"</code>| <code>\"122\"</code>| <code>\"122\"</code>| <code>\"star-diamond-open\"</code>| <code>\"222\"</code>| <code>\"222\"</code>| <code>\"star-diamond-dot\"</code>| <code>\"322\"</code>| <code>\"322\"</code>| <code>\"star-diamond-open-dot\"</code>| <code>\"23\"</code>| <code>\"23\"</code>| <code>\"diamond-tall\"</code>| <code>\"123\"</code>| <code>\"123\"</code>| <code>\"diamond-tall-open\"</code>| <code>\"223\"</code>| <code>\"223\"</code>| <code>\"diamond-tall-dot\"</code>| <code>\"323\"</code>| <code>\"323\"</code>| <code>\"diamond-tall-open-dot\"</code>| <code>\"24\"</code>| <code>\"24\"</code>| <code>\"diamond-wide\"</code>| <code>\"124\"</code>| <code>\"124\"</code>| <code>\"diamond-wide-open\"</code>| <code>\"224\"</code>| <code>\"224\"</code>| <code>\"diamond-wide-dot\"</code>| <code>\"324\"</code>| <code>\"324\"</code>| <code>\"diamond-wide-open-dot\"</code>| <code>\"25\"</code>| <code>\"25\"</code>| <code>\"hourglass\"</code>| <code>\"125\"</code>| <code>\"125\"</code>| <code>\"hourglass-open\"</code>| <code>\"26\"</code>| <code>\"26\"</code>| <code>\"bowtie\"</code>| <code>\"126\"</code>| <code>\"126\"</code>| <code>\"bowtie-open\"</code>| <code>\"27\"</code>| <code>\"27\"</code>| <code>\"circle-cross\"</code>| <code>\"127\"</code>| <code>\"127\"</code>| <code>\"circle-cross-open\"</code>| <code>\"28\"</code>| <code>\"28\"</code>| <code>\"circle-x\"</code>| <code>\"128\"</code>| <code>\"128\"</code>| <code>\"circle-x-open\"</code>| <code>\"29\"</code>| <code>\"29\"</code>| <code>\"square-cross\"</code>| <code>\"129\"</code>| <code>\"129\"</code>| <code>\"square-cross-open\"</code>| <code>\"30\"</code>| <code>\"30\"</code>| <code>\"square-x\"</code>| <code>\"130\"</code>| <code>\"130\"</code>| <code>\"square-x-open\"</code>| <code>\"31\"</code>| <code>\"31\"</code>| <code>\"diamond-cross\"</code>| <code>\"131\"</code>| <code>\"131\"</code>| <code>\"diamond-cross-open\"</code>| <code>\"32\"</code>| <code>\"32\"</code>| <code>\"diamond-x\"</code>| <code>\"132\"</code>| <code>\"132\"</code>| <code>\"diamond-x-open\"</code>| <code>\"33\"</code>| <code>\"33\"</code>| <code>\"cross-thin\"</code>| <code>\"133\"</code>| <code>\"133\"</code>| <code>\"cross-thin-open\"</code>| <code>\"34\"</code>| <code>\"34\"</code>| <code>\"x-thin\"</code>| <code>\"134\"</code>| <code>\"134\"</code>| <code>\"x-thin-open\"</code>| <code>\"35\"</code>| <code>\"35\"</code>| <code>\"asterisk\"</code>| <code>\"135\"</code>| <code>\"135\"</code>| <code>\"asterisk-open\"</code>| <code>\"36\"</code>| <code>\"36\"</code>| <code>\"hash\"</code>| <code>\"136\"</code>| <code>\"136\"</code>| <code>\"hash-open\"</code>| <code>\"236\"</code>| <code>\"236\"</code>| <code>\"hash-dot\"</code>| <code>\"336\"</code>| <code>\"336\"</code>| <code>\"hash-open-dot\"</code>| <code>\"37\"</code>| <code>\"37\"</code>| <code>\"y-up\"</code>| <code>\"137\"</code>| <code>\"137\"</code>| <code>\"y-up-open\"</code>| <code>\"38\"</code>| <code>\"38\"</code>| <code>\"y-down\"</code>| <code>\"138\"</code>| <code>\"138\"</code>| <code>\"y-down-open\"</code>| <code>\"39\"</code>| <code>\"39\"</code>| <code>\"y-left\"</code>| <code>\"139\"</code>| <code>\"139\"</code>| <code>\"y-left-open\"</code>| <code>\"40\"</code>| <code>\"40\"</code>| <code>\"y-right\"</code>| <code>\"140\"</code>| <code>\"140\"</code>| <code>\"y-right-open\"</code>| <code>\"41\"</code>| <code>\"41\"</code>| <code>\"line-ew\"</code>| <code>\"141\"</code>| <code>\"141\"</code>| <code>\"line-ew-open\"</code>| <code>\"42\"</code>| <code>\"42\"</code>| <code>\"line-ns\"</code>| <code>\"142\"</code>| <code>\"142\"</code>| <code>\"line-ns-open\"</code>| <code>\"43\"</code>| <code>\"43\"</code>| <code>\"line-ne\"</code>| <code>\"143\"</code>| <code>\"143\"</code>| <code>\"line-ne-open\"</code>| <code>\"44\"</code>| <code>\"44\"</code>| <code>\"line-nw\"</code>| <code>\"144\"</code>| <code>\"144\"</code>| <code>\"line-nw-open\"</code>| <code>\"45\"</code>| <code>\"45\"</code>| <code>\"arrow-up\"</code>| <code>\"145\"</code>| <code>\"145\"</code>| <code>\"arrow-up-open\"</code>| <code>\"46\"</code>| <code>\"46\"</code>| <code>\"arrow-down\"</code>| <code>\"146\"</code>| <code>\"146\"</code>| <code>\"arrow-down-open\"</code>| <code>\"47\"</code>| <code>\"47\"</code>| <code>\"arrow-left\"</code>| <code>\"147\"</code>| <code>\"147\"</code>| <code>\"arrow-left-open\"</code>| <code>\"48\"</code>| <code>\"48\"</code>| <code>\"arrow-right\"</code>| <code>\"148\"</code>| <code>\"148\"</code>| <code>\"arrow-right-open\"</code>| <code>\"49\"</code>| <code>\"49\"</code>| <code>\"arrow-bar-up\"</code>| <code>\"149\"</code>| <code>\"149\"</code>| <code>\"arrow-bar-up-open\"</code>| <code>\"50\"</code>| <code>\"50\"</code>| <code>\"arrow-bar-down\"</code>| <code>\"150\"</code>| <code>\"150\"</code>| <code>\"arrow-bar-down-open\"</code>| <code>\"51\"</code>| <code>\"51\"</code>| <code>\"arrow-bar-left\"</code>| <code>\"151\"</code>| <code>\"151\"</code>| <code>\"arrow-bar-left-open\"</code>| <code>\"52\"</code>| <code>\"52\"</code>| <code>\"arrow-bar-right\"</code>| <code>\"152\"</code>| <code>\"152\"</code>| <code>\"arrow-bar-right-open\"</code>| <code>\"53\"</code>| <code>\"53\"</code>| <code>\"arrow\"</code>| <code>\"153\"</code>| <code>\"153\"</code>| <code>\"arrow-open\"</code>| <code>\"54\"</code>| <code>\"54\"</code>| <code>\"arrow-wide\"</code>| <code>\"154\"</code>| <code>\"154\"</code>| <code>\"arrow-wide-open\"</code>                    )                 Default: <code>\"circle\"</code> <p>Sets the marker symbol type. Adding 100 is equivalent to appending \"-open\" to a symbol name. Adding 200 is equivalent to appending \"-dot\" to a symbol name. Adding 300 is equivalent to appending \"-open-dot\" or \"dot-open\" to a symbol name.</p> </li> </ul> </li> <li>      meanline  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=violin].meanline</code> Type: color<p>Sets the mean line color.</p> </li> <li>      visible  Parent: <code>data[type=violin].meanline</code> Type: boolean<p>Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.</p> </li> <li>      width  Parent: <code>data[type=violin].meanline</code> Type: number<p>Sets the mean line width.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=violin]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=violin]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute `scalegroup` (please see its description for details).</p> </li> <li>      offsetgroup  Parent: <code>data[type=violin]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</p> </li> <li>      opacity  Parent: <code>data[type=violin]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      orientation  Parent: <code>data[type=violin]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    ) <p>Sets the orientation of the violin(s). If \"v\" (\"h\"), the distribution is visualized along the vertical (horizontal).</p> </li> <li>      pointpos  Parent: <code>data[type=violin]</code> Type: number between or equal to -2 and 2 <p>Sets the position of the sample points in relation to the violins. If \"0\", the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.</p> </li> <li>      points  Parent: <code>data[type=violin]</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"outliers\"</code>| <code>\"suspectedoutliers\"</code>| <code>false</code>                    ) <p>If \"outliers\", only the sample points lying outside the whiskers are shown If \"suspectedoutliers\", the outlier points are shown and points either less than 4\"Q1-3\"Q3 or greater than 4\"Q3-3\"Q1 are highlighted (see `outliercolor`) If \"all\", all sample points are shown If \"false\", only the violins are shown with no sample points. Defaults to \"suspectedoutliers\" when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to \"outliers\".</p> </li> <li>      quartilemethod  Parent: <code>data[type=violin]</code> Type:                     enumerated                    , one of ( <code>\"linear\"</code>| <code>\"exclusive\"</code>| <code>\"inclusive\"</code>                    )                 Default: <code>\"linear\"</code> <p>Sets the method used to compute the sample's Q1 and Q3 quartiles. The \"linear\" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The \"exclusive\" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The \"inclusive\" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.</p> </li> <li>      scalegroup  Parent: <code>data[type=violin]</code> Type: string<p>If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together</p> </li> <li>      scalemode  Parent: <code>data[type=violin]</code> Type:                     enumerated                    , one of ( <code>\"width\"</code>| <code>\"count\"</code>                    )                 Default: <code>\"width\"</code> <p>Sets the metric by which the width of each violin is determined. \"width\" means each violin has the same (max) width \"count\" means the violins are scaled by the number of sample points making up each violin.</p> </li> <li>      selected  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=violin].selected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=violin].selected.marker</code> Type: color<p>Sets the marker color of selected points.</p> </li> <li>      opacity  Parent: <code>data[type=violin].selected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of selected points.</p> </li> <li>      size  Parent: <code>data[type=violin].selected.marker</code> Type: number<p>Sets the marker size of selected points.</p> </li> </ul> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=violin]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=violin]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      side  Parent: <code>data[type=violin]</code> Type:                     enumerated                    , one of ( <code>\"both\"</code>| <code>\"positive\"</code>| <code>\"negative\"</code>                    )                 Default: <code>\"both\"</code> <p>Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under \"overlay\" mode, where one trace has `side` set to \"positive\" and the other to \"negative\".</p> </li> <li>      span  Parent: <code>data[type=violin]</code>  {inner}Type: {array} <p>Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to \"manual\".</p> </li> <li>      spanmode  Parent: <code>data[type=violin]</code> Type:                     enumerated                    , one of ( <code>\"soft\"</code>| <code>\"hard\"</code>| <code>\"manual\"</code>                    )                 Default: <code>\"soft\"</code> <p>Sets the method by which the span in data space where the density function will be computed. \"soft\" means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. \"hard\" means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode \"manual\" and fill in the `span` attribute.</p> </li> <li>      text  Parent: <code>data[type=violin]</code> Type: string or array of strings<p>Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      type  Parent: <code>data[type=violin]</code> Type: \"violin\" </li> <li>      uid  Parent: <code>data[type=violin]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=violin]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      unselected  Parent: <code>data[type=violin]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=violin].unselected</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=violin].unselected.marker</code> Type: color<p>Sets the marker color of unselected points, applied only when a selection exists.</p> </li> <li>      opacity  Parent: <code>data[type=violin].unselected.marker</code> Type: number less than or equal to 1 <p>Sets the marker opacity of unselected points, applied only when a selection exists.</p> </li> <li>      size  Parent: <code>data[type=violin].unselected.marker</code> Type: number<p>Sets the marker size of unselected points, applied only when a selection exists.</p> </li> </ul> </li> </ul> </li> <li>      visible  Parent: <code>data[type=violin]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      width  Parent: <code>data[type=violin]</code> Type: number<p>Sets the width of the violin in data coordinates. If \"0\" (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.</p> </li> <li>      x  Parent: <code>data[type=violin]</code> Type: data_array <p>Sets the x sample data or coordinates. See overview for more info.</p> </li> <li>      x0  Parent: <code>data[type=violin]</code> Type: number or categorical coordinate string <p>Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</p> </li> <li>      xaxis  Parent: <code>data[type=violin]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xhoverformat  Parent: <code>data[type=violin]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=violin]</code> Type: data_array <p>Sets the y sample data or coordinates. See overview for more info.</p> </li> <li>      y0  Parent: <code>data[type=violin]</code> Type: number or categorical coordinate string <p>Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.</p> </li> <li>      yaxis  Parent: <code>data[type=violin]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      yhoverformat  Parent: <code>data[type=violin]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      zorder  Parent: <code>data[type=violin]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"},{"location":"reference/volume/","title":"volume","text":"A <code>volume</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"volume\"</code>   (i.e. <code>{\"type\": \"volume\"}</code>) and any of the keys listed below.   Draws volume trace between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid. Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace. <ul> <li>      autocolorscale  Parent: <code>data[type=volume]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.</p> </li> <li>      caps  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=volume].caps</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=volume].caps.x</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      show  Parent: <code>data[type=volume].caps.x</code> Type: boolean                Default: <code>true</code> <p>Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> </ul> </li> <li>      y  Parent: <code>data[type=volume].caps</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=volume].caps.y</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      show  Parent: <code>data[type=volume].caps.y</code> Type: boolean                Default: <code>true</code> <p>Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> </ul> </li> <li>      z  Parent: <code>data[type=volume].caps</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=volume].caps.z</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      show  Parent: <code>data[type=volume].caps.z</code> Type: boolean                Default: <code>true</code> <p>Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> </ul> </li> </ul> </li> <li>      cauto  Parent: <code>data[type=volume]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.</p> </li> <li>      cmax  Parent: <code>data[type=volume]</code> Type: number<p>Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.</p> </li> <li>      cmid  Parent: <code>data[type=volume]</code> Type: number<p>Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.</p> </li> <li>      cmin  Parent: <code>data[type=volume]</code> Type: number<p>Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.</p> </li> <li>      coloraxis  Parent: <code>data[type=volume]</code> Type: subplotid <p>Sets a reference to a shared color axis. References to these shared color axes are \"coloraxis\", \"coloraxis2\", \"coloraxis3\", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.</p> </li> <li>      colorbar  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      bgcolor  Parent: <code>data[type=volume].colorbar</code> Type: color                Default: <code>\"rgba(0,0,0,0)\"</code> <p>Sets the color of padded area.</p> </li> <li>      bordercolor  Parent: <code>data[type=volume].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      borderwidth  Parent: <code>data[type=volume].colorbar</code> Type: number<p>Sets the width (in px) or the border enclosing this color bar.</p> </li> <li>      dtick  Parent: <code>data[type=volume].colorbar</code> Type: number or categorical coordinate string <p>Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to \"log\" and \"date\" axes. If the axis `type` is \"log\", then ticks are set every 10^(n\"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. \"log\" has several special values; \"L&lt;f&gt;\", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = \"L0.5\" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use \"D1\" (all digits) or \"D2\" (only 2 and 5). `tick0` is ignored for \"D1\" and \"D2\". If the axis `type` is \"date\", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. \"date\" also has special values \"M&lt;n&gt;\" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to \"2000-01-15\" and `dtick` to \"M3\". To set ticks every 4 years, set `dtick` to \"M48\"</p> </li> <li>      exponentformat  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"none\"</code>| <code>\"e\"</code>| <code>\"E\"</code>| <code>\"power\"</code>| <code>\"SI\"</code>| <code>\"B\"</code>                    )                 Default: <code>\"B\"</code> <p>Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If \"none\", it appears as 1,000,000,000. If \"e\", 1e+9. If \"E\", 1E+9. If \"power\", 1x10^9 (with 9 in a super script). If \"SI\", 1G. If \"B\", 1B.</p> </li> <li>      labelalias  Parent: <code>data[type=volume].colorbar</code> Type: number or categorical coordinate string <p>Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use \u22121 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.</p> </li> <li>      len  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.</p> </li> <li>      lenmode  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"fraction\"</code> <p>Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot \"fraction\" or in \"pixels. Use `len` to set the value.</p> </li> <li>      minexponent  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>3</code> <p>Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is \"SI\" or \"B\".</p> </li> <li>      nticks  Parent: <code>data[type=volume].colorbar</code> Type: integer<p>Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to \"auto\".</p> </li> <li>      orientation  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"h\"</code>| <code>\"v\"</code>                    )                 Default: <code>\"v\"</code> <p>Sets the orientation of the colorbar.</p> </li> <li>      outlinecolor  Parent: <code>data[type=volume].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the axis line color.</p> </li> <li>      outlinewidth  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the width (in px) of the axis line.</p> </li> <li>      separatethousands  Parent: <code>data[type=volume].colorbar</code> Type: boolean<p>If \"true\", even 4-digit integers are separated</p> </li> <li>      showexponent  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all exponents are shown besides their significands. If \"first\", only the exponent of the first tick is shown. If \"last\", only the exponent of the last tick is shown. If \"none\", no exponents appear.</p> </li> <li>      showticklabels  Parent: <code>data[type=volume].colorbar</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not the tick labels are drawn.</p> </li> <li>      showtickprefix  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>If \"all\", all tick labels are displayed with a prefix. If \"first\", only the first tick is displayed with a prefix. If \"last\", only the last tick is displayed with a suffix. If \"none\", tick prefixes are hidden.</p> </li> <li>      showticksuffix  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"all\"</code>| <code>\"first\"</code>| <code>\"last\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"all\"</code> <p>Same as `showtickprefix` but for tick suffixes.</p> </li> <li>      thickness  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>30</code> <p>Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.</p> </li> <li>      thicknessmode  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"fraction\"</code>| <code>\"pixels\"</code>                    )                 Default: <code>\"pixels\"</code> <p>Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot \"fraction\" or in \"pixels\". Use `thickness` to set the value.</p> </li> <li>      tick0  Parent: <code>data[type=volume].colorbar</code> Type: number or categorical coordinate string <p>Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is \"log\", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=\"L&lt;f&gt;\" (see `dtick` for more info). If the axis `type` is \"date\", it should be a date string, like date data. If the axis `type` is \"category\", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.</p> </li> <li>      tickangle  Parent: <code>data[type=volume].colorbar</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.</p> </li> <li>      tickcolor  Parent: <code>data[type=volume].colorbar</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the tick color.</p> </li> <li>      tickfont  Parent: <code>data[type=volume].colorbar</code> Type: object containing one or more of the keys listed below. <p>Sets the color bar's tick label font</p> <ul> <li>      color  Parent: <code>data[type=volume].colorbar.tickfont</code> Type: color</li> <li>      family  Parent: <code>data[type=volume].colorbar.tickfont</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=volume].colorbar.tickfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=volume].colorbar.tickfont</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=volume].colorbar.tickfont</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=volume].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=volume].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=volume].colorbar.tickfont</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=volume].colorbar.tickfont</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      tickformat  Parent: <code>data[type=volume].colorbar</code> Type: string<p>Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"</p> </li> <li>      tickformatstops  Parent: <code>data[type=volume].colorbar</code> Type: array of object where             each object has one or more of the keys listed below. <ul> <li>      dtickrange  Parent: <code>data[type=volume].colorbar.tickformatstops</code>  {inner}Type: {array} <p>range [\"min\", \"max\"], where \"min\", \"max\" - dtick values which describe some zoom level, it is possible to omit \"min\" or \"max\" value by passing \"null\"</p> </li> <li>      enabled  Parent: <code>data[type=volume].colorbar.tickformatstops</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.</p> </li> <li>      name  Parent: <code>data[type=volume].colorbar.tickformatstops</code> Type: string<p>When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.</p> </li> <li>      templateitemname  Parent: <code>data[type=volume].colorbar.tickformatstops</code> Type: string<p>Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.</p> </li> <li>      value  Parent: <code>data[type=volume].colorbar.tickformatstops</code> Type: string<p>string - dtickformat for described zoom level, the same as \"tickformat\"</p> </li> </ul> </li> <li>      ticklabeloverflow  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"allow\"</code>| <code>\"hide past div\"</code>| <code>\"hide past domain\"</code>                    ) <p>Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is \"hide past domain\". In other cases the default is \"hide past div\".</p> </li> <li>      ticklabelposition  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"outside top\"</code>| <code>\"inside top\"</code>| <code>\"outside left\"</code>| <code>\"inside left\"</code>| <code>\"outside right\"</code>| <code>\"inside right\"</code>| <code>\"outside bottom\"</code>| <code>\"inside bottom\"</code>                    )                 Default: <code>\"outside\"</code> <p>Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is \"h\", top and bottom when `orientation` is \"v\".</p> </li> <li>      ticklabelstep  Parent: <code>data[type=volume].colorbar</code> Type: integer greater than or equal to 1                 Default: <code>1</code> <p>Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` \"log\" or \"multicategory\", or when `tickmode` is \"array\".</p> </li> <li>      ticklen  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>5</code> <p>Sets the tick length (in px).</p> </li> <li>      tickmode  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"auto\"</code>| <code>\"linear\"</code>| <code>\"array\"</code>                    ) <p>Sets the tick mode for this axis. If \"auto\", the number of ticks is set via `nticks`. If \"linear\", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (\"linear\" is the default value if `tick0` and `dtick` are provided). If \"array\", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (\"array\" is the default value if `tickvals` is provided).</p> </li> <li>      tickprefix  Parent: <code>data[type=volume].colorbar</code> Type: string<p>Sets a tick label prefix.</p> </li> <li>      ticks  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"outside\"</code>| <code>\"inside\"</code>| <code>\"\"</code>                    ) <p>Determines whether ticks are drawn or not. If \"\", this axis' ticks are not drawn. If \"outside\" (\"inside\"), this axis' are drawn outside (inside) the axis lines.</p> </li> <li>      ticksuffix  Parent: <code>data[type=volume].colorbar</code> Type: string<p>Sets a tick label suffix.</p> </li> <li>      ticktext  Parent: <code>data[type=volume].colorbar</code> Type: data_array <p>Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to \"array\". Used with `tickvals`.</p> </li> <li>      tickvals  Parent: <code>data[type=volume].colorbar</code> Type: data_array <p>Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to \"array\". Used with `ticktext`.</p> </li> <li>      tickwidth  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>1</code> <p>Sets the tick width (in px).</p> </li> <li>      title  Parent: <code>data[type=volume].colorbar</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=volume].colorbar.title</code> Type: object containing one or more of the keys listed below. <p>Sets this color bar's title font.</p> <ul> <li>      color  Parent: <code>data[type=volume].colorbar.title.font</code> Type: color</li> <li>      family  Parent: <code>data[type=volume].colorbar.title.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=volume].colorbar.title.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=volume].colorbar.title.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=volume].colorbar.title.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=volume].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=volume].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=volume].colorbar.title.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=volume].colorbar.title.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      side  Parent: <code>data[type=volume].colorbar.title</code> Type:                     enumerated                    , one of ( <code>\"right\"</code>| <code>\"top\"</code>| <code>\"bottom\"</code>                    ) <p>Determines the location of color bar's title with respect to the color bar. Defaults to \"top\" when `orientation` if \"v\" and  defaults to \"right\" when `orientation` if \"h\".</p> </li> <li>      text  Parent: <code>data[type=volume].colorbar.title</code> Type: string<p>Sets the title of the color bar.</p> </li> </ul> </li> <li>      x  Parent: <code>data[type=volume].colorbar</code> Type: number<p>Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is \"paper\", defaults to 1.02 when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". When `xref` is \"container\", defaults to \"1\" when `orientation` is \"v\" and 0.5 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `xref` is \"container\" and between \"-2\" and \"3\" if `xref` is \"paper\".</p> </li> <li>      xanchor  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"left\"</code>| <code>\"center\"</code>| <code>\"right\"</code>                    ) <p>Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the \"left\", \"center\" or \"right\" of the color bar. Defaults to \"left\" when `orientation` is \"v\" and \"center\" when `orientation` is \"h\".</p> </li> <li>      xpad  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the x direction.</p> </li> <li>      xref  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `x` refers to. \"container\" spans the entire `width` of the plot. \"paper\" refers to the width of the plotting area only.</p> </li> <li>      y  Parent: <code>data[type=volume].colorbar</code> Type: number<p>Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is \"paper\", defaults to 0.5 when `orientation` is \"v\" and 1.02 when `orientation` is \"h\". When `yref` is \"container\", defaults to 0.5 when `orientation` is \"v\" and 1 when `orientation` is \"h\". Must be between \"0\" and \"1\" if `yref` is \"container\" and between \"-2\" and \"3\" if `yref` is \"paper\".</p> </li> <li>      yanchor  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"top\"</code>| <code>\"middle\"</code>| <code>\"bottom\"</code>                    ) <p>Sets this color bar's vertical position anchor This anchor binds the `y` position to the \"top\", \"middle\" or \"bottom\" of the color bar. Defaults to \"middle\" when `orientation` is \"v\" and \"bottom\" when `orientation` is \"h\".</p> </li> <li>      ypad  Parent: <code>data[type=volume].colorbar</code> Type: number                Default: <code>10</code> <p>Sets the amount of padding (in px) along the y direction.</p> </li> <li>      yref  Parent: <code>data[type=volume].colorbar</code> Type:                     enumerated                    , one of ( <code>\"container\"</code>| <code>\"paper\"</code>                    )                 Default: <code>\"paper\"</code> <p>Sets the container `y` refers to. \"container\" spans the entire `height` of the plot. \"paper\" refers to the height of the plotting area only.</p> </li> </ul> </li> <li>      colorscale  Parent: <code>data[type=volume]</code> Type: colorscale <p>Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.</p> </li> <li>      contour  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=volume].contour</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the color of the contour lines.</p> </li> <li>      show  Parent: <code>data[type=volume].contour</code> Type: boolean<p>Sets whether or not dynamic contours are shown on hover</p> </li> <li>      width  Parent: <code>data[type=volume].contour</code> Type: number between or equal to 1 and 16                 Default: <code>2</code> <p>Sets the width of the contour lines.</p> </li> </ul> </li> <li>      customdata  Parent: <code>data[type=volume]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      flatshading  Parent: <code>data[type=volume]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.</p> </li> <li>      hoverinfo  Parent: <code>data[type=volume]</code> Type: flaglist string.                      Any combination of \"x\", \"y\", \"z\", \"text\", \"name\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"x\"</code>, <code>\"y\"</code>, <code>\"x+y\"</code>, <code>\"x+y+z\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=volume].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=volume].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=volume].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=volume].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=volume].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=volume].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=volume].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=volume].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=volume].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=volume].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=volume].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=volume].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=volume].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=volume].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=volume]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=volume]</code> Type: string or array of strings<p>Same as `text`.</p> </li> <li>      ids  Parent: <code>data[type=volume]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      isomax  Parent: <code>data[type=volume]</code> Type: number<p>Sets the maximum boundary for iso-surface plot.</p> </li> <li>      isomin  Parent: <code>data[type=volume]</code> Type: number<p>Sets the minimum boundary for iso-surface plot.</p> </li> <li>      legend  Parent: <code>data[type=volume]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=volume]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=volume].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=volume].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=volume].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=volume]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=volume]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      lighting  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      ambient  Parent: <code>data[type=volume].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Ambient light increases overall color visibility but can wash out the image.</p> </li> <li>      diffuse  Parent: <code>data[type=volume].lighting</code> Type: number less than or equal to 1                 Default: <code>0.8</code> <p>Represents the extent that incident rays are reflected in a range of angles.</p> </li> <li>      facenormalsepsilon  Parent: <code>data[type=volume].lighting</code> Type: number less than or equal to 1 <p>Epsilon for face normals calculation avoids math issues arising from degenerate geometry.</p> </li> <li>      fresnel  Parent: <code>data[type=volume].lighting</code> Type: number less than or equal to 5                 Default: <code>0.2</code> <p>Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.</p> </li> <li>      roughness  Parent: <code>data[type=volume].lighting</code> Type: number less than or equal to 1                 Default: <code>0.5</code> <p>Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.</p> </li> <li>      specular  Parent: <code>data[type=volume].lighting</code> Type: number less than or equal to 2                 Default: <code>0.05</code> <p>Represents the level that incident rays are reflected in a single direction, causing shine.</p> </li> <li>      vertexnormalsepsilon  Parent: <code>data[type=volume].lighting</code> Type: number less than or equal to 1                 Default: <code>1e-12</code> <p>Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.</p> </li> </ul> </li> <li>      lightposition  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=volume].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the X coordinate for each vertex.</p> </li> <li>      y  Parent: <code>data[type=volume].lightposition</code> Type: number between or equal to -100000 and 100000                 Default: <code>100000</code> <p>Numeric vector, representing the Y coordinate for each vertex.</p> </li> <li>      z  Parent: <code>data[type=volume].lightposition</code> Type: number between or equal to -100000 and 100000 <p>Numeric vector, representing the Z coordinate for each vertex.</p> </li> </ul> </li> <li>      meta  Parent: <code>data[type=volume]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=volume]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      opacity  Parent: <code>data[type=volume]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.</p> </li> <li>      opacityscale  Parent: <code>data[type=volume]</code> Type: number or categorical coordinate string <p>Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.</p> </li> <li>      reversescale  Parent: <code>data[type=volume]</code> Type: boolean<p>Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.</p> </li> <li>      scene  Parent: <code>data[type=volume]</code> Type: subplotid                 Default: <code>scene</code> <p>Sets a reference between this trace's 3D coordinate system and a 3D scene. If \"scene\" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If \"scene2\", the (x,y,z) coordinates refer to `layout.scene2`, and so on.</p> </li> <li>      showlegend  Parent: <code>data[type=volume]</code> Type: boolean<p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      showscale  Parent: <code>data[type=volume]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not a colorbar is displayed for this trace.</p> </li> <li>      slices  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      x  Parent: <code>data[type=volume].slices</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=volume].slices.x</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      locations  Parent: <code>data[type=volume].slices.x</code> Type: data_array <p>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.</p> </li> <li>      show  Parent: <code>data[type=volume].slices.x</code> Type: boolean<p>Determines whether or not slice planes about the x dimension are drawn.</p> </li> </ul> </li> <li>      y  Parent: <code>data[type=volume].slices</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=volume].slices.y</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      locations  Parent: <code>data[type=volume].slices.y</code> Type: data_array <p>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.</p> </li> <li>      show  Parent: <code>data[type=volume].slices.y</code> Type: boolean<p>Determines whether or not slice planes about the y dimension are drawn.</p> </li> </ul> </li> <li>      z  Parent: <code>data[type=volume].slices</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=volume].slices.z</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      locations  Parent: <code>data[type=volume].slices.z</code> Type: data_array <p>Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.</p> </li> <li>      show  Parent: <code>data[type=volume].slices.z</code> Type: boolean<p>Determines whether or not slice planes about the z dimension are drawn.</p> </li> </ul> </li> </ul> </li> <li>      spaceframe  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      fill  Parent: <code>data[type=volume].spaceframe</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the `spaceframe` elements. The default fill value is 1 meaning that they are entirely shaded. Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      show  Parent: <code>data[type=volume].spaceframe</code> Type: boolean<p>Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.</p> </li> </ul> </li> <li>      surface  Parent: <code>data[type=volume]</code> Type: object containing one or more of the keys listed below. <ul> <li>      count  Parent: <code>data[type=volume].surface</code> Type: integer greater than or equal to 1                 Default: <code>2</code> <p>Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.</p> </li> <li>      fill  Parent: <code>data[type=volume].surface</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.</p> </li> <li>      pattern  Parent: <code>data[type=volume].surface</code> Type: flaglist string.                      Any combination of \"A\", \"B\", \"C\", \"D\", \"E\" joined with a <code>\"+\"</code>                     OR \"all\", \"odd\", \"even\".                      Examples: <code>\"A\"</code>, <code>\"B\"</code>, <code>\"A+B\"</code>, <code>\"A+B+C\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.</p> </li> <li>      show  Parent: <code>data[type=volume].surface</code> Type: boolean                Default: <code>true</code> <p>Hides/displays surfaces between minimum and maximum iso-values.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=volume]</code> Type: string or array of strings<p>Sets the text elements associated with the vertices. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      type  Parent: <code>data[type=volume]</code> Type: \"volume\" </li> <li>      uid  Parent: <code>data[type=volume]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=volume]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      value  Parent: <code>data[type=volume]</code> Type: data_array <p>Sets the 4th dimension (value) of the vertices.</p> </li> <li>      valuehoverformat  Parent: <code>data[type=volume]</code> Type: string<p>Sets the hover text formatting rulefor `value`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.</p> </li> <li>      visible  Parent: <code>data[type=volume]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      x  Parent: <code>data[type=volume]</code> Type: data_array <p>Sets the X coordinates of the vertices on X axis.</p> </li> <li>      xhoverformat  Parent: <code>data[type=volume]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      y  Parent: <code>data[type=volume]</code> Type: data_array <p>Sets the Y coordinates of the vertices on Y axis.</p> </li> <li>      yhoverformat  Parent: <code>data[type=volume]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      z  Parent: <code>data[type=volume]</code> Type: data_array <p>Sets the Z coordinates of the vertices on Z axis.</p> </li> <li>      zhoverformat  Parent: <code>data[type=volume]</code> Type: string<p>Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `zaxis.hoverformat`.</p> </li> </ul>"},{"location":"reference/waterfall/","title":"waterfall","text":"A <code>waterfall</code> trace is an object with the key <code>\"type\"</code> equal to <code>\"waterfall\"</code>   (i.e. <code>{\"type\": \"waterfall\"}</code>) and any of the keys listed below.   Draws waterfall trace which is useful graph to displays the contribution of various elements (either positive or negative) in a bar chart. The data visualized by the span of the bars is set in `y` if `orientation` is set to \"v\" (the default) and the labels are set in `x`. By setting `orientation` to \"h\", the roles are interchanged. <ul> <li>      alignmentgroup  Parent: <code>data[type=waterfall]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.</p> </li> <li>      base  Parent: <code>data[type=waterfall]</code> Type: number<p>Sets where the bar base is drawn (in position axis units).</p> </li> <li>      cliponaxis  Parent: <code>data[type=waterfall]</code> Type: boolean                Default: <code>true</code> <p>Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to \"below traces\".</p> </li> <li>      connector  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <ul> <li>      line  Parent: <code>data[type=waterfall].connector</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=waterfall].connector.line</code> Type: color                Default: <code>\"#444\"</code> <p>Sets the line color.</p> </li> <li>      dash  Parent: <code>data[type=waterfall].connector.line</code> Type: string                Default: <code>\"solid\"</code> <p>Sets the dash style of lines. Set to a dash type string (\"solid\", \"dot\", \"dash\", \"longdash\", \"dashdot\", or \"longdashdot\") or a dash length list in px (eg \"5px,10px,2px,2px\").</p> </li> <li>      width  Parent: <code>data[type=waterfall].connector.line</code> Type: number                Default: <code>2</code> <p>Sets the line width (in px).</p> </li> </ul> </li> <li>      mode  Parent: <code>data[type=waterfall].connector</code> Type:                     enumerated                    , one of ( <code>\"spanning\"</code>| <code>\"between\"</code>                    )                 Default: <code>\"between\"</code> <p>Sets the shape of connector lines.</p> </li> <li>      visible  Parent: <code>data[type=waterfall].connector</code> Type: boolean                Default: <code>true</code> <p>Determines if connector lines are drawn. </p> </li> </ul> </li> <li>      constraintext  Parent: <code>data[type=waterfall]</code> Type:                     enumerated                    , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"both\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"both\"</code> <p>Constrain the size of text inside or outside a bar to be no larger than the bar itself.</p> </li> <li>      customdata  Parent: <code>data[type=waterfall]</code> Type: data_array <p>Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, \"scatter\" traces also appends customdata items in the markers DOM elements</p> </li> <li>      decreasing  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=waterfall].decreasing</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=waterfall].decreasing.marker</code> Type: color<p>Sets the marker color of all decreasing values.</p> </li> <li>      line  Parent: <code>data[type=waterfall].decreasing.marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=waterfall].decreasing.marker.line</code> Type: color<p>Sets the line color of all decreasing values.</p> </li> <li>      width  Parent: <code>data[type=waterfall].decreasing.marker.line</code> Type: number<p>Sets the line width of all decreasing values.</p> </li> </ul> </li> </ul> </li> </ul> </li> <li>      dx  Parent: <code>data[type=waterfall]</code> Type: number                Default: <code>1</code> <p>Sets the x coordinate step. See `x0` for more info.</p> </li> <li>      dy  Parent: <code>data[type=waterfall]</code> Type: number                Default: <code>1</code> <p>Sets the y coordinate step. See `y0` for more info.</p> </li> <li>      hoverinfo  Parent: <code>data[type=waterfall]</code> Type: flaglist string.                      Any combination of \"name\", \"x\", \"y\", \"text\", \"initial\", \"delta\", \"final\" joined with a <code>\"+\"</code>                     OR \"all\", \"none\", \"skip\".                      Examples: <code>\"name\"</code>, <code>\"x\"</code>, <code>\"name+x\"</code>, <code>\"name+x+y\"</code>, <code>\"all\"</code> Default: <code>\"all\"</code> <p>Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.</p> </li> <li>      hoverlabel  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <ul> <li>      align  Parent: <code>data[type=waterfall].hoverlabel</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"left\"</code>| <code>\"right\"</code>| <code>\"auto\"</code>                    )                 Default: <code>\"auto\"</code> <p>Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines</p> </li> <li>      bgcolor  Parent: <code>data[type=waterfall].hoverlabel</code> Type: color or array of colors<p>Sets the background color of the hover labels for this trace</p> </li> <li>      bordercolor  Parent: <code>data[type=waterfall].hoverlabel</code> Type: color or array of colors<p>Sets the border color of the hover labels for this trace.</p> </li> <li>      font  Parent: <code>data[type=waterfall].hoverlabel</code> Type: object containing one or more of the keys listed below. <p>Sets the font used in hover labels.</p> <ul> <li>      color  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=waterfall].hoverlabel.font</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      namelength  Parent: <code>data[type=waterfall].hoverlabel</code> Type: integer or array of integers greater than or equal to -1                 Default: <code>15</code> <p>Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer &gt;3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.</p> </li> </ul> </li> <li>      hovertemplate  Parent: <code>data[type=waterfall]</code> Type: string or array of strings<p>Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, \"xother\" will be added to those with different x positions from the first point. An underscore before or after \"(x|y)other\" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta` and `final`. Anything contained in tag `&lt;extra&gt;` is displayed in the secondary box, for example `&lt;extra&gt;%{fullData.name}&lt;/extra&gt;`. To hide the secondary box completely, use an empty tag `&lt;extra&gt;&lt;/extra&gt;`.</p> </li> <li>      hovertext  Parent: <code>data[type=waterfall]</code> Type: string or array of strings<p>Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a \"text\" flag.</p> </li> <li>      ids  Parent: <code>data[type=waterfall]</code> Type: data_array <p>Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.</p> </li> <li>      increasing  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=waterfall].increasing</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=waterfall].increasing.marker</code> Type: color<p>Sets the marker color of all increasing values.</p> </li> <li>      line  Parent: <code>data[type=waterfall].increasing.marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=waterfall].increasing.marker.line</code> Type: color<p>Sets the line color of all increasing values.</p> </li> <li>      width  Parent: <code>data[type=waterfall].increasing.marker.line</code> Type: number<p>Sets the line width of all increasing values.</p> </li> </ul> </li> </ul> </li> </ul> </li> <li>      insidetextanchor  Parent: <code>data[type=waterfall]</code> Type:                     enumerated                    , one of ( <code>\"end\"</code>| <code>\"middle\"</code>| <code>\"start\"</code>                    )                 Default: <code>\"end\"</code> <p>Determines if texts are kept at center or start/end points in `textposition` \"inside\" mode.</p> </li> <li>      insidetextfont  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying inside the bar.</p> <ul> <li>      color  Parent: <code>data[type=waterfall].insidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=waterfall].insidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=waterfall].insidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=waterfall].insidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=waterfall].insidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=waterfall].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=waterfall].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=waterfall].insidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=waterfall].insidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      legend  Parent: <code>data[type=waterfall]</code> Type: subplotid                 Default: <code>legend</code> <p>Sets the reference to a legend to show this trace in. References to these legends are \"legend\", \"legend2\", \"legend3\", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.</p> </li> <li>      legendgroup  Parent: <code>data[type=waterfall]</code> Type: string<p>Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.</p> </li> <li>      legendgrouptitle  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <ul> <li>      font  Parent: <code>data[type=waterfall].legendgrouptitle</code> Type: object containing one or more of the keys listed below. <p>Sets this legend group's title font.</p> <ul> <li>      color  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type: color</li> <li>      family  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type: string<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type: string                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type: number greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type:                     enumerated                    , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=waterfall].legendgrouptitle.font</code> Type: integer between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      text  Parent: <code>data[type=waterfall].legendgrouptitle</code> Type: string<p>Sets the title of the legend group.</p> </li> </ul> </li> <li>      legendrank  Parent: <code>data[type=waterfall]</code> Type: number                Default: <code>1000</code> <p>Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with \"reversed\" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.</p> </li> <li>      legendwidth  Parent: <code>data[type=waterfall]</code> Type: number<p>Sets the width (in px or fraction) of the legend for this trace.</p> </li> <li>      measure  Parent: <code>data[type=waterfall]</code> Type: data_array <p>An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.</p> </li> <li>      meta  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.</p> </li> <li>      name  Parent: <code>data[type=waterfall]</code> Type: string<p>Sets the trace name. The trace name appears as the legend item and on hover.</p> </li> <li>      offset  Parent: <code>data[type=waterfall]</code> Type: number or array of numbers<p>Shifts the position where the bar is drawn (in position axis units). In \"group\" barmode, traces that set \"offset\" will be excluded and drawn in \"overlay\" mode instead.</p> </li> <li>      offsetgroup  Parent: <code>data[type=waterfall]</code> Type: string<p>Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.</p> </li> <li>      opacity  Parent: <code>data[type=waterfall]</code> Type: number less than or equal to 1                 Default: <code>1</code> <p>Sets the opacity of the trace.</p> </li> <li>      orientation  Parent: <code>data[type=waterfall]</code> Type:                     enumerated                    , one of ( <code>\"v\"</code>| <code>\"h\"</code>                    ) <p>Sets the orientation of the bars. With \"v\" (\"h\"), the value of the each bar spans along the vertical (horizontal).</p> </li> <li>      outsidetextfont  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text` lying outside the bar.</p> <ul> <li>      color  Parent: <code>data[type=waterfall].outsidetextfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=waterfall].outsidetextfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=waterfall].outsidetextfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=waterfall].outsidetextfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=waterfall].outsidetextfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=waterfall].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=waterfall].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=waterfall].outsidetextfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=waterfall].outsidetextfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      selectedpoints  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.</p> </li> <li>      showlegend  Parent: <code>data[type=waterfall]</code> Type: boolean                Default: <code>true</code> <p>Determines whether or not an item corresponding to this trace is shown in the legend.</p> </li> <li>      text  Parent: <code>data[type=waterfall]</code> Type: string or array of strings<p>Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a \"text\" flag and \"hovertext\" is not set, these elements will be seen in the hover labels.</p> </li> <li>      textangle  Parent: <code>data[type=waterfall]</code> Type: angle                 Default: <code>\"auto\"</code> <p>Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With \"auto\" the texts may automatically be rotated to fit with the maximum size in bars.</p> </li> <li>      textfont  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <p>Sets the font used for `text`.</p> <ul> <li>      color  Parent: <code>data[type=waterfall].textfont</code> Type: color or array of colors</li> <li>      family  Parent: <code>data[type=waterfall].textfont</code> Type: string or array of strings<p>HTML font family - the typeface that will be applied by the web browser. The web browser can only apply a font if it is available on the system where it runs. Provide multiple font families, separated by commas, to indicate the order in which to apply fonts if they aren't available.</p> </li> <li>      lineposition  Parent: <code>data[type=waterfall].textfont</code> Type: flaglist string.                      Any combination of \"under\", \"over\", \"through\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"under\"</code>, <code>\"over\"</code>, <code>\"under+over\"</code>, <code>\"under+over+through\"</code>, <code>\"none\"</code> Default: <code>\"none\"</code> <p>Sets the kind of decoration line(s) with text, such as an \"under\", \"over\" or \"through\" as well as combinations e.g. \"under+over\", etc.</p> </li> <li>      shadow  Parent: <code>data[type=waterfall].textfont</code> Type: string or array of strings                Default: <code>\"none\"</code> <p>Sets the shape and color of the shadow behind text. \"auto\" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.</p> </li> <li>      size  Parent: <code>data[type=waterfall].textfont</code> Type: number or array of numbers greater than or equal to 1 </li> <li>      style  Parent: <code>data[type=waterfall].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"italic\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets whether a font should be styled with a normal or italic face from its family.</p> </li> <li>      textcase  Parent: <code>data[type=waterfall].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"word caps\"</code>| <code>\"upper\"</code>| <code>\"lower\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p> </li> <li>      variant  Parent: <code>data[type=waterfall].textfont</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"normal\"</code>| <code>\"small-caps\"</code>| <code>\"all-small-caps\"</code>| <code>\"all-petite-caps\"</code>| <code>\"petite-caps\"</code>| <code>\"unicase\"</code>                    )                 Default: <code>\"normal\"</code> <p>Sets the variant of the font.</p> </li> <li>      weight  Parent: <code>data[type=waterfall].textfont</code> Type: integer or array of integers between or equal to 1 and 1000                 Default: <code>normal</code> <p>Sets the weight (or boldness) of the font.</p> </li> </ul> </li> <li>      textinfo  Parent: <code>data[type=waterfall]</code> Type: flaglist string.                      Any combination of \"label\", \"text\", \"initial\", \"delta\", \"final\" joined with a <code>\"+\"</code>                     OR \"none\".                      Examples: <code>\"label\"</code>, <code>\"text\"</code>, <code>\"label+text\"</code>, <code>\"label+text+initial\"</code>, <code>\"none\"</code> <p>Determines which trace information appear on the graph. In the case of having multiple waterfalls, totals are computed separately (per trace).</p> </li> <li>      textposition  Parent: <code>data[type=waterfall]</code> Type:                     enumerated or array of enumerateds                     , one of ( <code>\"inside\"</code>| <code>\"outside\"</code>| <code>\"auto\"</code>| <code>\"none\"</code>                    )                 Default: <code>\"auto\"</code> <p>Specifies the location of the `text`. \"inside\" positions `text` inside, next to the bar end (rotated and scaled if needed). \"outside\" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. \"auto\" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If \"none\", no text appears.</p> </li> <li>      texttemplate  Parent: <code>data[type=waterfall]</code> Type: string or array of strings<p>Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example \"y: %{y}\". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta`, `final` and `label`.</p> </li> <li>      totals  Parent: <code>data[type=waterfall]</code> Type: object containing one or more of the keys listed below. <ul> <li>      marker  Parent: <code>data[type=waterfall].totals</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=waterfall].totals.marker</code> Type: color<p>Sets the marker color of all intermediate sums and total values.</p> </li> <li>      line  Parent: <code>data[type=waterfall].totals.marker</code> Type: object containing one or more of the keys listed below. <ul> <li>      color  Parent: <code>data[type=waterfall].totals.marker.line</code> Type: color<p>Sets the line color of all intermediate sums and total values.</p> </li> <li>      width  Parent: <code>data[type=waterfall].totals.marker.line</code> Type: number<p>Sets the line width of all intermediate sums and total values.</p> </li> </ul> </li> </ul> </li> </ul> </li> <li>      type  Parent: <code>data[type=waterfall]</code> Type: \"waterfall\" </li> <li>      uid  Parent: <code>data[type=waterfall]</code> Type: string<p>Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.</p> </li> <li>      uirevision  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.</p> </li> <li>      visible  Parent: <code>data[type=waterfall]</code> Type:                     enumerated                    , one of ( <code>true</code>| <code>false</code>| <code>\"legendonly\"</code>                    )                 Default: <code>\"True\"</code> <p>Determines whether or not this trace is visible. If \"legendonly\", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).</p> </li> <li>      width  Parent: <code>data[type=waterfall]</code> Type: number or array of numbers<p>Sets the bar width (in position axis units).</p> </li> <li>      x  Parent: <code>data[type=waterfall]</code> Type: data_array <p>Sets the x coordinates.</p> </li> <li>      x0  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.</p> </li> <li>      xaxis  Parent: <code>data[type=waterfall]</code> Type: subplotid                 Default: <code>x</code> <p>Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If \"x\" (the default value), the x coordinates refer to `layout.xaxis`. If \"x2\", the x coordinates refer to `layout.xaxis2`, and so on.</p> </li> <li>      xhoverformat  Parent: <code>data[type=waterfall]</code> Type: string<p>Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `xaxis.hoverformat`.</p> </li> <li>      xperiod  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the x axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      xperiod0  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      xperiodalignment  Parent: <code>data[type=waterfall]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the x axis.</p> </li> <li>      y  Parent: <code>data[type=waterfall]</code> Type: data_array <p>Sets the y coordinates.</p> </li> <li>      y0  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.</p> </li> <li>      yaxis  Parent: <code>data[type=waterfall]</code> Type: subplotid                 Default: <code>y</code> <p>Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If \"y\" (the default value), the y coordinates refer to `layout.yaxis`. If \"y2\", the y coordinates refer to `layout.yaxis2`, and so on.</p> </li> <li>      yhoverformat  Parent: <code>data[type=waterfall]</code> Type: string<p>Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: \"%h\" for half of the year as a decimal number as well as \"%{n}f\" for fractional seconds with n digits. For example, \"2016-10-13 09:15:23.456\" with tickformat \"%H~%M~%S.%2f\" would display \"09~15~23.46\"By default the values are formatted using `yaxis.hoverformat`.</p> </li> <li>      yperiod  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the period positioning in milliseconds or \"M&lt;n&gt;\" on the y axis. Special values in the form of \"M&lt;n&gt;\" could be used to declare the number of months. In this case `n` must be a positive integer.</p> </li> <li>      yperiod0  Parent: <code>data[type=waterfall]</code> Type: number or categorical coordinate string <p>Only relevant when the axis `type` is \"date\". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.</p> </li> <li>      yperiodalignment  Parent: <code>data[type=waterfall]</code> Type:                     enumerated                    , one of ( <code>\"start\"</code>| <code>\"middle\"</code>| <code>\"end\"</code>                    )                 Default: <code>\"middle\"</code> <p>Only relevant when the axis `type` is \"date\". Sets the alignment of data points on the y axis.</p> </li> <li>      zorder  Parent: <code>data[type=waterfall]</code> Type: integer<p>Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.</p> </li> </ul>"}]}